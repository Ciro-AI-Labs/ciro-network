# Task ID: 8
# Title: Worker Discovery and Health Monitoring
# Status: pending
# Dependencies: 6
# Priority: high
# Description: Implement worker discovery, registration, and health monitoring in the Coordinator service.
# Details:
1. Implement worker registration API endpoint
2. Create worker discovery mechanism
3. Implement health check protocol
4. Add worker capability tracking
5. Implement worker load balancing
6. Create worker status dashboard
7. Add worker metrics collection
8. Implement worker database schema:

```rust
#[derive(sqlx::FromRow)]
struct Worker {
    id: String,
    address: String,
    capabilities: WorkerCapabilities,
    status: WorkerStatus,
    last_seen: chrono::DateTime<chrono::Utc>,
    jobs_completed: u64,
    success_rate: f64,
}

#[derive(sqlx::Type)]
enum WorkerStatus {
    Available,
    Busy,
    Offline,
    Maintenance,
}
```

9. Implement worker deregistration and timeout logic

# Test Strategy:
1. Unit tests for worker registration and discovery
2. Integration tests with mock workers
3. Test health check protocol
4. Test worker timeout and recovery
5. Benchmark worker discovery with large number of workers
6. Test load balancing algorithm
