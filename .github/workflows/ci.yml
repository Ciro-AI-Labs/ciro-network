name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Cairo Smart Contracts - Core functionality
  cairo-contracts:
    name: Cairo Contracts
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cairo-contracts

    steps:
      - uses: actions/checkout@v4

      - name: Install Scarb
        uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "2.11.4"

      - name: Cache Scarb dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/scarb
            cairo-contracts/target
          key: ${{ runner.os }}-scarb-${{ hashFiles('cairo-contracts/Scarb.toml') }}
          restore-keys: |
            ${{ runner.os }}-scarb-

      - name: Check Cairo format
        run: scarb fmt --check
        continue-on-error: true

      - name: Build Cairo contracts
        run: scarb build

      - name: Run Cairo tests
        run: scarb test

  # Rust Components - Only test existing components
  rust-components:
    name: Rust Components (${{ matrix.component }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: [rust-node, shared]

    steps:
      - uses: actions/checkout@v4

      - name: Check if component exists
        id: check_component
        run: |
          if [ -f "${{ matrix.component }}/Cargo.toml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Rust toolchain
        if: steps.check_component.outputs.exists == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        if: steps.check_component.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.component }}-${{ hashFiles(format('{0}/Cargo.toml', matrix.component)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.component }}-

      - name: Check Rust format
        if: steps.check_component.outputs.exists == 'true'
        run: cargo fmt --all --check
        working-directory: ${{ matrix.component }}
        continue-on-error: true

      - name: Run Clippy
        if: steps.check_component.outputs.exists == 'true'
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: ${{ matrix.component }}
        continue-on-error: true

      - name: Build Rust component
        if: steps.check_component.outputs.exists == 'true'
        run: cargo build --verbose
        working-directory: ${{ matrix.component }}

      - name: Run Rust tests
        if: steps.check_component.outputs.exists == 'true'
        run: cargo test --verbose
        working-directory: ${{ matrix.component }}

  # Python Backend - Only if requirements exist
  backend:
    name: Backend Services
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check if Python backend exists
        id: check_backend
        run: |
          if [ -f "requirements.txt" ] || [ -f "backend/requirements.txt" ] || [ -f "src/requirements.txt" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            if [ -f "requirements.txt" ]; then
              echo "path=." >> $GITHUB_OUTPUT
            elif [ -f "backend/requirements.txt" ]; then
              echo "path=backend" >> $GITHUB_OUTPUT
            else
              echo "path=src" >> $GITHUB_OUTPUT
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        if: steps.check_backend.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        if: steps.check_backend.outputs.exists == 'true'
        run: |
          pip install -r requirements.txt || echo "No requirements.txt found"
          pip install pytest black flake8 mypy || echo "Installing basic dev tools"
        working-directory: ${{ steps.check_backend.outputs.path }}

      - name: Run basic Python tests
        if: steps.check_backend.outputs.exists == 'true'
        run: |
          python -m pytest tests/ || echo "No tests found"
          python -c "import src; print('Python imports working')" || echo "No src module"
        working-directory: ${{ steps.check_backend.outputs.path }}

  # Documentation - Build docs if they exist
  documentation:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for mdBook
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install mdBook
        run: |
          curl -L https://github.com/rust-lang/mdBook/releases/download/v0.4.36/mdbook-v0.4.36-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv mdbook /usr/local/bin/

      - name: Build documentation
        run: |
          if [ -f "docs/book.toml" ]; then
            cd docs && mdbook build
            echo "‚úÖ Documentation built successfully"
          else
            echo "‚ÑπÔ∏è  No mdBook configuration found"
          fi

      - name: Check documentation structure
        run: |
          if [ -d "docs" ]; then
            echo "üìö Documentation structure:"
            find docs -name "*.md" | head -10
            echo "‚úÖ Documentation files found"
          else
            echo "‚ÑπÔ∏è  No docs directory found"
          fi

  # Basic security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run basic security checks
        run: |
          echo "üîç Running basic security checks..."
          
          # Check for common security issues
          echo "Checking for potential secrets..."
          grep -r -i "password\|secret\|key\|token" --include="*.cairo" --include="*.rs" --include="*.py" . | grep -v ".git" | head -5 || echo "No obvious secrets found"
          
          # Check for TODO security items
          echo "Checking for security TODOs..."
          grep -r -i "todo.*security\|fixme.*security" --include="*.cairo" --include="*.rs" --include="*.py" . | head -5 || echo "No security TODOs found"
          
          echo "‚úÖ Basic security scan completed"

  # Project health check
  health-check:
    name: Project Health
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Project structure validation
        run: |
          echo "üèóÔ∏è  Validating project structure..."
          
          # Check core directories
          [ -d "cairo-contracts" ] && echo "‚úÖ Cairo contracts directory exists" || echo "‚ùå No cairo-contracts directory"
          [ -f "cairo-contracts/Scarb.toml" ] && echo "‚úÖ Scarb configuration exists" || echo "‚ùå No Scarb configuration"
          [ -d "docs" ] && echo "‚úÖ Documentation directory exists" || echo "‚ùå No docs directory"
          [ -f "README.md" ] && echo "‚úÖ Root README exists" || echo "‚ùå No root README"
          [ -f ".gitignore" ] && echo "‚úÖ .gitignore exists" || echo "‚ùå No .gitignore"
          
          # Check contract files
          if [ -d "cairo-contracts/src" ]; then
            echo "üìã Contract files:"
            find cairo-contracts/src -name "*.cairo" | head -10
          fi
          
          echo "üéØ Project health check completed"
