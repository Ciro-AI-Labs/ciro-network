name: üîç CodeQL Security Analysis

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  schedule:
    # Run CodeQL analysis every Sunday at 06:00 UTC
    - cron: "0 6 * * 0"

jobs:
  # Analyze Rust code if it exists
  analyze-rust:
    name: üîç Analyze (rust)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Check for Rust code
        id: check_rust
        run: |
          if find . -name "Cargo.toml" -type f | grep -q .; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Found Rust projects:"
            find . -name "Cargo.toml" -type f
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No Rust projects found"
          fi

      - name: üîß Initialize CodeQL
        if: steps.check_rust.outputs.exists == 'true'
        uses: github/codeql-action/init@v2
        with:
          languages: rust
          queries: +security-extended
          config: |
            name: "CIRO Network Rust Analysis"
            disable-default-queries: false
            paths-ignore:
              - "docs/**"
              - "**/*.md"
              - "**/target/**"
              - "**/*.lock"

      - name: üõ†Ô∏è Setup Rust
        if: steps.check_rust.outputs.exists == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: üì¶ Cache Rust dependencies
        if: steps.check_rust.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-codeql-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-codeql-

      - name: üî® Build Rust projects
        if: steps.check_rust.outputs.exists == 'true'
        run: |
          # Build each Rust project separately
          for cargo_file in $(find . -name "Cargo.toml" -not -path "./target/*"); do
            project_dir=$(dirname "$cargo_file")
            echo "Building Rust project in $project_dir"
            cd "$project_dir"
            cargo build --verbose || echo "Build failed for $project_dir, continuing..."
            cd - > /dev/null
          done

      - name: üîç Perform CodeQL Analysis
        if: steps.check_rust.outputs.exists == 'true'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:rust"

  # Analyze JavaScript/TypeScript if it exists
  analyze-javascript:
    name: üîç Analyze (javascript)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Check for JavaScript/TypeScript code
        id: check_js
        run: |
          if find . -name "package.json" -type f | grep -q .; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Found JavaScript/TypeScript projects:"
            find . -name "package.json" -type f
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No JavaScript/TypeScript projects found"
          fi

      - name: üîß Initialize CodeQL
        if: steps.check_js.outputs.exists == 'true'
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: +security-extended
          config: |
            name: "CIRO Network JavaScript Analysis"
            disable-default-queries: false
            paths-ignore:
              - "docs/**"
              - "**/*.md"
              - "**/node_modules/**"
              - "**/dist/**"
              - "**/*.lock"

      - name: üõ†Ô∏è Setup Node.js
        if: steps.check_js.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: üì¶ Install dependencies
        if: steps.check_js.outputs.exists == 'true'
        run: |
          # Install root dependencies if package.json exists
          if [ -f "package.json" ]; then
            npm install || echo "Root npm install failed, continuing..."
          fi

      - name: üîç Perform CodeQL Analysis
        if: steps.check_js.outputs.exists == 'true'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

  # Secret scanning
  secret-scanning:
    name: üîê Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Scan for secrets
        run: |
          echo "üîç Scanning for potential secrets..."
          
          # Check for common secret patterns
          echo "Checking for API keys, tokens, and credentials..."
          
          # Look for obvious secret patterns (but be careful not to expose real ones)
          grep -r -i -E "(api[_-]?key|secret[_-]?key|password|token)" \
            --include="*.cairo" --include="*.rs" --include="*.py" --include="*.js" --include="*.ts" \
            --exclude-dir=".git" --exclude-dir="node_modules" --exclude-dir="target" \
            . | head -10 || echo "No obvious secrets found"
          
          # Check .gitignore is protecting sensitive files
          if [ -f ".gitignore" ]; then
            echo "‚úÖ .gitignore exists"
            if grep -q "\.env" .gitignore; then
              echo "‚úÖ .gitignore protects .env files"
            else
              echo "‚ö†Ô∏è  .gitignore may not protect .env files"
            fi
          else
            echo "‚ùå No .gitignore found"
          fi
          
          echo "üîç Secret scanning completed"

  # License compliance check
  license-compliance:
    name: üìú License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìú Check license compliance
        run: |
          echo "üìú Checking license compliance..."
          
          # Check for license files
          if [ -f "LICENSE" ] || [ -f "LICENSE.md" ] || [ -f "LICENSE.txt" ]; then
            echo "‚úÖ License file found"
            ls -la LICENSE* 2>/dev/null || echo "License file exists but not visible"
          else
            echo "‚ö†Ô∏è  No license file found"
          fi
          
          # Check for license headers in source files
          cairo_files=$(find . -name "*.cairo" | head -5)
          if [ -n "$cairo_files" ]; then
            echo "üìã Checking Cairo files for license headers..."
            for file in $cairo_files; do
              if head -10 "$file" | grep -qi "license\|copyright"; then
                echo "‚úÖ $file has license header"
              else
                echo "‚ö†Ô∏è  $file missing license header"
              fi
            done
          fi
          
          echo "üìú License compliance check completed"

  # Basic security audit
  security-audit:
    name: üõ°Ô∏è Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üõ°Ô∏è Basic security audit
        run: |
          echo "üõ°Ô∏è Running basic security audit..."
          
          # Check for TODO security items
          echo "Checking for security TODOs..."
          grep -r -i "todo.*security\|fixme.*security\|hack.*security" \
            --include="*.cairo" --include="*.rs" --include="*.py" \
            --exclude-dir=".git" \
            . | head -5 || echo "No security TODOs found"
          
          # Check file permissions for sensitive files
          echo "Checking file permissions..."
          find . -name "*.key" -o -name "*keystore*" -o -name "*.pem" | while read file; do
            if [ -f "$file" ]; then
              perm=$(stat -c "%a" "$file" 2>/dev/null || stat -f "%A" "$file" 2>/dev/null)
              echo "‚ö†Ô∏è  Found sensitive file: $file (permissions: $perm)"
            fi
          done || echo "No sensitive files found"
          
          # Check for hardcoded addresses or hashes that might be sensitive
          echo "Checking for hardcoded addresses..."
          grep -r -E "0x[a-fA-F0-9]{40,}" \
            --include="*.cairo" --include="*.rs" --include="*.py" \
            . | head -3 || echo "No hardcoded addresses found"
          
          echo "üõ°Ô∏è Security audit completed"
