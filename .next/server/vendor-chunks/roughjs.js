"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/roughjs";
exports.ids = ["vendor-chunks/roughjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/roughjs/bundled/rough.esm.js":
/*!***************************************************!*\
  !*** ./node_modules/roughjs/bundled/rough.esm.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ at)\n/* harmony export */ });\nfunction t(t, e, s) {\n    if (t && t.length) {\n        const [n, o] = e, a = Math.PI / 180 * s, h = Math.cos(a), r = Math.sin(a);\n        for (const e of t){\n            const [t, s] = e;\n            e[0] = (t - n) * h - (s - o) * r + n, e[1] = (t - n) * r + (s - o) * h + o;\n        }\n    }\n}\nfunction e(t, e) {\n    return t[0] === e[0] && t[1] === e[1];\n}\nfunction s(s, n, o, a = 1) {\n    const h = o, r = Math.max(n, .1), i = s[0] && s[0][0] && \"number\" == typeof s[0][0] ? [\n        s\n    ] : s, c = [\n        0,\n        0\n    ];\n    if (h) for (const e of i)t(e, c, h);\n    const l = function(t, s, n) {\n        const o = [];\n        for (const s of t){\n            const t = [\n                ...s\n            ];\n            e(t[0], t[t.length - 1]) || t.push([\n                t[0][0],\n                t[0][1]\n            ]), t.length > 2 && o.push(t);\n        }\n        const a = [];\n        s = Math.max(s, .1);\n        const h = [];\n        for (const t of o)for(let e = 0; e < t.length - 1; e++){\n            const s = t[e], n = t[e + 1];\n            if (s[1] !== n[1]) {\n                const t = Math.min(s[1], n[1]);\n                h.push({\n                    ymin: t,\n                    ymax: Math.max(s[1], n[1]),\n                    x: t === s[1] ? s[0] : n[0],\n                    islope: (n[0] - s[0]) / (n[1] - s[1])\n                });\n            }\n        }\n        if (h.sort((t, e)=>t.ymin < e.ymin ? -1 : t.ymin > e.ymin ? 1 : t.x < e.x ? -1 : t.x > e.x ? 1 : t.ymax === e.ymax ? 0 : (t.ymax - e.ymax) / Math.abs(t.ymax - e.ymax)), !h.length) return a;\n        let r = [], i = h[0].ymin, c = 0;\n        for(; r.length || h.length;){\n            if (h.length) {\n                let t = -1;\n                for(let e = 0; e < h.length && !(h[e].ymin > i); e++)t = e;\n                h.splice(0, t + 1).forEach((t)=>{\n                    r.push({\n                        s: i,\n                        edge: t\n                    });\n                });\n            }\n            if (r = r.filter((t)=>!(t.edge.ymax <= i)), r.sort((t, e)=>t.edge.x === e.edge.x ? 0 : (t.edge.x - e.edge.x) / Math.abs(t.edge.x - e.edge.x)), (1 !== n || c % s == 0) && r.length > 1) for(let t = 0; t < r.length; t += 2){\n                const e = t + 1;\n                if (e >= r.length) break;\n                const s = r[t].edge, n = r[e].edge;\n                a.push([\n                    [\n                        Math.round(s.x),\n                        i\n                    ],\n                    [\n                        Math.round(n.x),\n                        i\n                    ]\n                ]);\n            }\n            i += n, r.forEach((t)=>{\n                t.edge.x = t.edge.x + n * t.edge.islope;\n            }), c++;\n        }\n        return a;\n    }(i, r, a);\n    if (h) {\n        for (const e of i)t(e, c, -h);\n        !function(e, s, n) {\n            const o = [];\n            e.forEach((t)=>o.push(...t)), t(o, s, n);\n        }(l, c, -h);\n    }\n    return l;\n}\nfunction n(t, e) {\n    var n;\n    const o = e.hachureAngle + 90;\n    let a = e.hachureGap;\n    a < 0 && (a = 4 * e.strokeWidth), a = Math.round(Math.max(a, .1));\n    let h = 1;\n    return e.roughness >= 1 && ((null === (n = e.randomizer) || void 0 === n ? void 0 : n.next()) || Math.random()) > .7 && (h = a), s(t, a, o, h || 1);\n}\nclass o {\n    constructor(t){\n        this.helper = t;\n    }\n    fillPolygons(t, e) {\n        return this._fillPolygons(t, e);\n    }\n    _fillPolygons(t, e) {\n        const s = n(t, e);\n        return {\n            type: \"fillSketch\",\n            ops: this.renderLines(s, e)\n        };\n    }\n    renderLines(t, e) {\n        const s = [];\n        for (const n of t)s.push(...this.helper.doubleLineOps(n[0][0], n[0][1], n[1][0], n[1][1], e));\n        return s;\n    }\n}\nfunction a(t) {\n    const e = t[0], s = t[1];\n    return Math.sqrt(Math.pow(e[0] - s[0], 2) + Math.pow(e[1] - s[1], 2));\n}\nclass h extends o {\n    fillPolygons(t, e) {\n        let s = e.hachureGap;\n        s < 0 && (s = 4 * e.strokeWidth), s = Math.max(s, .1);\n        const o = n(t, Object.assign({}, e, {\n            hachureGap: s\n        })), h = Math.PI / 180 * e.hachureAngle, r = [], i = .5 * s * Math.cos(h), c = .5 * s * Math.sin(h);\n        for (const [t, e] of o)a([\n            t,\n            e\n        ]) && r.push([\n            [\n                t[0] - i,\n                t[1] + c\n            ],\n            [\n                ...e\n            ]\n        ], [\n            [\n                t[0] + i,\n                t[1] - c\n            ],\n            [\n                ...e\n            ]\n        ]);\n        return {\n            type: \"fillSketch\",\n            ops: this.renderLines(r, e)\n        };\n    }\n}\nclass r extends o {\n    fillPolygons(t, e) {\n        const s = this._fillPolygons(t, e), n = Object.assign({}, e, {\n            hachureAngle: e.hachureAngle + 90\n        }), o = this._fillPolygons(t, n);\n        return s.ops = s.ops.concat(o.ops), s;\n    }\n}\nclass i {\n    constructor(t){\n        this.helper = t;\n    }\n    fillPolygons(t, e) {\n        const s = n(t, e = Object.assign({}, e, {\n            hachureAngle: 0\n        }));\n        return this.dotsOnLines(s, e);\n    }\n    dotsOnLines(t, e) {\n        const s = [];\n        let n = e.hachureGap;\n        n < 0 && (n = 4 * e.strokeWidth), n = Math.max(n, .1);\n        let o = e.fillWeight;\n        o < 0 && (o = e.strokeWidth / 2);\n        const h = n / 4;\n        for (const r of t){\n            const t = a(r), i = t / n, c = Math.ceil(i) - 1, l = t - c * n, u = (r[0][0] + r[1][0]) / 2 - n / 4, p = Math.min(r[0][1], r[1][1]);\n            for(let t = 0; t < c; t++){\n                const a = p + l + t * n, r = u - h + 2 * Math.random() * h, i = a - h + 2 * Math.random() * h, c = this.helper.ellipse(r, i, o, o, e);\n                s.push(...c.ops);\n            }\n        }\n        return {\n            type: \"fillSketch\",\n            ops: s\n        };\n    }\n}\nclass c {\n    constructor(t){\n        this.helper = t;\n    }\n    fillPolygons(t, e) {\n        const s = n(t, e);\n        return {\n            type: \"fillSketch\",\n            ops: this.dashedLine(s, e)\n        };\n    }\n    dashedLine(t, e) {\n        const s = e.dashOffset < 0 ? e.hachureGap < 0 ? 4 * e.strokeWidth : e.hachureGap : e.dashOffset, n = e.dashGap < 0 ? e.hachureGap < 0 ? 4 * e.strokeWidth : e.hachureGap : e.dashGap, o = [];\n        return t.forEach((t)=>{\n            const h = a(t), r = Math.floor(h / (s + n)), i = (h + n - r * (s + n)) / 2;\n            let c = t[0], l = t[1];\n            c[0] > l[0] && (c = t[1], l = t[0]);\n            const u = Math.atan((l[1] - c[1]) / (l[0] - c[0]));\n            for(let t = 0; t < r; t++){\n                const a = t * (s + n), h = a + s, r = [\n                    c[0] + a * Math.cos(u) + i * Math.cos(u),\n                    c[1] + a * Math.sin(u) + i * Math.sin(u)\n                ], l = [\n                    c[0] + h * Math.cos(u) + i * Math.cos(u),\n                    c[1] + h * Math.sin(u) + i * Math.sin(u)\n                ];\n                o.push(...this.helper.doubleLineOps(r[0], r[1], l[0], l[1], e));\n            }\n        }), o;\n    }\n}\nclass l {\n    constructor(t){\n        this.helper = t;\n    }\n    fillPolygons(t, e) {\n        const s = e.hachureGap < 0 ? 4 * e.strokeWidth : e.hachureGap, o = e.zigzagOffset < 0 ? s : e.zigzagOffset, a = n(t, e = Object.assign({}, e, {\n            hachureGap: s + o\n        }));\n        return {\n            type: \"fillSketch\",\n            ops: this.zigzagLines(a, o, e)\n        };\n    }\n    zigzagLines(t, e, s) {\n        const n = [];\n        return t.forEach((t)=>{\n            const o = a(t), h = Math.round(o / (2 * e));\n            let r = t[0], i = t[1];\n            r[0] > i[0] && (r = t[1], i = t[0]);\n            const c = Math.atan((i[1] - r[1]) / (i[0] - r[0]));\n            for(let t = 0; t < h; t++){\n                const o = 2 * t * e, a = 2 * (t + 1) * e, h = Math.sqrt(2 * Math.pow(e, 2)), i = [\n                    r[0] + o * Math.cos(c),\n                    r[1] + o * Math.sin(c)\n                ], l = [\n                    r[0] + a * Math.cos(c),\n                    r[1] + a * Math.sin(c)\n                ], u = [\n                    i[0] + h * Math.cos(c + Math.PI / 4),\n                    i[1] + h * Math.sin(c + Math.PI / 4)\n                ];\n                n.push(...this.helper.doubleLineOps(i[0], i[1], u[0], u[1], s), ...this.helper.doubleLineOps(u[0], u[1], l[0], l[1], s));\n            }\n        }), n;\n    }\n}\nconst u = {};\nclass p {\n    constructor(t){\n        this.seed = t;\n    }\n    next() {\n        return this.seed ? (2 ** 31 - 1 & (this.seed = Math.imul(48271, this.seed))) / 2 ** 31 : Math.random();\n    }\n}\nconst f = 0, d = 1, g = 2, M = {\n    A: 7,\n    a: 7,\n    C: 6,\n    c: 6,\n    H: 1,\n    h: 1,\n    L: 2,\n    l: 2,\n    M: 2,\n    m: 2,\n    Q: 4,\n    q: 4,\n    S: 4,\n    s: 4,\n    T: 2,\n    t: 2,\n    V: 1,\n    v: 1,\n    Z: 0,\n    z: 0\n};\nfunction k(t, e) {\n    return t.type === e;\n}\nfunction b(t) {\n    const e = [], s = function(t) {\n        const e = new Array;\n        for(; \"\" !== t;)if (t.match(/^([ \\t\\r\\n,]+)/)) t = t.substr(RegExp.$1.length);\n        else if (t.match(/^([aAcChHlLmMqQsStTvVzZ])/)) e[e.length] = {\n            type: f,\n            text: RegExp.$1\n        }, t = t.substr(RegExp.$1.length);\n        else {\n            if (!t.match(/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)/)) return [];\n            e[e.length] = {\n                type: d,\n                text: `${parseFloat(RegExp.$1)}`\n            }, t = t.substr(RegExp.$1.length);\n        }\n        return e[e.length] = {\n            type: g,\n            text: \"\"\n        }, e;\n    }(t);\n    let n = \"BOD\", o = 0, a = s[o];\n    for(; !k(a, g);){\n        let h = 0;\n        const r = [];\n        if (\"BOD\" === n) {\n            if (\"M\" !== a.text && \"m\" !== a.text) return b(\"M0,0\" + t);\n            o++, h = M[a.text], n = a.text;\n        } else k(a, d) ? h = M[n] : (o++, h = M[a.text], n = a.text);\n        if (!(o + h < s.length)) throw new Error(\"Path data ended short\");\n        for(let t = o; t < o + h; t++){\n            const e = s[t];\n            if (!k(e, d)) throw new Error(\"Param not a number: \" + n + \",\" + e.text);\n            r[r.length] = +e.text;\n        }\n        if (\"number\" != typeof M[n]) throw new Error(\"Bad segment: \" + n);\n        {\n            const t = {\n                key: n,\n                data: r\n            };\n            e.push(t), o += h, a = s[o], \"M\" === n && (n = \"L\"), \"m\" === n && (n = \"l\");\n        }\n    }\n    return e;\n}\nfunction y(t) {\n    let e = 0, s = 0, n = 0, o = 0;\n    const a = [];\n    for (const { key: h, data: r } of t)switch(h){\n        case \"M\":\n            a.push({\n                key: \"M\",\n                data: [\n                    ...r\n                ]\n            }), [e, s] = r, [n, o] = r;\n            break;\n        case \"m\":\n            e += r[0], s += r[1], a.push({\n                key: \"M\",\n                data: [\n                    e,\n                    s\n                ]\n            }), n = e, o = s;\n            break;\n        case \"L\":\n            a.push({\n                key: \"L\",\n                data: [\n                    ...r\n                ]\n            }), [e, s] = r;\n            break;\n        case \"l\":\n            e += r[0], s += r[1], a.push({\n                key: \"L\",\n                data: [\n                    e,\n                    s\n                ]\n            });\n            break;\n        case \"C\":\n            a.push({\n                key: \"C\",\n                data: [\n                    ...r\n                ]\n            }), e = r[4], s = r[5];\n            break;\n        case \"c\":\n            {\n                const t = r.map((t, n)=>n % 2 ? t + s : t + e);\n                a.push({\n                    key: \"C\",\n                    data: t\n                }), e = t[4], s = t[5];\n                break;\n            }\n        case \"Q\":\n            a.push({\n                key: \"Q\",\n                data: [\n                    ...r\n                ]\n            }), e = r[2], s = r[3];\n            break;\n        case \"q\":\n            {\n                const t = r.map((t, n)=>n % 2 ? t + s : t + e);\n                a.push({\n                    key: \"Q\",\n                    data: t\n                }), e = t[2], s = t[3];\n                break;\n            }\n        case \"A\":\n            a.push({\n                key: \"A\",\n                data: [\n                    ...r\n                ]\n            }), e = r[5], s = r[6];\n            break;\n        case \"a\":\n            e += r[5], s += r[6], a.push({\n                key: \"A\",\n                data: [\n                    r[0],\n                    r[1],\n                    r[2],\n                    r[3],\n                    r[4],\n                    e,\n                    s\n                ]\n            });\n            break;\n        case \"H\":\n            a.push({\n                key: \"H\",\n                data: [\n                    ...r\n                ]\n            }), e = r[0];\n            break;\n        case \"h\":\n            e += r[0], a.push({\n                key: \"H\",\n                data: [\n                    e\n                ]\n            });\n            break;\n        case \"V\":\n            a.push({\n                key: \"V\",\n                data: [\n                    ...r\n                ]\n            }), s = r[0];\n            break;\n        case \"v\":\n            s += r[0], a.push({\n                key: \"V\",\n                data: [\n                    s\n                ]\n            });\n            break;\n        case \"S\":\n            a.push({\n                key: \"S\",\n                data: [\n                    ...r\n                ]\n            }), e = r[2], s = r[3];\n            break;\n        case \"s\":\n            {\n                const t = r.map((t, n)=>n % 2 ? t + s : t + e);\n                a.push({\n                    key: \"S\",\n                    data: t\n                }), e = t[2], s = t[3];\n                break;\n            }\n        case \"T\":\n            a.push({\n                key: \"T\",\n                data: [\n                    ...r\n                ]\n            }), e = r[0], s = r[1];\n            break;\n        case \"t\":\n            e += r[0], s += r[1], a.push({\n                key: \"T\",\n                data: [\n                    e,\n                    s\n                ]\n            });\n            break;\n        case \"Z\":\n        case \"z\":\n            a.push({\n                key: \"Z\",\n                data: []\n            }), e = n, s = o;\n    }\n    return a;\n}\nfunction m(t) {\n    const e = [];\n    let s = \"\", n = 0, o = 0, a = 0, h = 0, r = 0, i = 0;\n    for (const { key: c, data: l } of t){\n        switch(c){\n            case \"M\":\n                e.push({\n                    key: \"M\",\n                    data: [\n                        ...l\n                    ]\n                }), [n, o] = l, [a, h] = l;\n                break;\n            case \"C\":\n                e.push({\n                    key: \"C\",\n                    data: [\n                        ...l\n                    ]\n                }), n = l[4], o = l[5], r = l[2], i = l[3];\n                break;\n            case \"L\":\n                e.push({\n                    key: \"L\",\n                    data: [\n                        ...l\n                    ]\n                }), [n, o] = l;\n                break;\n            case \"H\":\n                n = l[0], e.push({\n                    key: \"L\",\n                    data: [\n                        n,\n                        o\n                    ]\n                });\n                break;\n            case \"V\":\n                o = l[0], e.push({\n                    key: \"L\",\n                    data: [\n                        n,\n                        o\n                    ]\n                });\n                break;\n            case \"S\":\n                {\n                    let t = 0, a = 0;\n                    \"C\" === s || \"S\" === s ? (t = n + (n - r), a = o + (o - i)) : (t = n, a = o), e.push({\n                        key: \"C\",\n                        data: [\n                            t,\n                            a,\n                            ...l\n                        ]\n                    }), r = l[0], i = l[1], n = l[2], o = l[3];\n                    break;\n                }\n            case \"T\":\n                {\n                    const [t, a] = l;\n                    let h = 0, c = 0;\n                    \"Q\" === s || \"T\" === s ? (h = n + (n - r), c = o + (o - i)) : (h = n, c = o);\n                    const u = n + 2 * (h - n) / 3, p = o + 2 * (c - o) / 3, f = t + 2 * (h - t) / 3, d = a + 2 * (c - a) / 3;\n                    e.push({\n                        key: \"C\",\n                        data: [\n                            u,\n                            p,\n                            f,\n                            d,\n                            t,\n                            a\n                        ]\n                    }), r = h, i = c, n = t, o = a;\n                    break;\n                }\n            case \"Q\":\n                {\n                    const [t, s, a, h] = l, c = n + 2 * (t - n) / 3, u = o + 2 * (s - o) / 3, p = a + 2 * (t - a) / 3, f = h + 2 * (s - h) / 3;\n                    e.push({\n                        key: \"C\",\n                        data: [\n                            c,\n                            u,\n                            p,\n                            f,\n                            a,\n                            h\n                        ]\n                    }), r = t, i = s, n = a, o = h;\n                    break;\n                }\n            case \"A\":\n                {\n                    const t = Math.abs(l[0]), s = Math.abs(l[1]), a = l[2], h = l[3], r = l[4], i = l[5], c = l[6];\n                    if (0 === t || 0 === s) e.push({\n                        key: \"C\",\n                        data: [\n                            n,\n                            o,\n                            i,\n                            c,\n                            i,\n                            c\n                        ]\n                    }), n = i, o = c;\n                    else if (n !== i || o !== c) {\n                        x(n, o, i, c, t, s, a, h, r).forEach(function(t) {\n                            e.push({\n                                key: \"C\",\n                                data: t\n                            });\n                        }), n = i, o = c;\n                    }\n                    break;\n                }\n            case \"Z\":\n                e.push({\n                    key: \"Z\",\n                    data: []\n                }), n = a, o = h;\n        }\n        s = c;\n    }\n    return e;\n}\nfunction w(t, e, s) {\n    return [\n        t * Math.cos(s) - e * Math.sin(s),\n        t * Math.sin(s) + e * Math.cos(s)\n    ];\n}\nfunction x(t, e, s, n, o, a, h, r, i, c) {\n    const l = (u = h, Math.PI * u / 180);\n    var u;\n    let p = [], f = 0, d = 0, g = 0, M = 0;\n    if (c) [f, d, g, M] = c;\n    else {\n        [t, e] = w(t, e, -l), [s, n] = w(s, n, -l);\n        const h = (t - s) / 2, c = (e - n) / 2;\n        let u = h * h / (o * o) + c * c / (a * a);\n        u > 1 && (u = Math.sqrt(u), o *= u, a *= u);\n        const p = o * o, k = a * a, b = p * k - p * c * c - k * h * h, y = p * c * c + k * h * h, m = (r === i ? -1 : 1) * Math.sqrt(Math.abs(b / y));\n        g = m * o * c / a + (t + s) / 2, M = m * -a * h / o + (e + n) / 2, f = Math.asin(parseFloat(((e - M) / a).toFixed(9))), d = Math.asin(parseFloat(((n - M) / a).toFixed(9))), t < g && (f = Math.PI - f), s < g && (d = Math.PI - d), f < 0 && (f = 2 * Math.PI + f), d < 0 && (d = 2 * Math.PI + d), i && f > d && (f -= 2 * Math.PI), !i && d > f && (d -= 2 * Math.PI);\n    }\n    let k = d - f;\n    if (Math.abs(k) > 120 * Math.PI / 180) {\n        const t = d, e = s, r = n;\n        d = i && d > f ? f + 120 * Math.PI / 180 * 1 : f + 120 * Math.PI / 180 * -1, p = x(s = g + o * Math.cos(d), n = M + a * Math.sin(d), e, r, o, a, h, 0, i, [\n            d,\n            t,\n            g,\n            M\n        ]);\n    }\n    k = d - f;\n    const b = Math.cos(f), y = Math.sin(f), m = Math.cos(d), P = Math.sin(d), v = Math.tan(k / 4), S = 4 / 3 * o * v, O = 4 / 3 * a * v, L = [\n        t,\n        e\n    ], T = [\n        t + S * y,\n        e - O * b\n    ], D = [\n        s + S * P,\n        n - O * m\n    ], A = [\n        s,\n        n\n    ];\n    if (T[0] = 2 * L[0] - T[0], T[1] = 2 * L[1] - T[1], c) return [\n        T,\n        D,\n        A\n    ].concat(p);\n    {\n        p = [\n            T,\n            D,\n            A\n        ].concat(p);\n        const t = [];\n        for(let e = 0; e < p.length; e += 3){\n            const s = w(p[e][0], p[e][1], l), n = w(p[e + 1][0], p[e + 1][1], l), o = w(p[e + 2][0], p[e + 2][1], l);\n            t.push([\n                s[0],\n                s[1],\n                n[0],\n                n[1],\n                o[0],\n                o[1]\n            ]);\n        }\n        return t;\n    }\n}\nconst P = {\n    randOffset: function(t, e) {\n        return G(t, e);\n    },\n    randOffsetWithRange: function(t, e, s) {\n        return E(t, e, s);\n    },\n    ellipse: function(t, e, s, n, o) {\n        const a = T(s, n, o);\n        return D(t, e, o, a).opset;\n    },\n    doubleLineOps: function(t, e, s, n, o) {\n        return $(t, e, s, n, o, !0);\n    }\n};\nfunction v(t, e, s, n, o) {\n    return {\n        type: \"path\",\n        ops: $(t, e, s, n, o)\n    };\n}\nfunction S(t, e, s) {\n    const n = (t || []).length;\n    if (n > 2) {\n        const o = [];\n        for(let e = 0; e < n - 1; e++)o.push(...$(t[e][0], t[e][1], t[e + 1][0], t[e + 1][1], s));\n        return e && o.push(...$(t[n - 1][0], t[n - 1][1], t[0][0], t[0][1], s)), {\n            type: \"path\",\n            ops: o\n        };\n    }\n    return 2 === n ? v(t[0][0], t[0][1], t[1][0], t[1][1], s) : {\n        type: \"path\",\n        ops: []\n    };\n}\nfunction O(t, e, s, n, o) {\n    return function(t, e) {\n        return S(t, !0, e);\n    }([\n        [\n            t,\n            e\n        ],\n        [\n            t + s,\n            e\n        ],\n        [\n            t + s,\n            e + n\n        ],\n        [\n            t,\n            e + n\n        ]\n    ], o);\n}\nfunction L(t, e) {\n    if (t.length) {\n        const s = \"number\" == typeof t[0][0] ? [\n            t\n        ] : t, n = j(s[0], 1 * (1 + .2 * e.roughness), e), o = e.disableMultiStroke ? [] : j(s[0], 1.5 * (1 + .22 * e.roughness), z(e));\n        for(let t = 1; t < s.length; t++){\n            const a = s[t];\n            if (a.length) {\n                const t = j(a, 1 * (1 + .2 * e.roughness), e), s = e.disableMultiStroke ? [] : j(a, 1.5 * (1 + .22 * e.roughness), z(e));\n                for (const e of t)\"move\" !== e.op && n.push(e);\n                for (const t of s)\"move\" !== t.op && o.push(t);\n            }\n        }\n        return {\n            type: \"path\",\n            ops: n.concat(o)\n        };\n    }\n    return {\n        type: \"path\",\n        ops: []\n    };\n}\nfunction T(t, e, s) {\n    const n = Math.sqrt(2 * Math.PI * Math.sqrt((Math.pow(t / 2, 2) + Math.pow(e / 2, 2)) / 2)), o = Math.ceil(Math.max(s.curveStepCount, s.curveStepCount / Math.sqrt(200) * n)), a = 2 * Math.PI / o;\n    let h = Math.abs(t / 2), r = Math.abs(e / 2);\n    const i = 1 - s.curveFitting;\n    return h += G(h * i, s), r += G(r * i, s), {\n        increment: a,\n        rx: h,\n        ry: r\n    };\n}\nfunction D(t, e, s, n) {\n    const [o, a] = F(n.increment, t, e, n.rx, n.ry, 1, n.increment * E(.1, E(.4, 1, s), s), s);\n    let h = q(o, null, s);\n    if (!s.disableMultiStroke && 0 !== s.roughness) {\n        const [o] = F(n.increment, t, e, n.rx, n.ry, 1.5, 0, s), a = q(o, null, s);\n        h = h.concat(a);\n    }\n    return {\n        estimatedPoints: a,\n        opset: {\n            type: \"path\",\n            ops: h\n        }\n    };\n}\nfunction A(t, e, s, n, o, a, h, r, i) {\n    const c = t, l = e;\n    let u = Math.abs(s / 2), p = Math.abs(n / 2);\n    u += G(.01 * u, i), p += G(.01 * p, i);\n    let f = o, d = a;\n    for(; f < 0;)f += 2 * Math.PI, d += 2 * Math.PI;\n    d - f > 2 * Math.PI && (f = 0, d = 2 * Math.PI);\n    const g = 2 * Math.PI / i.curveStepCount, M = Math.min(g / 2, (d - f) / 2), k = V(M, c, l, u, p, f, d, 1, i);\n    if (!i.disableMultiStroke) {\n        const t = V(M, c, l, u, p, f, d, 1.5, i);\n        k.push(...t);\n    }\n    return h && (r ? k.push(...$(c, l, c + u * Math.cos(f), l + p * Math.sin(f), i), ...$(c, l, c + u * Math.cos(d), l + p * Math.sin(d), i)) : k.push({\n        op: \"lineTo\",\n        data: [\n            c,\n            l\n        ]\n    }, {\n        op: \"lineTo\",\n        data: [\n            c + u * Math.cos(f),\n            l + p * Math.sin(f)\n        ]\n    })), {\n        type: \"path\",\n        ops: k\n    };\n}\nfunction _(t, e) {\n    const s = m(y(b(t))), n = [];\n    let o = [\n        0,\n        0\n    ], a = [\n        0,\n        0\n    ];\n    for (const { key: t, data: h } of s)switch(t){\n        case \"M\":\n            a = [\n                h[0],\n                h[1]\n            ], o = [\n                h[0],\n                h[1]\n            ];\n            break;\n        case \"L\":\n            n.push(...$(a[0], a[1], h[0], h[1], e)), a = [\n                h[0],\n                h[1]\n            ];\n            break;\n        case \"C\":\n            {\n                const [t, s, o, r, i, c] = h;\n                n.push(...Z(t, s, o, r, i, c, a, e)), a = [\n                    i,\n                    c\n                ];\n                break;\n            }\n        case \"Z\":\n            n.push(...$(a[0], a[1], o[0], o[1], e)), a = [\n                o[0],\n                o[1]\n            ];\n    }\n    return {\n        type: \"path\",\n        ops: n\n    };\n}\nfunction I(t, e) {\n    const s = [];\n    for (const n of t)if (n.length) {\n        const t = e.maxRandomnessOffset || 0, o = n.length;\n        if (o > 2) {\n            s.push({\n                op: \"move\",\n                data: [\n                    n[0][0] + G(t, e),\n                    n[0][1] + G(t, e)\n                ]\n            });\n            for(let a = 1; a < o; a++)s.push({\n                op: \"lineTo\",\n                data: [\n                    n[a][0] + G(t, e),\n                    n[a][1] + G(t, e)\n                ]\n            });\n        }\n    }\n    return {\n        type: \"fillPath\",\n        ops: s\n    };\n}\nfunction C(t, e) {\n    return (function(t, e) {\n        let s = t.fillStyle || \"hachure\";\n        if (!u[s]) switch(s){\n            case \"zigzag\":\n                u[s] || (u[s] = new h(e));\n                break;\n            case \"cross-hatch\":\n                u[s] || (u[s] = new r(e));\n                break;\n            case \"dots\":\n                u[s] || (u[s] = new i(e));\n                break;\n            case \"dashed\":\n                u[s] || (u[s] = new c(e));\n                break;\n            case \"zigzag-line\":\n                u[s] || (u[s] = new l(e));\n                break;\n            default:\n                s = \"hachure\", u[s] || (u[s] = new o(e));\n        }\n        return u[s];\n    })(e, P).fillPolygons(t, e);\n}\nfunction z(t) {\n    const e = Object.assign({}, t);\n    return e.randomizer = void 0, t.seed && (e.seed = t.seed + 1), e;\n}\nfunction W(t) {\n    return t.randomizer || (t.randomizer = new p(t.seed || 0)), t.randomizer.next();\n}\nfunction E(t, e, s, n = 1) {\n    return s.roughness * n * (W(s) * (e - t) + t);\n}\nfunction G(t, e, s = 1) {\n    return E(-t, t, e, s);\n}\nfunction $(t, e, s, n, o, a = !1) {\n    const h = a ? o.disableMultiStrokeFill : o.disableMultiStroke, r = R(t, e, s, n, o, !0, !1);\n    if (h) return r;\n    const i = R(t, e, s, n, o, !0, !0);\n    return r.concat(i);\n}\nfunction R(t, e, s, n, o, a, h) {\n    const r = Math.pow(t - s, 2) + Math.pow(e - n, 2), i = Math.sqrt(r);\n    let c = 1;\n    c = i < 200 ? 1 : i > 500 ? .4 : -.0016668 * i + 1.233334;\n    let l = o.maxRandomnessOffset || 0;\n    l * l * 100 > r && (l = i / 10);\n    const u = l / 2, p = .2 + .2 * W(o);\n    let f = o.bowing * o.maxRandomnessOffset * (n - e) / 200, d = o.bowing * o.maxRandomnessOffset * (t - s) / 200;\n    f = G(f, o, c), d = G(d, o, c);\n    const g = [], M = ()=>G(u, o, c), k = ()=>G(l, o, c), b = o.preserveVertices;\n    return a && (h ? g.push({\n        op: \"move\",\n        data: [\n            t + (b ? 0 : M()),\n            e + (b ? 0 : M())\n        ]\n    }) : g.push({\n        op: \"move\",\n        data: [\n            t + (b ? 0 : G(l, o, c)),\n            e + (b ? 0 : G(l, o, c))\n        ]\n    })), h ? g.push({\n        op: \"bcurveTo\",\n        data: [\n            f + t + (s - t) * p + M(),\n            d + e + (n - e) * p + M(),\n            f + t + 2 * (s - t) * p + M(),\n            d + e + 2 * (n - e) * p + M(),\n            s + (b ? 0 : M()),\n            n + (b ? 0 : M())\n        ]\n    }) : g.push({\n        op: \"bcurveTo\",\n        data: [\n            f + t + (s - t) * p + k(),\n            d + e + (n - e) * p + k(),\n            f + t + 2 * (s - t) * p + k(),\n            d + e + 2 * (n - e) * p + k(),\n            s + (b ? 0 : k()),\n            n + (b ? 0 : k())\n        ]\n    }), g;\n}\nfunction j(t, e, s) {\n    if (!t.length) return [];\n    const n = [];\n    n.push([\n        t[0][0] + G(e, s),\n        t[0][1] + G(e, s)\n    ]), n.push([\n        t[0][0] + G(e, s),\n        t[0][1] + G(e, s)\n    ]);\n    for(let o = 1; o < t.length; o++)n.push([\n        t[o][0] + G(e, s),\n        t[o][1] + G(e, s)\n    ]), o === t.length - 1 && n.push([\n        t[o][0] + G(e, s),\n        t[o][1] + G(e, s)\n    ]);\n    return q(n, null, s);\n}\nfunction q(t, e, s) {\n    const n = t.length, o = [];\n    if (n > 3) {\n        const a = [], h = 1 - s.curveTightness;\n        o.push({\n            op: \"move\",\n            data: [\n                t[1][0],\n                t[1][1]\n            ]\n        });\n        for(let e = 1; e + 2 < n; e++){\n            const s = t[e];\n            a[0] = [\n                s[0],\n                s[1]\n            ], a[1] = [\n                s[0] + (h * t[e + 1][0] - h * t[e - 1][0]) / 6,\n                s[1] + (h * t[e + 1][1] - h * t[e - 1][1]) / 6\n            ], a[2] = [\n                t[e + 1][0] + (h * t[e][0] - h * t[e + 2][0]) / 6,\n                t[e + 1][1] + (h * t[e][1] - h * t[e + 2][1]) / 6\n            ], a[3] = [\n                t[e + 1][0],\n                t[e + 1][1]\n            ], o.push({\n                op: \"bcurveTo\",\n                data: [\n                    a[1][0],\n                    a[1][1],\n                    a[2][0],\n                    a[2][1],\n                    a[3][0],\n                    a[3][1]\n                ]\n            });\n        }\n        if (e && 2 === e.length) {\n            const t = s.maxRandomnessOffset;\n            o.push({\n                op: \"lineTo\",\n                data: [\n                    e[0] + G(t, s),\n                    e[1] + G(t, s)\n                ]\n            });\n        }\n    } else 3 === n ? (o.push({\n        op: \"move\",\n        data: [\n            t[1][0],\n            t[1][1]\n        ]\n    }), o.push({\n        op: \"bcurveTo\",\n        data: [\n            t[1][0],\n            t[1][1],\n            t[2][0],\n            t[2][1],\n            t[2][0],\n            t[2][1]\n        ]\n    })) : 2 === n && o.push(...R(t[0][0], t[0][1], t[1][0], t[1][1], s, !0, !0));\n    return o;\n}\nfunction F(t, e, s, n, o, a, h, r) {\n    const i = [], c = [];\n    if (0 === r.roughness) {\n        t /= 4, c.push([\n            e + n * Math.cos(-t),\n            s + o * Math.sin(-t)\n        ]);\n        for(let a = 0; a <= 2 * Math.PI; a += t){\n            const t = [\n                e + n * Math.cos(a),\n                s + o * Math.sin(a)\n            ];\n            i.push(t), c.push(t);\n        }\n        c.push([\n            e + n * Math.cos(0),\n            s + o * Math.sin(0)\n        ]), c.push([\n            e + n * Math.cos(t),\n            s + o * Math.sin(t)\n        ]);\n    } else {\n        const l = G(.5, r) - Math.PI / 2;\n        c.push([\n            G(a, r) + e + .9 * n * Math.cos(l - t),\n            G(a, r) + s + .9 * o * Math.sin(l - t)\n        ]);\n        const u = 2 * Math.PI + l - .01;\n        for(let h = l; h < u; h += t){\n            const t = [\n                G(a, r) + e + n * Math.cos(h),\n                G(a, r) + s + o * Math.sin(h)\n            ];\n            i.push(t), c.push(t);\n        }\n        c.push([\n            G(a, r) + e + n * Math.cos(l + 2 * Math.PI + .5 * h),\n            G(a, r) + s + o * Math.sin(l + 2 * Math.PI + .5 * h)\n        ]), c.push([\n            G(a, r) + e + .98 * n * Math.cos(l + h),\n            G(a, r) + s + .98 * o * Math.sin(l + h)\n        ]), c.push([\n            G(a, r) + e + .9 * n * Math.cos(l + .5 * h),\n            G(a, r) + s + .9 * o * Math.sin(l + .5 * h)\n        ]);\n    }\n    return [\n        c,\n        i\n    ];\n}\nfunction V(t, e, s, n, o, a, h, r, i) {\n    const c = a + G(.1, i), l = [];\n    l.push([\n        G(r, i) + e + .9 * n * Math.cos(c - t),\n        G(r, i) + s + .9 * o * Math.sin(c - t)\n    ]);\n    for(let a = c; a <= h; a += t)l.push([\n        G(r, i) + e + n * Math.cos(a),\n        G(r, i) + s + o * Math.sin(a)\n    ]);\n    return l.push([\n        e + n * Math.cos(h),\n        s + o * Math.sin(h)\n    ]), l.push([\n        e + n * Math.cos(h),\n        s + o * Math.sin(h)\n    ]), q(l, null, i);\n}\nfunction Z(t, e, s, n, o, a, h, r) {\n    const i = [], c = [\n        r.maxRandomnessOffset || 1,\n        (r.maxRandomnessOffset || 1) + .3\n    ];\n    let l = [\n        0,\n        0\n    ];\n    const u = r.disableMultiStroke ? 1 : 2, p = r.preserveVertices;\n    for(let f = 0; f < u; f++)0 === f ? i.push({\n        op: \"move\",\n        data: [\n            h[0],\n            h[1]\n        ]\n    }) : i.push({\n        op: \"move\",\n        data: [\n            h[0] + (p ? 0 : G(c[0], r)),\n            h[1] + (p ? 0 : G(c[0], r))\n        ]\n    }), l = p ? [\n        o,\n        a\n    ] : [\n        o + G(c[f], r),\n        a + G(c[f], r)\n    ], i.push({\n        op: \"bcurveTo\",\n        data: [\n            t + G(c[f], r),\n            e + G(c[f], r),\n            s + G(c[f], r),\n            n + G(c[f], r),\n            l[0],\n            l[1]\n        ]\n    });\n    return i;\n}\nfunction Q(t) {\n    return [\n        ...t\n    ];\n}\nfunction H(t, e = 0) {\n    const s = t.length;\n    if (s < 3) throw new Error(\"A curve must have at least three points.\");\n    const n = [];\n    if (3 === s) n.push(Q(t[0]), Q(t[1]), Q(t[2]), Q(t[2]));\n    else {\n        const s = [];\n        s.push(t[0], t[0]);\n        for(let e = 1; e < t.length; e++)s.push(t[e]), e === t.length - 1 && s.push(t[e]);\n        const o = [], a = 1 - e;\n        n.push(Q(s[0]));\n        for(let t = 1; t + 2 < s.length; t++){\n            const e = s[t];\n            o[0] = [\n                e[0],\n                e[1]\n            ], o[1] = [\n                e[0] + (a * s[t + 1][0] - a * s[t - 1][0]) / 6,\n                e[1] + (a * s[t + 1][1] - a * s[t - 1][1]) / 6\n            ], o[2] = [\n                s[t + 1][0] + (a * s[t][0] - a * s[t + 2][0]) / 6,\n                s[t + 1][1] + (a * s[t][1] - a * s[t + 2][1]) / 6\n            ], o[3] = [\n                s[t + 1][0],\n                s[t + 1][1]\n            ], n.push(o[1], o[2], o[3]);\n        }\n    }\n    return n;\n}\nfunction N(t, e) {\n    return Math.pow(t[0] - e[0], 2) + Math.pow(t[1] - e[1], 2);\n}\nfunction B(t, e, s) {\n    const n = N(e, s);\n    if (0 === n) return N(t, e);\n    let o = ((t[0] - e[0]) * (s[0] - e[0]) + (t[1] - e[1]) * (s[1] - e[1])) / n;\n    return o = Math.max(0, Math.min(1, o)), N(t, J(e, s, o));\n}\nfunction J(t, e, s) {\n    return [\n        t[0] + (e[0] - t[0]) * s,\n        t[1] + (e[1] - t[1]) * s\n    ];\n}\nfunction K(t, e, s, n) {\n    const o = n || [];\n    if (function(t, e) {\n        const s = t[e + 0], n = t[e + 1], o = t[e + 2], a = t[e + 3];\n        let h = 3 * n[0] - 2 * s[0] - a[0];\n        h *= h;\n        let r = 3 * n[1] - 2 * s[1] - a[1];\n        r *= r;\n        let i = 3 * o[0] - 2 * a[0] - s[0];\n        i *= i;\n        let c = 3 * o[1] - 2 * a[1] - s[1];\n        return c *= c, h < i && (h = i), r < c && (r = c), h + r;\n    }(t, e) < s) {\n        const s = t[e + 0];\n        if (o.length) {\n            (a = o[o.length - 1], h = s, Math.sqrt(N(a, h))) > 1 && o.push(s);\n        } else o.push(s);\n        o.push(t[e + 3]);\n    } else {\n        const n = .5, a = t[e + 0], h = t[e + 1], r = t[e + 2], i = t[e + 3], c = J(a, h, n), l = J(h, r, n), u = J(r, i, n), p = J(c, l, n), f = J(l, u, n), d = J(p, f, n);\n        K([\n            a,\n            c,\n            p,\n            d\n        ], 0, s, o), K([\n            d,\n            f,\n            u,\n            i\n        ], 0, s, o);\n    }\n    var a, h;\n    return o;\n}\nfunction U(t, e) {\n    return X(t, 0, t.length, e);\n}\nfunction X(t, e, s, n, o) {\n    const a = o || [], h = t[e], r = t[s - 1];\n    let i = 0, c = 1;\n    for(let n = e + 1; n < s - 1; ++n){\n        const e = B(t[n], h, r);\n        e > i && (i = e, c = n);\n    }\n    return Math.sqrt(i) > n ? (X(t, e, c + 1, n, a), X(t, c, s, n, a)) : (a.length || a.push(h), a.push(r)), a;\n}\nfunction Y(t, e = .15, s) {\n    const n = [], o = (t.length - 1) / 3;\n    for(let s = 0; s < o; s++){\n        K(t, 3 * s, e, n);\n    }\n    return s && s > 0 ? X(n, 0, n.length, s) : n;\n}\nconst tt = \"none\";\nclass et {\n    constructor(t){\n        this.defaultOptions = {\n            maxRandomnessOffset: 2,\n            roughness: 1,\n            bowing: 1,\n            stroke: \"#000\",\n            strokeWidth: 1,\n            curveTightness: 0,\n            curveFitting: .95,\n            curveStepCount: 9,\n            fillStyle: \"hachure\",\n            fillWeight: -1,\n            hachureAngle: -41,\n            hachureGap: -1,\n            dashOffset: -1,\n            dashGap: -1,\n            zigzagOffset: -1,\n            seed: 0,\n            disableMultiStroke: !1,\n            disableMultiStrokeFill: !1,\n            preserveVertices: !1,\n            fillShapeRoughnessGain: .8\n        }, this.config = t || {}, this.config.options && (this.defaultOptions = this._o(this.config.options));\n    }\n    static newSeed() {\n        return Math.floor(Math.random() * 2 ** 31);\n    }\n    _o(t) {\n        return t ? Object.assign({}, this.defaultOptions, t) : this.defaultOptions;\n    }\n    _d(t, e, s) {\n        return {\n            shape: t,\n            sets: e || [],\n            options: s || this.defaultOptions\n        };\n    }\n    line(t, e, s, n, o) {\n        const a = this._o(o);\n        return this._d(\"line\", [\n            v(t, e, s, n, a)\n        ], a);\n    }\n    rectangle(t, e, s, n, o) {\n        const a = this._o(o), h = [], r = O(t, e, s, n, a);\n        if (a.fill) {\n            const o = [\n                [\n                    t,\n                    e\n                ],\n                [\n                    t + s,\n                    e\n                ],\n                [\n                    t + s,\n                    e + n\n                ],\n                [\n                    t,\n                    e + n\n                ]\n            ];\n            \"solid\" === a.fillStyle ? h.push(I([\n                o\n            ], a)) : h.push(C([\n                o\n            ], a));\n        }\n        return a.stroke !== tt && h.push(r), this._d(\"rectangle\", h, a);\n    }\n    ellipse(t, e, s, n, o) {\n        const a = this._o(o), h = [], r = T(s, n, a), i = D(t, e, a, r);\n        if (a.fill) if (\"solid\" === a.fillStyle) {\n            const s = D(t, e, a, r).opset;\n            s.type = \"fillPath\", h.push(s);\n        } else h.push(C([\n            i.estimatedPoints\n        ], a));\n        return a.stroke !== tt && h.push(i.opset), this._d(\"ellipse\", h, a);\n    }\n    circle(t, e, s, n) {\n        const o = this.ellipse(t, e, s, s, n);\n        return o.shape = \"circle\", o;\n    }\n    linearPath(t, e) {\n        const s = this._o(e);\n        return this._d(\"linearPath\", [\n            S(t, !1, s)\n        ], s);\n    }\n    arc(t, e, s, n, o, a, h = !1, r) {\n        const i = this._o(r), c = [], l = A(t, e, s, n, o, a, h, !0, i);\n        if (h && i.fill) if (\"solid\" === i.fillStyle) {\n            const h = Object.assign({}, i);\n            h.disableMultiStroke = !0;\n            const r = A(t, e, s, n, o, a, !0, !1, h);\n            r.type = \"fillPath\", c.push(r);\n        } else c.push(function(t, e, s, n, o, a, h) {\n            const r = t, i = e;\n            let c = Math.abs(s / 2), l = Math.abs(n / 2);\n            c += G(.01 * c, h), l += G(.01 * l, h);\n            let u = o, p = a;\n            for(; u < 0;)u += 2 * Math.PI, p += 2 * Math.PI;\n            p - u > 2 * Math.PI && (u = 0, p = 2 * Math.PI);\n            const f = (p - u) / h.curveStepCount, d = [];\n            for(let t = u; t <= p; t += f)d.push([\n                r + c * Math.cos(t),\n                i + l * Math.sin(t)\n            ]);\n            return d.push([\n                r + c * Math.cos(p),\n                i + l * Math.sin(p)\n            ]), d.push([\n                r,\n                i\n            ]), C([\n                d\n            ], h);\n        }(t, e, s, n, o, a, i));\n        return i.stroke !== tt && c.push(l), this._d(\"arc\", c, i);\n    }\n    curve(t, e) {\n        const s = this._o(e), n = [], o = L(t, s);\n        if (s.fill && s.fill !== tt) if (\"solid\" === s.fillStyle) {\n            const e = L(t, Object.assign(Object.assign({}, s), {\n                disableMultiStroke: !0,\n                roughness: s.roughness ? s.roughness + s.fillShapeRoughnessGain : 0\n            }));\n            n.push({\n                type: \"fillPath\",\n                ops: this._mergedShape(e.ops)\n            });\n        } else {\n            const e = [], o = t;\n            if (o.length) {\n                const t = \"number\" == typeof o[0][0] ? [\n                    o\n                ] : o;\n                for (const n of t)n.length < 3 ? e.push(...n) : 3 === n.length ? e.push(...Y(H([\n                    n[0],\n                    n[0],\n                    n[1],\n                    n[2]\n                ]), 10, (1 + s.roughness) / 2)) : e.push(...Y(H(n), 10, (1 + s.roughness) / 2));\n            }\n            e.length && n.push(C([\n                e\n            ], s));\n        }\n        return s.stroke !== tt && n.push(o), this._d(\"curve\", n, s);\n    }\n    polygon(t, e) {\n        const s = this._o(e), n = [], o = S(t, !0, s);\n        return s.fill && (\"solid\" === s.fillStyle ? n.push(I([\n            t\n        ], s)) : n.push(C([\n            t\n        ], s))), s.stroke !== tt && n.push(o), this._d(\"polygon\", n, s);\n    }\n    path(t, e) {\n        const s = this._o(e), n = [];\n        if (!t) return this._d(\"path\", n, s);\n        t = (t || \"\").replace(/\\n/g, \" \").replace(/(-\\s)/g, \"-\").replace(\"/(ss)/g\", \" \");\n        const o = s.fill && \"transparent\" !== s.fill && s.fill !== tt, a = s.stroke !== tt, h = !!(s.simplification && s.simplification < 1), r = function(t, e, s) {\n            const n = m(y(b(t))), o = [];\n            let a = [], h = [\n                0,\n                0\n            ], r = [];\n            const i = ()=>{\n                r.length >= 4 && a.push(...Y(r, e)), r = [];\n            }, c = ()=>{\n                i(), a.length && (o.push(a), a = []);\n            };\n            for (const { key: t, data: e } of n)switch(t){\n                case \"M\":\n                    c(), h = [\n                        e[0],\n                        e[1]\n                    ], a.push(h);\n                    break;\n                case \"L\":\n                    i(), a.push([\n                        e[0],\n                        e[1]\n                    ]);\n                    break;\n                case \"C\":\n                    if (!r.length) {\n                        const t = a.length ? a[a.length - 1] : h;\n                        r.push([\n                            t[0],\n                            t[1]\n                        ]);\n                    }\n                    r.push([\n                        e[0],\n                        e[1]\n                    ]), r.push([\n                        e[2],\n                        e[3]\n                    ]), r.push([\n                        e[4],\n                        e[5]\n                    ]);\n                    break;\n                case \"Z\":\n                    i(), a.push([\n                        h[0],\n                        h[1]\n                    ]);\n            }\n            if (c(), !s) return o;\n            const l = [];\n            for (const t of o){\n                const e = U(t, s);\n                e.length && l.push(e);\n            }\n            return l;\n        }(t, 1, h ? 4 - 4 * (s.simplification || 1) : (1 + s.roughness) / 2), i = _(t, s);\n        if (o) if (\"solid\" === s.fillStyle) if (1 === r.length) {\n            const e = _(t, Object.assign(Object.assign({}, s), {\n                disableMultiStroke: !0,\n                roughness: s.roughness ? s.roughness + s.fillShapeRoughnessGain : 0\n            }));\n            n.push({\n                type: \"fillPath\",\n                ops: this._mergedShape(e.ops)\n            });\n        } else n.push(I(r, s));\n        else n.push(C(r, s));\n        return a && (h ? r.forEach((t)=>{\n            n.push(S(t, !1, s));\n        }) : n.push(i)), this._d(\"path\", n, s);\n    }\n    opsToPath(t, e) {\n        let s = \"\";\n        for (const n of t.ops){\n            const t = \"number\" == typeof e && e >= 0 ? n.data.map((t)=>+t.toFixed(e)) : n.data;\n            switch(n.op){\n                case \"move\":\n                    s += `M${t[0]} ${t[1]} `;\n                    break;\n                case \"bcurveTo\":\n                    s += `C${t[0]} ${t[1]}, ${t[2]} ${t[3]}, ${t[4]} ${t[5]} `;\n                    break;\n                case \"lineTo\":\n                    s += `L${t[0]} ${t[1]} `;\n            }\n        }\n        return s.trim();\n    }\n    toPaths(t) {\n        const e = t.sets || [], s = t.options || this.defaultOptions, n = [];\n        for (const t of e){\n            let e = null;\n            switch(t.type){\n                case \"path\":\n                    e = {\n                        d: this.opsToPath(t),\n                        stroke: s.stroke,\n                        strokeWidth: s.strokeWidth,\n                        fill: tt\n                    };\n                    break;\n                case \"fillPath\":\n                    e = {\n                        d: this.opsToPath(t),\n                        stroke: tt,\n                        strokeWidth: 0,\n                        fill: s.fill || tt\n                    };\n                    break;\n                case \"fillSketch\":\n                    e = this.fillSketch(t, s);\n            }\n            e && n.push(e);\n        }\n        return n;\n    }\n    fillSketch(t, e) {\n        let s = e.fillWeight;\n        return s < 0 && (s = e.strokeWidth / 2), {\n            d: this.opsToPath(t),\n            stroke: e.fill || tt,\n            strokeWidth: s,\n            fill: tt\n        };\n    }\n    _mergedShape(t) {\n        return t.filter((t, e)=>0 === e || \"move\" !== t.op);\n    }\n}\nclass st {\n    constructor(t, e){\n        this.canvas = t, this.ctx = this.canvas.getContext(\"2d\"), this.gen = new et(e);\n    }\n    draw(t) {\n        const e = t.sets || [], s = t.options || this.getDefaultOptions(), n = this.ctx, o = t.options.fixedDecimalPlaceDigits;\n        for (const a of e)switch(a.type){\n            case \"path\":\n                n.save(), n.strokeStyle = \"none\" === s.stroke ? \"transparent\" : s.stroke, n.lineWidth = s.strokeWidth, s.strokeLineDash && n.setLineDash(s.strokeLineDash), s.strokeLineDashOffset && (n.lineDashOffset = s.strokeLineDashOffset), this._drawToContext(n, a, o), n.restore();\n                break;\n            case \"fillPath\":\n                {\n                    n.save(), n.fillStyle = s.fill || \"\";\n                    const e = \"curve\" === t.shape || \"polygon\" === t.shape || \"path\" === t.shape ? \"evenodd\" : \"nonzero\";\n                    this._drawToContext(n, a, o, e), n.restore();\n                    break;\n                }\n            case \"fillSketch\":\n                this.fillSketch(n, a, s);\n        }\n    }\n    fillSketch(t, e, s) {\n        let n = s.fillWeight;\n        n < 0 && (n = s.strokeWidth / 2), t.save(), s.fillLineDash && t.setLineDash(s.fillLineDash), s.fillLineDashOffset && (t.lineDashOffset = s.fillLineDashOffset), t.strokeStyle = s.fill || \"\", t.lineWidth = n, this._drawToContext(t, e, s.fixedDecimalPlaceDigits), t.restore();\n    }\n    _drawToContext(t, e, s, n = \"nonzero\") {\n        t.beginPath();\n        for (const n of e.ops){\n            const e = \"number\" == typeof s && s >= 0 ? n.data.map((t)=>+t.toFixed(s)) : n.data;\n            switch(n.op){\n                case \"move\":\n                    t.moveTo(e[0], e[1]);\n                    break;\n                case \"bcurveTo\":\n                    t.bezierCurveTo(e[0], e[1], e[2], e[3], e[4], e[5]);\n                    break;\n                case \"lineTo\":\n                    t.lineTo(e[0], e[1]);\n            }\n        }\n        \"fillPath\" === e.type ? t.fill(n) : t.stroke();\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    line(t, e, s, n, o) {\n        const a = this.gen.line(t, e, s, n, o);\n        return this.draw(a), a;\n    }\n    rectangle(t, e, s, n, o) {\n        const a = this.gen.rectangle(t, e, s, n, o);\n        return this.draw(a), a;\n    }\n    ellipse(t, e, s, n, o) {\n        const a = this.gen.ellipse(t, e, s, n, o);\n        return this.draw(a), a;\n    }\n    circle(t, e, s, n) {\n        const o = this.gen.circle(t, e, s, n);\n        return this.draw(o), o;\n    }\n    linearPath(t, e) {\n        const s = this.gen.linearPath(t, e);\n        return this.draw(s), s;\n    }\n    polygon(t, e) {\n        const s = this.gen.polygon(t, e);\n        return this.draw(s), s;\n    }\n    arc(t, e, s, n, o, a, h = !1, r) {\n        const i = this.gen.arc(t, e, s, n, o, a, h, r);\n        return this.draw(i), i;\n    }\n    curve(t, e) {\n        const s = this.gen.curve(t, e);\n        return this.draw(s), s;\n    }\n    path(t, e) {\n        const s = this.gen.path(t, e);\n        return this.draw(s), s;\n    }\n}\nconst nt = \"http://www.w3.org/2000/svg\";\nclass ot {\n    constructor(t, e){\n        this.svg = t, this.gen = new et(e);\n    }\n    draw(t) {\n        const e = t.sets || [], s = t.options || this.getDefaultOptions(), n = this.svg.ownerDocument || window.document, o = n.createElementNS(nt, \"g\"), a = t.options.fixedDecimalPlaceDigits;\n        for (const h of e){\n            let e = null;\n            switch(h.type){\n                case \"path\":\n                    e = n.createElementNS(nt, \"path\"), e.setAttribute(\"d\", this.opsToPath(h, a)), e.setAttribute(\"stroke\", s.stroke), e.setAttribute(\"stroke-width\", s.strokeWidth + \"\"), e.setAttribute(\"fill\", \"none\"), s.strokeLineDash && e.setAttribute(\"stroke-dasharray\", s.strokeLineDash.join(\" \").trim()), s.strokeLineDashOffset && e.setAttribute(\"stroke-dashoffset\", `${s.strokeLineDashOffset}`);\n                    break;\n                case \"fillPath\":\n                    e = n.createElementNS(nt, \"path\"), e.setAttribute(\"d\", this.opsToPath(h, a)), e.setAttribute(\"stroke\", \"none\"), e.setAttribute(\"stroke-width\", \"0\"), e.setAttribute(\"fill\", s.fill || \"\"), \"curve\" !== t.shape && \"polygon\" !== t.shape || e.setAttribute(\"fill-rule\", \"evenodd\");\n                    break;\n                case \"fillSketch\":\n                    e = this.fillSketch(n, h, s);\n            }\n            e && o.appendChild(e);\n        }\n        return o;\n    }\n    fillSketch(t, e, s) {\n        let n = s.fillWeight;\n        n < 0 && (n = s.strokeWidth / 2);\n        const o = t.createElementNS(nt, \"path\");\n        return o.setAttribute(\"d\", this.opsToPath(e, s.fixedDecimalPlaceDigits)), o.setAttribute(\"stroke\", s.fill || \"\"), o.setAttribute(\"stroke-width\", n + \"\"), o.setAttribute(\"fill\", \"none\"), s.fillLineDash && o.setAttribute(\"stroke-dasharray\", s.fillLineDash.join(\" \").trim()), s.fillLineDashOffset && o.setAttribute(\"stroke-dashoffset\", `${s.fillLineDashOffset}`), o;\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(t, e) {\n        return this.gen.opsToPath(t, e);\n    }\n    line(t, e, s, n, o) {\n        const a = this.gen.line(t, e, s, n, o);\n        return this.draw(a);\n    }\n    rectangle(t, e, s, n, o) {\n        const a = this.gen.rectangle(t, e, s, n, o);\n        return this.draw(a);\n    }\n    ellipse(t, e, s, n, o) {\n        const a = this.gen.ellipse(t, e, s, n, o);\n        return this.draw(a);\n    }\n    circle(t, e, s, n) {\n        const o = this.gen.circle(t, e, s, n);\n        return this.draw(o);\n    }\n    linearPath(t, e) {\n        const s = this.gen.linearPath(t, e);\n        return this.draw(s);\n    }\n    polygon(t, e) {\n        const s = this.gen.polygon(t, e);\n        return this.draw(s);\n    }\n    arc(t, e, s, n, o, a, h = !1, r) {\n        const i = this.gen.arc(t, e, s, n, o, a, h, r);\n        return this.draw(i);\n    }\n    curve(t, e) {\n        const s = this.gen.curve(t, e);\n        return this.draw(s);\n    }\n    path(t, e) {\n        const s = this.gen.path(t, e);\n        return this.draw(s);\n    }\n}\nvar at = {\n    canvas: (t, e)=>new st(t, e),\n    svg: (t, e)=>new ot(t, e),\n    generator: (t)=>new et(t),\n    newSeed: ()=>et.newSeed()\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/roughjs/bundled/rough.esm.js\n");

/***/ })

};
;