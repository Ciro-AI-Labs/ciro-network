"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chevrotain";
exports.ids = ["vendor-chunks/chevrotain"];
exports.modules = {

/***/ "(ssr)/./node_modules/chevrotain/lib/src/api.js":
/*!************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/api.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alternation: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Alternation),\n/* harmony export */   Alternative: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Alternative),\n/* harmony export */   CstParser: () => (/* reexport safe */ _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.CstParser),\n/* harmony export */   EMPTY_ALT: () => (/* reexport safe */ _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ALT),\n/* harmony export */   EOF: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.EOF),\n/* harmony export */   EarlyExitException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.EarlyExitException),\n/* harmony export */   EmbeddedActionsParser: () => (/* reexport safe */ _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.EmbeddedActionsParser),\n/* harmony export */   GAstVisitor: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.GAstVisitor),\n/* harmony export */   LLkLookaheadStrategy: () => (/* reexport safe */ _parse_grammar_llk_lookahead_js__WEBPACK_IMPORTED_MODULE_5__.LLkLookaheadStrategy),\n/* harmony export */   Lexer: () => (/* reexport safe */ _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_2__.Lexer),\n/* harmony export */   LexerDefinitionErrorType: () => (/* reexport safe */ _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_2__.LexerDefinitionErrorType),\n/* harmony export */   MismatchedTokenException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.MismatchedTokenException),\n/* harmony export */   NoViableAltException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.NoViableAltException),\n/* harmony export */   NonTerminal: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.NonTerminal),\n/* harmony export */   NotAllInputParsedException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.NotAllInputParsedException),\n/* harmony export */   Option: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Option),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   ParserDefinitionErrorType: () => (/* reexport safe */ _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.ParserDefinitionErrorType),\n/* harmony export */   Repetition: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Repetition),\n/* harmony export */   RepetitionMandatory: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.RepetitionMandatory),\n/* harmony export */   RepetitionMandatoryWithSeparator: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.RepetitionMandatoryWithSeparator),\n/* harmony export */   RepetitionWithSeparator: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.RepetitionWithSeparator),\n/* harmony export */   Rule: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Rule),\n/* harmony export */   Terminal: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.Terminal),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION),\n/* harmony export */   clearCache: () => (/* binding */ clearCache),\n/* harmony export */   createSyntaxDiagramsCode: () => (/* reexport safe */ _diagrams_render_public_js__WEBPACK_IMPORTED_MODULE_11__.createSyntaxDiagramsCode),\n/* harmony export */   createToken: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.createToken),\n/* harmony export */   createTokenInstance: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.createTokenInstance),\n/* harmony export */   defaultLexerErrorProvider: () => (/* reexport safe */ _scan_lexer_errors_public_js__WEBPACK_IMPORTED_MODULE_8__.defaultLexerErrorProvider),\n/* harmony export */   defaultParserErrorProvider: () => (/* reexport safe */ _parse_errors_public_js__WEBPACK_IMPORTED_MODULE_6__.defaultParserErrorProvider),\n/* harmony export */   generateCstDts: () => (/* reexport safe */ _chevrotain_cst_dts_gen__WEBPACK_IMPORTED_MODULE_10__.generateCstDts),\n/* harmony export */   getLookaheadPaths: () => (/* reexport safe */ _parse_grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_4__.getLookaheadPaths),\n/* harmony export */   isRecognitionException: () => (/* reexport safe */ _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__.isRecognitionException),\n/* harmony export */   serializeGrammar: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.serializeGrammar),\n/* harmony export */   serializeProduction: () => (/* reexport safe */ _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__.serializeProduction),\n/* harmony export */   tokenLabel: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.tokenLabel),\n/* harmony export */   tokenMatcher: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.tokenMatcher),\n/* harmony export */   tokenName: () => (/* reexport safe */ _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.tokenName)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/chevrotain/lib/src/version.js\");\n/* harmony import */ var _parse_parser_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse/parser/parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scan/lexer_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\");\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _parse_grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parse/grammar/lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _parse_grammar_llk_lookahead_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parse/grammar/llk_lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js\");\n/* harmony import */ var _parse_errors_public_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parse/errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n/* harmony import */ var _parse_exceptions_public_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parse/exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _scan_lexer_errors_public_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./scan/lexer_errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n/* harmony import */ var _chevrotain_cst_dts_gen__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @chevrotain/cst-dts-gen */ \"(ssr)/./node_modules/@chevrotain/cst-dts-gen/lib/src/api.js\");\n/* harmony import */ var _diagrams_render_public_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./diagrams/render_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/diagrams/render_public.js\");\n/* istanbul ignore file - tricky to import some things from this module during testing */ // semantic version\n\n\n\n// Tokens utilities\n\n// Lookahead\n\n\n// Other Utilities\n\n\n\n// grammar reflection API\n\n// GAST Utilities\n\n\n/* istanbul ignore next */ function clearCache() {\n    console.warn(\"The clearCache function was 'soft' removed from the Chevrotain API.\" + \"\\n\t It performs no action other than printing this message.\" + \"\\n\t Please avoid using it as it will be completely removed in the future\");\n}\n\nclass Parser {\n    constructor(){\n        throw new Error(\"The Parser class has been deprecated, use CstParser or EmbeddedActionsParser instead.\t\\n\" + \"See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_7-0-0\");\n    }\n} //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL2FwaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1RkFBdUYsR0FDdkYsbUJBQW1CO0FBQ29CO0FBQzRFO0FBQzFDO0FBQ3pFLG1CQUFtQjtBQUNtRztBQUN0SCxZQUFZO0FBQ3FEO0FBQ087QUFDeEUsa0JBQWtCO0FBQ29EO0FBQ2lHO0FBQzdGO0FBQzFFLHlCQUF5QjtBQUNxSztBQUM5TCxpQkFBaUI7QUFDc0U7QUFDOUI7QUFDekQsd0JBQXdCLEdBQ2pCLFNBQVNvQztJQUNaQyxRQUFRQyxJQUFJLENBQUMsd0VBQ1QsZ0VBQ0E7QUFDUjtBQUN1RTtBQUNoRSxNQUFNRTtJQUNUQyxhQUFjO1FBQ1YsTUFBTSxJQUFJQyxNQUFNLDZGQUNaO0lBQ1I7QUFDSixFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9hcGkuanM/MjgwNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAtIHRyaWNreSB0byBpbXBvcnQgc29tZSB0aGluZ3MgZnJvbSB0aGlzIG1vZHVsZSBkdXJpbmcgdGVzdGluZyAqL1xuLy8gc2VtYW50aWMgdmVyc2lvblxuZXhwb3J0IHsgVkVSU0lPTiB9IGZyb20gXCIuL3ZlcnNpb24uanNcIjtcbmV4cG9ydCB7IENzdFBhcnNlciwgRW1iZWRkZWRBY3Rpb25zUGFyc2VyLCBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlLCBFTVBUWV9BTFQsIH0gZnJvbSBcIi4vcGFyc2UvcGFyc2VyL3BhcnNlci5qc1wiO1xuZXhwb3J0IHsgTGV4ZXIsIExleGVyRGVmaW5pdGlvbkVycm9yVHlwZSB9IGZyb20gXCIuL3NjYW4vbGV4ZXJfcHVibGljLmpzXCI7XG4vLyBUb2tlbnMgdXRpbGl0aWVzXG5leHBvcnQgeyBjcmVhdGVUb2tlbiwgY3JlYXRlVG9rZW5JbnN0YW5jZSwgRU9GLCB0b2tlbkxhYmVsLCB0b2tlbk1hdGNoZXIsIHRva2VuTmFtZSwgfSBmcm9tIFwiLi9zY2FuL3Rva2Vuc19wdWJsaWMuanNcIjtcbi8vIExvb2thaGVhZFxuZXhwb3J0IHsgZ2V0TG9va2FoZWFkUGF0aHMgfSBmcm9tIFwiLi9wYXJzZS9ncmFtbWFyL2xvb2thaGVhZC5qc1wiO1xuZXhwb3J0IHsgTExrTG9va2FoZWFkU3RyYXRlZ3kgfSBmcm9tIFwiLi9wYXJzZS9ncmFtbWFyL2xsa19sb29rYWhlYWQuanNcIjtcbi8vIE90aGVyIFV0aWxpdGllc1xuZXhwb3J0IHsgZGVmYXVsdFBhcnNlckVycm9yUHJvdmlkZXIgfSBmcm9tIFwiLi9wYXJzZS9lcnJvcnNfcHVibGljLmpzXCI7XG5leHBvcnQgeyBFYXJseUV4aXRFeGNlcHRpb24sIGlzUmVjb2duaXRpb25FeGNlcHRpb24sIE1pc21hdGNoZWRUb2tlbkV4Y2VwdGlvbiwgTm90QWxsSW5wdXRQYXJzZWRFeGNlcHRpb24sIE5vVmlhYmxlQWx0RXhjZXB0aW9uLCB9IGZyb20gXCIuL3BhcnNlL2V4Y2VwdGlvbnNfcHVibGljLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0TGV4ZXJFcnJvclByb3ZpZGVyIH0gZnJvbSBcIi4vc2Nhbi9sZXhlcl9lcnJvcnNfcHVibGljLmpzXCI7XG4vLyBncmFtbWFyIHJlZmxlY3Rpb24gQVBJXG5leHBvcnQgeyBBbHRlcm5hdGlvbiwgQWx0ZXJuYXRpdmUsIE5vblRlcm1pbmFsLCBPcHRpb24sIFJlcGV0aXRpb24sIFJlcGV0aXRpb25NYW5kYXRvcnksIFJlcGV0aXRpb25NYW5kYXRvcnlXaXRoU2VwYXJhdG9yLCBSZXBldGl0aW9uV2l0aFNlcGFyYXRvciwgUnVsZSwgVGVybWluYWwsIH0gZnJvbSBcIkBjaGV2cm90YWluL2dhc3RcIjtcbi8vIEdBU1QgVXRpbGl0aWVzXG5leHBvcnQgeyBzZXJpYWxpemVHcmFtbWFyLCBzZXJpYWxpemVQcm9kdWN0aW9uLCBHQXN0VmlzaXRvciwgfSBmcm9tIFwiQGNoZXZyb3RhaW4vZ2FzdFwiO1xuZXhwb3J0IHsgZ2VuZXJhdGVDc3REdHMgfSBmcm9tIFwiQGNoZXZyb3RhaW4vY3N0LWR0cy1nZW5cIjtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJDYWNoZSgpIHtcbiAgICBjb25zb2xlLndhcm4oXCJUaGUgY2xlYXJDYWNoZSBmdW5jdGlvbiB3YXMgJ3NvZnQnIHJlbW92ZWQgZnJvbSB0aGUgQ2hldnJvdGFpbiBBUEkuXCIgK1xuICAgICAgICBcIlxcblxcdCBJdCBwZXJmb3JtcyBubyBhY3Rpb24gb3RoZXIgdGhhbiBwcmludGluZyB0aGlzIG1lc3NhZ2UuXCIgK1xuICAgICAgICBcIlxcblxcdCBQbGVhc2UgYXZvaWQgdXNpbmcgaXQgYXMgaXQgd2lsbCBiZSBjb21wbGV0ZWx5IHJlbW92ZWQgaW4gdGhlIGZ1dHVyZVwiKTtcbn1cbmV4cG9ydCB7IGNyZWF0ZVN5bnRheERpYWdyYW1zQ29kZSB9IGZyb20gXCIuL2RpYWdyYW1zL3JlbmRlcl9wdWJsaWMuanNcIjtcbmV4cG9ydCBjbGFzcyBQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgUGFyc2VyIGNsYXNzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHVzZSBDc3RQYXJzZXIgb3IgRW1iZWRkZWRBY3Rpb25zUGFyc2VyIGluc3RlYWQuXFx0XFxuXCIgK1xuICAgICAgICAgICAgXCJTZWU6IGh0dHBzOi8vY2hldnJvdGFpbi5pby9kb2NzL2NoYW5nZXMvQlJFQUtJTkdfQ0hBTkdFUy5odG1sI183LTAtMFwiKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwIl0sIm5hbWVzIjpbIlZFUlNJT04iLCJDc3RQYXJzZXIiLCJFbWJlZGRlZEFjdGlvbnNQYXJzZXIiLCJQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlIiwiRU1QVFlfQUxUIiwiTGV4ZXIiLCJMZXhlckRlZmluaXRpb25FcnJvclR5cGUiLCJjcmVhdGVUb2tlbiIsImNyZWF0ZVRva2VuSW5zdGFuY2UiLCJFT0YiLCJ0b2tlbkxhYmVsIiwidG9rZW5NYXRjaGVyIiwidG9rZW5OYW1lIiwiZ2V0TG9va2FoZWFkUGF0aHMiLCJMTGtMb29rYWhlYWRTdHJhdGVneSIsImRlZmF1bHRQYXJzZXJFcnJvclByb3ZpZGVyIiwiRWFybHlFeGl0RXhjZXB0aW9uIiwiaXNSZWNvZ25pdGlvbkV4Y2VwdGlvbiIsIk1pc21hdGNoZWRUb2tlbkV4Y2VwdGlvbiIsIk5vdEFsbElucHV0UGFyc2VkRXhjZXB0aW9uIiwiTm9WaWFibGVBbHRFeGNlcHRpb24iLCJkZWZhdWx0TGV4ZXJFcnJvclByb3ZpZGVyIiwiQWx0ZXJuYXRpb24iLCJBbHRlcm5hdGl2ZSIsIk5vblRlcm1pbmFsIiwiT3B0aW9uIiwiUmVwZXRpdGlvbiIsIlJlcGV0aXRpb25NYW5kYXRvcnkiLCJSZXBldGl0aW9uTWFuZGF0b3J5V2l0aFNlcGFyYXRvciIsIlJlcGV0aXRpb25XaXRoU2VwYXJhdG9yIiwiUnVsZSIsIlRlcm1pbmFsIiwic2VyaWFsaXplR3JhbW1hciIsInNlcmlhbGl6ZVByb2R1Y3Rpb24iLCJHQXN0VmlzaXRvciIsImdlbmVyYXRlQ3N0RHRzIiwiY2xlYXJDYWNoZSIsImNvbnNvbGUiLCJ3YXJuIiwiY3JlYXRlU3ludGF4RGlhZ3JhbXNDb2RlIiwiUGFyc2VyIiwiY29uc3RydWN0b3IiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/diagrams/render_public.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/diagrams/render_public.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSyntaxDiagramsCode: () => (/* binding */ createSyntaxDiagramsCode)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/chevrotain/lib/src/version.js\");\n\nfunction createSyntaxDiagramsCode(grammar, { resourceBase = `https://unpkg.com/chevrotain@${_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION}/diagrams/`, css = `https://unpkg.com/chevrotain@${_version_js__WEBPACK_IMPORTED_MODULE_0__.VERSION}/diagrams/diagrams.css` } = {}) {\n    const header = `\n<!-- This is a generated file -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n`;\n    const cssHtml = `\n<link rel='stylesheet' href='${css}'>\n`;\n    const scripts = `\n<script src='${resourceBase}vendor/railroad-diagrams.js'></script>\n<script src='${resourceBase}src/diagrams_builder.js'></script>\n<script src='${resourceBase}src/diagrams_behavior.js'></script>\n<script src='${resourceBase}src/main.js'></script>\n`;\n    const diagramsDiv = `\n<div id=\"diagrams\" align=\"center\"></div>    \n`;\n    const serializedGrammar = `\n<script>\n    window.serializedGrammar = ${JSON.stringify(grammar, null, \"  \")};\n</script>\n`;\n    const initLogic = `\n<script>\n    var diagramsDiv = document.getElementById(\"diagrams\");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n</script>\n`;\n    return header + cssHtml + scripts + diagramsDiv + serializedGrammar + initLogic;\n} //# sourceMappingURL=render_public.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL2RpYWdyYW1zL3JlbmRlcl9wdWJsaWMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDakMsU0FBU0MseUJBQXlCQyxPQUFPLEVBQUUsRUFBRUMsZUFBZSxDQUFDLDZCQUE2QixFQUFFSCxnREFBT0EsQ0FBQyxVQUFVLENBQUMsRUFBRUksTUFBTSxDQUFDLDZCQUE2QixFQUFFSixnREFBT0EsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2pNLE1BQU1LLFNBQVMsQ0FBQzs7Ozs7Ozs7OztBQVVwQixDQUFDO0lBQ0csTUFBTUMsVUFBVSxDQUFDOzZCQUNRLEVBQUVGLElBQUk7QUFDbkMsQ0FBQztJQUNHLE1BQU1HLFVBQVUsQ0FBQzthQUNSLEVBQUVKLGFBQWE7YUFDZixFQUFFQSxhQUFhO2FBQ2YsRUFBRUEsYUFBYTthQUNmLEVBQUVBLGFBQWE7QUFDNUIsQ0FBQztJQUNHLE1BQU1LLGNBQWMsQ0FBQzs7QUFFekIsQ0FBQztJQUNHLE1BQU1DLG9CQUFvQixDQUFDOzsrQkFFQSxFQUFFQyxLQUFLQyxTQUFTLENBQUNULFNBQVMsTUFBTSxNQUFNOztBQUVyRSxDQUFDO0lBQ0csTUFBTVUsWUFBWSxDQUFDOzs7OztBQUt2QixDQUFDO0lBQ0csT0FBUVAsU0FBU0MsVUFBVUMsVUFBVUMsY0FBY0Msb0JBQW9CRztBQUMzRSxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9kaWFncmFtcy9yZW5kZXJfcHVibGljLmpzP2NjNDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gXCIuLi92ZXJzaW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3ludGF4RGlhZ3JhbXNDb2RlKGdyYW1tYXIsIHsgcmVzb3VyY2VCYXNlID0gYGh0dHBzOi8vdW5wa2cuY29tL2NoZXZyb3RhaW5AJHtWRVJTSU9OfS9kaWFncmFtcy9gLCBjc3MgPSBgaHR0cHM6Ly91bnBrZy5jb20vY2hldnJvdGFpbkAke1ZFUlNJT059L2RpYWdyYW1zL2RpYWdyYW1zLmNzc2AsIH0gPSB7fSkge1xuICAgIGNvbnN0IGhlYWRlciA9IGBcbjwhLS0gVGhpcyBpcyBhIGdlbmVyYXRlZCBmaWxlIC0tPlxuPCFET0NUWVBFIGh0bWw+XG48bWV0YSBjaGFyc2V0PVwidXRmLThcIj5cbjxzdHlsZT5cbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDMwLCAyMCUsIDk1JSlcbiAgfVxuPC9zdHlsZT5cblxuYDtcbiAgICBjb25zdCBjc3NIdG1sID0gYFxuPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyBocmVmPScke2Nzc30nPlxuYDtcbiAgICBjb25zdCBzY3JpcHRzID0gYFxuPHNjcmlwdCBzcmM9JyR7cmVzb3VyY2VCYXNlfXZlbmRvci9yYWlscm9hZC1kaWFncmFtcy5qcyc+PC9zY3JpcHQ+XG48c2NyaXB0IHNyYz0nJHtyZXNvdXJjZUJhc2V9c3JjL2RpYWdyYW1zX2J1aWxkZXIuanMnPjwvc2NyaXB0PlxuPHNjcmlwdCBzcmM9JyR7cmVzb3VyY2VCYXNlfXNyYy9kaWFncmFtc19iZWhhdmlvci5qcyc+PC9zY3JpcHQ+XG48c2NyaXB0IHNyYz0nJHtyZXNvdXJjZUJhc2V9c3JjL21haW4uanMnPjwvc2NyaXB0PlxuYDtcbiAgICBjb25zdCBkaWFncmFtc0RpdiA9IGBcbjxkaXYgaWQ9XCJkaWFncmFtc1wiIGFsaWduPVwiY2VudGVyXCI+PC9kaXY+ICAgIFxuYDtcbiAgICBjb25zdCBzZXJpYWxpemVkR3JhbW1hciA9IGBcbjxzY3JpcHQ+XG4gICAgd2luZG93LnNlcmlhbGl6ZWRHcmFtbWFyID0gJHtKU09OLnN0cmluZ2lmeShncmFtbWFyLCBudWxsLCBcIiAgXCIpfTtcbjwvc2NyaXB0PlxuYDtcbiAgICBjb25zdCBpbml0TG9naWMgPSBgXG48c2NyaXB0PlxuICAgIHZhciBkaWFncmFtc0RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGlhZ3JhbXNcIik7XG4gICAgbWFpbi5kcmF3RGlhZ3JhbXNGcm9tU2VyaWFsaXplZEdyYW1tYXIoc2VyaWFsaXplZEdyYW1tYXIsIGRpYWdyYW1zRGl2KTtcbjwvc2NyaXB0PlxuYDtcbiAgICByZXR1cm4gKGhlYWRlciArIGNzc0h0bWwgKyBzY3JpcHRzICsgZGlhZ3JhbXNEaXYgKyBzZXJpYWxpemVkR3JhbW1hciArIGluaXRMb2dpYyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW5kZXJfcHVibGljLmpzLm1hcCJdLCJuYW1lcyI6WyJWRVJTSU9OIiwiY3JlYXRlU3ludGF4RGlhZ3JhbXNDb2RlIiwiZ3JhbW1hciIsInJlc291cmNlQmFzZSIsImNzcyIsImhlYWRlciIsImNzc0h0bWwiLCJzY3JpcHRzIiwiZGlhZ3JhbXNEaXYiLCJzZXJpYWxpemVkR3JhbW1hciIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbml0TG9naWMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/diagrams/render_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/lang/lang_extensions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/lang/lang_extensions.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineNameProp: () => (/* binding */ defineNameProp)\n/* harmony export */ });\nconst NAME = \"name\";\nfunction defineNameProp(obj, nameValue) {\n    Object.defineProperty(obj, NAME, {\n        enumerable: false,\n        configurable: true,\n        writable: false,\n        value: nameValue\n    });\n} //# sourceMappingURL=lang_extensions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL2xhbmcvbGFuZ19leHRlbnNpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxPQUFPO0FBQ04sU0FBU0MsZUFBZUMsR0FBRyxFQUFFQyxTQUFTO0lBQ3pDQyxPQUFPQyxjQUFjLENBQUNILEtBQUtGLE1BQU07UUFDN0JNLFlBQVk7UUFDWkMsY0FBYztRQUNkQyxVQUFVO1FBQ1ZDLE9BQU9OO0lBQ1g7QUFDSixFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9sYW5nL2xhbmdfZXh0ZW5zaW9ucy5qcz81ODY5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5BTUUgPSBcIm5hbWVcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVOYW1lUHJvcChvYmosIG5hbWVWYWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIE5BTUUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogbmFtZVZhbHVlLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFuZ19leHRlbnNpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJOQU1FIiwiZGVmaW5lTmFtZVByb3AiLCJvYmoiLCJuYW1lVmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/lang/lang_extensions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IN: () => (/* binding */ IN)\n/* harmony export */ });\n// TODO: can this be removed? where is it used?\nconst IN = \"_~IN~_\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsK0NBQStDO0FBQ3hDLE1BQU1BLEtBQUssU0FBUyxDQUMzQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvY29uc3RhbnRzLmpzPzMxNzMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETzogY2FuIHRoaXMgYmUgcmVtb3ZlZD8gd2hlcmUgaXMgaXQgdXNlZD9cbmV4cG9ydCBjb25zdCBJTiA9IFwiX35JTn5fXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIklOIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst.js":
/*!**********************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/cst/cst.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNoneTerminalToCst: () => (/* binding */ addNoneTerminalToCst),\n/* harmony export */   addTerminalToCst: () => (/* binding */ addTerminalToCst),\n/* harmony export */   setNodeLocationFull: () => (/* binding */ setNodeLocationFull),\n/* harmony export */   setNodeLocationOnlyOffset: () => (/* binding */ setNodeLocationOnlyOffset)\n/* harmony export */ });\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */ function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (both start/end offsets exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    } else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n}\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */ function setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (all start/end props exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.startColumn = newLocationInfo.startColumn;\n        currNodeLocation.startLine = newLocationInfo.startLine;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    } else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n}\nfunction addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === undefined) {\n        node.children[tokenTypeName] = [\n            token\n        ];\n    } else {\n        node.children[tokenTypeName].push(token);\n    }\n}\nfunction addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === undefined) {\n        node.children[ruleName] = [\n            ruleResult\n        ];\n    } else {\n        node.children[ruleName].push(ruleResult);\n    }\n} //# sourceMappingURL=cst.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2NzdC9jc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNBLDBCQUEwQkMsZ0JBQWdCLEVBQUVDLGVBQWU7SUFDdkUseUNBQXlDO0lBQ3pDLElBQUlDLE1BQU1GLGlCQUFpQkcsV0FBVyxNQUFNLE1BQU07UUFDOUMsMEVBQTBFO1FBQzFFLHFFQUFxRTtRQUNyRSxrREFBa0Q7UUFDbERILGlCQUFpQkcsV0FBVyxHQUFHRixnQkFBZ0JFLFdBQVc7UUFDMURILGlCQUFpQkksU0FBUyxHQUFHSCxnQkFBZ0JHLFNBQVM7SUFDMUQsT0FLSyxJQUFJSixpQkFBaUJJLFNBQVMsR0FBR0gsZ0JBQWdCRyxTQUFTLEtBQUssTUFBTTtRQUN0RUosaUJBQWlCSSxTQUFTLEdBQUdILGdCQUFnQkcsU0FBUztJQUMxRDtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ00sU0FBU0Msb0JBQW9CTCxnQkFBZ0IsRUFBRUMsZUFBZTtJQUNqRSx5Q0FBeUM7SUFDekMsSUFBSUMsTUFBTUYsaUJBQWlCRyxXQUFXLE1BQU0sTUFBTTtRQUM5QywwRUFBMEU7UUFDMUUscUVBQXFFO1FBQ3JFLCtDQUErQztRQUMvQ0gsaUJBQWlCRyxXQUFXLEdBQUdGLGdCQUFnQkUsV0FBVztRQUMxREgsaUJBQWlCTSxXQUFXLEdBQUdMLGdCQUFnQkssV0FBVztRQUMxRE4saUJBQWlCTyxTQUFTLEdBQUdOLGdCQUFnQk0sU0FBUztRQUN0RFAsaUJBQWlCSSxTQUFTLEdBQUdILGdCQUFnQkcsU0FBUztRQUN0REosaUJBQWlCUSxTQUFTLEdBQUdQLGdCQUFnQk8sU0FBUztRQUN0RFIsaUJBQWlCUyxPQUFPLEdBQUdSLGdCQUFnQlEsT0FBTztJQUN0RCxPQUtLLElBQUlULGlCQUFpQkksU0FBUyxHQUFHSCxnQkFBZ0JHLFNBQVMsS0FBSyxNQUFNO1FBQ3RFSixpQkFBaUJJLFNBQVMsR0FBR0gsZ0JBQWdCRyxTQUFTO1FBQ3RESixpQkFBaUJRLFNBQVMsR0FBR1AsZ0JBQWdCTyxTQUFTO1FBQ3REUixpQkFBaUJTLE9BQU8sR0FBR1IsZ0JBQWdCUSxPQUFPO0lBQ3REO0FBQ0o7QUFDTyxTQUFTQyxpQkFBaUJDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxhQUFhO0lBQ3ZELElBQUlGLEtBQUtHLFFBQVEsQ0FBQ0QsY0FBYyxLQUFLRSxXQUFXO1FBQzVDSixLQUFLRyxRQUFRLENBQUNELGNBQWMsR0FBRztZQUFDRDtTQUFNO0lBQzFDLE9BQ0s7UUFDREQsS0FBS0csUUFBUSxDQUFDRCxjQUFjLENBQUNHLElBQUksQ0FBQ0o7SUFDdEM7QUFDSjtBQUNPLFNBQVNLLHFCQUFxQk4sSUFBSSxFQUFFTyxRQUFRLEVBQUVDLFVBQVU7SUFDM0QsSUFBSVIsS0FBS0csUUFBUSxDQUFDSSxTQUFTLEtBQUtILFdBQVc7UUFDdkNKLEtBQUtHLFFBQVEsQ0FBQ0ksU0FBUyxHQUFHO1lBQUNDO1NBQVc7SUFDMUMsT0FDSztRQUNEUixLQUFLRyxRQUFRLENBQUNJLFNBQVMsQ0FBQ0YsSUFBSSxDQUFDRztJQUNqQztBQUNKLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2NzdC9jc3QuanM/ZGVlYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbm9kZUxvY2F0aW9uIHRyYWNraW5nIGlzIG5vdCBlZmZpY2llbnQgYW5kIHNob3VsZCBvbmx5IGJlIHVzZWRcbiAqIHdoZW4gZXJyb3IgcmVjb3ZlcnkgaXMgZW5hYmxlZCBvciB0aGUgVG9rZW4gVmVjdG9yIGNvbnRhaW5zIHZpcnR1YWwgVG9rZW5zXG4gKiAoZS5nLCBQeXRob24gSW5kZW50L091dGRlbnQpXG4gKiBBcyBpdCBleGVjdXRlcyB0aGUgY2FsY3VsYXRpb24gZm9yIGV2ZXJ5IHNpbmdsZSB0ZXJtaW5hbC9ub25UZXJtaW5hbFxuICogYW5kIGRvZXMgbm90IHJlbHkgb24gdGhlIGZhY3QgdGhlIHRva2VuIHZlY3RvciBpcyAqKnNvcnRlZCoqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXROb2RlTG9jYXRpb25Pbmx5T2Zmc2V0KGN1cnJOb2RlTG9jYXRpb24sIG5ld0xvY2F0aW9uSW5mbykge1xuICAgIC8vIEZpcnN0ICh2YWxpZCkgdXBkYXRlIGZvciB0aGlzIGNzdCBub2RlXG4gICAgaWYgKGlzTmFOKGN1cnJOb2RlTG9jYXRpb24uc3RhcnRPZmZzZXQpID09PSB0cnVlKSB7XG4gICAgICAgIC8vIGFzc3VtcHRpb24xOiBUb2tlbiBsb2NhdGlvbiBpbmZvcm1hdGlvbiBpcyBlaXRoZXIgTmFOIG9yIGEgdmFsaWQgbnVtYmVyXG4gICAgICAgIC8vIGFzc3VtcHRpb24yOiBUb2tlbiBsb2NhdGlvbiBpbmZvcm1hdGlvbiBpcyBmdWxseSB2YWxpZCBpZiBpdCBleGlzdFxuICAgICAgICAvLyAoYm90aCBzdGFydC9lbmQgb2Zmc2V0cyBleGlzdCBhbmQgYXJlIG51bWJlcnMpLlxuICAgICAgICBjdXJyTm9kZUxvY2F0aW9uLnN0YXJ0T2Zmc2V0ID0gbmV3TG9jYXRpb25JbmZvLnN0YXJ0T2Zmc2V0O1xuICAgICAgICBjdXJyTm9kZUxvY2F0aW9uLmVuZE9mZnNldCA9IG5ld0xvY2F0aW9uSW5mby5lbmRPZmZzZXQ7XG4gICAgfVxuICAgIC8vIE9uY2UgdGhlIHN0YXJ0T2Zmc2V0IGhhcyBiZWVuIHVwZGF0ZWQgd2l0aCBhIHZhbGlkIG51bWJlciBpdCBzaG91bGQgbmV2ZXIgcmVjZWl2ZVxuICAgIC8vIGFueSBmYXJ0aGVyIHVwZGF0ZXMgYXMgdGhlIFRva2VuIHZlY3RvciBpcyBzb3J0ZWQuXG4gICAgLy8gV2Ugc3RpbGwgaGF2ZSB0byBjaGVjayB0aGlzIHRoaXMgY29uZGl0aW9uIGZvciBldmVyeSBuZXcgcG9zc2libGUgbG9jYXRpb24gaW5mb1xuICAgIC8vIGJlY2F1c2Ugd2l0aCBlcnJvciByZWNvdmVyeSBlbmFibGVkIHdlIG1heSBlbmNvdW50ZXIgaW52YWxpZCB0b2tlbnMgKE5hTiBsb2NhdGlvbiBwcm9wcylcbiAgICBlbHNlIGlmIChjdXJyTm9kZUxvY2F0aW9uLmVuZE9mZnNldCA8IG5ld0xvY2F0aW9uSW5mby5lbmRPZmZzZXQgPT09IHRydWUpIHtcbiAgICAgICAgY3Vyck5vZGVMb2NhdGlvbi5lbmRPZmZzZXQgPSBuZXdMb2NhdGlvbkluZm8uZW5kT2Zmc2V0O1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBub2RlTG9jYXRpb24gdHJhY2tpbmcgaXMgbm90IGVmZmljaWVudCBhbmQgc2hvdWxkIG9ubHkgYmUgdXNlZFxuICogd2hlbiBlcnJvciByZWNvdmVyeSBpcyBlbmFibGVkIG9yIHRoZSBUb2tlbiBWZWN0b3IgY29udGFpbnMgdmlydHVhbCBUb2tlbnNcbiAqIChlLmcsIFB5dGhvbiBJbmRlbnQvT3V0ZGVudClcbiAqIEFzIGl0IGV4ZWN1dGVzIHRoZSBjYWxjdWxhdGlvbiBmb3IgZXZlcnkgc2luZ2xlIHRlcm1pbmFsL25vblRlcm1pbmFsXG4gKiBhbmQgZG9lcyBub3QgcmVseSBvbiB0aGUgZmFjdCB0aGUgdG9rZW4gdmVjdG9yIGlzICoqc29ydGVkKipcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldE5vZGVMb2NhdGlvbkZ1bGwoY3Vyck5vZGVMb2NhdGlvbiwgbmV3TG9jYXRpb25JbmZvKSB7XG4gICAgLy8gRmlyc3QgKHZhbGlkKSB1cGRhdGUgZm9yIHRoaXMgY3N0IG5vZGVcbiAgICBpZiAoaXNOYU4oY3Vyck5vZGVMb2NhdGlvbi5zdGFydE9mZnNldCkgPT09IHRydWUpIHtcbiAgICAgICAgLy8gYXNzdW1wdGlvbjE6IFRva2VuIGxvY2F0aW9uIGluZm9ybWF0aW9uIGlzIGVpdGhlciBOYU4gb3IgYSB2YWxpZCBudW1iZXJcbiAgICAgICAgLy8gYXNzdW1wdGlvbjI6IFRva2VuIGxvY2F0aW9uIGluZm9ybWF0aW9uIGlzIGZ1bGx5IHZhbGlkIGlmIGl0IGV4aXN0XG4gICAgICAgIC8vIChhbGwgc3RhcnQvZW5kIHByb3BzIGV4aXN0IGFuZCBhcmUgbnVtYmVycykuXG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uc3RhcnRPZmZzZXQgPSBuZXdMb2NhdGlvbkluZm8uc3RhcnRPZmZzZXQ7XG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uc3RhcnRDb2x1bW4gPSBuZXdMb2NhdGlvbkluZm8uc3RhcnRDb2x1bW47XG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uc3RhcnRMaW5lID0gbmV3TG9jYXRpb25JbmZvLnN0YXJ0TGluZTtcbiAgICAgICAgY3Vyck5vZGVMb2NhdGlvbi5lbmRPZmZzZXQgPSBuZXdMb2NhdGlvbkluZm8uZW5kT2Zmc2V0O1xuICAgICAgICBjdXJyTm9kZUxvY2F0aW9uLmVuZENvbHVtbiA9IG5ld0xvY2F0aW9uSW5mby5lbmRDb2x1bW47XG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uZW5kTGluZSA9IG5ld0xvY2F0aW9uSW5mby5lbmRMaW5lO1xuICAgIH1cbiAgICAvLyBPbmNlIHRoZSBzdGFydCBwcm9wcyBoYXMgYmVlbiB1cGRhdGVkIHdpdGggYSB2YWxpZCBudW1iZXIgaXQgc2hvdWxkIG5ldmVyIHJlY2VpdmVcbiAgICAvLyBhbnkgZmFydGhlciB1cGRhdGVzIGFzIHRoZSBUb2tlbiB2ZWN0b3IgaXMgc29ydGVkLlxuICAgIC8vIFdlIHN0aWxsIGhhdmUgdG8gY2hlY2sgdGhpcyB0aGlzIGNvbmRpdGlvbiBmb3IgZXZlcnkgbmV3IHBvc3NpYmxlIGxvY2F0aW9uIGluZm9cbiAgICAvLyBiZWNhdXNlIHdpdGggZXJyb3IgcmVjb3ZlcnkgZW5hYmxlZCB3ZSBtYXkgZW5jb3VudGVyIGludmFsaWQgdG9rZW5zIChOYU4gbG9jYXRpb24gcHJvcHMpXG4gICAgZWxzZSBpZiAoY3Vyck5vZGVMb2NhdGlvbi5lbmRPZmZzZXQgPCBuZXdMb2NhdGlvbkluZm8uZW5kT2Zmc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIGN1cnJOb2RlTG9jYXRpb24uZW5kT2Zmc2V0ID0gbmV3TG9jYXRpb25JbmZvLmVuZE9mZnNldDtcbiAgICAgICAgY3Vyck5vZGVMb2NhdGlvbi5lbmRDb2x1bW4gPSBuZXdMb2NhdGlvbkluZm8uZW5kQ29sdW1uO1xuICAgICAgICBjdXJyTm9kZUxvY2F0aW9uLmVuZExpbmUgPSBuZXdMb2NhdGlvbkluZm8uZW5kTGluZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkVGVybWluYWxUb0NzdChub2RlLCB0b2tlbiwgdG9rZW5UeXBlTmFtZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuW3Rva2VuVHlwZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZS5jaGlsZHJlblt0b2tlblR5cGVOYW1lXSA9IFt0b2tlbl07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub2RlLmNoaWxkcmVuW3Rva2VuVHlwZU5hbWVdLnB1c2godG9rZW4pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGROb25lVGVybWluYWxUb0NzdChub2RlLCBydWxlTmFtZSwgcnVsZVJlc3VsdCkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuW3J1bGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW5bcnVsZU5hbWVdID0gW3J1bGVSZXN1bHRdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5jaGlsZHJlbltydWxlTmFtZV0ucHVzaChydWxlUmVzdWx0KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3QuanMubWFwIl0sIm5hbWVzIjpbInNldE5vZGVMb2NhdGlvbk9ubHlPZmZzZXQiLCJjdXJyTm9kZUxvY2F0aW9uIiwibmV3TG9jYXRpb25JbmZvIiwiaXNOYU4iLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsInNldE5vZGVMb2NhdGlvbkZ1bGwiLCJzdGFydENvbHVtbiIsInN0YXJ0TGluZSIsImVuZENvbHVtbiIsImVuZExpbmUiLCJhZGRUZXJtaW5hbFRvQ3N0Iiwibm9kZSIsInRva2VuIiwidG9rZW5UeXBlTmFtZSIsImNoaWxkcmVuIiwidW5kZWZpbmVkIiwicHVzaCIsImFkZE5vbmVUZXJtaW5hbFRvQ3N0IiwicnVsZU5hbWUiLCJydWxlUmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js":
/*!******************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CstVisitorDefinitionError: () => (/* binding */ CstVisitorDefinitionError),\n/* harmony export */   createBaseSemanticVisitorConstructor: () => (/* binding */ createBaseSemanticVisitorConstructor),\n/* harmony export */   createBaseVisitorConstructorWithDefaults: () => (/* binding */ createBaseVisitorConstructorWithDefaults),\n/* harmony export */   defaultVisit: () => (/* binding */ defaultVisit),\n/* harmony export */   validateMissingCstMethods: () => (/* binding */ validateMissingCstMethods),\n/* harmony export */   validateVisitor: () => (/* binding */ validateVisitor)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/keys.js\");\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/filter.js\");\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isFunction.js\");\n/* harmony import */ var _barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=compact,filter,forEach,isArray,isEmpty,isFunction,isUndefined,keys,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/compact.js\");\n/* harmony import */ var _lang_lang_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lang/lang_extensions.js */ \"(ssr)/./node_modules/chevrotain/lib/src/lang/lang_extensions.js\");\n\n\nfunction defaultVisit(ctx, param) {\n    const childrenNames = (0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(ctx);\n    const childrenNamesLength = childrenNames.length;\n    for(let i = 0; i < childrenNamesLength; i++){\n        const currChildName = childrenNames[i];\n        const currChildArray = ctx[currChildName];\n        const currChildArrayLength = currChildArray.length;\n        for(let j = 0; j < currChildArrayLength; j++){\n            const currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                this[currChild.name](currChild.children, param);\n            }\n        }\n    }\n// defaultVisit does not support generic out param\n}\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    const derivedConstructor = function() {};\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    (0,_lang_lang_extensions_js__WEBPACK_IMPORTED_MODULE_0__.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n    const semanticProto = {\n        visit: function(cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if ((0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if ((0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(cstNode)) {\n                return undefined;\n            }\n            return this[cstNode.name](cstNode.children, param);\n        },\n        validateVisitor: function() {\n            const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!(0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(semanticDefinitionErrors)) {\n                const errorMessages = (0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(semanticDefinitionErrors, (currDefError)=>currDefError.msg);\n                throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` + `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\t\")}`);\n            }\n        }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    const derivedConstructor = function() {};\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    (0,_lang_lang_extensions_js__WEBPACK_IMPORTED_MODULE_0__.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    const withDefaultsProto = Object.create(baseConstructor.prototype);\n    (0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ruleNames, (ruleName)=>{\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nvar CstVisitorDefinitionError;\n(function(CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\nfunction validateVisitor(visitorInstance, ruleNames) {\n    const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    return missingErrors;\n}\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n    const missingRuleNames = (0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(ruleNames, (currRuleName)=>{\n        return (0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(visitorInstance[currRuleName]) === false;\n    });\n    const errors = (0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(missingRuleNames, (currRuleName)=>{\n        return {\n            msg: `Missing visitor method: <${currRuleName}> on ${visitorInstance.constructor.name} CST Visitor.`,\n            type: CstVisitorDefinitionError.MISSING_METHOD,\n            methodName: currRuleName\n        };\n    });\n    return (0,_barrel_optimize_names_compact_filter_forEach_isArray_isEmpty_isFunction_isUndefined_keys_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(errors);\n} //# sourceMappingURL=cst_visitor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/errors_public.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultGrammarResolverErrorProvider: () => (/* binding */ defaultGrammarResolverErrorProvider),\n/* harmony export */   defaultGrammarValidatorErrorProvider: () => (/* binding */ defaultGrammarValidatorErrorProvider),\n/* harmony export */   defaultParserErrorProvider: () => (/* binding */ defaultParserErrorProvider)\n/* harmony export */ });\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=first,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n/* harmony import */ var _barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=first,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var _barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=first,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\nconst defaultParserErrorProvider = {\n    buildMismatchTokenMessage ({ expected, actual, previous, ruleName }) {\n        const hasLabel = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.hasTokenLabel)(expected);\n        const expectedMsg = hasLabel ? `--> ${(0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(expected)} <--` : `token of type --> ${expected.name} <--`;\n        const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n        return msg;\n    },\n    buildNotAllInputParsedMessage ({ firstRedundant, ruleName }) {\n        return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n    },\n    buildNoViableAltMessage ({ expectedPathsPerAlt, actual, previous, customUserDescription, ruleName }) {\n        const errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        const actualText = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(actual).image;\n        const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        } else {\n            const allLookAheadPaths = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(expectedPathsPerAlt, (result, currAltPaths)=>result.concat(currAltPaths), []);\n            const nextValidTokenSequences = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(allLookAheadPaths, (currPath)=>`[${(0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currPath, (currTokenType)=>(0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(currTokenType)).join(\", \")}]`);\n            const nextValidSequenceItems = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(nextValidTokenSequences, (itemMsg, idx)=>`  ${idx + 1}. ${itemMsg}`);\n            const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\"\\n\")}`;\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    },\n    buildEarlyExitMessage ({ expectedIterationPaths, actual, customUserDescription, ruleName }) {\n        const errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        const actualText = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(actual).image;\n        const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        } else {\n            const nextValidTokenSequences = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(expectedIterationPaths, (currPath)=>`[${(0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currPath, (currTokenType)=>(0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(currTokenType)).join(\",\")}]`);\n            const calculatedDescription = `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` + `<${nextValidTokenSequences.join(\" ,\")}>`;\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    }\n};\nObject.freeze(defaultParserErrorProvider);\nconst defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError (topLevelRule, undefinedRule) {\n        const msg = \"Invalid grammar, reference to a rule which is not defined: ->\" + undefinedRule.nonTerminalName + \"<-\\n\" + \"inside top level rule: ->\" + topLevelRule.name + \"<-\";\n        return msg;\n    }\n};\nconst defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError (topLevelRule, duplicateProds) {\n        function getExtraProductionArgument(prod) {\n            if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Terminal) {\n                return prod.terminalType.name;\n            } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.NonTerminal) {\n                return prod.nonTerminalName;\n            } else {\n                return \"\";\n            }\n        }\n        const topLevelName = topLevelRule.name;\n        const duplicateProd = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(duplicateProds);\n        const index = duplicateProd.idx;\n        const dslName = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.getProductionDslName)(duplicateProd);\n        const extraArgument = getExtraProductionArgument(duplicateProd);\n        const hasExplicitIndex = index > 0;\n        let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${extraArgument ? `with argument: ->${extraArgument}<-` : \"\"}\n                  appears more than once (${duplicateProds.length} times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n        // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n        msg = msg.replace(/[ \\t]+/g, \" \");\n        msg = msg.replace(/\\s\\s+/g, \"\\n\");\n        return msg;\n    },\n    buildNamespaceConflictError (rule) {\n        const errMsg = `Namespace conflict found in grammar.\\n` + `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` + `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` + `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` + `and Non-Terminal names start with a lower case letter.`;\n        return errMsg;\n    },\n    buildAlternationPrefixAmbiguityError (options) {\n        const pathMsg = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options.prefixPath, (currTok)=>(0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(currTok)).join(\", \");\n        const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        const errMsg = `Ambiguous alternatives: <${options.ambiguityIndices.join(\" ,\")}> due to common lookahead prefix\\n` + `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` + `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` + `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` + `For Further details.`;\n        return errMsg;\n    },\n    buildAlternationAmbiguityError (options) {\n        const pathMsg = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options.prefixPath, (currtok)=>(0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenLabel)(currtok)).join(\", \");\n        const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        let currMessage = `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\" ,\")}> in <OR${occurrence}>` + ` inside <${options.topLevelRule.name}> Rule,\\n` + `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n        currMessage = currMessage + `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` + `For Further details.`;\n        return currMessage;\n    },\n    buildEmptyRepetitionError (options) {\n        let dslName = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.getProductionDslName)(options.repetition);\n        if (options.repetition.idx !== 0) {\n            dslName += options.repetition.idx;\n        }\n        const errMsg = `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` + `This could lead to an infinite loop.`;\n        return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError (options) {\n        /* istanbul ignore next */ return \"deprecated\";\n    },\n    buildEmptyAlternationError (options) {\n        const errMsg = `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` + ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` + `Only the last alternative may be an empty alternative.`;\n        return errMsg;\n    },\n    buildTooManyAlternativesError (options) {\n        const errMsg = `An Alternation cannot have more than 256 alternatives:\\n` + `<OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n has ${options.alternation.definition.length + 1} alternatives.`;\n        return errMsg;\n    },\n    buildLeftRecursionError (options) {\n        const ruleName = options.topLevelRule.name;\n        const pathNames = (0,_barrel_optimize_names_first_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options.leftRecursionPath, (currRule)=>currRule.name);\n        const leftRecursivePath = `${ruleName} --> ${pathNames.concat([\n            ruleName\n        ]).join(\" --> \")}`;\n        const errMsg = `Left Recursion found in grammar.\\n` + `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` + `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` + ` To fix this refactor your grammar to remove the left recursion.\\n` + `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n        return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError (options) {\n        /* istanbul ignore next */ return \"deprecated\";\n    },\n    buildDuplicateRuleNameError (options) {\n        let ruleName;\n        if (options.topLevelRule instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Rule) {\n            ruleName = options.topLevelRule.name;\n        } else {\n            ruleName = options.topLevelRule;\n        }\n        const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n        return errMsg;\n    }\n}; //# sourceMappingURL=errors_public.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js":
/*!********************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/exceptions_public.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EarlyExitException: () => (/* binding */ EarlyExitException),\n/* harmony export */   MismatchedTokenException: () => (/* binding */ MismatchedTokenException),\n/* harmony export */   NoViableAltException: () => (/* binding */ NoViableAltException),\n/* harmony export */   NotAllInputParsedException: () => (/* binding */ NotAllInputParsedException),\n/* harmony export */   isRecognitionException: () => (/* binding */ isRecognitionException)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_includes_lodash_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=includes!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nconst RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nfunction isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return (0,_barrel_optimize_names_includes_lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nclass RecognitionException extends Error {\n    constructor(message, token){\n        super(message);\n        this.token = token;\n        this.resyncedTokens = [];\n        // fix prototype chain when typescript target is ES5\n        Object.setPrototypeOf(this, new.target.prototype);\n        /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */ if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nclass MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken){\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = MISMATCHED_TOKEN_EXCEPTION;\n    }\n}\nclass NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken){\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = NO_VIABLE_ALT_EXCEPTION;\n    }\n}\nclass NotAllInputParsedException extends RecognitionException {\n    constructor(message, token){\n        super(message, token);\n        this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    }\n}\nclass EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken){\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = EARLY_EXIT_EXCEPTION;\n    }\n} //# sourceMappingURL=exceptions_public.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2V4Y2VwdGlvbnNfcHVibGljLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxQztBQUNyQyxNQUFNQyw2QkFBNkI7QUFDbkMsTUFBTUMsMEJBQTBCO0FBQ2hDLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyxpQ0FBaUM7QUFDdkMsTUFBTUMsOEJBQThCO0lBQ2hDSjtJQUNBQztJQUNBQztJQUNBQztDQUNIO0FBQ0RFLE9BQU9DLE1BQU0sQ0FBQ0Y7QUFDZCx3RUFBd0U7QUFDakUsU0FBU0csdUJBQXVCQyxLQUFLO0lBQ3hDLHFEQUFxRDtJQUNyRCxPQUFPVCxxRkFBUUEsQ0FBQ0ssNkJBQTZCSSxNQUFNQyxJQUFJO0FBQzNEO0FBQ0EsTUFBTUMsNkJBQTZCQztJQUMvQkMsWUFBWUMsT0FBTyxFQUFFQyxLQUFLLENBQUU7UUFDeEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsY0FBYyxHQUFHLEVBQUU7UUFDeEIsb0RBQW9EO1FBQ3BEVixPQUFPVyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVdDLFNBQVM7UUFDaEQsNEdBQTRHLEdBQzVHLElBQUlOLE1BQU1PLGlCQUFpQixFQUFFO1lBQ3pCUCxNQUFNTyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDTixXQUFXO1FBQ2xEO0lBQ0o7QUFDSjtBQUNPLE1BQU1PLGlDQUFpQ1Q7SUFDMUNFLFlBQVlDLE9BQU8sRUFBRUMsS0FBSyxFQUFFTSxhQUFhLENBQUU7UUFDdkMsS0FBSyxDQUFDUCxTQUFTQztRQUNmLElBQUksQ0FBQ00sYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNYLElBQUksR0FBR1Q7SUFDaEI7QUFDSjtBQUNPLE1BQU1xQiw2QkFBNkJYO0lBQ3RDRSxZQUFZQyxPQUFPLEVBQUVDLEtBQUssRUFBRU0sYUFBYSxDQUFFO1FBQ3ZDLEtBQUssQ0FBQ1AsU0FBU0M7UUFDZixJQUFJLENBQUNNLGFBQWEsR0FBR0E7UUFDckIsSUFBSSxDQUFDWCxJQUFJLEdBQUdSO0lBQ2hCO0FBQ0o7QUFDTyxNQUFNcUIsbUNBQW1DWjtJQUM1Q0UsWUFBWUMsT0FBTyxFQUFFQyxLQUFLLENBQUU7UUFDeEIsS0FBSyxDQUFDRCxTQUFTQztRQUNmLElBQUksQ0FBQ0wsSUFBSSxHQUFHTjtJQUNoQjtBQUNKO0FBQ08sTUFBTW9CLDJCQUEyQmI7SUFDcENFLFlBQVlDLE9BQU8sRUFBRUMsS0FBSyxFQUFFTSxhQUFhLENBQUU7UUFDdkMsS0FBSyxDQUFDUCxTQUFTQztRQUNmLElBQUksQ0FBQ00sYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNYLElBQUksR0FBR1A7SUFDaEI7QUFDSixFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9wYXJzZS9leGNlcHRpb25zX3B1YmxpYy5qcz83ZWI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluY2x1ZGVzIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuY29uc3QgTUlTTUFUQ0hFRF9UT0tFTl9FWENFUFRJT04gPSBcIk1pc21hdGNoZWRUb2tlbkV4Y2VwdGlvblwiO1xuY29uc3QgTk9fVklBQkxFX0FMVF9FWENFUFRJT04gPSBcIk5vVmlhYmxlQWx0RXhjZXB0aW9uXCI7XG5jb25zdCBFQVJMWV9FWElUX0VYQ0VQVElPTiA9IFwiRWFybHlFeGl0RXhjZXB0aW9uXCI7XG5jb25zdCBOT1RfQUxMX0lOUFVUX1BBUlNFRF9FWENFUFRJT04gPSBcIk5vdEFsbElucHV0UGFyc2VkRXhjZXB0aW9uXCI7XG5jb25zdCBSRUNPR05JVElPTl9FWENFUFRJT05fTkFNRVMgPSBbXG4gICAgTUlTTUFUQ0hFRF9UT0tFTl9FWENFUFRJT04sXG4gICAgTk9fVklBQkxFX0FMVF9FWENFUFRJT04sXG4gICAgRUFSTFlfRVhJVF9FWENFUFRJT04sXG4gICAgTk9UX0FMTF9JTlBVVF9QQVJTRURfRVhDRVBUSU9OLFxuXTtcbk9iamVjdC5mcmVlemUoUkVDT0dOSVRJT05fRVhDRVBUSU9OX05BTUVTKTtcbi8vIGhhY2tzIHRvIGJ5cGFzcyBubyBzdXBwb3J0IGZvciBjdXN0b20gRXJyb3JzIGluIGphdmFzY3JpcHQvdHlwZXNjcmlwdFxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVjb2duaXRpb25FeGNlcHRpb24oZXJyb3IpIHtcbiAgICAvLyBjYW4ndCBkbyBpbnN0YW5jZW9mIG9uIGhhY2tlZCBjdXN0b20ganMgZXhjZXB0aW9uc1xuICAgIHJldHVybiBpbmNsdWRlcyhSRUNPR05JVElPTl9FWENFUFRJT05fTkFNRVMsIGVycm9yLm5hbWUpO1xufVxuY2xhc3MgUmVjb2duaXRpb25FeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgdG9rZW4pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5yZXN5bmNlZFRva2VucyA9IFtdO1xuICAgICAgICAvLyBmaXggcHJvdG90eXBlIGNoYWluIHdoZW4gdHlwZXNjcmlwdCB0YXJnZXQgaXMgRVM1XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gVjggd29ya2Fyb3VuZCB0byByZW1vdmUgY29uc3RydWN0b3IgZnJvbSBzdGFja3RyYWNlIHdoZW4gdHlwZXNjcmlwdCB0YXJnZXQgaXMgRVM1ICovXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWlzbWF0Y2hlZFRva2VuRXhjZXB0aW9uIGV4dGVuZHMgUmVjb2duaXRpb25FeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHRva2VuLCBwcmV2aW91c1Rva2VuKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHRva2VuKTtcbiAgICAgICAgdGhpcy5wcmV2aW91c1Rva2VuID0gcHJldmlvdXNUb2tlbjtcbiAgICAgICAgdGhpcy5uYW1lID0gTUlTTUFUQ0hFRF9UT0tFTl9FWENFUFRJT047XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5vVmlhYmxlQWx0RXhjZXB0aW9uIGV4dGVuZHMgUmVjb2duaXRpb25FeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHRva2VuLCBwcmV2aW91c1Rva2VuKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHRva2VuKTtcbiAgICAgICAgdGhpcy5wcmV2aW91c1Rva2VuID0gcHJldmlvdXNUb2tlbjtcbiAgICAgICAgdGhpcy5uYW1lID0gTk9fVklBQkxFX0FMVF9FWENFUFRJT047XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5vdEFsbElucHV0UGFyc2VkRXhjZXB0aW9uIGV4dGVuZHMgUmVjb2duaXRpb25FeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHRva2VuKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHRva2VuKTtcbiAgICAgICAgdGhpcy5uYW1lID0gTk9UX0FMTF9JTlBVVF9QQVJTRURfRVhDRVBUSU9OO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFYXJseUV4aXRFeGNlcHRpb24gZXh0ZW5kcyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgdG9rZW4sIHByZXZpb3VzVG9rZW4pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgdG9rZW4pO1xuICAgICAgICB0aGlzLnByZXZpb3VzVG9rZW4gPSBwcmV2aW91c1Rva2VuO1xuICAgICAgICB0aGlzLm5hbWUgPSBFQVJMWV9FWElUX0VYQ0VQVElPTjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGNlcHRpb25zX3B1YmxpYy5qcy5tYXAiXSwibmFtZXMiOlsiaW5jbHVkZXMiLCJNSVNNQVRDSEVEX1RPS0VOX0VYQ0VQVElPTiIsIk5PX1ZJQUJMRV9BTFRfRVhDRVBUSU9OIiwiRUFSTFlfRVhJVF9FWENFUFRJT04iLCJOT1RfQUxMX0lOUFVUX1BBUlNFRF9FWENFUFRJT04iLCJSRUNPR05JVElPTl9FWENFUFRJT05fTkFNRVMiLCJPYmplY3QiLCJmcmVlemUiLCJpc1JlY29nbml0aW9uRXhjZXB0aW9uIiwiZXJyb3IiLCJuYW1lIiwiUmVjb2duaXRpb25FeGNlcHRpb24iLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInRva2VuIiwicmVzeW5jZWRUb2tlbnMiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImNhcHR1cmVTdGFja1RyYWNlIiwiTWlzbWF0Y2hlZFRva2VuRXhjZXB0aW9uIiwicHJldmlvdXNUb2tlbiIsIk5vVmlhYmxlQWx0RXhjZXB0aW9uIiwiTm90QWxsSW5wdXRQYXJzZWRFeGNlcHRpb24iLCJFYXJseUV4aXRFeGNlcHRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js":
/*!*****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/checks.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OccurrenceValidationCollector: () => (/* binding */ OccurrenceValidationCollector),\n/* harmony export */   RepetitionCollector: () => (/* binding */ RepetitionCollector),\n/* harmony export */   checkPrefixAlternativesAmbiguities: () => (/* binding */ checkPrefixAlternativesAmbiguities),\n/* harmony export */   getFirstNoneTerminal: () => (/* binding */ getFirstNoneTerminal),\n/* harmony export */   identifyProductionForDuplicates: () => (/* binding */ identifyProductionForDuplicates),\n/* harmony export */   validateAmbiguousAlternationAlternatives: () => (/* binding */ validateAmbiguousAlternationAlternatives),\n/* harmony export */   validateEmptyOrAlternative: () => (/* binding */ validateEmptyOrAlternative),\n/* harmony export */   validateGrammar: () => (/* binding */ validateGrammar),\n/* harmony export */   validateLookahead: () => (/* binding */ validateLookahead),\n/* harmony export */   validateNoLeftRecursion: () => (/* binding */ validateNoLeftRecursion),\n/* harmony export */   validateRuleDoesNotAlreadyExist: () => (/* binding */ validateRuleDoesNotAlreadyExist),\n/* harmony export */   validateRuleIsOverridden: () => (/* binding */ validateRuleIsOverridden),\n/* harmony export */   validateSomeNonEmptyLookaheadPath: () => (/* binding */ validateSomeNonEmptyLookaheadPath),\n/* harmony export */   validateTooManyAlts: () => (/* binding */ validateTooManyAlts)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatMap.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/groupBy.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/pickBy.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/difference.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/drop.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/dropRight.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reject.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/compact.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,drop,dropRight,filter,first,flatMap,flatten,forEach,groupBy,includes,isEmpty,map,pickBy,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/filter.js\");\n/* harmony import */ var _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n/* harmony import */ var _lookahead_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _interpreter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interpreter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _scan_tokens_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../scan/tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n\n\n\n\n\n\nfunction validateLookahead(options) {\n    const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n        rules: options.rules,\n        tokenTypes: options.tokenTypes,\n        grammarName: options.grammarName\n    });\n    return (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(lookaheadValidationErrorMessages, (errorMessage)=>Object.assign({\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION\n        }, errorMessage));\n}\nfunction validateGrammar(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    const duplicateErrors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(topLevels, (currTopLevel)=>validateDuplicateProductions(currTopLevel, errMsgProvider));\n    const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    const tooManyAltsErrors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(topLevels, (curRule)=>validateTooManyAlts(curRule, errMsgProvider));\n    const duplicateRulesError = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(topLevels, (curRule)=>validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider));\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);\n}\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    const collectorVisitor = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    const productionGroups = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(allRuleProductions, identifyProductionForDuplicates);\n    const duplicates = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(productionGroups, (currGroup)=>{\n        return currGroup.length > 1;\n    });\n    const errors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(duplicates), (currDuplicates)=>{\n        const firstProd = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(currDuplicates);\n        const msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n        const dslName = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.getProductionDslName)(firstProd);\n        const defError = {\n            message: msg,\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n            ruleName: topLevelRule.name,\n            dslName: dslName,\n            occurrence: firstProd.idx\n        };\n        const param = getExtraProductionArgument(firstProd);\n        if (param) {\n            defError.parameter = param;\n        }\n        return defError;\n    });\n    return errors;\n}\nfunction identifyProductionForDuplicates(prod) {\n    return `${(0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.getProductionDslName)(prod)}_#_${prod.idx}_#_${getExtraProductionArgument(prod)}`;\n}\nfunction getExtraProductionArgument(prod) {\n    if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Terminal) {\n        return prod.terminalType.name;\n    } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.NonTerminal) {\n        return prod.nonTerminalName;\n    } else {\n        return \"\";\n    }\n}\nclass OccurrenceValidationCollector extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.GAstVisitor {\n    constructor(){\n        super(...arguments);\n        this.allProductions = [];\n    }\n    visitNonTerminal(subrule) {\n        this.allProductions.push(subrule);\n    }\n    visitOption(option) {\n        this.allProductions.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.allProductions.push(many);\n    }\n    visitAlternation(or) {\n        this.allProductions.push(or);\n    }\n    visitTerminal(terminal) {\n        this.allProductions.push(terminal);\n    }\n}\nfunction validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    const errors = [];\n    const occurrences = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(allRules, (result, curRule)=>{\n        if (curRule.name === rule.name) {\n            return result + 1;\n        }\n        return result;\n    }, 0);\n    if (occurrences > 1) {\n        const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n            topLevelRule: rule,\n            grammarName: className\n        });\n        errors.push({\n            message: errMsg,\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n            ruleName: rule.name\n        });\n    }\n    return errors;\n}\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nfunction validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    const errors = [];\n    let errMsg;\n    if (!(0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(definedRulesNames, ruleName)) {\n        errMsg = `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` + `as it is not defined in any of the super grammars `;\n        errors.push({\n            message: errMsg,\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n            ruleName: ruleName\n        });\n    }\n    return errors;\n}\nfunction validateNoLeftRecursion(topRule, currRule, errMsgProvider, path = []) {\n    const errors = [];\n    const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if ((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(nextNonTerminals)) {\n        return [];\n    } else {\n        const ruleName = topRule.name;\n        const foundLeftRecursion = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(nextNonTerminals, topRule);\n        if (foundLeftRecursion) {\n            errors.push({\n                message: errMsgProvider.buildLeftRecursionError({\n                    topLevelRule: topRule,\n                    leftRecursionPath: path\n                }),\n                type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.LEFT_RECURSION,\n                ruleName: ruleName\n            });\n        }\n        // we are only looking for cyclic paths leading back to the specific topRule\n        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n        const validNextSteps = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(nextNonTerminals, path.concat([\n            topRule\n        ]));\n        const errorsFromNextSteps = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(validNextSteps, (currRefRule)=>{\n            const newPath = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(path);\n            newPath.push(currRefRule);\n            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n        });\n        return errors.concat(errorsFromNextSteps);\n    }\n}\nfunction getFirstNoneTerminal(definition) {\n    let result = [];\n    if ((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(definition)) {\n        return result;\n    }\n    const firstProd = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(definition);\n    /* istanbul ignore else */ if (firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.NonTerminal) {\n        result.push(firstProd.referencedRule);\n    } else if (firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Alternative || firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Option || firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.RepetitionMandatory || firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.RepetitionMandatoryWithSeparator || firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.RepetitionWithSeparator || firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Repetition) {\n        result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    } else if (firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Alternation) {\n        // each sub definition in alternation is a FLAT\n        result = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(firstProd.definition, (currSubDef)=>getFirstNoneTerminal(currSubDef.definition)));\n    } else if (firstProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.Terminal) {\n    // nothing to see, move along\n    } else {\n        throw Error(\"non exhaustive match\");\n    }\n    const isFirstOptional = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.isOptionalProd)(firstProd);\n    const hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n        const rest = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(definition);\n        return result.concat(getFirstNoneTerminal(rest));\n    } else {\n        return result;\n    }\n}\nclass OrCollector extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.GAstVisitor {\n    constructor(){\n        super(...arguments);\n        this.alternations = [];\n    }\n    visitAlternation(node) {\n        this.alternations.push(node);\n    }\n}\nfunction validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ors, (currOr)=>{\n        const exceptLast = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(currOr.definition);\n        return (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(exceptLast, (currAlternative, currAltIdx)=>{\n            const possibleFirstInAlt = (0,_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.nextPossibleTokensAfter)([\n                currAlternative\n            ], [], _scan_tokens_js__WEBPACK_IMPORTED_MODULE_4__.tokenStructuredMatcher, 1);\n            if ((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(possibleFirstInAlt)) {\n                return [\n                    {\n                        message: errMsgProvider.buildEmptyAlternationError({\n                            topLevelRule: topLevelRule,\n                            alternation: currOr,\n                            emptyChoiceIdx: currAltIdx\n                        }),\n                        type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n                        ruleName: topLevelRule.name,\n                        occurrence: currOr.idx,\n                        alternative: currAltIdx + 1\n                    }\n                ];\n            } else {\n                return [];\n            }\n        });\n    });\n    return errors;\n}\nfunction validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    let ors = orCollector.alternations;\n    // New Handling of ignoring ambiguities\n    // - https://github.com/chevrotain/chevrotain/issues/869\n    ors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(ors, (currOr)=>currOr.ignoreAmbiguities === true);\n    const errors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ors, (currOr)=>{\n        const currOccurrence = currOr.idx;\n        const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n        const alternatives = (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.getLookaheadPathsForOr)(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n        const altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n    });\n    return errors;\n}\nclass RepetitionCollector extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.GAstVisitor {\n    constructor(){\n        super(...arguments);\n        this.allProductions = [];\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.allProductions.push(many);\n    }\n}\nfunction validateTooManyAlts(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ors, (currOr)=>{\n        if (currOr.definition.length > 255) {\n            return [\n                {\n                    message: errMsgProvider.buildTooManyAlternativesError({\n                        topLevelRule: topLevelRule,\n                        alternation: currOr\n                    }),\n                    type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.TOO_MANY_ALTS,\n                    ruleName: topLevelRule.name,\n                    occurrence: currOr.idx\n                }\n            ];\n        } else {\n            return [];\n        }\n    });\n    return errors;\n}\nfunction validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    const errors = [];\n    (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(topLevelRules, (currTopRule)=>{\n        const collectorVisitor = new RepetitionCollector();\n        currTopRule.accept(collectorVisitor);\n        const allRuleProductions = collectorVisitor.allProductions;\n        (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(allRuleProductions, (currProd)=>{\n            const prodType = (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.getProdType)(currProd);\n            const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n            const currOccurrence = currProd.idx;\n            const paths = (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.getLookaheadPathsForOptionalProd)(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n            const pathsInsideProduction = paths[0];\n            if ((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(pathsInsideProduction))) {\n                const errMsg = errMsgProvider.buildEmptyRepetitionError({\n                    topLevelRule: currTopRule,\n                    repetition: currProd\n                });\n                errors.push({\n                    message: errMsg,\n                    type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n                    ruleName: currTopRule.name\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const foundAmbiguousPaths = [];\n    const identicalAmbiguities = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(alternatives, (result, currAlt, currAltIdx)=>{\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n            return result;\n        }\n        (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(currAlt, (currPath)=>{\n            const altsCurrPathAppearsIn = [\n                currAltIdx\n            ];\n            (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(alternatives, (currOtherAlt, currOtherAltIdx)=>{\n                if (currAltIdx !== currOtherAltIdx && (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.containsPath)(currOtherAlt, currPath) && // ignore (skip) ambiguities with this \"other\" alternative\n                alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n                    altsCurrPathAppearsIn.push(currOtherAltIdx);\n                }\n            });\n            if (altsCurrPathAppearsIn.length > 1 && !(0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.containsPath)(foundAmbiguousPaths, currPath)) {\n                foundAmbiguousPaths.push(currPath);\n                result.push({\n                    alts: altsCurrPathAppearsIn,\n                    path: currPath\n                });\n            }\n        });\n        return result;\n    }, []);\n    const currErrors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(identicalAmbiguities, (currAmbDescriptor)=>{\n        const ambgIndices = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currAmbDescriptor.alts, (currAltIdx)=>currAltIdx + 1);\n        const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbDescriptor.path\n        });\n        return {\n            message: currMessage,\n            type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n            ruleName: rule.name,\n            occurrence: alternation.idx,\n            alternatives: currAmbDescriptor.alts\n        };\n    });\n    return currErrors;\n}\nfunction checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    // flatten\n    const pathsAndIndices = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(alternatives, (result, currAlt, idx)=>{\n        const currPathsAndIdx = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currAlt, (currPath)=>{\n            return {\n                idx: idx,\n                path: currPath\n            };\n        });\n        return result.concat(currPathsAndIdx);\n    }, []);\n    const errors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(pathsAndIndices, (currPathAndIdx)=>{\n        const alternativeGast = alternation.definition[currPathAndIdx.idx];\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n            return [];\n        }\n        const targetIdx = currPathAndIdx.idx;\n        const targetPath = currPathAndIdx.path;\n        const prefixAmbiguitiesPathsAndIndices = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(pathsAndIndices, (searchPathAndIdx)=>{\n            // prefix ambiguity can only be created from lower idx (higher priority) path\n            return(// ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true && searchPathAndIdx.idx < targetIdx && // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.isStrictPrefixOfPath)(searchPathAndIdx.path, targetPath));\n        });\n        const currPathPrefixErrors = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(prefixAmbiguitiesPathsAndIndices, (currAmbPathAndIdx)=>{\n            const ambgIndices = [\n                currAmbPathAndIdx.idx + 1,\n                targetIdx + 1\n            ];\n            const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n            const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n                topLevelRule: rule,\n                alternation: alternation,\n                ambiguityIndices: ambgIndices,\n                prefixPath: currAmbPathAndIdx.path\n            });\n            return {\n                message: message,\n                type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n                ruleName: rule.name,\n                occurrence: occurrence,\n                alternatives: ambgIndices\n            };\n        });\n        return currPathPrefixErrors;\n    }));\n    return errors;\n}\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    const errors = [];\n    const tokenNames = (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(tokenTypes, (currToken)=>currToken.name);\n    (0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(topLevels, (currRule)=>{\n        const currRuleName = currRule.name;\n        if ((0,_barrel_optimize_names_clone_compact_difference_drop_dropRight_filter_first_flatMap_flatten_forEach_groupBy_includes_isEmpty_map_pickBy_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(tokenNames, currRuleName)) {\n            const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n            errors.push({\n                message: errMsg,\n                type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n                ruleName: currRuleName\n            });\n        }\n    });\n    return errors;\n} //# sourceMappingURL=checks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/first.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/first.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   first: () => (/* binding */ first),\n/* harmony export */   firstForBranching: () => (/* binding */ firstForBranching),\n/* harmony export */   firstForSequence: () => (/* binding */ firstForSequence),\n/* harmony export */   firstForTerminal: () => (/* binding */ firstForTerminal)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_flatten_map_uniq_lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=flatten,map,uniq!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/uniq.js\");\n/* harmony import */ var _barrel_optimize_names_flatten_map_uniq_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=flatten,map,uniq!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_flatten_map_uniq_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=flatten,map,uniq!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\nfunction first(prod) {\n    /* istanbul ignore else */ if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.NonTerminal) {\n        // this could in theory cause infinite loops if\n        // (1) prod A refs prod B.\n        // (2) prod B refs prod A\n        // (3) AB can match the empty set\n        // in other words a cycle where everything is optional so the first will keep\n        // looking ahead for the next optional part and will never exit\n        // currently there is no safeguard for this unique edge case because\n        // (1) not sure a grammar in which this can happen is useful for anything (productive)\n        return first(prod.referencedRule);\n    } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Terminal) {\n        return firstForTerminal(prod);\n    } else if ((0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.isSequenceProd)(prod)) {\n        return firstForSequence(prod);\n    } else if ((0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.isBranchingProd)(prod)) {\n        return firstForBranching(prod);\n    } else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction firstForSequence(prod) {\n    let firstSet = [];\n    const seq = prod.definition;\n    let nextSubProdIdx = 0;\n    let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    let currSubProd;\n    // so we enter the loop at least once (if the definition is not empty\n    let isLastInnerProdOptional = true;\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while(hasInnerProdsRemaining && isLastInnerProdOptional){\n        currSubProd = seq[nextSubProdIdx];\n        isLastInnerProdOptional = (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.isOptionalProd)(currSubProd);\n        firstSet = firstSet.concat(first(currSubProd));\n        nextSubProdIdx = nextSubProdIdx + 1;\n        hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return (0,_barrel_optimize_names_flatten_map_uniq_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(firstSet);\n}\nfunction firstForBranching(prod) {\n    const allAlternativesFirsts = (0,_barrel_optimize_names_flatten_map_uniq_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(prod.definition, (innerProd)=>{\n        return first(innerProd);\n    });\n    return (0,_barrel_optimize_names_flatten_map_uniq_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_barrel_optimize_names_flatten_map_uniq_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(allAlternativesFirsts));\n}\nfunction firstForTerminal(terminal) {\n    return [\n        terminal.terminalType\n    ];\n} //# sourceMappingURL=first.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvZmlyc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0M7QUFDNEQ7QUFDcEcsU0FBU1EsTUFBTUMsSUFBSTtJQUN0Qix3QkFBd0IsR0FDeEIsSUFBSUEsZ0JBQWdCSCx5REFBV0EsRUFBRTtRQUM3QiwrQ0FBK0M7UUFDL0MsMEJBQTBCO1FBQzFCLHlCQUF5QjtRQUN6QixpQ0FBaUM7UUFDakMsNkVBQTZFO1FBQzdFLCtEQUErRDtRQUMvRCxvRUFBb0U7UUFDcEUsc0ZBQXNGO1FBQ3RGLE9BQU9FLE1BQU1DLEtBQUtDLGNBQWM7SUFDcEMsT0FDSyxJQUFJRCxnQkFBZ0JGLHNEQUFRQSxFQUFFO1FBQy9CLE9BQU9JLGlCQUFpQkY7SUFDNUIsT0FDSyxJQUFJSixnRUFBY0EsQ0FBQ0ksT0FBTztRQUMzQixPQUFPRyxpQkFBaUJIO0lBQzVCLE9BQ0ssSUFBSU4saUVBQWVBLENBQUNNLE9BQU87UUFDNUIsT0FBT0ksa0JBQWtCSjtJQUM3QixPQUNLO1FBQ0QsTUFBTUssTUFBTTtJQUNoQjtBQUNKO0FBQ08sU0FBU0YsaUJBQWlCSCxJQUFJO0lBQ2pDLElBQUlNLFdBQVcsRUFBRTtJQUNqQixNQUFNQyxNQUFNUCxLQUFLUSxVQUFVO0lBQzNCLElBQUlDLGlCQUFpQjtJQUNyQixJQUFJQyx5QkFBeUJILElBQUlJLE1BQU0sR0FBR0Y7SUFDMUMsSUFBSUc7SUFDSixxRUFBcUU7SUFDckUsSUFBSUMsMEJBQTBCO0lBQzlCLHlGQUF5RjtJQUN6RixNQUFPSCwwQkFBMEJHLHdCQUF5QjtRQUN0REQsY0FBY0wsR0FBRyxDQUFDRSxlQUFlO1FBQ2pDSSwwQkFBMEJsQixnRUFBY0EsQ0FBQ2lCO1FBQ3pDTixXQUFXQSxTQUFTUSxNQUFNLENBQUNmLE1BQU1hO1FBQ2pDSCxpQkFBaUJBLGlCQUFpQjtRQUNsQ0MseUJBQXlCSCxJQUFJSSxNQUFNLEdBQUdGO0lBQzFDO0lBQ0EsT0FBT2hCLDZGQUFJQSxDQUFDYTtBQUNoQjtBQUNPLFNBQVNGLGtCQUFrQkosSUFBSTtJQUNsQyxNQUFNZSx3QkFBd0J2Qiw2RkFBR0EsQ0FBQ1EsS0FBS1EsVUFBVSxFQUFFLENBQUNRO1FBQ2hELE9BQU9qQixNQUFNaUI7SUFDakI7SUFDQSxPQUFPdkIsNkZBQUlBLENBQUNGLDZGQUFPQSxDQUFDd0I7QUFDeEI7QUFDTyxTQUFTYixpQkFBaUJlLFFBQVE7SUFDckMsT0FBTztRQUFDQSxTQUFTQyxZQUFZO0tBQUM7QUFDbEMsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvZ3JhbW1hci9maXJzdC5qcz8zZmZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZsYXR0ZW4sIG1hcCwgdW5pcSB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IGlzQnJhbmNoaW5nUHJvZCwgaXNPcHRpb25hbFByb2QsIGlzU2VxdWVuY2VQcm9kLCBOb25UZXJtaW5hbCwgVGVybWluYWwsIH0gZnJvbSBcIkBjaGV2cm90YWluL2dhc3RcIjtcbmV4cG9ydCBmdW5jdGlvbiBmaXJzdChwcm9kKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvZCBpbnN0YW5jZW9mIE5vblRlcm1pbmFsKSB7XG4gICAgICAgIC8vIHRoaXMgY291bGQgaW4gdGhlb3J5IGNhdXNlIGluZmluaXRlIGxvb3BzIGlmXG4gICAgICAgIC8vICgxKSBwcm9kIEEgcmVmcyBwcm9kIEIuXG4gICAgICAgIC8vICgyKSBwcm9kIEIgcmVmcyBwcm9kIEFcbiAgICAgICAgLy8gKDMpIEFCIGNhbiBtYXRjaCB0aGUgZW1wdHkgc2V0XG4gICAgICAgIC8vIGluIG90aGVyIHdvcmRzIGEgY3ljbGUgd2hlcmUgZXZlcnl0aGluZyBpcyBvcHRpb25hbCBzbyB0aGUgZmlyc3Qgd2lsbCBrZWVwXG4gICAgICAgIC8vIGxvb2tpbmcgYWhlYWQgZm9yIHRoZSBuZXh0IG9wdGlvbmFsIHBhcnQgYW5kIHdpbGwgbmV2ZXIgZXhpdFxuICAgICAgICAvLyBjdXJyZW50bHkgdGhlcmUgaXMgbm8gc2FmZWd1YXJkIGZvciB0aGlzIHVuaXF1ZSBlZGdlIGNhc2UgYmVjYXVzZVxuICAgICAgICAvLyAoMSkgbm90IHN1cmUgYSBncmFtbWFyIGluIHdoaWNoIHRoaXMgY2FuIGhhcHBlbiBpcyB1c2VmdWwgZm9yIGFueXRoaW5nIChwcm9kdWN0aXZlKVxuICAgICAgICByZXR1cm4gZmlyc3QocHJvZC5yZWZlcmVuY2VkUnVsZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb2QgaW5zdGFuY2VvZiBUZXJtaW5hbCkge1xuICAgICAgICByZXR1cm4gZmlyc3RGb3JUZXJtaW5hbChwcm9kKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTZXF1ZW5jZVByb2QocHJvZCkpIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0Rm9yU2VxdWVuY2UocHJvZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQnJhbmNoaW5nUHJvZChwcm9kKSkge1xuICAgICAgICByZXR1cm4gZmlyc3RGb3JCcmFuY2hpbmcocHJvZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIm5vbiBleGhhdXN0aXZlIG1hdGNoXCIpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdEZvclNlcXVlbmNlKHByb2QpIHtcbiAgICBsZXQgZmlyc3RTZXQgPSBbXTtcbiAgICBjb25zdCBzZXEgPSBwcm9kLmRlZmluaXRpb247XG4gICAgbGV0IG5leHRTdWJQcm9kSWR4ID0gMDtcbiAgICBsZXQgaGFzSW5uZXJQcm9kc1JlbWFpbmluZyA9IHNlcS5sZW5ndGggPiBuZXh0U3ViUHJvZElkeDtcbiAgICBsZXQgY3VyclN1YlByb2Q7XG4gICAgLy8gc28gd2UgZW50ZXIgdGhlIGxvb3AgYXQgbGVhc3Qgb25jZSAoaWYgdGhlIGRlZmluaXRpb24gaXMgbm90IGVtcHR5XG4gICAgbGV0IGlzTGFzdElubmVyUHJvZE9wdGlvbmFsID0gdHJ1ZTtcbiAgICAvLyBzY2FuIGEgc2VxdWVuY2UgdW50aWwgaXQncyBlbmQgb3IgdW50aWwgd2UgaGF2ZSBmb3VuZCBhIE5PTkUgb3B0aW9uYWwgcHJvZHVjdGlvbiBpbiBpdFxuICAgIHdoaWxlIChoYXNJbm5lclByb2RzUmVtYWluaW5nICYmIGlzTGFzdElubmVyUHJvZE9wdGlvbmFsKSB7XG4gICAgICAgIGN1cnJTdWJQcm9kID0gc2VxW25leHRTdWJQcm9kSWR4XTtcbiAgICAgICAgaXNMYXN0SW5uZXJQcm9kT3B0aW9uYWwgPSBpc09wdGlvbmFsUHJvZChjdXJyU3ViUHJvZCk7XG4gICAgICAgIGZpcnN0U2V0ID0gZmlyc3RTZXQuY29uY2F0KGZpcnN0KGN1cnJTdWJQcm9kKSk7XG4gICAgICAgIG5leHRTdWJQcm9kSWR4ID0gbmV4dFN1YlByb2RJZHggKyAxO1xuICAgICAgICBoYXNJbm5lclByb2RzUmVtYWluaW5nID0gc2VxLmxlbmd0aCA+IG5leHRTdWJQcm9kSWR4O1xuICAgIH1cbiAgICByZXR1cm4gdW5pcShmaXJzdFNldCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZmlyc3RGb3JCcmFuY2hpbmcocHJvZCkge1xuICAgIGNvbnN0IGFsbEFsdGVybmF0aXZlc0ZpcnN0cyA9IG1hcChwcm9kLmRlZmluaXRpb24sIChpbm5lclByb2QpID0+IHtcbiAgICAgICAgcmV0dXJuIGZpcnN0KGlubmVyUHJvZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuaXEoZmxhdHRlbihhbGxBbHRlcm5hdGl2ZXNGaXJzdHMpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdEZvclRlcm1pbmFsKHRlcm1pbmFsKSB7XG4gICAgcmV0dXJuIFt0ZXJtaW5hbC50ZXJtaW5hbFR5cGVdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmlyc3QuanMubWFwIl0sIm5hbWVzIjpbImZsYXR0ZW4iLCJtYXAiLCJ1bmlxIiwiaXNCcmFuY2hpbmdQcm9kIiwiaXNPcHRpb25hbFByb2QiLCJpc1NlcXVlbmNlUHJvZCIsIk5vblRlcm1pbmFsIiwiVGVybWluYWwiLCJmaXJzdCIsInByb2QiLCJyZWZlcmVuY2VkUnVsZSIsImZpcnN0Rm9yVGVybWluYWwiLCJmaXJzdEZvclNlcXVlbmNlIiwiZmlyc3RGb3JCcmFuY2hpbmciLCJFcnJvciIsImZpcnN0U2V0Iiwic2VxIiwiZGVmaW5pdGlvbiIsIm5leHRTdWJQcm9kSWR4IiwiaGFzSW5uZXJQcm9kc1JlbWFpbmluZyIsImxlbmd0aCIsImN1cnJTdWJQcm9kIiwiaXNMYXN0SW5uZXJQcm9kT3B0aW9uYWwiLCJjb25jYXQiLCJhbGxBbHRlcm5hdGl2ZXNGaXJzdHMiLCJpbm5lclByb2QiLCJ0ZXJtaW5hbCIsInRlcm1pbmFsVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/first.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/follow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/follow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResyncFollowsWalker: () => (/* binding */ ResyncFollowsWalker),\n/* harmony export */   buildBetweenProdsFollowPrefix: () => (/* binding */ buildBetweenProdsFollowPrefix),\n/* harmony export */   buildInProdFollowPrefix: () => (/* binding */ buildInProdFollowPrefix),\n/* harmony export */   computeAllProdsFollows: () => (/* binding */ computeAllProdsFollows)\n/* harmony export */ });\n/* harmony import */ var _rest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rest.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js\");\n/* harmony import */ var _first_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./first.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/first.js\");\n/* harmony import */ var _barrel_optimize_names_assign_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=assign,forEach!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_assign_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=assign,forEach!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/assign.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/constants.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\n\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nclass ResyncFollowsWalker extends _rest_js__WEBPACK_IMPORTED_MODULE_0__.RestWalker {\n    constructor(topProd){\n        super();\n        this.topProd = topProd;\n        this.follows = {};\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.follows;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n    // do nothing! just like in the public sector after 13:00\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n        const followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) + this.topProd.name;\n        const fullRest = currRest.concat(prevRest);\n        const restProd = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Alternative({\n            definition: fullRest\n        });\n        const t_in_topProd_follows = (0,_first_js__WEBPACK_IMPORTED_MODULE_1__.first)(restProd);\n        this.follows[followName] = t_in_topProd_follows;\n    }\n}\nfunction computeAllProdsFollows(topProductions) {\n    const reSyncFollows = {};\n    (0,_barrel_optimize_names_assign_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(topProductions, (topProd)=>{\n        const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n        (0,_barrel_optimize_names_assign_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(reSyncFollows, currRefsFollow);\n    });\n    return reSyncFollows;\n}\nfunction buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + _constants_js__WEBPACK_IMPORTED_MODULE_2__.IN;\n}\nfunction buildInProdFollowPrefix(terminal) {\n    const terminalName = terminal.terminalType.name;\n    return terminalName + terminal.idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__.IN;\n} //# sourceMappingURL=follow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvZm9sbG93LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDSjtBQUNTO0FBQ1A7QUFDVTtBQUMvQywyRUFBMkU7QUFDM0UsbUNBQW1DO0FBQzVCLE1BQU1NLDRCQUE0Qk4sZ0RBQVVBO0lBQy9DTyxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSztRQUNMLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHLENBQUM7SUFDcEI7SUFDQUMsZUFBZTtRQUNYLElBQUksQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQ0gsT0FBTztRQUN0QixPQUFPLElBQUksQ0FBQ0MsT0FBTztJQUN2QjtJQUNBRyxhQUFhQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFO0lBQ3ZDLHlEQUF5RDtJQUM3RDtJQUNBQyxZQUFZQyxPQUFPLEVBQUVILFFBQVEsRUFBRUMsUUFBUSxFQUFFO1FBQ3JDLE1BQU1HLGFBQWFDLDhCQUE4QkYsUUFBUUcsY0FBYyxFQUFFSCxRQUFRSSxHQUFHLElBQ2hGLElBQUksQ0FBQ2IsT0FBTyxDQUFDYyxJQUFJO1FBQ3JCLE1BQU1DLFdBQVdULFNBQVNVLE1BQU0sQ0FBQ1Q7UUFDakMsTUFBTVUsV0FBVyxJQUFJcEIseURBQVdBLENBQUM7WUFBRXFCLFlBQVlIO1FBQVM7UUFDeEQsTUFBTUksdUJBQXVCMUIsZ0RBQUtBLENBQUN3QjtRQUNuQyxJQUFJLENBQUNoQixPQUFPLENBQUNTLFdBQVcsR0FBR1M7SUFDL0I7QUFDSjtBQUNPLFNBQVNDLHVCQUF1QkMsY0FBYztJQUNqRCxNQUFNQyxnQkFBZ0IsQ0FBQztJQUN2QjNCLDJGQUFPQSxDQUFDMEIsZ0JBQWdCLENBQUNyQjtRQUNyQixNQUFNdUIsaUJBQWlCLElBQUl6QixvQkFBb0JFLFNBQVNFLFlBQVk7UUFDcEVSLDJGQUFNQSxDQUFDNEIsZUFBZUM7SUFDMUI7SUFDQSxPQUFPRDtBQUNYO0FBQ08sU0FBU1gsOEJBQThCYSxLQUFLLEVBQUVDLGlCQUFpQjtJQUNsRSxPQUFPRCxNQUFNVixJQUFJLEdBQUdXLG9CQUFvQjdCLDZDQUFFQTtBQUM5QztBQUNPLFNBQVM4Qix3QkFBd0JyQixRQUFRO0lBQzVDLE1BQU1zQixlQUFldEIsU0FBU3VCLFlBQVksQ0FBQ2QsSUFBSTtJQUMvQyxPQUFPYSxlQUFldEIsU0FBU1EsR0FBRyxHQUFHakIsNkNBQUVBO0FBQzNDLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvZm9sbG93LmpzP2E3MWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzdFdhbGtlciB9IGZyb20gXCIuL3Jlc3QuanNcIjtcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4vZmlyc3QuanNcIjtcbmltcG9ydCB7IGFzc2lnbiwgZm9yRWFjaCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IElOIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgQWx0ZXJuYXRpdmUgfSBmcm9tIFwiQGNoZXZyb3RhaW4vZ2FzdFwiO1xuLy8gVGhpcyBSZXN5bmNGb2xsb3dzV2Fsa2VyIGNvbXB1dGVzIGFsbCBvZiB0aGUgZm9sbG93cyByZXF1aXJlZCBmb3IgUkVTWU5DXG4vLyAoc2tpcHBpbmcgcmVmZXJlbmNlIHByb2R1Y3Rpb24pLlxuZXhwb3J0IGNsYXNzIFJlc3luY0ZvbGxvd3NXYWxrZXIgZXh0ZW5kcyBSZXN0V2Fsa2VyIHtcbiAgICBjb25zdHJ1Y3Rvcih0b3BQcm9kKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudG9wUHJvZCA9IHRvcFByb2Q7XG4gICAgICAgIHRoaXMuZm9sbG93cyA9IHt9O1xuICAgIH1cbiAgICBzdGFydFdhbGtpbmcoKSB7XG4gICAgICAgIHRoaXMud2Fsayh0aGlzLnRvcFByb2QpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb2xsb3dzO1xuICAgIH1cbiAgICB3YWxrVGVybWluYWwodGVybWluYWwsIGN1cnJSZXN0LCBwcmV2UmVzdCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nISBqdXN0IGxpa2UgaW4gdGhlIHB1YmxpYyBzZWN0b3IgYWZ0ZXIgMTM6MDBcbiAgICB9XG4gICAgd2Fsa1Byb2RSZWYocmVmUHJvZCwgY3VyclJlc3QsIHByZXZSZXN0KSB7XG4gICAgICAgIGNvbnN0IGZvbGxvd05hbWUgPSBidWlsZEJldHdlZW5Qcm9kc0ZvbGxvd1ByZWZpeChyZWZQcm9kLnJlZmVyZW5jZWRSdWxlLCByZWZQcm9kLmlkeCkgK1xuICAgICAgICAgICAgdGhpcy50b3BQcm9kLm5hbWU7XG4gICAgICAgIGNvbnN0IGZ1bGxSZXN0ID0gY3VyclJlc3QuY29uY2F0KHByZXZSZXN0KTtcbiAgICAgICAgY29uc3QgcmVzdFByb2QgPSBuZXcgQWx0ZXJuYXRpdmUoeyBkZWZpbml0aW9uOiBmdWxsUmVzdCB9KTtcbiAgICAgICAgY29uc3QgdF9pbl90b3BQcm9kX2ZvbGxvd3MgPSBmaXJzdChyZXN0UHJvZCk7XG4gICAgICAgIHRoaXMuZm9sbG93c1tmb2xsb3dOYW1lXSA9IHRfaW5fdG9wUHJvZF9mb2xsb3dzO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQWxsUHJvZHNGb2xsb3dzKHRvcFByb2R1Y3Rpb25zKSB7XG4gICAgY29uc3QgcmVTeW5jRm9sbG93cyA9IHt9O1xuICAgIGZvckVhY2godG9wUHJvZHVjdGlvbnMsICh0b3BQcm9kKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJSZWZzRm9sbG93ID0gbmV3IFJlc3luY0ZvbGxvd3NXYWxrZXIodG9wUHJvZCkuc3RhcnRXYWxraW5nKCk7XG4gICAgICAgIGFzc2lnbihyZVN5bmNGb2xsb3dzLCBjdXJyUmVmc0ZvbGxvdyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlU3luY0ZvbGxvd3M7XG59XG5leHBvcnQgZnVuY3Rpb24gYnVpbGRCZXR3ZWVuUHJvZHNGb2xsb3dQcmVmaXgoaW5uZXIsIG9jY3VyZW5jZUluUGFyZW50KSB7XG4gICAgcmV0dXJuIGlubmVyLm5hbWUgKyBvY2N1cmVuY2VJblBhcmVudCArIElOO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkSW5Qcm9kRm9sbG93UHJlZml4KHRlcm1pbmFsKSB7XG4gICAgY29uc3QgdGVybWluYWxOYW1lID0gdGVybWluYWwudGVybWluYWxUeXBlLm5hbWU7XG4gICAgcmV0dXJuIHRlcm1pbmFsTmFtZSArIHRlcm1pbmFsLmlkeCArIElOO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9sbG93LmpzLm1hcCJdLCJuYW1lcyI6WyJSZXN0V2Fsa2VyIiwiZmlyc3QiLCJhc3NpZ24iLCJmb3JFYWNoIiwiSU4iLCJBbHRlcm5hdGl2ZSIsIlJlc3luY0ZvbGxvd3NXYWxrZXIiLCJjb25zdHJ1Y3RvciIsInRvcFByb2QiLCJmb2xsb3dzIiwic3RhcnRXYWxraW5nIiwid2FsayIsIndhbGtUZXJtaW5hbCIsInRlcm1pbmFsIiwiY3VyclJlc3QiLCJwcmV2UmVzdCIsIndhbGtQcm9kUmVmIiwicmVmUHJvZCIsImZvbGxvd05hbWUiLCJidWlsZEJldHdlZW5Qcm9kc0ZvbGxvd1ByZWZpeCIsInJlZmVyZW5jZWRSdWxlIiwiaWR4IiwibmFtZSIsImZ1bGxSZXN0IiwiY29uY2F0IiwicmVzdFByb2QiLCJkZWZpbml0aW9uIiwidF9pbl90b3BQcm9kX2ZvbGxvd3MiLCJjb21wdXRlQWxsUHJvZHNGb2xsb3dzIiwidG9wUHJvZHVjdGlvbnMiLCJyZVN5bmNGb2xsb3dzIiwiY3VyclJlZnNGb2xsb3ciLCJpbm5lciIsIm9jY3VyZW5jZUluUGFyZW50IiwiYnVpbGRJblByb2RGb2xsb3dQcmVmaXgiLCJ0ZXJtaW5hbE5hbWUiLCJ0ZXJtaW5hbFR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/follow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveGrammar: () => (/* binding */ resolveGrammar),\n/* harmony export */   validateGrammar: () => (/* binding */ validateGrammar)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_defaults_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=defaults,forEach!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/defaults.js\");\n/* harmony import */ var _barrel_optimize_names_defaults_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=defaults,forEach!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _resolver_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resolver.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/resolver.js\");\n/* harmony import */ var _checks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../checks.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\");\n/* harmony import */ var _errors_public_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n\n\n\n\nfunction resolveGrammar(options) {\n    const actualOptions = (0,_barrel_optimize_names_defaults_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, {\n        errMsgProvider: _errors_public_js__WEBPACK_IMPORTED_MODULE_2__.defaultGrammarResolverErrorProvider\n    });\n    const topRulesTable = {};\n    (0,_barrel_optimize_names_defaults_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(options.rules, (rule)=>{\n        topRulesTable[rule.name] = rule;\n    });\n    return (0,_resolver_js__WEBPACK_IMPORTED_MODULE_0__.resolveGrammar)(topRulesTable, actualOptions.errMsgProvider);\n}\nfunction validateGrammar(options) {\n    options = (0,_barrel_optimize_names_defaults_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, {\n        errMsgProvider: _errors_public_js__WEBPACK_IMPORTED_MODULE_2__.defaultGrammarValidatorErrorProvider\n    });\n    return (0,_checks_js__WEBPACK_IMPORTED_MODULE_1__.validateGrammar)(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName);\n} //# sourceMappingURL=gast_resolver_public.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvZ2FzdC9nYXN0X3Jlc29sdmVyX3B1YmxpYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQThDO0FBQ3VCO0FBQ0E7QUFDK0M7QUFDN0csU0FBU0UsZUFBZU0sT0FBTztJQUNsQyxNQUFNQyxnQkFBZ0JULDZGQUFRQSxDQUFDUSxTQUFTO1FBQ3BDRSxnQkFBZ0JKLGtGQUFtQ0E7SUFDdkQ7SUFDQSxNQUFNSyxnQkFBZ0IsQ0FBQztJQUN2QlYsNkZBQU9BLENBQUNPLFFBQVFJLEtBQUssRUFBRSxDQUFDQztRQUNwQkYsYUFBYSxDQUFDRSxLQUFLQyxJQUFJLENBQUMsR0FBR0Q7SUFDL0I7SUFDQSxPQUFPViw0REFBaUJBLENBQUNRLGVBQWVGLGNBQWNDLGNBQWM7QUFDeEU7QUFDTyxTQUFTTixnQkFBZ0JJLE9BQU87SUFDbkNBLFVBQVVSLDZGQUFRQSxDQUFDUSxTQUFTO1FBQ3hCRSxnQkFBZ0JILG1GQUFvQ0E7SUFDeEQ7SUFDQSxPQUFPRiwyREFBa0JBLENBQUNHLFFBQVFJLEtBQUssRUFBRUosUUFBUU8sVUFBVSxFQUFFUCxRQUFRRSxjQUFjLEVBQUVGLFFBQVFRLFdBQVc7QUFDNUcsRUFDQSxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvZ3JhbW1hci9nYXN0L2dhc3RfcmVzb2x2ZXJfcHVibGljLmpzPzg1ODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmYXVsdHMsIGZvckVhY2ggfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyByZXNvbHZlR3JhbW1hciBhcyBvcmdSZXNvbHZlR3JhbW1hciB9IGZyb20gXCIuLi9yZXNvbHZlci5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVHcmFtbWFyIGFzIG9yZ1ZhbGlkYXRlR3JhbW1hciB9IGZyb20gXCIuLi9jaGVja3MuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRHcmFtbWFyUmVzb2x2ZXJFcnJvclByb3ZpZGVyLCBkZWZhdWx0R3JhbW1hclZhbGlkYXRvckVycm9yUHJvdmlkZXIsIH0gZnJvbSBcIi4uLy4uL2Vycm9yc19wdWJsaWMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlR3JhbW1hcihvcHRpb25zKSB7XG4gICAgY29uc3QgYWN0dWFsT3B0aW9ucyA9IGRlZmF1bHRzKG9wdGlvbnMsIHtcbiAgICAgICAgZXJyTXNnUHJvdmlkZXI6IGRlZmF1bHRHcmFtbWFyUmVzb2x2ZXJFcnJvclByb3ZpZGVyLFxuICAgIH0pO1xuICAgIGNvbnN0IHRvcFJ1bGVzVGFibGUgPSB7fTtcbiAgICBmb3JFYWNoKG9wdGlvbnMucnVsZXMsIChydWxlKSA9PiB7XG4gICAgICAgIHRvcFJ1bGVzVGFibGVbcnVsZS5uYW1lXSA9IHJ1bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG9yZ1Jlc29sdmVHcmFtbWFyKHRvcFJ1bGVzVGFibGUsIGFjdHVhbE9wdGlvbnMuZXJyTXNnUHJvdmlkZXIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlR3JhbW1hcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IGRlZmF1bHRzKG9wdGlvbnMsIHtcbiAgICAgICAgZXJyTXNnUHJvdmlkZXI6IGRlZmF1bHRHcmFtbWFyVmFsaWRhdG9yRXJyb3JQcm92aWRlcixcbiAgICB9KTtcbiAgICByZXR1cm4gb3JnVmFsaWRhdGVHcmFtbWFyKG9wdGlvbnMucnVsZXMsIG9wdGlvbnMudG9rZW5UeXBlcywgb3B0aW9ucy5lcnJNc2dQcm92aWRlciwgb3B0aW9ucy5ncmFtbWFyTmFtZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nYXN0X3Jlc29sdmVyX3B1YmxpYy5qcy5tYXAiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJmb3JFYWNoIiwicmVzb2x2ZUdyYW1tYXIiLCJvcmdSZXNvbHZlR3JhbW1hciIsInZhbGlkYXRlR3JhbW1hciIsIm9yZ1ZhbGlkYXRlR3JhbW1hciIsImRlZmF1bHRHcmFtbWFyUmVzb2x2ZXJFcnJvclByb3ZpZGVyIiwiZGVmYXVsdEdyYW1tYXJWYWxpZGF0b3JFcnJvclByb3ZpZGVyIiwib3B0aW9ucyIsImFjdHVhbE9wdGlvbnMiLCJlcnJNc2dQcm92aWRlciIsInRvcFJ1bGVzVGFibGUiLCJydWxlcyIsInJ1bGUiLCJuYW1lIiwidG9rZW5UeXBlcyIsImdyYW1tYXJOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractNextPossibleTokensWalker: () => (/* binding */ AbstractNextPossibleTokensWalker),\n/* harmony export */   AbstractNextTerminalAfterProductionWalker: () => (/* binding */ AbstractNextTerminalAfterProductionWalker),\n/* harmony export */   NextAfterTokenWalker: () => (/* binding */ NextAfterTokenWalker),\n/* harmony export */   NextTerminalAfterAtLeastOneSepWalker: () => (/* binding */ NextTerminalAfterAtLeastOneSepWalker),\n/* harmony export */   NextTerminalAfterAtLeastOneWalker: () => (/* binding */ NextTerminalAfterAtLeastOneWalker),\n/* harmony export */   NextTerminalAfterManySepWalker: () => (/* binding */ NextTerminalAfterManySepWalker),\n/* harmony export */   NextTerminalAfterManyWalker: () => (/* binding */ NextTerminalAfterManyWalker),\n/* harmony export */   nextPossibleTokensAfter: () => (/* binding */ nextPossibleTokensAfter),\n/* harmony export */   possiblePathsFrom: () => (/* binding */ possiblePathsFrom)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=clone,drop,dropRight,first,forEach,isEmpty,last!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=clone,drop,dropRight,first,forEach,isEmpty,last!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=clone,drop,dropRight,first,forEach,isEmpty,last!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n/* harmony import */ var _barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=clone,drop,dropRight,first,forEach,isEmpty,last!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/drop.js\");\n/* harmony import */ var _barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=clone,drop,dropRight,first,forEach,isEmpty,last!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=clone,drop,dropRight,first,forEach,isEmpty,last!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/last.js\");\n/* harmony import */ var _barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=clone,drop,dropRight,first,forEach,isEmpty,last!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/dropRight.js\");\n/* harmony import */ var _first_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./first.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/first.js\");\n/* harmony import */ var _rest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rest.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\n\nclass AbstractNextPossibleTokensWalker extends _rest_js__WEBPACK_IMPORTED_MODULE_1__.RestWalker {\n    constructor(topProd, path){\n        super();\n        this.topProd = topProd;\n        this.path = path;\n        this.possibleTokTypes = [];\n        this.nextProductionName = \"\";\n        this.nextProductionOccurrence = 0;\n        this.found = false;\n        this.isAtEndOfPath = false;\n    }\n    startWalking() {\n        this.found = false;\n        if (this.path.ruleStack[0] !== this.topProd.name) {\n            throw Error(\"The path does not start with the walker's top Rule!\");\n        }\n        // immutable for the win\n        this.ruleStack = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.path.ruleStack).reverse(); // intelij bug requires assertion\n        this.occurrenceStack = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n        // already verified that the first production is valid, we now seek the 2nd production\n        this.ruleStack.pop();\n        this.occurrenceStack.pop();\n        this.updateExpectedNext();\n        this.walk(this.topProd);\n        return this.possibleTokTypes;\n    }\n    walk(prod, prevRest = []) {\n        // stop scanning once we found the path\n        if (!this.found) {\n            super.walk(prod, prevRest);\n        }\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n        // found the next production, need to keep walking in it\n        if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n            const fullRest = currRest.concat(prevRest);\n            this.updateExpectedNext();\n            this.walk(refProd.referencedRule, fullRest);\n        }\n    }\n    updateExpectedNext() {\n        // need to consume the Terminal\n        if ((0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.ruleStack)) {\n            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n            // really seeking is the last Terminal...\n            this.nextProductionName = \"\";\n            this.nextProductionOccurrence = 0;\n            this.isAtEndOfPath = true;\n        } else {\n            this.nextProductionName = this.ruleStack.pop();\n            this.nextProductionOccurrence = this.occurrenceStack.pop();\n        }\n    }\n}\nclass NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n    constructor(topProd, path){\n        super(topProd, path);\n        this.path = path;\n        this.nextTerminalName = \"\";\n        this.nextTerminalOccurrence = 0;\n        this.nextTerminalName = this.path.lastTok.name;\n        this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n        if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n            const fullRest = currRest.concat(prevRest);\n            const restProd = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternative({\n                definition: fullRest\n            });\n            this.possibleTokTypes = (0,_first_js__WEBPACK_IMPORTED_MODULE_0__.first)(restProd);\n            this.found = true;\n        }\n    }\n}\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */ class AbstractNextTerminalAfterProductionWalker extends _rest_js__WEBPACK_IMPORTED_MODULE_1__.RestWalker {\n    constructor(topRule, occurrence){\n        super();\n        this.topRule = topRule;\n        this.occurrence = occurrence;\n        this.result = {\n            token: undefined,\n            occurrence: undefined,\n            isEndOfRule: undefined\n        };\n    }\n    startWalking() {\n        this.walk(this.topRule);\n        return this.result;\n    }\n}\nclass NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkMany(manyProd, currRest, prevRest) {\n        if (manyProd.idx === this.occurrence) {\n            const firstAfterMany = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterMany === undefined;\n            if (firstAfterMany instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n                this.result.token = firstAfterMany.terminalType;\n                this.result.occurrence = firstAfterMany.idx;\n            }\n        } else {\n            super.walkMany(manyProd, currRest, prevRest);\n        }\n    }\n}\nclass NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (manySepProd.idx === this.occurrence) {\n            const firstAfterManySep = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterManySep === undefined;\n            if (firstAfterManySep instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n                this.result.token = firstAfterManySep.terminalType;\n                this.result.occurrence = firstAfterManySep.idx;\n            }\n        } else {\n            super.walkManySep(manySepProd, currRest, prevRest);\n        }\n    }\n}\nclass NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (atLeastOneProd.idx === this.occurrence) {\n            const firstAfterAtLeastOne = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n            if (firstAfterAtLeastOne instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n                this.result.token = firstAfterAtLeastOne.terminalType;\n                this.result.occurrence = firstAfterAtLeastOne.idx;\n            }\n        } else {\n            super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n        }\n    }\n}\n// TODO: reduce code duplication in the AfterWalkers\nclass NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest) {\n        if (atleastOneSepProd.idx === this.occurrence) {\n            const firstAfterfirstAfterAtLeastOneSep = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n            if (firstAfterfirstAfterAtLeastOneSep instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n                this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n            }\n        } else {\n            super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n        }\n    }\n}\nfunction possiblePathsFrom(targetDef, maxLength, currPath = []) {\n    // avoid side effects\n    currPath = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currPath);\n    let result = [];\n    let i = 0;\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n        return nextDef.concat((0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(targetDef, i + 1));\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n        const alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n        return result.concat(alternatives);\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */ while(currPath.length < maxLength && i < targetDef.length){\n        const prod = targetDef[i];\n        /* istanbul ignore else */ if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternative) {\n            return getAlternativesForProd(prod.definition);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.NonTerminal) {\n            return getAlternativesForProd(prod.definition);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Option) {\n            result = getAlternativesForProd(prod.definition);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionMandatory) {\n            const newDef = prod.definition.concat([\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                    definition: prod.definition\n                })\n            ]);\n            return getAlternativesForProd(newDef);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionMandatoryWithSeparator) {\n            const newDef = [\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternative({\n                    definition: prod.definition\n                }),\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                    definition: [\n                        new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal({\n                            terminalType: prod.separator\n                        })\n                    ].concat(prod.definition)\n                })\n            ];\n            return getAlternativesForProd(newDef);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionWithSeparator) {\n            const newDef = prod.definition.concat([\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                    definition: [\n                        new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal({\n                            terminalType: prod.separator\n                        })\n                    ].concat(prod.definition)\n                })\n            ]);\n            result = getAlternativesForProd(newDef);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition) {\n            const newDef = prod.definition.concat([\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                    definition: prod.definition\n                })\n            ]);\n            result = getAlternativesForProd(newDef);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternation) {\n            (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(prod.definition, (currAlt)=>{\n                // TODO: this is a limited check for empty alternatives\n                //   It would prevent a common case of infinite loops during parser initialization.\n                //   However **in-directly** empty alternatives may still cause issues.\n                if ((0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currAlt.definition) === false) {\n                    result = getAlternativesForProd(currAlt.definition);\n                }\n            });\n            return result;\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n            currPath.push(prod.terminalType);\n        } else {\n            throw Error(\"non exhaustive match\");\n        }\n        i++;\n    }\n    result.push({\n        partialPath: currPath,\n        suffixDef: (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(targetDef, i)\n    });\n    return result;\n}\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    const EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    // to avoid creating a new Array each time.\n    const EXIT_NON_TERMINAL_ARR = [\n        EXIT_NON_TERMINAL\n    ];\n    const EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    let foundCompletePath = false;\n    const tokenVectorLength = tokenVector.length;\n    const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    const result = [];\n    const possiblePaths = [];\n    possiblePaths.push({\n        idx: -1,\n        def: initialDef,\n        ruleStack: [],\n        occurrenceStack: []\n    });\n    while(!(0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(possiblePaths)){\n        const currPath = possiblePaths.pop();\n        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n        if (currPath === EXIT_ALTERNATIVE) {\n            if (foundCompletePath && (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(possiblePaths).idx <= minimalAlternativesIndex) {\n                // remove irrelevant alternative\n                possiblePaths.pop();\n            }\n            continue;\n        }\n        const currDef = currPath.def;\n        const currIdx = currPath.idx;\n        const currRuleStack = currPath.ruleStack;\n        const currOccurrenceStack = currPath.occurrenceStack;\n        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n        if ((0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currDef)) {\n            continue;\n        }\n        const prod = currDef[0];\n        /* istanbul ignore else */ if (prod === EXIT_NON_TERMINAL) {\n            const nextPath = {\n                idx: currIdx,\n                def: (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                ruleStack: (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(currRuleStack),\n                occurrenceStack: (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(currOccurrenceStack)\n            };\n            possiblePaths.push(nextPath);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal) {\n            /* istanbul ignore else */ if (currIdx < tokenVectorLength - 1) {\n                const nextIdx = currIdx + 1;\n                const actualToken = tokenVector[nextIdx];\n                if (tokMatcher(actualToken, prod.terminalType)) {\n                    const nextPath = {\n                        idx: nextIdx,\n                        def: (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                        ruleStack: currRuleStack,\n                        occurrenceStack: currOccurrenceStack\n                    };\n                    possiblePaths.push(nextPath);\n                }\n            // end of the line\n            } else if (currIdx === tokenVectorLength - 1) {\n                // IGNORE ABOVE ELSE\n                result.push({\n                    nextTokenType: prod.terminalType,\n                    nextTokenOccurrence: prod.idx,\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack\n                });\n                foundCompletePath = true;\n            } else {\n                throw Error(\"non exhaustive match\");\n            }\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.NonTerminal) {\n            const newRuleStack = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currRuleStack);\n            newRuleStack.push(prod.nonTerminalName);\n            const newOccurrenceStack = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currOccurrenceStack);\n            newOccurrenceStack.push(prod.idx);\n            const nextPath = {\n                idx: currIdx,\n                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef)),\n                ruleStack: newRuleStack,\n                occurrenceStack: newOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Option) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            const nextPathWith = {\n                idx: currIdx,\n                def: prod.definition.concat((0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionMandatory) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            const secondIteration = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                definition: prod.definition,\n                idx: prod.idx\n            });\n            const nextDef = prod.definition.concat([\n                secondIteration\n            ], (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef));\n            const nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionMandatoryWithSeparator) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            const separatorGast = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal({\n                terminalType: prod.separator\n            });\n            const secondIteration = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                definition: [\n                    separatorGast\n                ].concat(prod.definition),\n                idx: prod.idx\n            });\n            const nextDef = prod.definition.concat([\n                secondIteration\n            ], (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef));\n            const nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.RepetitionWithSeparator) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            const separatorGast = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Terminal({\n                terminalType: prod.separator\n            });\n            const nthRepetition = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                definition: [\n                    separatorGast\n                ].concat(prod.definition),\n                idx: prod.idx\n            });\n            const nextDef = prod.definition.concat([\n                nthRepetition\n            ], (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef));\n            const nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n            const nthRepetition = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Repetition({\n                definition: prod.definition,\n                idx: prod.idx\n            });\n            const nextDef = prod.definition.concat([\n                nthRepetition\n            ], (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef));\n            const nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternation) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            for(let i = prod.definition.length - 1; i >= 0; i--){\n                const currAlt = prod.definition[i];\n                const currAltPath = {\n                    idx: currIdx,\n                    def: currAlt.definition.concat((0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef)),\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack\n                };\n                possiblePaths.push(currAltPath);\n                possiblePaths.push(EXIT_ALTERNATIVE);\n            }\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Alternative) {\n            possiblePaths.push({\n                idx: currIdx,\n                def: prod.definition.concat((0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            });\n        } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.Rule) {\n            // last because we should only encounter at most a single one of these per invocation.\n            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n        } else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n    return result;\n}\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    const newRuleStack = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currRuleStack);\n    newRuleStack.push(topRule.name);\n    const newCurrOccurrenceStack = (0,_barrel_optimize_names_clone_drop_dropRight_first_forEach_isEmpty_last_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(currOccurrenceStack);\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1);\n    return {\n        idx: currIdx,\n        def: topRule.definition,\n        ruleStack: newRuleStack,\n        occurrenceStack: newCurrOccurrenceStack\n    };\n} //# sourceMappingURL=interpreter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js":
/*!***************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/keys.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AT_LEAST_ONE_IDX: () => (/* binding */ AT_LEAST_ONE_IDX),\n/* harmony export */   AT_LEAST_ONE_SEP_IDX: () => (/* binding */ AT_LEAST_ONE_SEP_IDX),\n/* harmony export */   BITS_FOR_ALT_IDX: () => (/* binding */ BITS_FOR_ALT_IDX),\n/* harmony export */   BITS_FOR_METHOD_TYPE: () => (/* binding */ BITS_FOR_METHOD_TYPE),\n/* harmony export */   BITS_FOR_OCCURRENCE_IDX: () => (/* binding */ BITS_FOR_OCCURRENCE_IDX),\n/* harmony export */   BITS_FOR_RULE_IDX: () => (/* binding */ BITS_FOR_RULE_IDX),\n/* harmony export */   MANY_IDX: () => (/* binding */ MANY_IDX),\n/* harmony export */   MANY_SEP_IDX: () => (/* binding */ MANY_SEP_IDX),\n/* harmony export */   OPTION_IDX: () => (/* binding */ OPTION_IDX),\n/* harmony export */   OR_IDX: () => (/* binding */ OR_IDX),\n/* harmony export */   getKeyForAutomaticLookahead: () => (/* binding */ getKeyForAutomaticLookahead)\n/* harmony export */ });\n// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nconst BITS_FOR_METHOD_TYPE = 4;\nconst BITS_FOR_OCCURRENCE_IDX = 8;\nconst BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nconst BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nconst OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nconst OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nconst MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nconst AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nconst MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nconst AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n// this actually returns a number, but it is always used as a string (object prop key)\nfunction getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    return occurrence | dslMethodIdx | ruleIdx;\n}\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX; //# sourceMappingURL=keys.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIva2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLGdEQUFnRDtBQUNoRCxzQ0FBc0M7QUFDdEMsbUNBQW1DO0FBQ25DLGtDQUFrQztBQUNsQyw4Q0FBOEM7QUFDOUMsb0RBQW9EO0FBQzdDLE1BQU1BLHVCQUF1QixFQUFFO0FBQy9CLE1BQU1DLDBCQUEwQixFQUFFO0FBQ2xDLE1BQU1DLG9CQUFvQixHQUFHO0FBQ3BDLG1HQUFtRztBQUM1RixNQUFNQyxtQkFBbUIsRUFBRTtBQUNsQyw2Q0FBNkM7QUFDN0MsaUZBQWlGO0FBQ2pGLCtFQUErRTtBQUN4RSxNQUFNQyxTQUFTLEtBQUtILHdCQUF3QjtBQUM1QyxNQUFNSSxhQUFhLEtBQUtKLHdCQUF3QjtBQUNoRCxNQUFNSyxXQUFXLEtBQUtMLHdCQUF3QjtBQUM5QyxNQUFNTSxtQkFBbUIsS0FBS04sd0JBQXdCO0FBQ3RELE1BQU1PLGVBQWUsS0FBS1Asd0JBQXdCO0FBQ2xELE1BQU1RLHVCQUF1QixLQUFLUix3QkFBd0I7QUFDakUsc0ZBQXNGO0FBQy9FLFNBQVNTLDRCQUE0QkMsT0FBTyxFQUFFQyxZQUFZLEVBQUVDLFVBQVU7SUFDekUsT0FBT0EsYUFBYUQsZUFBZUQ7QUFDdkM7QUFDQSxNQUFNRyx5QkFBeUIsS0FBS1gsa0JBQ3BDLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9wYXJzZS9ncmFtbWFyL2tleXMuanM/M2JlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMb29rYWhlYWQga2V5cyBhcmUgMzJCaXQgaW50ZWdlcnMgaW4gdGhlIGZvcm1cbi8vIFRUVFRUVFRULVpaWlpaWlpaWlpaWi1ZWVlZLVhYWFhYWFhYXG4vLyBYWFhYIC0+IE9jY3VycmVuY2UgSW5kZXggYml0bWFwLlxuLy8gWVlZWSAtPiBEU0wgTWV0aG9kIFR5cGUgYml0bWFwLlxuLy8gWlpaWlpaWlpaWlpaWlpaIC0+IFJ1bGUgc2hvcnQgSW5kZXggYml0bWFwLlxuLy8gVFRUVFRUVFRUIC0+IGFsdGVybmF0aW9uIGFsdGVybmF0aXZlIGluZGV4IGJpdG1hcFxuZXhwb3J0IGNvbnN0IEJJVFNfRk9SX01FVEhPRF9UWVBFID0gNDtcbmV4cG9ydCBjb25zdCBCSVRTX0ZPUl9PQ0NVUlJFTkNFX0lEWCA9IDg7XG5leHBvcnQgY29uc3QgQklUU19GT1JfUlVMRV9JRFggPSAxMjtcbi8vIFRPRE86IHZhbGlkYXRpb24sIHRoaXMgbWVhbnMgdGhhdCB0aGVyZSBtYXkgYXQgbW9zdCAyXjggLS0+IDI1NiBhbHRlcm5hdGl2ZXMgZm9yIGFuIGFsdGVybmF0aW9uLlxuZXhwb3J0IGNvbnN0IEJJVFNfRk9SX0FMVF9JRFggPSA4O1xuLy8gc2hvcnQgc3RyaW5nIHVzZWQgYXMgcGFydCBvZiBtYXBwaW5nIGtleXMuXG4vLyBiZWluZyBzaG9ydCBpbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2Ugd2hlbiBjb21wb3NpbmcgS0VZUyBmb3IgbWFwcyBvdXQgb2YgdGhlc2Vcbi8vIFRoZSA1IC0gOCBiaXRzICgxNiBwb3NzaWJsZSB2YWx1ZXMsIGFyZSByZXNlcnZlZCBmb3IgdGhlIERTTCBtZXRob2QgaW5kaWNlcylcbmV4cG9ydCBjb25zdCBPUl9JRFggPSAxIDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuZXhwb3J0IGNvbnN0IE9QVElPTl9JRFggPSAyIDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuZXhwb3J0IGNvbnN0IE1BTllfSURYID0gMyA8PCBCSVRTX0ZPUl9PQ0NVUlJFTkNFX0lEWDtcbmV4cG9ydCBjb25zdCBBVF9MRUFTVF9PTkVfSURYID0gNCA8PCBCSVRTX0ZPUl9PQ0NVUlJFTkNFX0lEWDtcbmV4cG9ydCBjb25zdCBNQU5ZX1NFUF9JRFggPSA1IDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuZXhwb3J0IGNvbnN0IEFUX0xFQVNUX09ORV9TRVBfSURYID0gNiA8PCBCSVRTX0ZPUl9PQ0NVUlJFTkNFX0lEWDtcbi8vIHRoaXMgYWN0dWFsbHkgcmV0dXJucyBhIG51bWJlciwgYnV0IGl0IGlzIGFsd2F5cyB1c2VkIGFzIGEgc3RyaW5nIChvYmplY3QgcHJvcCBrZXkpXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5Rm9yQXV0b21hdGljTG9va2FoZWFkKHJ1bGVJZHgsIGRzbE1ldGhvZElkeCwgb2NjdXJyZW5jZSkge1xuICAgIHJldHVybiBvY2N1cnJlbmNlIHwgZHNsTWV0aG9kSWR4IHwgcnVsZUlkeDtcbn1cbmNvbnN0IEJJVFNfU1RBUlRfRk9SX0FMVF9JRFggPSAzMiAtIEJJVFNfRk9SX0FMVF9JRFg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlzLmpzLm1hcCJdLCJuYW1lcyI6WyJCSVRTX0ZPUl9NRVRIT0RfVFlQRSIsIkJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYIiwiQklUU19GT1JfUlVMRV9JRFgiLCJCSVRTX0ZPUl9BTFRfSURYIiwiT1JfSURYIiwiT1BUSU9OX0lEWCIsIk1BTllfSURYIiwiQVRfTEVBU1RfT05FX0lEWCIsIk1BTllfU0VQX0lEWCIsIkFUX0xFQVNUX09ORV9TRVBfSURYIiwiZ2V0S2V5Rm9yQXV0b21hdGljTG9va2FoZWFkIiwicnVsZUlkeCIsImRzbE1ldGhvZElkeCIsIm9jY3VycmVuY2UiLCJCSVRTX1NUQVJUX0ZPUl9BTFRfSURYIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js":
/*!************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLkLookaheadStrategy: () => (/* binding */ LLkLookaheadStrategy)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_flatMap_isEmpty_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=flatMap,isEmpty!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_flatMap_isEmpty_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=flatMap,isEmpty!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatMap.js\");\n/* harmony import */ var _errors_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n/* harmony import */ var _parser_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _checks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checks.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\");\n/* harmony import */ var _lookahead_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n\n\n\n\n\nclass LLkLookaheadStrategy {\n    constructor(options){\n        var _a;\n        this.maxLookahead = (_a = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a !== void 0 ? _a : _parser_parser_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PARSER_CONFIG.maxLookahead;\n    }\n    validate(options) {\n        const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n        if ((0,_barrel_optimize_names_flatMap_isEmpty_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(leftRecursionErrors)) {\n            const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n            const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead);\n            const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead);\n            const allErrors = [\n                ...leftRecursionErrors,\n                ...emptyAltErrors,\n                ...ambiguousAltsErrors,\n                ...emptyRepetitionErrors\n            ];\n            return allErrors;\n        }\n        return leftRecursionErrors;\n    }\n    validateNoLeftRecursion(rules) {\n        return (0,_barrel_optimize_names_flatMap_isEmpty_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rules, (currTopRule)=>(0,_checks_js__WEBPACK_IMPORTED_MODULE_2__.validateNoLeftRecursion)(currTopRule, currTopRule, _errors_public_js__WEBPACK_IMPORTED_MODULE_0__.defaultGrammarValidatorErrorProvider));\n    }\n    validateEmptyOrAlternatives(rules) {\n        return (0,_barrel_optimize_names_flatMap_isEmpty_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rules, (currTopRule)=>(0,_checks_js__WEBPACK_IMPORTED_MODULE_2__.validateEmptyOrAlternative)(currTopRule, _errors_public_js__WEBPACK_IMPORTED_MODULE_0__.defaultGrammarValidatorErrorProvider));\n    }\n    validateAmbiguousAlternationAlternatives(rules, maxLookahead) {\n        return (0,_barrel_optimize_names_flatMap_isEmpty_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rules, (currTopRule)=>(0,_checks_js__WEBPACK_IMPORTED_MODULE_2__.validateAmbiguousAlternationAlternatives)(currTopRule, maxLookahead, _errors_public_js__WEBPACK_IMPORTED_MODULE_0__.defaultGrammarValidatorErrorProvider));\n    }\n    validateSomeNonEmptyLookaheadPath(rules, maxLookahead) {\n        return (0,_checks_js__WEBPACK_IMPORTED_MODULE_2__.validateSomeNonEmptyLookaheadPath)(rules, maxLookahead, _errors_public_js__WEBPACK_IMPORTED_MODULE_0__.defaultGrammarValidatorErrorProvider);\n    }\n    buildLookaheadForAlternation(options) {\n        return (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_3__.buildLookaheadFuncForOr)(options.prodOccurrence, options.rule, options.maxLookahead, options.hasPredicates, options.dynamicTokensEnabled, _lookahead_js__WEBPACK_IMPORTED_MODULE_3__.buildAlternativesLookAheadFunc);\n    }\n    buildLookaheadForOptional(options) {\n        return (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_3__.buildLookaheadFuncForOptionalProd)(options.prodOccurrence, options.rule, options.maxLookahead, options.dynamicTokensEnabled, (0,_lookahead_js__WEBPACK_IMPORTED_MODULE_3__.getProdType)(options.prodType), _lookahead_js__WEBPACK_IMPORTED_MODULE_3__.buildSingleAlternativeLookaheadFunction);\n    }\n} //# sourceMappingURL=llk_lookahead.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvbGxrX2xvb2thaGVhZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTZDO0FBQzhCO0FBQ2Y7QUFDb0c7QUFDbUI7QUFDNUssTUFBTWE7SUFDVEMsWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLElBQUlDO1FBQ0osSUFBSSxDQUFDQyxZQUFZLEdBQ2IsQ0FBQ0QsS0FBS0QsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFFLFlBQVksTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSUEsS0FBS2Isb0VBQXFCQSxDQUFDYyxZQUFZO0lBQ3pKO0lBQ0FDLFNBQVNILE9BQU8sRUFBRTtRQUNkLE1BQU1JLHNCQUFzQixJQUFJLENBQUNiLHVCQUF1QixDQUFDUyxRQUFRSyxLQUFLO1FBQ3RFLElBQUluQiw0RkFBT0EsQ0FBQ2tCLHNCQUFzQjtZQUM5QixNQUFNRSxpQkFBaUIsSUFBSSxDQUFDQywyQkFBMkIsQ0FBQ1AsUUFBUUssS0FBSztZQUNyRSxNQUFNRyxzQkFBc0IsSUFBSSxDQUFDbkIsd0NBQXdDLENBQUNXLFFBQVFLLEtBQUssRUFBRSxJQUFJLENBQUNILFlBQVk7WUFDMUcsTUFBTU8sd0JBQXdCLElBQUksQ0FBQ2pCLGlDQUFpQyxDQUFDUSxRQUFRSyxLQUFLLEVBQUUsSUFBSSxDQUFDSCxZQUFZO1lBQ3JHLE1BQU1RLFlBQVk7bUJBQ1hOO21CQUNBRTttQkFDQUU7bUJBQ0FDO2FBQ047WUFDRCxPQUFPQztRQUNYO1FBQ0EsT0FBT047SUFDWDtJQUNBYix3QkFBd0JjLEtBQUssRUFBRTtRQUMzQixPQUFPcEIsNEZBQU9BLENBQUNvQixPQUFPLENBQUNNLGNBQWdCcEIsbUVBQXVCQSxDQUFDb0IsYUFBYUEsYUFBYXhCLG1GQUFvQ0E7SUFDakk7SUFDQW9CLDRCQUE0QkYsS0FBSyxFQUFFO1FBQy9CLE9BQU9wQiw0RkFBT0EsQ0FBQ29CLE9BQU8sQ0FBQ00sY0FBZ0JyQixzRUFBMEJBLENBQUNxQixhQUFheEIsbUZBQW9DQTtJQUN2SDtJQUNBRSx5Q0FBeUNnQixLQUFLLEVBQUVILFlBQVksRUFBRTtRQUMxRCxPQUFPakIsNEZBQU9BLENBQUNvQixPQUFPLENBQUNNLGNBQWdCdEIsb0ZBQXdDQSxDQUFDc0IsYUFBYVQsY0FBY2YsbUZBQW9DQTtJQUNuSjtJQUNBSyxrQ0FBa0NhLEtBQUssRUFBRUgsWUFBWSxFQUFFO1FBQ25ELE9BQU9WLDZFQUFpQ0EsQ0FBQ2EsT0FBT0gsY0FBY2YsbUZBQW9DQTtJQUN0RztJQUNBeUIsNkJBQTZCWixPQUFPLEVBQUU7UUFDbEMsT0FBT0wsc0VBQXVCQSxDQUFDSyxRQUFRYSxjQUFjLEVBQUViLFFBQVFjLElBQUksRUFBRWQsUUFBUUUsWUFBWSxFQUFFRixRQUFRZSxhQUFhLEVBQUVmLFFBQVFnQixvQkFBb0IsRUFBRXZCLHlFQUE4QkE7SUFDbEw7SUFDQXdCLDBCQUEwQmpCLE9BQU8sRUFBRTtRQUMvQixPQUFPTixnRkFBaUNBLENBQUNNLFFBQVFhLGNBQWMsRUFBRWIsUUFBUWMsSUFBSSxFQUFFZCxRQUFRRSxZQUFZLEVBQUVGLFFBQVFnQixvQkFBb0IsRUFBRW5CLDBEQUFXQSxDQUFDRyxRQUFRa0IsUUFBUSxHQUFHdEIsa0ZBQXVDQTtJQUM3TTtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvbGxrX2xvb2thaGVhZC5qcz8yNTJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZsYXRNYXAsIGlzRW1wdHkgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBkZWZhdWx0R3JhbW1hclZhbGlkYXRvckVycm9yUHJvdmlkZXIgfSBmcm9tIFwiLi4vZXJyb3JzX3B1YmxpYy5qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9QQVJTRVJfQ09ORklHIH0gZnJvbSBcIi4uL3BhcnNlci9wYXJzZXIuanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlQW1iaWd1b3VzQWx0ZXJuYXRpb25BbHRlcm5hdGl2ZXMsIHZhbGlkYXRlRW1wdHlPckFsdGVybmF0aXZlLCB2YWxpZGF0ZU5vTGVmdFJlY3Vyc2lvbiwgdmFsaWRhdGVTb21lTm9uRW1wdHlMb29rYWhlYWRQYXRoLCB9IGZyb20gXCIuL2NoZWNrcy5qc1wiO1xuaW1wb3J0IHsgYnVpbGRBbHRlcm5hdGl2ZXNMb29rQWhlYWRGdW5jLCBidWlsZExvb2thaGVhZEZ1bmNGb3JPcHRpb25hbFByb2QsIGJ1aWxkTG9va2FoZWFkRnVuY0Zvck9yLCBidWlsZFNpbmdsZUFsdGVybmF0aXZlTG9va2FoZWFkRnVuY3Rpb24sIGdldFByb2RUeXBlLCB9IGZyb20gXCIuL2xvb2thaGVhZC5qc1wiO1xuZXhwb3J0IGNsYXNzIExMa0xvb2thaGVhZFN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5tYXhMb29rYWhlYWQgPVxuICAgICAgICAgICAgKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1heExvb2thaGVhZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogREVGQVVMVF9QQVJTRVJfQ09ORklHLm1heExvb2thaGVhZDtcbiAgICB9XG4gICAgdmFsaWRhdGUob3B0aW9ucykge1xuICAgICAgICBjb25zdCBsZWZ0UmVjdXJzaW9uRXJyb3JzID0gdGhpcy52YWxpZGF0ZU5vTGVmdFJlY3Vyc2lvbihvcHRpb25zLnJ1bGVzKTtcbiAgICAgICAgaWYgKGlzRW1wdHkobGVmdFJlY3Vyc2lvbkVycm9ycykpIHtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5QWx0RXJyb3JzID0gdGhpcy52YWxpZGF0ZUVtcHR5T3JBbHRlcm5hdGl2ZXMob3B0aW9ucy5ydWxlcyk7XG4gICAgICAgICAgICBjb25zdCBhbWJpZ3VvdXNBbHRzRXJyb3JzID0gdGhpcy52YWxpZGF0ZUFtYmlndW91c0FsdGVybmF0aW9uQWx0ZXJuYXRpdmVzKG9wdGlvbnMucnVsZXMsIHRoaXMubWF4TG9va2FoZWFkKTtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5UmVwZXRpdGlvbkVycm9ycyA9IHRoaXMudmFsaWRhdGVTb21lTm9uRW1wdHlMb29rYWhlYWRQYXRoKG9wdGlvbnMucnVsZXMsIHRoaXMubWF4TG9va2FoZWFkKTtcbiAgICAgICAgICAgIGNvbnN0IGFsbEVycm9ycyA9IFtcbiAgICAgICAgICAgICAgICAuLi5sZWZ0UmVjdXJzaW9uRXJyb3JzLFxuICAgICAgICAgICAgICAgIC4uLmVtcHR5QWx0RXJyb3JzLFxuICAgICAgICAgICAgICAgIC4uLmFtYmlndW91c0FsdHNFcnJvcnMsXG4gICAgICAgICAgICAgICAgLi4uZW1wdHlSZXBldGl0aW9uRXJyb3JzLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHJldHVybiBhbGxFcnJvcnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxlZnRSZWN1cnNpb25FcnJvcnM7XG4gICAgfVxuICAgIHZhbGlkYXRlTm9MZWZ0UmVjdXJzaW9uKHJ1bGVzKSB7XG4gICAgICAgIHJldHVybiBmbGF0TWFwKHJ1bGVzLCAoY3VyclRvcFJ1bGUpID0+IHZhbGlkYXRlTm9MZWZ0UmVjdXJzaW9uKGN1cnJUb3BSdWxlLCBjdXJyVG9wUnVsZSwgZGVmYXVsdEdyYW1tYXJWYWxpZGF0b3JFcnJvclByb3ZpZGVyKSk7XG4gICAgfVxuICAgIHZhbGlkYXRlRW1wdHlPckFsdGVybmF0aXZlcyhydWxlcykge1xuICAgICAgICByZXR1cm4gZmxhdE1hcChydWxlcywgKGN1cnJUb3BSdWxlKSA9PiB2YWxpZGF0ZUVtcHR5T3JBbHRlcm5hdGl2ZShjdXJyVG9wUnVsZSwgZGVmYXVsdEdyYW1tYXJWYWxpZGF0b3JFcnJvclByb3ZpZGVyKSk7XG4gICAgfVxuICAgIHZhbGlkYXRlQW1iaWd1b3VzQWx0ZXJuYXRpb25BbHRlcm5hdGl2ZXMocnVsZXMsIG1heExvb2thaGVhZCkge1xuICAgICAgICByZXR1cm4gZmxhdE1hcChydWxlcywgKGN1cnJUb3BSdWxlKSA9PiB2YWxpZGF0ZUFtYmlndW91c0FsdGVybmF0aW9uQWx0ZXJuYXRpdmVzKGN1cnJUb3BSdWxlLCBtYXhMb29rYWhlYWQsIGRlZmF1bHRHcmFtbWFyVmFsaWRhdG9yRXJyb3JQcm92aWRlcikpO1xuICAgIH1cbiAgICB2YWxpZGF0ZVNvbWVOb25FbXB0eUxvb2thaGVhZFBhdGgocnVsZXMsIG1heExvb2thaGVhZCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVTb21lTm9uRW1wdHlMb29rYWhlYWRQYXRoKHJ1bGVzLCBtYXhMb29rYWhlYWQsIGRlZmF1bHRHcmFtbWFyVmFsaWRhdG9yRXJyb3JQcm92aWRlcik7XG4gICAgfVxuICAgIGJ1aWxkTG9va2FoZWFkRm9yQWx0ZXJuYXRpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYnVpbGRMb29rYWhlYWRGdW5jRm9yT3Iob3B0aW9ucy5wcm9kT2NjdXJyZW5jZSwgb3B0aW9ucy5ydWxlLCBvcHRpb25zLm1heExvb2thaGVhZCwgb3B0aW9ucy5oYXNQcmVkaWNhdGVzLCBvcHRpb25zLmR5bmFtaWNUb2tlbnNFbmFibGVkLCBidWlsZEFsdGVybmF0aXZlc0xvb2tBaGVhZEZ1bmMpO1xuICAgIH1cbiAgICBidWlsZExvb2thaGVhZEZvck9wdGlvbmFsKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkTG9va2FoZWFkRnVuY0Zvck9wdGlvbmFsUHJvZChvcHRpb25zLnByb2RPY2N1cnJlbmNlLCBvcHRpb25zLnJ1bGUsIG9wdGlvbnMubWF4TG9va2FoZWFkLCBvcHRpb25zLmR5bmFtaWNUb2tlbnNFbmFibGVkLCBnZXRQcm9kVHlwZShvcHRpb25zLnByb2RUeXBlKSwgYnVpbGRTaW5nbGVBbHRlcm5hdGl2ZUxvb2thaGVhZEZ1bmN0aW9uKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sbGtfbG9va2FoZWFkLmpzLm1hcCJdLCJuYW1lcyI6WyJmbGF0TWFwIiwiaXNFbXB0eSIsImRlZmF1bHRHcmFtbWFyVmFsaWRhdG9yRXJyb3JQcm92aWRlciIsIkRFRkFVTFRfUEFSU0VSX0NPTkZJRyIsInZhbGlkYXRlQW1iaWd1b3VzQWx0ZXJuYXRpb25BbHRlcm5hdGl2ZXMiLCJ2YWxpZGF0ZUVtcHR5T3JBbHRlcm5hdGl2ZSIsInZhbGlkYXRlTm9MZWZ0UmVjdXJzaW9uIiwidmFsaWRhdGVTb21lTm9uRW1wdHlMb29rYWhlYWRQYXRoIiwiYnVpbGRBbHRlcm5hdGl2ZXNMb29rQWhlYWRGdW5jIiwiYnVpbGRMb29rYWhlYWRGdW5jRm9yT3B0aW9uYWxQcm9kIiwiYnVpbGRMb29rYWhlYWRGdW5jRm9yT3IiLCJidWlsZFNpbmdsZUFsdGVybmF0aXZlTG9va2FoZWFkRnVuY3Rpb24iLCJnZXRQcm9kVHlwZSIsIkxMa0xvb2thaGVhZFN0cmF0ZWd5IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiX2EiLCJtYXhMb29rYWhlYWQiLCJ2YWxpZGF0ZSIsImxlZnRSZWN1cnNpb25FcnJvcnMiLCJydWxlcyIsImVtcHR5QWx0RXJyb3JzIiwidmFsaWRhdGVFbXB0eU9yQWx0ZXJuYXRpdmVzIiwiYW1iaWd1b3VzQWx0c0Vycm9ycyIsImVtcHR5UmVwZXRpdGlvbkVycm9ycyIsImFsbEVycm9ycyIsImN1cnJUb3BSdWxlIiwiYnVpbGRMb29rYWhlYWRGb3JBbHRlcm5hdGlvbiIsInByb2RPY2N1cnJlbmNlIiwicnVsZSIsImhhc1ByZWRpY2F0ZXMiLCJkeW5hbWljVG9rZW5zRW5hYmxlZCIsImJ1aWxkTG9va2FoZWFkRm9yT3B0aW9uYWwiLCJwcm9kVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js":
/*!********************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROD_TYPE: () => (/* binding */ PROD_TYPE),\n/* harmony export */   areTokenCategoriesNotUsed: () => (/* binding */ areTokenCategoriesNotUsed),\n/* harmony export */   buildAlternativesLookAheadFunc: () => (/* binding */ buildAlternativesLookAheadFunc),\n/* harmony export */   buildLookaheadFuncForOptionalProd: () => (/* binding */ buildLookaheadFuncForOptionalProd),\n/* harmony export */   buildLookaheadFuncForOr: () => (/* binding */ buildLookaheadFuncForOr),\n/* harmony export */   buildSingleAlternativeLookaheadFunction: () => (/* binding */ buildSingleAlternativeLookaheadFunction),\n/* harmony export */   containsPath: () => (/* binding */ containsPath),\n/* harmony export */   getLookaheadPaths: () => (/* binding */ getLookaheadPaths),\n/* harmony export */   getLookaheadPathsForOptionalProd: () => (/* binding */ getLookaheadPathsForOptionalProd),\n/* harmony export */   getLookaheadPathsForOr: () => (/* binding */ getLookaheadPathsForOr),\n/* harmony export */   getProdType: () => (/* binding */ getProdType),\n/* harmony export */   isStrictPrefixOfPath: () => (/* binding */ isStrictPrefixOfPath),\n/* harmony export */   lookAheadSequenceFromAlternatives: () => (/* binding */ lookAheadSequenceFromAlternatives)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=every,flatten,forEach,has,isEmpty,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/every.js\");\n/* harmony import */ var _barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=every,flatten,forEach,has,isEmpty,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=every,flatten,forEach,has,isEmpty,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var _barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=every,flatten,forEach,has,isEmpty,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var _barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=every,flatten,forEach,has,isEmpty,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=every,flatten,forEach,has,isEmpty,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=every,flatten,forEach,has,isEmpty,map,reduce!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _interpreter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interpreter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _rest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rest.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js\");\n/* harmony import */ var _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../scan/tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\n\n\nvar PROD_TYPE;\n(function(PROD_TYPE) {\n    PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE || (PROD_TYPE = {}));\nfunction getProdType(prod) {\n    /* istanbul ignore else */ if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Option || prod === \"Option\") {\n        return PROD_TYPE.OPTION;\n    } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Repetition || prod === \"Repetition\") {\n        return PROD_TYPE.REPETITION;\n    } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.RepetitionMandatory || prod === \"RepetitionMandatory\") {\n        return PROD_TYPE.REPETITION_MANDATORY;\n    } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.RepetitionMandatoryWithSeparator || prod === \"RepetitionMandatoryWithSeparator\") {\n        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.RepetitionWithSeparator || prod === \"RepetitionWithSeparator\") {\n        return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    } else if (prod instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Alternation || prod === \"Alternation\") {\n        return PROD_TYPE.ALTERNATION;\n    } else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction getLookaheadPaths(options) {\n    const { occurrence, rule, prodType, maxLookahead } = options;\n    const type = getProdType(prodType);\n    if (type === PROD_TYPE.ALTERNATION) {\n        return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n    } else {\n        return getLookaheadPathsForOptionalProd(occurrence, rule, type, maxLookahead);\n    }\n}\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.tokenStructuredMatcherNoCategories : _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.tokenStructuredMatcher;\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */ function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.tokenStructuredMatcherNoCategories : _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.tokenStructuredMatcher;\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    const numOfAlts = alts.length;\n    const areAllOneTokenLookahead = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(alts, (currAlt)=>{\n        return (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currAlt, (currPath)=>{\n            return currPath.length === 1;\n        });\n    });\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n        /**\n         * @returns {number} - The chosen alternative index\n         */ return function(orAlts) {\n            // unfortunately the predicates must be extracted every single time\n            // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n            const predicates = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(orAlts, (currAlt)=>currAlt.GATE);\n            for(let t = 0; t < numOfAlts; t++){\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                const currPredicate = predicates[t];\n                if (currPredicate !== undefined && currPredicate.call(this) === false) {\n                    continue;\n                }\n                nextPath: for(let j = 0; j < currNumOfPaths; j++){\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for(let i = 0; i < currPathLength; i++){\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n            // none of the paths for the current alternative matched\n            // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        // optimized (common) case of all the lookaheads paths requiring only\n        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n        const singleTokenAlts = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(alts, (currAlt)=>{\n            return (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currAlt);\n        });\n        const choiceToAlt = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(singleTokenAlts, (result, currAlt, idx)=>{\n            (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currAlt, (currTokType)=>{\n                if (!(0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(result, currTokType.tokenTypeIdx)) {\n                    result[currTokType.tokenTypeIdx] = idx;\n                }\n                (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currTokType.categoryMatches, (currExtendingType)=>{\n                    if (!(0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(result, currExtendingType)) {\n                        result[currExtendingType] = idx;\n                    }\n                });\n            });\n            return result;\n        }, {});\n        /**\n         * @returns {number} - The chosen alternative index\n         */ return function() {\n            const nextToken = this.LA(1);\n            return choiceToAlt[nextToken.tokenTypeIdx];\n        };\n    } else {\n        // optimized lookahead without needing to check the predicates at all.\n        // this causes code duplication which is intentional to improve performance.\n        /**\n         * @returns {number} - The chosen alternative index\n         */ return function() {\n            for(let t = 0; t < numOfAlts; t++){\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                nextPath: for(let j = 0; j < currNumOfPaths; j++){\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for(let i = 0; i < currPathLength; i++){\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n            // none of the paths for the current alternative matched\n            // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n}\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(alt, (currPath)=>{\n        return currPath.length === 1;\n    });\n    const numOfPaths = alt.length;\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        const singleTokensTypes = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(alt);\n        if (singleTokensTypes.length === 1 && (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(singleTokensTypes[0].categoryMatches)) {\n            const expectedTokenType = singleTokensTypes[0];\n            const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n            return function() {\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n            };\n        } else {\n            const choiceToAlt = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(singleTokensTypes, (result, currTokType, idx)=>{\n                result[currTokType.tokenTypeIdx] = true;\n                (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currTokType.categoryMatches, (currExtendingType)=>{\n                    result[currExtendingType] = true;\n                });\n                return result;\n            }, []);\n            return function() {\n                const nextToken = this.LA(1);\n                return choiceToAlt[nextToken.tokenTypeIdx] === true;\n            };\n        }\n    } else {\n        return function() {\n            nextPath: for(let j = 0; j < numOfPaths; j++){\n                const currPath = alt[j];\n                const currPathLength = currPath.length;\n                for(let i = 0; i < currPathLength; i++){\n                    const nextToken = this.LA(i + 1);\n                    if (tokenMatcher(nextToken, currPath[i]) === false) {\n                        continue nextPath;\n                    }\n                }\n                // found a full path that matches.\n                return true;\n            }\n            // none of the paths matched\n            return false;\n        };\n    }\n}\nclass RestDefinitionFinderWalker extends _rest_js__WEBPACK_IMPORTED_MODULE_1__.RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType){\n        super();\n        this.topProd = topProd;\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.restDef;\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n        if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n            this.restDef = currRest.concat(prevRest);\n            return true;\n        }\n        // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n        return false;\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n            super.walkOption(optionProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n            super.walkOption(atLeastOneProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(atLeastOneSepProd, currRest, prevRest);\n        }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n            super.walkOption(manyProd, currRest, prevRest);\n        }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(manySepProd, currRest, prevRest);\n        }\n    }\n}\n/**\n * Returns the definition of a target production in a top level level rule.\n */ class InsideDefinitionFinderVisitor extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef){\n        super();\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n        this.targetRef = targetRef;\n        this.result = [];\n    }\n    checkIsTarget(node, expectedProdName) {\n        if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === undefined || node === this.targetRef)) {\n            this.result = node.definition;\n        }\n    }\n    visitOption(node) {\n        this.checkIsTarget(node, PROD_TYPE.OPTION);\n    }\n    visitRepetition(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    }\n    visitRepetitionMandatory(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    }\n    visitRepetitionWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    }\n    visitAlternation(node) {\n        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    }\n}\nfunction initializeArrayOfArrays(size) {\n    const result = new Array(size);\n    for(let i = 0; i < size; i++){\n        result[i] = [];\n    }\n    return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */ function pathToHashKeys(path) {\n    let keys = [\n        \"\"\n    ];\n    for(let i = 0; i < path.length; i++){\n        const tokType = path[i];\n        const longerKeys = [];\n        for(let j = 0; j < keys.length; j++){\n            const currShorterKey = keys[j];\n            longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n            for(let t = 0; t < tokType.categoryMatches.length; t++){\n                const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n                longerKeys.push(currShorterKey + categoriesKeySuffix);\n            }\n        }\n        keys = longerKeys;\n    }\n    return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */ function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for(let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++){\n        // We only want to test vs the other alternatives\n        if (currAltIdx === idx) {\n            continue;\n        }\n        const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n        for(let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++){\n            const searchKey = searchPathKeys[searchIdx];\n            if (otherAltKnownPathsKeys[searchKey] === true) {\n                return false;\n            }\n        }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true;\n}\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(altsDefs, (currAlt)=>(0,_interpreter_js__WEBPACK_IMPORTED_MODULE_0__.possiblePathsFrom)([\n            currAlt\n        ], 1));\n    const finalResult = initializeArrayOfArrays(partialAlts.length);\n    const altsHashes = (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(partialAlts, (currAltPaths)=>{\n        const dict = {};\n        (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currAltPaths, (item)=>{\n            const keys = pathToHashKeys(item.partialPath);\n            (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(keys, (currKey)=>{\n                dict[currKey] = true;\n            });\n        });\n        return dict;\n    });\n    let newData = partialAlts;\n    // maxLookahead loop\n    for(let pathLength = 1; pathLength <= k; pathLength++){\n        const currDataset = newData;\n        newData = initializeArrayOfArrays(currDataset.length);\n        // alternatives loop\n        for(let altIdx = 0; altIdx < currDataset.length; altIdx++){\n            const currAltPathsAndSuffixes = currDataset[altIdx];\n            // paths in current alternative loop\n            for(let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++){\n                const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n                const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n                const prefixKeys = pathToHashKeys(currPathPrefix);\n                const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n                // End of the line for this path.\n                if (isUnique || (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(suffixDef) || currPathPrefix.length === k) {\n                    const currAltResult = finalResult[altIdx];\n                    // TODO: Can we implement a containsPath using Maps/Dictionaries?\n                    if (containsPath(currAltResult, currPathPrefix) === false) {\n                        currAltResult.push(currPathPrefix);\n                        // Update all new  keys for the current path.\n                        for(let j = 0; j < prefixKeys.length; j++){\n                            const currKey = prefixKeys[j];\n                            altsHashes[altIdx][currKey] = true;\n                        }\n                    }\n                } else {\n                    const newPartialPathsAndSuffixes = (0,_interpreter_js__WEBPACK_IMPORTED_MODULE_0__.possiblePathsFrom)(suffixDef, pathLength + 1, currPathPrefix);\n                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n                    // Update keys for new known paths\n                    (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(newPartialPathsAndSuffixes, (item)=>{\n                        const prefixKeys = pathToHashKeys(item.partialPath);\n                        (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(prefixKeys, (key)=>{\n                            altsHashes[altIdx][key] = true;\n                        });\n                    });\n                }\n            }\n        }\n    }\n    return finalResult;\n}\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    const insideDef = insideDefVisitor.result;\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    const afterDef = afterDefWalker.startWalking();\n    const insideFlat = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Alternative({\n        definition: insideDef\n    });\n    const afterFlat = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_3__.Alternative({\n        definition: afterDef\n    });\n    return lookAheadSequenceFromAlternatives([\n        insideFlat,\n        afterFlat\n    ], k);\n}\nfunction containsPath(alternative, searchPath) {\n    compareOtherPath: for(let i = 0; i < alternative.length; i++){\n        const otherPath = alternative[i];\n        if (otherPath.length !== searchPath.length) {\n            continue;\n        }\n        for(let j = 0; j < otherPath.length; j++){\n            const searchTok = searchPath[j];\n            const otherTok = otherPath[j];\n            const matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n            if (matchingTokens === false) {\n                continue compareOtherPath;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nfunction isStrictPrefixOfPath(prefix, other) {\n    return prefix.length < other.length && (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(prefix, (tokType, idx)=>{\n        const otherTokType = other[idx];\n        return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];\n    });\n}\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n    return (0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(lookAheadPaths, (singleAltPaths)=>(0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(singleAltPaths, (singlePath)=>(0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(singlePath, (token)=>(0,_barrel_optimize_names_every_flatten_forEach_has_isEmpty_map_reduce_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(token.categoryMatches))));\n} //# sourceMappingURL=lookahead.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/resolver.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/resolver.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GastRefResolverVisitor: () => (/* binding */ GastRefResolverVisitor),\n/* harmony export */   resolveGrammar: () => (/* binding */ resolveGrammar)\n/* harmony export */ });\n/* harmony import */ var _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _barrel_optimize_names_forEach_values_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_forEach_values_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\nfunction resolveGrammar(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n    refResolver.resolveRefs();\n    return refResolver.errors;\n}\nclass GastRefResolverVisitor extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_1__.GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider){\n        super();\n        this.nameToTopRule = nameToTopRule;\n        this.errMsgProvider = errMsgProvider;\n        this.errors = [];\n    }\n    resolveRefs() {\n        (0,_barrel_optimize_names_forEach_values_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_barrel_optimize_names_forEach_values_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.nameToTopRule), (prod)=>{\n            this.currTopLevel = prod;\n            prod.accept(this);\n        });\n    }\n    visitNonTerminal(node) {\n        const ref = this.nameToTopRule[node.nonTerminalName];\n        if (!ref) {\n            const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n            this.errors.push({\n                message: msg,\n                type: _parser_parser_js__WEBPACK_IMPORTED_MODULE_0__.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n                ruleName: this.currTopLevel.name,\n                unresolvedRefName: node.nonTerminalName\n            });\n        } else {\n            node.referencedRule = ref;\n        }\n    }\n} //# sourceMappingURL=resolver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL2dyYW1tYXIvcmVzb2x2ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWlFO0FBQ3JCO0FBQ0c7QUFDeEMsU0FBU0ksZUFBZUMsU0FBUyxFQUFFQyxjQUFjO0lBQ3BELE1BQU1DLGNBQWMsSUFBSUMsdUJBQXVCSCxXQUFXQztJQUMxREMsWUFBWUUsV0FBVztJQUN2QixPQUFPRixZQUFZRyxNQUFNO0FBQzdCO0FBQ08sTUFBTUYsK0JBQStCTCx5REFBV0E7SUFDbkRRLFlBQVlDLGFBQWEsRUFBRU4sY0FBYyxDQUFFO1FBQ3ZDLEtBQUs7UUFDTCxJQUFJLENBQUNNLGFBQWEsR0FBR0E7UUFDckIsSUFBSSxDQUFDTixjQUFjLEdBQUdBO1FBQ3RCLElBQUksQ0FBQ0ksTUFBTSxHQUFHLEVBQUU7SUFDcEI7SUFDQUQsY0FBYztRQUNWUiwyRkFBT0EsQ0FBQ0MsMkZBQU1BLENBQUMsSUFBSSxDQUFDVSxhQUFhLEdBQUcsQ0FBQ0M7WUFDakMsSUFBSSxDQUFDQyxZQUFZLEdBQUdEO1lBQ3BCQSxLQUFLRSxNQUFNLENBQUMsSUFBSTtRQUNwQjtJQUNKO0lBQ0FDLGlCQUFpQkMsSUFBSSxFQUFFO1FBQ25CLE1BQU1DLE1BQU0sSUFBSSxDQUFDTixhQUFhLENBQUNLLEtBQUtFLGVBQWUsQ0FBQztRQUNwRCxJQUFJLENBQUNELEtBQUs7WUFDTixNQUFNRSxNQUFNLElBQUksQ0FBQ2QsY0FBYyxDQUFDZSxzQkFBc0IsQ0FBQyxJQUFJLENBQUNQLFlBQVksRUFBRUc7WUFDMUUsSUFBSSxDQUFDUCxNQUFNLENBQUNZLElBQUksQ0FBQztnQkFDYkMsU0FBU0g7Z0JBQ1RJLE1BQU14Qix3RUFBeUJBLENBQUN5QixzQkFBc0I7Z0JBQ3REQyxVQUFVLElBQUksQ0FBQ1osWUFBWSxDQUFDYSxJQUFJO2dCQUNoQ0MsbUJBQW1CWCxLQUFLRSxlQUFlO1lBQzNDO1FBQ0osT0FDSztZQUNERixLQUFLWSxjQUFjLEdBQUdYO1FBQzFCO0lBQ0o7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9wYXJzZS9ncmFtbWFyL3Jlc29sdmVyLmpzP2FmYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZSwgfSBmcm9tIFwiLi4vcGFyc2VyL3BhcnNlci5qc1wiO1xuaW1wb3J0IHsgZm9yRWFjaCwgdmFsdWVzIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgR0FzdFZpc2l0b3IgfSBmcm9tIFwiQGNoZXZyb3RhaW4vZ2FzdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVHcmFtbWFyKHRvcExldmVscywgZXJyTXNnUHJvdmlkZXIpIHtcbiAgICBjb25zdCByZWZSZXNvbHZlciA9IG5ldyBHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yKHRvcExldmVscywgZXJyTXNnUHJvdmlkZXIpO1xuICAgIHJlZlJlc29sdmVyLnJlc29sdmVSZWZzKCk7XG4gICAgcmV0dXJuIHJlZlJlc29sdmVyLmVycm9ycztcbn1cbmV4cG9ydCBjbGFzcyBHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yIGV4dGVuZHMgR0FzdFZpc2l0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG5hbWVUb1RvcFJ1bGUsIGVyck1zZ1Byb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmFtZVRvVG9wUnVsZSA9IG5hbWVUb1RvcFJ1bGU7XG4gICAgICAgIHRoaXMuZXJyTXNnUHJvdmlkZXIgPSBlcnJNc2dQcm92aWRlcjtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICB9XG4gICAgcmVzb2x2ZVJlZnMoKSB7XG4gICAgICAgIGZvckVhY2godmFsdWVzKHRoaXMubmFtZVRvVG9wUnVsZSksIChwcm9kKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJUb3BMZXZlbCA9IHByb2Q7XG4gICAgICAgICAgICBwcm9kLmFjY2VwdCh0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZpc2l0Tm9uVGVybWluYWwobm9kZSkge1xuICAgICAgICBjb25zdCByZWYgPSB0aGlzLm5hbWVUb1RvcFJ1bGVbbm9kZS5ub25UZXJtaW5hbE5hbWVdO1xuICAgICAgICBpZiAoIXJlZikge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gdGhpcy5lcnJNc2dQcm92aWRlci5idWlsZFJ1bGVOb3RGb3VuZEVycm9yKHRoaXMuY3VyclRvcExldmVsLCBub2RlKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgICAgICAgICB0eXBlOiBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlLlVOUkVTT0xWRURfU1VCUlVMRV9SRUYsXG4gICAgICAgICAgICAgICAgcnVsZU5hbWU6IHRoaXMuY3VyclRvcExldmVsLm5hbWUsXG4gICAgICAgICAgICAgICAgdW5yZXNvbHZlZFJlZk5hbWU6IG5vZGUubm9uVGVybWluYWxOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLnJlZmVyZW5jZWRSdWxlID0gcmVmO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZXIuanMubWFwIl0sIm5hbWVzIjpbIlBhcnNlckRlZmluaXRpb25FcnJvclR5cGUiLCJmb3JFYWNoIiwidmFsdWVzIiwiR0FzdFZpc2l0b3IiLCJyZXNvbHZlR3JhbW1hciIsInRvcExldmVscyIsImVyck1zZ1Byb3ZpZGVyIiwicmVmUmVzb2x2ZXIiLCJHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yIiwicmVzb2x2ZVJlZnMiLCJlcnJvcnMiLCJjb25zdHJ1Y3RvciIsIm5hbWVUb1RvcFJ1bGUiLCJwcm9kIiwiY3VyclRvcExldmVsIiwiYWNjZXB0IiwidmlzaXROb25UZXJtaW5hbCIsIm5vZGUiLCJyZWYiLCJub25UZXJtaW5hbE5hbWUiLCJtc2ciLCJidWlsZFJ1bGVOb3RGb3VuZEVycm9yIiwicHVzaCIsIm1lc3NhZ2UiLCJ0eXBlIiwiVU5SRVNPTFZFRF9TVUJSVUxFX1JFRiIsInJ1bGVOYW1lIiwibmFtZSIsInVucmVzb2x2ZWRSZWZOYW1lIiwicmVmZXJlbmNlZFJ1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/resolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js":
/*!***************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/grammar/rest.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestWalker: () => (/* binding */ RestWalker)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_drop_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=drop,forEach!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_drop_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=drop,forEach!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/drop.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */ class RestWalker {\n    walk(prod, prevRest = []) {\n        (0,_barrel_optimize_names_drop_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(prod.definition, (subProd, index)=>{\n            const currRest = (0,_barrel_optimize_names_drop_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(prod.definition, index + 1);\n            /* istanbul ignore else */ if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.NonTerminal) {\n                this.walkProdRef(subProd, currRest, prevRest);\n            } else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Terminal) {\n                this.walkTerminal(subProd, currRest, prevRest);\n            } else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternative) {\n                this.walkFlat(subProd, currRest, prevRest);\n            } else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option) {\n                this.walkOption(subProd, currRest, prevRest);\n            } else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionMandatory) {\n                this.walkAtLeastOne(subProd, currRest, prevRest);\n            } else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionMandatoryWithSeparator) {\n                this.walkAtLeastOneSep(subProd, currRest, prevRest);\n            } else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionWithSeparator) {\n                this.walkManySep(subProd, currRest, prevRest);\n            } else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Repetition) {\n                this.walkMany(subProd, currRest, prevRest);\n            } else if (subProd instanceof _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternation) {\n                this.walkOr(subProd, currRest, prevRest);\n            } else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    }\n    walkTerminal(terminal, currRest, prevRest) {}\n    walkProdRef(refProd, currRest, prevRest) {}\n    walkFlat(flatProd, currRest, prevRest) {\n        // ABCDEF => after the D the rest is EF\n        const fullOrRest = currRest.concat(prevRest);\n        this.walk(flatProd, fullOrRest);\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        // ABC(DE)?F => after the (DE)? the rest is F\n        const fullOrRest = currRest.concat(prevRest);\n        this.walk(optionProd, fullOrRest);\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n        const fullAtLeastOneRest = [\n            new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option({\n                definition: atLeastOneProd.definition\n            })\n        ].concat(currRest, prevRest);\n        this.walk(atLeastOneProd, fullAtLeastOneRest);\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n        const fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n        const fullManyRest = [\n            new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option({\n                definition: manyProd.definition\n            })\n        ].concat(currRest, prevRest);\n        this.walk(manyProd, fullManyRest);\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n        const fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n        this.walk(manySepProd, fullManySepRest);\n    }\n    walkOr(orProd, currRest, prevRest) {\n        // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n        const fullOrRest = currRest.concat(prevRest);\n        // walk all different alternatives\n        (0,_barrel_optimize_names_drop_forEach_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(orProd.definition, (alt)=>{\n            // wrapping each alternative in a single definition wrapper\n            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n            const prodWrapper = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternative({\n                definition: [\n                    alt\n                ]\n            });\n            this.walk(prodWrapper, fullOrRest);\n        });\n    }\n}\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    const repSepRest = [\n        new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option({\n            definition: [\n                new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Terminal({\n                    terminalType: repSepProd.separator\n                })\n            ].concat(repSepProd.definition)\n        })\n    ];\n    const fullRepSepRest = repSepRest.concat(currRest, prevRest);\n    return fullRepSepRest;\n} //# sourceMappingURL=rest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/rest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/parser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CstParser: () => (/* binding */ CstParser),\n/* harmony export */   DEFAULT_PARSER_CONFIG: () => (/* binding */ DEFAULT_PARSER_CONFIG),\n/* harmony export */   DEFAULT_RULE_CONFIG: () => (/* binding */ DEFAULT_RULE_CONFIG),\n/* harmony export */   EMPTY_ALT: () => (/* binding */ EMPTY_ALT),\n/* harmony export */   END_OF_FILE: () => (/* binding */ END_OF_FILE),\n/* harmony export */   EmbeddedActionsParser: () => (/* binding */ EmbeddedActionsParser),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   ParserDefinitionErrorType: () => (/* binding */ ParserDefinitionErrorType)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=clone,forEach,has,isEmpty,map,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=clone,forEach,has,isEmpty,map,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=clone,forEach,has,isEmpty,map,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=clone,forEach,has,isEmpty,map,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=clone,forEach,has,isEmpty,map,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=clone,forEach,has,isEmpty,map,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _grammar_follow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grammar/follow.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/follow.js\");\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _errors_public_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n/* harmony import */ var _grammar_gast_gast_resolver_public_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../grammar/gast/gast_resolver_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js\");\n/* harmony import */ var _traits_recoverable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./traits/recoverable.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js\");\n/* harmony import */ var _traits_looksahead_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./traits/looksahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js\");\n/* harmony import */ var _traits_tree_builder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./traits/tree_builder.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js\");\n/* harmony import */ var _traits_lexer_adapter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./traits/lexer_adapter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js\");\n/* harmony import */ var _traits_recognizer_api_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./traits/recognizer_api.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js\");\n/* harmony import */ var _traits_recognizer_engine_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./traits/recognizer_engine.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js\");\n/* harmony import */ var _traits_error_handler_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./traits/error_handler.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js\");\n/* harmony import */ var _traits_context_assist_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./traits/context_assist.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js\");\n/* harmony import */ var _traits_gast_recorder_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./traits/gast_recorder.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js\");\n/* harmony import */ var _traits_perf_tracer_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./traits/perf_tracer.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js\");\n/* harmony import */ var _utils_apply_mixins_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/apply_mixins.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js\");\n/* harmony import */ var _grammar_checks_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../grammar/checks.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst END_OF_FILE = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_2__.createTokenInstance)(_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_2__.EOF, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\nObject.freeze(END_OF_FILE);\nconst DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 3,\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: _errors_public_js__WEBPACK_IMPORTED_MODULE_3__.defaultParserErrorProvider,\n    nodeLocationTracking: \"none\",\n    traceInitPerf: false,\n    skipValidations: false\n});\nconst DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: ()=>undefined,\n    resyncEnabled: true\n});\nvar ParserDefinitionErrorType;\n(function(ParserDefinitionErrorType) {\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_NAME\"] = 0] = \"INVALID_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_RULE_NAME\"] = 1] = \"DUPLICATE_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_OVERRIDE\"] = 2] = \"INVALID_RULE_OVERRIDE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_PRODUCTIONS\"] = 3] = \"DUPLICATE_PRODUCTIONS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"UNRESOLVED_SUBRULE_REF\"] = 4] = \"UNRESOLVED_SUBRULE_REF\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"LEFT_RECURSION\"] = 5] = \"LEFT_RECURSION\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NONE_LAST_EMPTY_ALT\"] = 6] = \"NONE_LAST_EMPTY_ALT\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_ALTS\"] = 7] = \"AMBIGUOUS_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CONFLICT_TOKENS_RULES_NAMESPACE\"] = 8] = \"CONFLICT_TOKENS_RULES_NAMESPACE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_TOKEN_NAME\"] = 9] = \"INVALID_TOKEN_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NO_NON_EMPTY_LOOKAHEAD\"] = 10] = \"NO_NON_EMPTY_LOOKAHEAD\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_PREFIX_ALTS\"] = 11] = \"AMBIGUOUS_PREFIX_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"TOO_MANY_ALTS\"] = 12] = \"TOO_MANY_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CUSTOM_LOOKAHEAD_VALIDATION\"] = 13] = \"CUSTOM_LOOKAHEAD_VALIDATION\";\n})(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));\nfunction EMPTY_ALT(value = undefined) {\n    return function() {\n        return value;\n    };\n}\nclass Parser {\n    /**\n     *  @deprecated use the **instance** method with the same name instead\n     */ static performSelfAnalysis(parserInstance) {\n        throw Error(\"The **static** `performSelfAnalysis` method has been deprecated.\" + \"\t\\nUse the **instance** method with the same name instead.\");\n    }\n    performSelfAnalysis() {\n        this.TRACE_INIT(\"performSelfAnalysis\", ()=>{\n            let defErrorsMsgs;\n            this.selfAnalysisDone = true;\n            const className = this.className;\n            this.TRACE_INIT(\"toFastProps\", ()=>{\n                // Without this voodoo magic the parser would be x3-x4 slower\n                // It seems it is better to invoke `toFastProperties` **before**\n                // Any manipulations of the `this` object done during the recording phase.\n                (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_0__.toFastProperties)(this);\n            });\n            this.TRACE_INIT(\"Grammar Recording\", ()=>{\n                try {\n                    this.enableRecording();\n                    // Building the GAST\n                    (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(this.definedRulesNames, (currRuleName)=>{\n                        const wrappedRule = this[currRuleName];\n                        const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n                        let recordedRuleGast;\n                        this.TRACE_INIT(`${currRuleName} Rule`, ()=>{\n                            recordedRuleGast = this.topLevelRuleRecord(currRuleName, originalGrammarAction);\n                        });\n                        this.gastProductionsCache[currRuleName] = recordedRuleGast;\n                    });\n                } finally{\n                    this.disableRecording();\n                }\n            });\n            let resolverErrors = [];\n            this.TRACE_INIT(\"Grammar Resolving\", ()=>{\n                resolverErrors = (0,_grammar_gast_gast_resolver_public_js__WEBPACK_IMPORTED_MODULE_4__.resolveGrammar)({\n                    rules: (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache)\n                });\n                this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n            });\n            this.TRACE_INIT(\"Grammar Validations\", ()=>{\n                // only perform additional grammar validations IFF no resolving errors have occurred.\n                // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n                if ((0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(resolverErrors) && this.skipValidations === false) {\n                    const validationErrors = (0,_grammar_gast_gast_resolver_public_js__WEBPACK_IMPORTED_MODULE_4__.validateGrammar)({\n                        rules: (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache),\n                        tokenTypes: (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.tokensMap),\n                        errMsgProvider: _errors_public_js__WEBPACK_IMPORTED_MODULE_3__.defaultGrammarValidatorErrorProvider,\n                        grammarName: className\n                    });\n                    const lookaheadValidationErrors = (0,_grammar_checks_js__WEBPACK_IMPORTED_MODULE_16__.validateLookahead)({\n                        lookaheadStrategy: this.lookaheadStrategy,\n                        rules: (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache),\n                        tokenTypes: (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.tokensMap),\n                        grammarName: className\n                    });\n                    this.definitionErrors = this.definitionErrors.concat(validationErrors, lookaheadValidationErrors);\n                }\n            });\n            // this analysis may fail if the grammar is not perfectly valid\n            if ((0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(this.definitionErrors)) {\n                // The results of these computations are not needed unless error recovery is enabled.\n                if (this.recoveryEnabled) {\n                    this.TRACE_INIT(\"computeAllProdsFollows\", ()=>{\n                        const allFollows = (0,_grammar_follow_js__WEBPACK_IMPORTED_MODULE_1__.computeAllProdsFollows)((0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache));\n                        this.resyncFollows = allFollows;\n                    });\n                }\n                this.TRACE_INIT(\"ComputeLookaheadFunctions\", ()=>{\n                    var _a, _b;\n                    (_b = (_a = this.lookaheadStrategy).initialize) === null || _b === void 0 ? void 0 : _b.call(_a, {\n                        rules: (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache)\n                    });\n                    this.preComputeLookaheadFunctions((0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(this.gastProductionsCache));\n                });\n            }\n            if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING && !(0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(this.definitionErrors)) {\n                defErrorsMsgs = (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(this.definitionErrors, (defError)=>defError.message);\n                throw new Error(`Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\"\\n-------------------------------\\n\")}`);\n            }\n        });\n    }\n    constructor(tokenVocabulary, config){\n        this.definitionErrors = [];\n        this.selfAnalysisDone = false;\n        const that = this;\n        that.initErrorHandler(config);\n        that.initLexerAdapter();\n        that.initLooksAhead(config);\n        that.initRecognizerEngine(tokenVocabulary, config);\n        that.initRecoverable(config);\n        that.initTreeBuilder(config);\n        that.initContentAssist();\n        that.initGastRecorder(config);\n        that.initPerformanceTracer(config);\n        if ((0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(config, \"ignoredIssues\")) {\n            throw new Error(\"The <ignoredIssues> IParserConfig property has been deprecated.\\n\t\" + \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\t\" + \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\t\" + \"For further details.\");\n        }\n        this.skipValidations = (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(config, \"skipValidations\") ? config.skipValidations // casting assumes the end user passing the correct type\n         : DEFAULT_PARSER_CONFIG.skipValidations;\n    }\n}\n// Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n// (normally during the parser's constructor).\n// This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n// for example: duplicate rule names, referencing an unresolved subrule, ect...\n// This flag should not be enabled during normal usage, it is used in special situations, for example when\n// needing to display the parser definition errors in some GUI(online playground).\nParser.DEFER_DEFINITION_ERRORS_HANDLING = false;\n(0,_utils_apply_mixins_js__WEBPACK_IMPORTED_MODULE_15__.applyMixins)(Parser, [\n    _traits_recoverable_js__WEBPACK_IMPORTED_MODULE_5__.Recoverable,\n    _traits_looksahead_js__WEBPACK_IMPORTED_MODULE_6__.LooksAhead,\n    _traits_tree_builder_js__WEBPACK_IMPORTED_MODULE_7__.TreeBuilder,\n    _traits_lexer_adapter_js__WEBPACK_IMPORTED_MODULE_8__.LexerAdapter,\n    _traits_recognizer_engine_js__WEBPACK_IMPORTED_MODULE_10__.RecognizerEngine,\n    _traits_recognizer_api_js__WEBPACK_IMPORTED_MODULE_9__.RecognizerApi,\n    _traits_error_handler_js__WEBPACK_IMPORTED_MODULE_11__.ErrorHandler,\n    _traits_context_assist_js__WEBPACK_IMPORTED_MODULE_12__.ContentAssist,\n    _traits_gast_recorder_js__WEBPACK_IMPORTED_MODULE_13__.GastRecorder,\n    _traits_perf_tracer_js__WEBPACK_IMPORTED_MODULE_14__.PerformanceTracer\n]);\nclass CstParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG){\n        const configClone = (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(config);\n        configClone.outputCst = true;\n        super(tokenVocabulary, configClone);\n    }\n}\nclass EmbeddedActionsParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG){\n        const configClone = (0,_barrel_optimize_names_clone_forEach_has_isEmpty_map_values_lodash_es__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(config);\n        configClone.outputCst = false;\n        super(tokenVocabulary, configClone);\n    }\n} //# sourceMappingURL=parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentAssist: () => (/* binding */ ContentAssist)\n/* harmony export */ });\n/* harmony import */ var _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../grammar/interpreter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _barrel_optimize_names_first_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=first,isUndefined!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var _barrel_optimize_names_first_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=first,isUndefined!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n\n\nclass ContentAssist {\n    initContentAssist() {}\n    computeContentAssist(startRuleName, precedingInput) {\n        const startRuleGast = this.gastProductionsCache[startRuleName];\n        if ((0,_barrel_optimize_names_first_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(startRuleGast)) {\n            throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n        }\n        return (0,_grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_0__.nextPossibleTokensAfter)([\n            startRuleGast\n        ], precedingInput, this.tokenMatcher, this.maxLookahead);\n    }\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    getNextPossibleTokenTypes(grammarPath) {\n        const topRuleName = (0,_barrel_optimize_names_first_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(grammarPath.ruleStack);\n        const gastProductions = this.getGAstProductions();\n        const topProduction = gastProductions[topRuleName];\n        const nextPossibleTokenTypes = new _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_0__.NextAfterTokenWalker(topProduction, grammarPath).startWalking();\n        return nextPossibleTokenTypes;\n    }\n} //# sourceMappingURL=context_assist.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvY29udGV4dF9hc3Npc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4RjtBQUMvQztBQUN4QyxNQUFNSTtJQUNUQyxvQkFBb0IsQ0FBRTtJQUN0QkMscUJBQXFCQyxhQUFhLEVBQUVDLGNBQWMsRUFBRTtRQUNoRCxNQUFNQyxnQkFBZ0IsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQ0gsY0FBYztRQUM5RCxJQUFJSiw4RkFBV0EsQ0FBQ00sZ0JBQWdCO1lBQzVCLE1BQU1FLE1BQU0sQ0FBQyxPQUFPLEVBQUVKLGNBQWMsa0NBQWtDLENBQUM7UUFDM0U7UUFDQSxPQUFPTixnRkFBdUJBLENBQUM7WUFBQ1E7U0FBYyxFQUFFRCxnQkFBZ0IsSUFBSSxDQUFDSSxZQUFZLEVBQUUsSUFBSSxDQUFDQyxZQUFZO0lBQ3hHO0lBQ0Esc0dBQXNHO0lBQ3RHLCtEQUErRDtJQUMvREMsMEJBQTBCQyxXQUFXLEVBQUU7UUFDbkMsTUFBTUMsY0FBY2QsOEZBQUtBLENBQUNhLFlBQVlFLFNBQVM7UUFDL0MsTUFBTUMsa0JBQWtCLElBQUksQ0FBQ0Msa0JBQWtCO1FBQy9DLE1BQU1DLGdCQUFnQkYsZUFBZSxDQUFDRixZQUFZO1FBQ2xELE1BQU1LLHlCQUF5QixJQUFJckIseUVBQW9CQSxDQUFDb0IsZUFBZUwsYUFBYU8sWUFBWTtRQUNoRyxPQUFPRDtJQUNYO0FBQ0osRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvcGFyc2UvcGFyc2VyL3RyYWl0cy9jb250ZXh0X2Fzc2lzdC5qcz82YTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBZnRlclRva2VuV2Fsa2VyLCBuZXh0UG9zc2libGVUb2tlbnNBZnRlciwgfSBmcm9tIFwiLi4vLi4vZ3JhbW1hci9pbnRlcnByZXRlci5qc1wiO1xuaW1wb3J0IHsgZmlyc3QsIGlzVW5kZWZpbmVkIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuZXhwb3J0IGNsYXNzIENvbnRlbnRBc3Npc3Qge1xuICAgIGluaXRDb250ZW50QXNzaXN0KCkgeyB9XG4gICAgY29tcHV0ZUNvbnRlbnRBc3Npc3Qoc3RhcnRSdWxlTmFtZSwgcHJlY2VkaW5nSW5wdXQpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRSdWxlR2FzdCA9IHRoaXMuZ2FzdFByb2R1Y3Rpb25zQ2FjaGVbc3RhcnRSdWxlTmFtZV07XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChzdGFydFJ1bGVHYXN0KSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFJ1bGUgLT4ke3N0YXJ0UnVsZU5hbWV9PC0gZG9lcyBub3QgZXhpc3QgaW4gdGhpcyBncmFtbWFyLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0UG9zc2libGVUb2tlbnNBZnRlcihbc3RhcnRSdWxlR2FzdF0sIHByZWNlZGluZ0lucHV0LCB0aGlzLnRva2VuTWF0Y2hlciwgdGhpcy5tYXhMb29rYWhlYWQpO1xuICAgIH1cbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBhIG1lbWJlciBtZXRob2Qgb3IgYSB1dGlsaXR5PyBpdCBkb2VzIG5vdCBoYXZlIGFueSBzdGF0ZSBvciB1c2FnZSBvZiAndGhpcycuLi5cbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBtb3JlIGV4cGxpY2l0bHkgcGFydCBvZiB0aGUgcHVibGljIEFQST9cbiAgICBnZXROZXh0UG9zc2libGVUb2tlblR5cGVzKGdyYW1tYXJQYXRoKSB7XG4gICAgICAgIGNvbnN0IHRvcFJ1bGVOYW1lID0gZmlyc3QoZ3JhbW1hclBhdGgucnVsZVN0YWNrKTtcbiAgICAgICAgY29uc3QgZ2FzdFByb2R1Y3Rpb25zID0gdGhpcy5nZXRHQXN0UHJvZHVjdGlvbnMoKTtcbiAgICAgICAgY29uc3QgdG9wUHJvZHVjdGlvbiA9IGdhc3RQcm9kdWN0aW9uc1t0b3BSdWxlTmFtZV07XG4gICAgICAgIGNvbnN0IG5leHRQb3NzaWJsZVRva2VuVHlwZXMgPSBuZXcgTmV4dEFmdGVyVG9rZW5XYWxrZXIodG9wUHJvZHVjdGlvbiwgZ3JhbW1hclBhdGgpLnN0YXJ0V2Fsa2luZygpO1xuICAgICAgICByZXR1cm4gbmV4dFBvc3NpYmxlVG9rZW5UeXBlcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0X2Fzc2lzdC5qcy5tYXAiXSwibmFtZXMiOlsiTmV4dEFmdGVyVG9rZW5XYWxrZXIiLCJuZXh0UG9zc2libGVUb2tlbnNBZnRlciIsImZpcnN0IiwiaXNVbmRlZmluZWQiLCJDb250ZW50QXNzaXN0IiwiaW5pdENvbnRlbnRBc3Npc3QiLCJjb21wdXRlQ29udGVudEFzc2lzdCIsInN0YXJ0UnVsZU5hbWUiLCJwcmVjZWRpbmdJbnB1dCIsInN0YXJ0UnVsZUdhc3QiLCJnYXN0UHJvZHVjdGlvbnNDYWNoZSIsIkVycm9yIiwidG9rZW5NYXRjaGVyIiwibWF4TG9va2FoZWFkIiwiZ2V0TmV4dFBvc3NpYmxlVG9rZW5UeXBlcyIsImdyYW1tYXJQYXRoIiwidG9wUnVsZU5hbWUiLCJydWxlU3RhY2siLCJnYXN0UHJvZHVjdGlvbnMiLCJnZXRHQXN0UHJvZHVjdGlvbnMiLCJ0b3BQcm9kdWN0aW9uIiwibmV4dFBvc3NpYmxlVG9rZW5UeXBlcyIsInN0YXJ0V2Fsa2luZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js":
/*!******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorHandler: () => (/* binding */ ErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _barrel_optimize_names_clone_has_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=clone,has!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_clone_has_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=clone,has!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../grammar/lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n\n\n\n/**\n * Trait responsible for runtime parsing errors.\n */ class ErrorHandler {\n    initErrorHandler(config) {\n        this._errors = [];\n        this.errorMessageProvider = (0,_barrel_optimize_names_clone_has_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(config, \"errorMessageProvider\") ? config.errorMessageProvider // assumes end user provides the correct config value/type\n         : _parser_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PARSER_CONFIG.errorMessageProvider;\n    }\n    SAVE_ERROR(error) {\n        if ((0,_exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__.isRecognitionException)(error)) {\n            error.context = {\n                ruleStack: this.getHumanReadableRuleStack(),\n                ruleOccurrenceStack: (0,_barrel_optimize_names_clone_has_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.RULE_OCCURRENCE_STACK)\n            };\n            this._errors.push(error);\n            return error;\n        } else {\n            throw Error(\"Trying to save an Error which is not a RecognitionException\");\n        }\n    }\n    get errors() {\n        return (0,_barrel_optimize_names_clone_has_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this._errors);\n    }\n    set errors(newErrors) {\n        this._errors = newErrors;\n    }\n    // TODO: consider caching the error message computed information\n    raiseEarlyExitException(occurrence, prodType, userDefinedErrMsg) {\n        const ruleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[ruleName];\n        const lookAheadPathsPerAlternative = (0,_grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_1__.getLookaheadPathsForOptionalProd)(occurrence, ruleGrammar, prodType, this.maxLookahead);\n        const insideProdPaths = lookAheadPathsPerAlternative[0];\n        const actualTokens = [];\n        for(let i = 1; i <= this.maxLookahead; i++){\n            actualTokens.push(this.LA(i));\n        }\n        const msg = this.errorMessageProvider.buildEarlyExitMessage({\n            expectedIterationPaths: insideProdPaths,\n            actual: actualTokens,\n            previous: this.LA(0),\n            customUserDescription: userDefinedErrMsg,\n            ruleName: ruleName\n        });\n        throw this.SAVE_ERROR(new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__.EarlyExitException(msg, this.LA(1), this.LA(0)));\n    }\n    // TODO: consider caching the error message computed information\n    raiseNoAltException(occurrence, errMsgTypes) {\n        const ruleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[ruleName];\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n        const lookAheadPathsPerAlternative = (0,_grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_1__.getLookaheadPathsForOr)(occurrence, ruleGrammar, this.maxLookahead);\n        const actualTokens = [];\n        for(let i = 1; i <= this.maxLookahead; i++){\n            actualTokens.push(this.LA(i));\n        }\n        const previousToken = this.LA(0);\n        const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\n            actual: actualTokens,\n            previous: previousToken,\n            customUserDescription: errMsgTypes,\n            ruleName: this.getCurrRuleFullName()\n        });\n        throw this.SAVE_ERROR(new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__.NoViableAltException(errMsg, this.LA(1), previousToken));\n    }\n} //# sourceMappingURL=error_handler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GastRecorder: () => (/* binding */ GastRecorder)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,has,isArray,isFunction,last,some!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,has,isArray,isFunction,last,some!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/last.js\");\n/* harmony import */ var _barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,has,isArray,isFunction,last,some!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isFunction.js\");\n/* harmony import */ var _barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,has,isArray,isFunction,last,some!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var _barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,has,isArray,isFunction,last,some!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/some.js\");\n/* harmony import */ var _barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,has,isArray,isFunction,last,some!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n/* harmony import */ var _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../scan/lexer_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\");\n/* harmony import */ var _scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../scan/tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _grammar_keys_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../grammar/keys.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js\");\n\n\n\n\n\n\n\nconst RECORDING_NULL_OBJECT = {\n    description: \"This Object indicates the Parser is during Recording Phase\"\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_5__.BITS_FOR_OCCURRENCE_IDX) - 1;\nconst RFT = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.createToken)({\n    name: \"RECORDING_PHASE_TOKEN\",\n    pattern: _scan_lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA\n});\n(0,_scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.augmentTokenTypes)([\n    RFT\n]);\nconst RECORDING_PHASE_TOKEN = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_3__.createTokenInstance)(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\t\" + \"\" + \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\", // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nconst RECORDING_PHASE_CSTNODE = {\n    name: \"This CSTNode indicates the Parser is in Recording Phase\\n\t\" + \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n    children: {}\n};\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */ class GastRecorder {\n    initGastRecorder(config) {\n        this.recordingProdStack = [];\n        this.RECORDING_PHASE = false;\n    }\n    enableRecording() {\n        this.RECORDING_PHASE = true;\n        this.TRACE_INIT(\"Enable Recording\", ()=>{\n            /**\n             * Warning Dark Voodoo Magic upcoming!\n             * We are \"replacing\" the public parsing DSL methods API\n             * With **new** alternative implementations on the Parser **instance**\n             *\n             * So far this is the only way I've found to avoid performance regressions during parsing time.\n             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n             *   implementations directly instead.\n             */ for(let i = 0; i < 10; i++){\n                const idx = i > 0 ? i : \"\";\n                this[`CONSUME${idx}`] = function(arg1, arg2) {\n                    return this.consumeInternalRecord(arg1, i, arg2);\n                };\n                this[`SUBRULE${idx}`] = function(arg1, arg2) {\n                    return this.subruleInternalRecord(arg1, i, arg2);\n                };\n                this[`OPTION${idx}`] = function(arg1) {\n                    return this.optionInternalRecord(arg1, i);\n                };\n                this[`OR${idx}`] = function(arg1) {\n                    return this.orInternalRecord(arg1, i);\n                };\n                this[`MANY${idx}`] = function(arg1) {\n                    this.manyInternalRecord(i, arg1);\n                };\n                this[`MANY_SEP${idx}`] = function(arg1) {\n                    this.manySepFirstInternalRecord(i, arg1);\n                };\n                this[`AT_LEAST_ONE${idx}`] = function(arg1) {\n                    this.atLeastOneInternalRecord(i, arg1);\n                };\n                this[`AT_LEAST_ONE_SEP${idx}`] = function(arg1) {\n                    this.atLeastOneSepFirstInternalRecord(i, arg1);\n                };\n            }\n            // DSL methods with the idx(suffix) as an argument\n            this[`consume`] = function(idx, arg1, arg2) {\n                return this.consumeInternalRecord(arg1, idx, arg2);\n            };\n            this[`subrule`] = function(idx, arg1, arg2) {\n                return this.subruleInternalRecord(arg1, idx, arg2);\n            };\n            this[`option`] = function(idx, arg1) {\n                return this.optionInternalRecord(arg1, idx);\n            };\n            this[`or`] = function(idx, arg1) {\n                return this.orInternalRecord(arg1, idx);\n            };\n            this[`many`] = function(idx, arg1) {\n                this.manyInternalRecord(idx, arg1);\n            };\n            this[`atLeastOne`] = function(idx, arg1) {\n                this.atLeastOneInternalRecord(idx, arg1);\n            };\n            this.ACTION = this.ACTION_RECORD;\n            this.BACKTRACK = this.BACKTRACK_RECORD;\n            this.LA = this.LA_RECORD;\n        });\n    }\n    disableRecording() {\n        this.RECORDING_PHASE = false;\n        // By deleting these **instance** properties, any future invocation\n        // will be deferred to the original methods on the **prototype** object\n        // This seems to get rid of any incorrect optimizations that V8 may\n        // do during the recording phase.\n        this.TRACE_INIT(\"Deleting Recording methods\", ()=>{\n            const that = this;\n            for(let i = 0; i < 10; i++){\n                const idx = i > 0 ? i : \"\";\n                delete that[`CONSUME${idx}`];\n                delete that[`SUBRULE${idx}`];\n                delete that[`OPTION${idx}`];\n                delete that[`OR${idx}`];\n                delete that[`MANY${idx}`];\n                delete that[`MANY_SEP${idx}`];\n                delete that[`AT_LEAST_ONE${idx}`];\n                delete that[`AT_LEAST_ONE_SEP${idx}`];\n            }\n            delete that[`consume`];\n            delete that[`subrule`];\n            delete that[`option`];\n            delete that[`or`];\n            delete that[`many`];\n            delete that[`atLeastOne`];\n            delete that.ACTION;\n            delete that.BACKTRACK;\n            delete that.LA;\n        });\n    }\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    // @ts-expect-error -- noop place holder\n    ACTION_RECORD(impl) {\n    // NO-OP during recording\n    }\n    // Executing backtracking logic will break our recording logic assumptions\n    BACKTRACK_RECORD(grammarRule, args) {\n        return ()=>true;\n    }\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    LA_RECORD(howMuch) {\n        // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n        // On LA return EOF at the end of the input so an infinite loop may occur.\n        return _parser_js__WEBPACK_IMPORTED_MODULE_4__.END_OF_FILE;\n    }\n    topLevelRuleRecord(name, def) {\n        try {\n            const newTopLevelRule = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Rule({\n                definition: [],\n                name: name\n            });\n            newTopLevelRule.name = name;\n            this.recordingProdStack.push(newTopLevelRule);\n            def.call(this);\n            this.recordingProdStack.pop();\n            return newTopLevelRule;\n        } catch (originalError) {\n            if (originalError.KNOWN_RECORDER_ERROR !== true) {\n                try {\n                    originalError.message = originalError.message + '\\n\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\t' + \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n                } catch (mutabilityError) {\n                    // We may not be able to modify the original error object\n                    throw originalError;\n                }\n            }\n            throw originalError;\n        }\n    }\n    // Implementation of parsing DSL\n    optionInternalRecord(actionORMethodDef, occurrence) {\n        return recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Option, actionORMethodDef, occurrence);\n    }\n    atLeastOneInternalRecord(occurrence, actionORMethodDef) {\n        recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionMandatory, actionORMethodDef, occurrence);\n    }\n    atLeastOneSepFirstInternalRecord(occurrence, options) {\n        recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    manyInternalRecord(occurrence, actionORMethodDef) {\n        recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Repetition, actionORMethodDef, occurrence);\n    }\n    manySepFirstInternalRecord(occurrence, options) {\n        recordProd.call(this, _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    orInternalRecord(altsOrOpts, occurrence) {\n        return recordOrProd.call(this, altsOrOpts, occurrence);\n    }\n    subruleInternalRecord(ruleToCall, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!ruleToCall || (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(ruleToCall, \"ruleName\") === false) {\n            const error = new Error(`<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` + ` expecting a Parser method reference but got: <${JSON.stringify(ruleToCall)}>` + `\\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        const prevProd = (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.recordingProdStack);\n        const ruleName = ruleToCall.ruleName;\n        const newNoneTerminal = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.NonTerminal({\n            idx: occurrence,\n            nonTerminalName: ruleName,\n            label: options === null || options === void 0 ? void 0 : options.LABEL,\n            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n            referencedRule: undefined\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;\n    }\n    consumeInternalRecord(tokType, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!(0,_scan_tokens_js__WEBPACK_IMPORTED_MODULE_2__.hasShortKeyProperty)(tokType)) {\n            const error = new Error(`<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` + ` expecting a TokenType reference but got: <${JSON.stringify(tokType)}>` + `\\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        const prevProd = (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.recordingProdStack);\n        const newNoneTerminal = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Terminal({\n            idx: occurrence,\n            terminalType: tokType,\n            label: options === null || options === void 0 ? void 0 : options.LABEL\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return RECORDING_PHASE_TOKEN;\n    }\n}\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep = false) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.recordingProdStack);\n    const grammarAction = (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n    const newProd = new prodConstructor({\n        definition: [],\n        idx: occurrence\n    });\n    if (handleSep) {\n        newProd.separator = mainProdArg.SEP;\n    }\n    if ((0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    this.recordingProdStack.push(newProd);\n    grammarAction.call(this);\n    prevProd.definition.push(newProd);\n    this.recordingProdStack.pop();\n    return RECORDING_NULL_OBJECT;\n}\nfunction recordOrProd(mainProdArg, occurrence) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.recordingProdStack);\n    // Only an array of alternatives\n    const hasOptions = (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(mainProdArg) === false;\n    const alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n    const newOrProd = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternation({\n        definition: [],\n        idx: occurrence,\n        ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n    });\n    if ((0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    const hasPredicates = (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(alts, (currAlt)=>(0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currAlt.GATE));\n    newOrProd.hasPredicates = hasPredicates;\n    prevProd.definition.push(newOrProd);\n    (0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(alts, (currAlt)=>{\n        const currAltFlat = new _chevrotain_gast__WEBPACK_IMPORTED_MODULE_0__.Alternative({\n            definition: []\n        });\n        newOrProd.definition.push(currAltFlat);\n        if ((0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currAlt, \"IGNORE_AMBIGUITIES\")) {\n            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES; // assumes end user provides the correct config value/type\n        } else if ((0,_barrel_optimize_names_forEach_has_isArray_isFunction_last_some_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(currAlt, \"GATE\")) {\n            currAltFlat.ignoreAmbiguities = true;\n        }\n        this.recordingProdStack.push(currAltFlat);\n        currAlt.ALT.call(this);\n        this.recordingProdStack.pop();\n    });\n    return RECORDING_NULL_OBJECT;\n}\nfunction getIdxSuffix(idx) {\n    return idx === 0 ? \"\" : `${idx}`;\n}\nfunction assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n        const error = new Error(// The stack trace will contain all the needed details\n        `Invalid DSL Method idx value: <${idx}>\\n\\t` + `Idx value must be a none negative value smaller than ${MAX_METHOD_IDX + 1}`);\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n    }\n} //# sourceMappingURL=gast_recorder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js":
/*!******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexerAdapter: () => (/* binding */ LexerAdapter)\n/* harmony export */ });\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */ class LexerAdapter {\n    initLexerAdapter() {\n        this.tokVector = [];\n        this.tokVectorLength = 0;\n        this.currIdx = -1;\n    }\n    set input(newInput) {\n        // @ts-ignore - `this parameter` not supported in setters/getters\n        //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n        if (this.selfAnalysisDone !== true) {\n            throw Error(`Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`);\n        }\n        // @ts-ignore - `this parameter` not supported in setters/getters\n        //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n        this.reset();\n        this.tokVector = newInput;\n        this.tokVectorLength = newInput.length;\n    }\n    get input() {\n        return this.tokVector;\n    }\n    // skips a token and returns the next token\n    SKIP_TOKEN() {\n        if (this.currIdx <= this.tokVector.length - 2) {\n            this.consumeToken();\n            return this.LA(1);\n        } else {\n            return _parser_js__WEBPACK_IMPORTED_MODULE_0__.END_OF_FILE;\n        }\n    }\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LA(howMuch) {\n        const soughtIdx = this.currIdx + howMuch;\n        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n            return _parser_js__WEBPACK_IMPORTED_MODULE_0__.END_OF_FILE;\n        } else {\n            return this.tokVector[soughtIdx];\n        }\n    }\n    consumeToken() {\n        this.currIdx++;\n    }\n    exportLexerState() {\n        return this.currIdx;\n    }\n    importLexerState(newState) {\n        this.currIdx = newState;\n    }\n    resetLexerState() {\n        this.currIdx = -1;\n    }\n    moveToTerminatedState() {\n        this.currIdx = this.tokVector.length - 1;\n    }\n    getLexerPosition() {\n        return this.exportLexerState();\n    }\n} //# sourceMappingURL=lexer_adapter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvbGV4ZXJfYWRhcHRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUMzQzs7Ozs7O0NBTUMsR0FDTSxNQUFNQztJQUNUQyxtQkFBbUI7UUFDZixJQUFJLENBQUNDLFNBQVMsR0FBRyxFQUFFO1FBQ25CLElBQUksQ0FBQ0MsZUFBZSxHQUFHO1FBQ3ZCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLENBQUM7SUFDcEI7SUFDQSxJQUFJQyxNQUFNQyxRQUFRLEVBQUU7UUFDaEIsaUVBQWlFO1FBQ2pFLGtGQUFrRjtRQUNsRixJQUFJLElBQUksQ0FBQ0MsZ0JBQWdCLEtBQUssTUFBTTtZQUNoQyxNQUFNQyxNQUFNLENBQUMsZ0ZBQWdGLENBQUM7UUFDbEc7UUFDQSxpRUFBaUU7UUFDakUsa0ZBQWtGO1FBQ2xGLElBQUksQ0FBQ0MsS0FBSztRQUNWLElBQUksQ0FBQ1AsU0FBUyxHQUFHSTtRQUNqQixJQUFJLENBQUNILGVBQWUsR0FBR0csU0FBU0ksTUFBTTtJQUMxQztJQUNBLElBQUlMLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQ0gsU0FBUztJQUN6QjtJQUNBLDJDQUEyQztJQUMzQ1MsYUFBYTtRQUNULElBQUksSUFBSSxDQUFDUCxPQUFPLElBQUksSUFBSSxDQUFDRixTQUFTLENBQUNRLE1BQU0sR0FBRyxHQUFHO1lBQzNDLElBQUksQ0FBQ0UsWUFBWTtZQUNqQixPQUFPLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1FBQ25CLE9BQ0s7WUFDRCxPQUFPZCxtREFBV0E7UUFDdEI7SUFDSjtJQUNBLGtHQUFrRztJQUNsRyx5Q0FBeUM7SUFDekNjLEdBQUdDLE9BQU8sRUFBRTtRQUNSLE1BQU1DLFlBQVksSUFBSSxDQUFDWCxPQUFPLEdBQUdVO1FBQ2pDLElBQUlDLFlBQVksS0FBSyxJQUFJLENBQUNaLGVBQWUsSUFBSVksV0FBVztZQUNwRCxPQUFPaEIsbURBQVdBO1FBQ3RCLE9BQ0s7WUFDRCxPQUFPLElBQUksQ0FBQ0csU0FBUyxDQUFDYSxVQUFVO1FBQ3BDO0lBQ0o7SUFDQUgsZUFBZTtRQUNYLElBQUksQ0FBQ1IsT0FBTztJQUNoQjtJQUNBWSxtQkFBbUI7UUFDZixPQUFPLElBQUksQ0FBQ1osT0FBTztJQUN2QjtJQUNBYSxpQkFBaUJDLFFBQVEsRUFBRTtRQUN2QixJQUFJLENBQUNkLE9BQU8sR0FBR2M7SUFDbkI7SUFDQUMsa0JBQWtCO1FBQ2QsSUFBSSxDQUFDZixPQUFPLEdBQUcsQ0FBQztJQUNwQjtJQUNBZ0Isd0JBQXdCO1FBQ3BCLElBQUksQ0FBQ2hCLE9BQU8sR0FBRyxJQUFJLENBQUNGLFNBQVMsQ0FBQ1EsTUFBTSxHQUFHO0lBQzNDO0lBQ0FXLG1CQUFtQjtRQUNmLE9BQU8sSUFBSSxDQUFDTCxnQkFBZ0I7SUFDaEM7QUFDSixFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliL3NyYy9wYXJzZS9wYXJzZXIvdHJhaXRzL2xleGVyX2FkYXB0ZXIuanM/NzUwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTkRfT0ZfRklMRSB9IGZyb20gXCIuLi9wYXJzZXIuanNcIjtcbi8qKlxuICogVHJhaXQgcmVzcG9uc2libGUgYWJzdHJhY3Rpbmcgb3ZlciB0aGUgaW50ZXJhY3Rpb24gd2l0aCBMZXhlciBvdXRwdXQgKFRva2VuIHZlY3RvcikuXG4gKlxuICogVGhpcyBjb3VsZCBiZSBnZW5lcmFsaXplZCB0byBzdXBwb3J0IG90aGVyIGtpbmRzIG9mIGxleGVycywgZS5nLlxuICogLSBKdXN0IGluIFRpbWUgTGV4aW5nIC8gTGV4ZXItTGVzcyBwYXJzaW5nLlxuICogLSBTdHJlYW1pbmcgTGV4ZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBMZXhlckFkYXB0ZXIge1xuICAgIGluaXRMZXhlckFkYXB0ZXIoKSB7XG4gICAgICAgIHRoaXMudG9rVmVjdG9yID0gW107XG4gICAgICAgIHRoaXMudG9rVmVjdG9yTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gLTE7XG4gICAgfVxuICAgIHNldCBpbnB1dChuZXdJbnB1dCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIC0gYHRoaXMgcGFyYW1ldGVyYCBub3Qgc3VwcG9ydGVkIGluIHNldHRlcnMvZ2V0dGVyc1xuICAgICAgICAvLyAgIC0gaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svZnVuY3Rpb25zLmh0bWwjdGhpcy1wYXJhbWV0ZXJzXG4gICAgICAgIGlmICh0aGlzLnNlbGZBbmFseXNpc0RvbmUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBNaXNzaW5nIDxwZXJmb3JtU2VsZkFuYWx5c2lzPiBpbnZvY2F0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIFBhcnNlcidzIGNvbnN0cnVjdG9yLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSBgdGhpcyBwYXJhbWV0ZXJgIG5vdCBzdXBwb3J0ZWQgaW4gc2V0dGVycy9nZXR0ZXJzXG4gICAgICAgIC8vICAgLSBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9mdW5jdGlvbnMuaHRtbCN0aGlzLXBhcmFtZXRlcnNcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLnRva1ZlY3RvciA9IG5ld0lucHV0O1xuICAgICAgICB0aGlzLnRva1ZlY3Rvckxlbmd0aCA9IG5ld0lucHV0Lmxlbmd0aDtcbiAgICB9XG4gICAgZ2V0IGlucHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tWZWN0b3I7XG4gICAgfVxuICAgIC8vIHNraXBzIGEgdG9rZW4gYW5kIHJldHVybnMgdGhlIG5leHQgdG9rZW5cbiAgICBTS0lQX1RPS0VOKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJySWR4IDw9IHRoaXMudG9rVmVjdG9yLmxlbmd0aCAtIDIpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZVRva2VuKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5MQSgxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBFTkRfT0ZfRklMRTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBMZXhlciAoYWNjZXNzaW5nIFRva2VuIHZlY3RvcikgcmVsYXRlZCBtZXRob2RzIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIHRvIGltcGxlbWVudCBsYXp5IGxleGVyc1xuICAgIC8vIG9yIGxleGVycyBkZXBlbmRlbnQgb24gcGFyc2VyIGNvbnRleHQuXG4gICAgTEEoaG93TXVjaCkge1xuICAgICAgICBjb25zdCBzb3VnaHRJZHggPSB0aGlzLmN1cnJJZHggKyBob3dNdWNoO1xuICAgICAgICBpZiAoc291Z2h0SWR4IDwgMCB8fCB0aGlzLnRva1ZlY3Rvckxlbmd0aCA8PSBzb3VnaHRJZHgpIHtcbiAgICAgICAgICAgIHJldHVybiBFTkRfT0ZfRklMRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva1ZlY3Rvcltzb3VnaHRJZHhdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN1bWVUb2tlbigpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4Kys7XG4gICAgfVxuICAgIGV4cG9ydExleGVyU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJJZHg7XG4gICAgfVxuICAgIGltcG9ydExleGVyU3RhdGUobmV3U3RhdGUpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gbmV3U3RhdGU7XG4gICAgfVxuICAgIHJlc2V0TGV4ZXJTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gLTE7XG4gICAgfVxuICAgIG1vdmVUb1Rlcm1pbmF0ZWRTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gdGhpcy50b2tWZWN0b3IubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgZ2V0TGV4ZXJQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwb3J0TGV4ZXJTdGF0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxleGVyX2FkYXB0ZXIuanMubWFwIl0sIm5hbWVzIjpbIkVORF9PRl9GSUxFIiwiTGV4ZXJBZGFwdGVyIiwiaW5pdExleGVyQWRhcHRlciIsInRva1ZlY3RvciIsInRva1ZlY3Rvckxlbmd0aCIsImN1cnJJZHgiLCJpbnB1dCIsIm5ld0lucHV0Iiwic2VsZkFuYWx5c2lzRG9uZSIsIkVycm9yIiwicmVzZXQiLCJsZW5ndGgiLCJTS0lQX1RPS0VOIiwiY29uc3VtZVRva2VuIiwiTEEiLCJob3dNdWNoIiwic291Z2h0SWR4IiwiZXhwb3J0TGV4ZXJTdGF0ZSIsImltcG9ydExleGVyU3RhdGUiLCJuZXdTdGF0ZSIsInJlc2V0TGV4ZXJTdGF0ZSIsIm1vdmVUb1Rlcm1pbmF0ZWRTdGF0ZSIsImdldExleGVyUG9zaXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js":
/*!***************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LooksAhead: () => (/* binding */ LooksAhead),\n/* harmony export */   collectMethods: () => (/* binding */ collectMethods)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,has!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=forEach,has!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../grammar/keys.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n/* harmony import */ var _grammar_llk_lookahead_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/llk_lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js\");\n\n\n\n\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */ class LooksAhead {\n    initLooksAhead(config) {\n        this.dynamicTokensEnabled = (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, \"dynamicTokensEnabled\") ? config.dynamicTokensEnabled // assumes end user provides the correct config value/type\n         : _parser_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n        this.maxLookahead = (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, \"maxLookahead\") ? config.maxLookahead // assumes end user provides the correct config value/type\n         : _parser_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PARSER_CONFIG.maxLookahead;\n        this.lookaheadStrategy = (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, \"lookaheadStrategy\") ? config.lookaheadStrategy // assumes end user provides the correct config value/type\n         : new _grammar_llk_lookahead_js__WEBPACK_IMPORTED_MODULE_3__.LLkLookaheadStrategy({\n            maxLookahead: this.maxLookahead\n        });\n        this.lookAheadFuncsCache = new Map();\n    }\n    preComputeLookaheadFunctions(rules) {\n        (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(rules, (currRule)=>{\n            this.TRACE_INIT(`${currRule.name} Rule Lookahead`, ()=>{\n                const { alternation, repetition, option, repetitionMandatory, repetitionMandatoryWithSeparator, repetitionWithSeparator } = collectMethods(currRule);\n                (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(alternation, (currProd)=>{\n                    const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n                    this.TRACE_INIT(`${(0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd)}${prodIdx}`, ()=>{\n                        const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n                            prodOccurrence: currProd.idx,\n                            rule: currRule,\n                            maxLookahead: currProd.maxLookahead || this.maxLookahead,\n                            hasPredicates: currProd.hasPredicates,\n                            dynamicTokensEnabled: this.dynamicTokensEnabled\n                        });\n                        const key = (0,_grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.getKeyForAutomaticLookahead)(this.fullRuleNameToShort[currRule.name], _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.OR_IDX, currProd.idx);\n                        this.setLaFuncCache(key, laFunc);\n                    });\n                });\n                (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(repetition, (currProd)=>{\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.MANY_IDX, \"Repetition\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n                (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(option, (currProd)=>{\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.OPTION_IDX, \"Option\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n                (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(repetitionMandatory, (currProd)=>{\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.AT_LEAST_ONE_IDX, \"RepetitionMandatory\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n                (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(repetitionMandatoryWithSeparator, (currProd)=>{\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.AT_LEAST_ONE_SEP_IDX, \"RepetitionMandatoryWithSeparator\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n                (0,_barrel_optimize_names_forEach_has_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(repetitionWithSeparator, (currProd)=>{\n                    this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.MANY_SEP_IDX, \"RepetitionWithSeparator\", currProd.maxLookahead, (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.getProductionDslName)(currProd));\n                });\n            });\n        });\n    }\n    computeLookaheadFunc(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n        this.TRACE_INIT(`${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`, ()=>{\n            const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n                prodOccurrence,\n                rule,\n                maxLookahead: prodMaxLookahead || this.maxLookahead,\n                dynamicTokensEnabled: this.dynamicTokensEnabled,\n                prodType\n            });\n            const key = (0,_grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.getKeyForAutomaticLookahead)(this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\n            this.setLaFuncCache(key, laFunc);\n        });\n    }\n    // this actually returns a number, but it is always used as a string (object prop key)\n    getKeyForAutomaticLookahead(dslMethodIdx, occurrence) {\n        const currRuleShortName = this.getLastExplicitRuleShortName();\n        return (0,_grammar_keys_js__WEBPACK_IMPORTED_MODULE_1__.getKeyForAutomaticLookahead)(currRuleShortName, dslMethodIdx, occurrence);\n    }\n    getLaFuncFromCache(key) {\n        return this.lookAheadFuncsCache.get(key);\n    }\n    /* istanbul ignore next */ setLaFuncCache(key, value) {\n        this.lookAheadFuncsCache.set(key, value);\n    }\n}\nclass DslMethodsCollectorVisitor extends _chevrotain_gast__WEBPACK_IMPORTED_MODULE_2__.GAstVisitor {\n    constructor(){\n        super(...arguments);\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: []\n        };\n    }\n    reset() {\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: []\n        };\n    }\n    visitOption(option) {\n        this.dslMethods.option.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.dslMethods.repetitionWithSeparator.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.dslMethods.repetitionMandatory.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.dslMethods.repetition.push(many);\n    }\n    visitAlternation(or) {\n        this.dslMethods.alternation.push(or);\n    }\n}\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nfunction collectMethods(rule) {\n    collectorVisitor.reset();\n    rule.accept(collectorVisitor);\n    const dslMethods = collectorVisitor.dslMethods;\n    // avoid uncleaned references\n    collectorVisitor.reset();\n    return dslMethods;\n} //# sourceMappingURL=looksahead.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerformanceTracer: () => (/* binding */ PerformanceTracer)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_has_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=has!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n\n\n/**\n * Trait responsible for runtime parsing errors.\n */ class PerformanceTracer {\n    initPerformanceTracer(config) {\n        if ((0,_barrel_optimize_names_has_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(config, \"traceInitPerf\")) {\n            const userTraceInitPerf = config.traceInitPerf;\n            const traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n            this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf; // assumes end user provides the correct config value/type\n        } else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = _parser_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            const indent = new Array(this.traceInitIndent + 1).join(\"\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(`${indent}--> <${phaseDesc}>`);\n            }\n            const { time, value } = (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_0__.timer)(phaseImpl);\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */ const traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n            }\n            this.traceInitIndent--;\n            return value;\n        } else {\n            return phaseImpl();\n        }\n    }\n} //# sourceMappingURL=perf_tracer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvcGVyZl90cmFjZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnQztBQUNVO0FBQ1c7QUFDckQ7O0NBRUMsR0FDTSxNQUFNRztJQUNUQyxzQkFBc0JDLE1BQU0sRUFBRTtRQUMxQixJQUFJTCxnRkFBR0EsQ0FBQ0ssUUFBUSxrQkFBa0I7WUFDOUIsTUFBTUMsb0JBQW9CRCxPQUFPRSxhQUFhO1lBQzlDLE1BQU1DLGdCQUFnQixPQUFPRixzQkFBc0I7WUFDbkQsSUFBSSxDQUFDRyxpQkFBaUIsR0FBR0QsZ0JBQ25CRixvQkFDQUk7WUFDTixJQUFJLENBQUNILGFBQWEsR0FBR0MsZ0JBQ2ZGLG9CQUFvQixJQUNwQkEsbUJBQW1CLDBEQUEwRDtRQUN2RixPQUNLO1lBQ0QsSUFBSSxDQUFDRyxpQkFBaUIsR0FBRztZQUN6QixJQUFJLENBQUNGLGFBQWEsR0FBR0wsNkRBQXFCQSxDQUFDSyxhQUFhO1FBQzVEO1FBQ0EsSUFBSSxDQUFDSSxlQUFlLEdBQUcsQ0FBQztJQUM1QjtJQUNBQyxXQUFXQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtRQUM3QixzREFBc0Q7UUFDdEQsb0NBQW9DO1FBQ3BDLElBQUksSUFBSSxDQUFDUCxhQUFhLEtBQUssTUFBTTtZQUM3QixJQUFJLENBQUNJLGVBQWU7WUFDcEIsTUFBTUksU0FBUyxJQUFJQyxNQUFNLElBQUksQ0FBQ0wsZUFBZSxHQUFHLEdBQUdNLElBQUksQ0FBQztZQUN4RCxJQUFJLElBQUksQ0FBQ04sZUFBZSxHQUFHLElBQUksQ0FBQ0YsaUJBQWlCLEVBQUU7Z0JBQy9DUyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFSixPQUFPLEtBQUssRUFBRUYsVUFBVSxDQUFDLENBQUM7WUFDN0M7WUFDQSxNQUFNLEVBQUVPLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUdwQix3REFBS0EsQ0FBQ2E7WUFDOUIsZ0dBQWdHLEdBQ2hHLE1BQU1RLGNBQWNGLE9BQU8sS0FBS0YsUUFBUUssSUFBSSxHQUFHTCxRQUFRQyxHQUFHO1lBQzFELElBQUksSUFBSSxDQUFDUixlQUFlLEdBQUcsSUFBSSxDQUFDRixpQkFBaUIsRUFBRTtnQkFDL0NhLFlBQVksQ0FBQyxFQUFFUCxPQUFPLEtBQUssRUFBRUYsVUFBVSxRQUFRLEVBQUVPLEtBQUssRUFBRSxDQUFDO1lBQzdEO1lBQ0EsSUFBSSxDQUFDVCxlQUFlO1lBQ3BCLE9BQU9VO1FBQ1gsT0FDSztZQUNELE9BQU9QO1FBQ1g7SUFDSjtBQUNKLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci90cmFpdHMvcGVyZl90cmFjZXIuanM/NDE4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYXMgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyB0aW1lciB9IGZyb20gXCJAY2hldnJvdGFpbi91dGlsc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9QQVJTRVJfQ09ORklHIH0gZnJvbSBcIi4uL3BhcnNlci5qc1wiO1xuLyoqXG4gKiBUcmFpdCByZXNwb25zaWJsZSBmb3IgcnVudGltZSBwYXJzaW5nIGVycm9ycy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBlcmZvcm1hbmNlVHJhY2VyIHtcbiAgICBpbml0UGVyZm9ybWFuY2VUcmFjZXIoY29uZmlnKSB7XG4gICAgICAgIGlmIChoYXMoY29uZmlnLCBcInRyYWNlSW5pdFBlcmZcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJUcmFjZUluaXRQZXJmID0gY29uZmlnLnRyYWNlSW5pdFBlcmY7XG4gICAgICAgICAgICBjb25zdCB0cmFjZUlzTnVtYmVyID0gdHlwZW9mIHVzZXJUcmFjZUluaXRQZXJmID09PSBcIm51bWJlclwiO1xuICAgICAgICAgICAgdGhpcy50cmFjZUluaXRNYXhJZGVudCA9IHRyYWNlSXNOdW1iZXJcbiAgICAgICAgICAgICAgICA/IHVzZXJUcmFjZUluaXRQZXJmXG4gICAgICAgICAgICAgICAgOiBJbmZpbml0eTtcbiAgICAgICAgICAgIHRoaXMudHJhY2VJbml0UGVyZiA9IHRyYWNlSXNOdW1iZXJcbiAgICAgICAgICAgICAgICA/IHVzZXJUcmFjZUluaXRQZXJmID4gMFxuICAgICAgICAgICAgICAgIDogdXNlclRyYWNlSW5pdFBlcmY7IC8vIGFzc3VtZXMgZW5kIHVzZXIgcHJvdmlkZXMgdGhlIGNvcnJlY3QgY29uZmlnIHZhbHVlL3R5cGVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2VJbml0TWF4SWRlbnQgPSAwO1xuICAgICAgICAgICAgdGhpcy50cmFjZUluaXRQZXJmID0gREVGQVVMVF9QQVJTRVJfQ09ORklHLnRyYWNlSW5pdFBlcmY7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFjZUluaXRJbmRlbnQgPSAtMTtcbiAgICB9XG4gICAgVFJBQ0VfSU5JVChwaGFzZURlc2MsIHBoYXNlSW1wbCkge1xuICAgICAgICAvLyBObyBuZWVkIHRvIG9wdGltaXplIHRoaXMgdXNpbmcgTk9PUCBwYXR0ZXJuIGJlY2F1c2VcbiAgICAgICAgLy8gSXQgaXMgbm90IGNhbGxlZCBpbiBhIGhvdCBzcG90Li4uXG4gICAgICAgIGlmICh0aGlzLnRyYWNlSW5pdFBlcmYgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2VJbml0SW5kZW50Kys7XG4gICAgICAgICAgICBjb25zdCBpbmRlbnQgPSBuZXcgQXJyYXkodGhpcy50cmFjZUluaXRJbmRlbnQgKyAxKS5qb2luKFwiXFx0XCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMudHJhY2VJbml0SW5kZW50IDwgdGhpcy50cmFjZUluaXRNYXhJZGVudCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2luZGVudH0tLT4gPCR7cGhhc2VEZXNjfT5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgdGltZSwgdmFsdWUgfSA9IHRpbWVyKHBoYXNlSW1wbCk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtIERpZmZpY3VsdCB0byByZXByb2R1Y2Ugc3BlY2lmaWMgcGVyZm9ybWFuY2UgYmVoYXZpb3IgKD4xMG1zKSBpbiB0ZXN0cyAqL1xuICAgICAgICAgICAgY29uc3QgdHJhY2VNZXRob2QgPSB0aW1lID4gMTAgPyBjb25zb2xlLndhcm4gOiBjb25zb2xlLmxvZztcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNlSW5pdEluZGVudCA8IHRoaXMudHJhY2VJbml0TWF4SWRlbnQpIHtcbiAgICAgICAgICAgICAgICB0cmFjZU1ldGhvZChgJHtpbmRlbnR9PC0tIDwke3BoYXNlRGVzY30+IHRpbWU6ICR7dGltZX1tc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50cmFjZUluaXRJbmRlbnQtLTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwaGFzZUltcGwoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZfdHJhY2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJoYXMiLCJ0aW1lciIsIkRFRkFVTFRfUEFSU0VSX0NPTkZJRyIsIlBlcmZvcm1hbmNlVHJhY2VyIiwiaW5pdFBlcmZvcm1hbmNlVHJhY2VyIiwiY29uZmlnIiwidXNlclRyYWNlSW5pdFBlcmYiLCJ0cmFjZUluaXRQZXJmIiwidHJhY2VJc051bWJlciIsInRyYWNlSW5pdE1heElkZW50IiwiSW5maW5pdHkiLCJ0cmFjZUluaXRJbmRlbnQiLCJUUkFDRV9JTklUIiwicGhhc2VEZXNjIiwicGhhc2VJbXBsIiwiaW5kZW50IiwiQXJyYXkiLCJqb2luIiwiY29uc29sZSIsImxvZyIsInRpbWUiLCJ2YWx1ZSIsInRyYWNlTWV0aG9kIiwid2FybiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecognizerApi: () => (/* binding */ RecognizerApi)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_includes_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=includes,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var _barrel_optimize_names_includes_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=includes,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _errors_public_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/errors_public.js\");\n/* harmony import */ var _grammar_checks_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/checks.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/checks.js\");\n/* harmony import */ var _chevrotain_gast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chevrotain/gast */ \"(ssr)/./node_modules/@chevrotain/gast/lib/src/api.js\");\n\n\n\n\n\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */ class RecognizerApi {\n    ACTION(impl) {\n        return impl.call(this);\n    }\n    consume(idx, tokType, options) {\n        return this.consumeInternal(tokType, idx, options);\n    }\n    subrule(idx, ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, idx, options);\n    }\n    option(idx, actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, idx);\n    }\n    or(idx, altsOrOpts) {\n        return this.orInternal(altsOrOpts, idx);\n    }\n    many(idx, actionORMethodDef) {\n        return this.manyInternal(idx, actionORMethodDef);\n    }\n    atLeastOne(idx, actionORMethodDef) {\n        return this.atLeastOneInternal(idx, actionORMethodDef);\n    }\n    CONSUME(tokType, options) {\n        return this.consumeInternal(tokType, 0, options);\n    }\n    CONSUME1(tokType, options) {\n        return this.consumeInternal(tokType, 1, options);\n    }\n    CONSUME2(tokType, options) {\n        return this.consumeInternal(tokType, 2, options);\n    }\n    CONSUME3(tokType, options) {\n        return this.consumeInternal(tokType, 3, options);\n    }\n    CONSUME4(tokType, options) {\n        return this.consumeInternal(tokType, 4, options);\n    }\n    CONSUME5(tokType, options) {\n        return this.consumeInternal(tokType, 5, options);\n    }\n    CONSUME6(tokType, options) {\n        return this.consumeInternal(tokType, 6, options);\n    }\n    CONSUME7(tokType, options) {\n        return this.consumeInternal(tokType, 7, options);\n    }\n    CONSUME8(tokType, options) {\n        return this.consumeInternal(tokType, 8, options);\n    }\n    CONSUME9(tokType, options) {\n        return this.consumeInternal(tokType, 9, options);\n    }\n    SUBRULE(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 0, options);\n    }\n    SUBRULE1(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 1, options);\n    }\n    SUBRULE2(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 2, options);\n    }\n    SUBRULE3(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 3, options);\n    }\n    SUBRULE4(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 4, options);\n    }\n    SUBRULE5(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 5, options);\n    }\n    SUBRULE6(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 6, options);\n    }\n    SUBRULE7(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 7, options);\n    }\n    SUBRULE8(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 8, options);\n    }\n    SUBRULE9(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 9, options);\n    }\n    OPTION(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 0);\n    }\n    OPTION1(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 1);\n    }\n    OPTION2(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 2);\n    }\n    OPTION3(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 3);\n    }\n    OPTION4(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 4);\n    }\n    OPTION5(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 5);\n    }\n    OPTION6(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 6);\n    }\n    OPTION7(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 7);\n    }\n    OPTION8(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 8);\n    }\n    OPTION9(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 9);\n    }\n    OR(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 0);\n    }\n    OR1(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 1);\n    }\n    OR2(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 2);\n    }\n    OR3(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 3);\n    }\n    OR4(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 4);\n    }\n    OR5(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 5);\n    }\n    OR6(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 6);\n    }\n    OR7(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 7);\n    }\n    OR8(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 8);\n    }\n    OR9(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 9);\n    }\n    MANY(actionORMethodDef) {\n        this.manyInternal(0, actionORMethodDef);\n    }\n    MANY1(actionORMethodDef) {\n        this.manyInternal(1, actionORMethodDef);\n    }\n    MANY2(actionORMethodDef) {\n        this.manyInternal(2, actionORMethodDef);\n    }\n    MANY3(actionORMethodDef) {\n        this.manyInternal(3, actionORMethodDef);\n    }\n    MANY4(actionORMethodDef) {\n        this.manyInternal(4, actionORMethodDef);\n    }\n    MANY5(actionORMethodDef) {\n        this.manyInternal(5, actionORMethodDef);\n    }\n    MANY6(actionORMethodDef) {\n        this.manyInternal(6, actionORMethodDef);\n    }\n    MANY7(actionORMethodDef) {\n        this.manyInternal(7, actionORMethodDef);\n    }\n    MANY8(actionORMethodDef) {\n        this.manyInternal(8, actionORMethodDef);\n    }\n    MANY9(actionORMethodDef) {\n        this.manyInternal(9, actionORMethodDef);\n    }\n    MANY_SEP(options) {\n        this.manySepFirstInternal(0, options);\n    }\n    MANY_SEP1(options) {\n        this.manySepFirstInternal(1, options);\n    }\n    MANY_SEP2(options) {\n        this.manySepFirstInternal(2, options);\n    }\n    MANY_SEP3(options) {\n        this.manySepFirstInternal(3, options);\n    }\n    MANY_SEP4(options) {\n        this.manySepFirstInternal(4, options);\n    }\n    MANY_SEP5(options) {\n        this.manySepFirstInternal(5, options);\n    }\n    MANY_SEP6(options) {\n        this.manySepFirstInternal(6, options);\n    }\n    MANY_SEP7(options) {\n        this.manySepFirstInternal(7, options);\n    }\n    MANY_SEP8(options) {\n        this.manySepFirstInternal(8, options);\n    }\n    MANY_SEP9(options) {\n        this.manySepFirstInternal(9, options);\n    }\n    AT_LEAST_ONE(actionORMethodDef) {\n        this.atLeastOneInternal(0, actionORMethodDef);\n    }\n    AT_LEAST_ONE1(actionORMethodDef) {\n        return this.atLeastOneInternal(1, actionORMethodDef);\n    }\n    AT_LEAST_ONE2(actionORMethodDef) {\n        this.atLeastOneInternal(2, actionORMethodDef);\n    }\n    AT_LEAST_ONE3(actionORMethodDef) {\n        this.atLeastOneInternal(3, actionORMethodDef);\n    }\n    AT_LEAST_ONE4(actionORMethodDef) {\n        this.atLeastOneInternal(4, actionORMethodDef);\n    }\n    AT_LEAST_ONE5(actionORMethodDef) {\n        this.atLeastOneInternal(5, actionORMethodDef);\n    }\n    AT_LEAST_ONE6(actionORMethodDef) {\n        this.atLeastOneInternal(6, actionORMethodDef);\n    }\n    AT_LEAST_ONE7(actionORMethodDef) {\n        this.atLeastOneInternal(7, actionORMethodDef);\n    }\n    AT_LEAST_ONE8(actionORMethodDef) {\n        this.atLeastOneInternal(8, actionORMethodDef);\n    }\n    AT_LEAST_ONE9(actionORMethodDef) {\n        this.atLeastOneInternal(9, actionORMethodDef);\n    }\n    AT_LEAST_ONE_SEP(options) {\n        this.atLeastOneSepFirstInternal(0, options);\n    }\n    AT_LEAST_ONE_SEP1(options) {\n        this.atLeastOneSepFirstInternal(1, options);\n    }\n    AT_LEAST_ONE_SEP2(options) {\n        this.atLeastOneSepFirstInternal(2, options);\n    }\n    AT_LEAST_ONE_SEP3(options) {\n        this.atLeastOneSepFirstInternal(3, options);\n    }\n    AT_LEAST_ONE_SEP4(options) {\n        this.atLeastOneSepFirstInternal(4, options);\n    }\n    AT_LEAST_ONE_SEP5(options) {\n        this.atLeastOneSepFirstInternal(5, options);\n    }\n    AT_LEAST_ONE_SEP6(options) {\n        this.atLeastOneSepFirstInternal(6, options);\n    }\n    AT_LEAST_ONE_SEP7(options) {\n        this.atLeastOneSepFirstInternal(7, options);\n    }\n    AT_LEAST_ONE_SEP8(options) {\n        this.atLeastOneSepFirstInternal(8, options);\n    }\n    AT_LEAST_ONE_SEP9(options) {\n        this.atLeastOneSepFirstInternal(9, options);\n    }\n    RULE(name, implementation, config = _parser_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RULE_CONFIG) {\n        if ((0,_barrel_optimize_names_includes_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.definedRulesNames, name)) {\n            const errMsg = _errors_public_js__WEBPACK_IMPORTED_MODULE_2__.defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n                topLevelRule: name,\n                grammarName: this.className\n            });\n            const error = {\n                message: errMsg,\n                type: _parser_js__WEBPACK_IMPORTED_MODULE_1__.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n                ruleName: name\n            };\n            this.definitionErrors.push(error);\n        }\n        this.definedRulesNames.push(name);\n        const ruleImplementation = this.defineRule(name, implementation, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    }\n    OVERRIDE_RULE(name, impl, config = _parser_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RULE_CONFIG) {\n        const ruleErrors = (0,_grammar_checks_js__WEBPACK_IMPORTED_MODULE_3__.validateRuleIsOverridden)(name, this.definedRulesNames, this.className);\n        this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n        const ruleImplementation = this.defineRule(name, impl, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    }\n    BACKTRACK(grammarRule, args) {\n        return function() {\n            // save org state\n            this.isBackTrackingStack.push(1);\n            const orgState = this.saveRecogState();\n            try {\n                grammarRule.apply(this, args);\n                // if no exception was thrown we have succeed parsing the rule.\n                return true;\n            } catch (e) {\n                if ((0,_exceptions_public_js__WEBPACK_IMPORTED_MODULE_0__.isRecognitionException)(e)) {\n                    return false;\n                } else {\n                    throw e;\n                }\n            } finally{\n                this.reloadRecogState(orgState);\n                this.isBackTrackingStack.pop();\n            }\n        };\n    }\n    // GAST export APIs\n    getGAstProductions() {\n        return this.gastProductionsCache;\n    }\n    getSerializedGastProductions() {\n        return (0,_chevrotain_gast__WEBPACK_IMPORTED_MODULE_4__.serializeGrammar)((0,_barrel_optimize_names_includes_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this.gastProductionsCache));\n    }\n} //# sourceMappingURL=recognizer_api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecognizerEngine: () => (/* binding */ RecognizerEngine)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/every.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/uniq.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isObject.js\");\n/* harmony import */ var _barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=clone,every,flatten,has,isArray,isEmpty,isObject,reduce,uniq,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../grammar/keys.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/keys.js\");\n/* harmony import */ var _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../grammar/lookahead.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/interpreter.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n/* harmony import */ var _recoverable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./recoverable.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js\");\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../scan/tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n\n\n\n\n\n\n\n\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */ class RecognizerEngine {\n    initRecognizerEngine(tokenVocabulary, config) {\n        this.className = this.constructor.name;\n        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n        this.shortRuleNameToFull = {};\n        this.fullRuleNameToShort = {};\n        this.ruleShortNameIdx = 256;\n        this.tokenMatcher = _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.tokenStructuredMatcherNoCategories;\n        this.subruleIdx = 0;\n        this.definedRulesNames = [];\n        this.tokensMap = {};\n        this.isBackTrackingStack = [];\n        this.RULE_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n        this.gastProductionsCache = {};\n        if ((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(config, \"serializedGrammar\")) {\n            throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" + \"\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" + \"\tFor Further details.\");\n        }\n        if ((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokenVocabulary)) {\n            // This only checks for Token vocabularies provided as arrays.\n            // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n            // rather than all edge cases of empty Token vocabularies.\n            if ((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(tokenVocabulary)) {\n                throw Error(\"A Token Vocabulary cannot be empty.\\n\" + \"\tNote that the first argument for the parser constructor\\n\" + \"\tis no longer a Token vector (since v4.0).\");\n            }\n            if (typeof tokenVocabulary[0].startOffset === \"number\") {\n                throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" + \"\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" + \"\tFor Further details.\");\n            }\n        }\n        if ((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokenVocabulary)) {\n            this.tokensMap = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(tokenVocabulary, (acc, tokType)=>{\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        } else if ((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(tokenVocabulary, \"modes\") && (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(tokenVocabulary.modes)), _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.isTokenType)) {\n            const allTokenTypes = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(tokenVocabulary.modes));\n            const uniqueTokens = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(allTokenTypes);\n            this.tokensMap = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(uniqueTokens, (acc, tokType)=>{\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        } else if ((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(tokenVocabulary)) {\n            this.tokensMap = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(tokenVocabulary);\n        } else {\n            throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" + \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n        }\n        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n        // parsed with a clear error message (\"expecting EOF but found ...\")\n        this.tokensMap[\"EOF\"] = _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_6__.EOF;\n        const allTokenTypes = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(tokenVocabulary, \"modes\") ? (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(tokenVocabulary.modes)) : (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(tokenVocabulary);\n        const noTokenCategoriesUsed = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(allTokenTypes, (tokenConstructor)=>(0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(tokenConstructor.categoryMatches));\n        this.tokenMatcher = noTokenCategoriesUsed ? _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.tokenStructuredMatcherNoCategories : _scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.tokenStructuredMatcher;\n        // Because ES2015+ syntax should be supported for creating Token classes\n        // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n        (0,_scan_tokens_js__WEBPACK_IMPORTED_MODULE_7__.augmentTokenTypes)((0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(this.tokensMap));\n    }\n    defineRule(ruleName, impl, config) {\n        if (this.selfAnalysisDone) {\n            throw Error(`Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` + `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);\n        }\n        const resyncEnabled = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(config, \"resyncEnabled\") ? config.resyncEnabled // assumes end user provides the correct config value/type\n         : _parser_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RULE_CONFIG.resyncEnabled;\n        const recoveryValueFunc = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(config, \"recoveryValueFunc\") ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n         : _parser_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RULE_CONFIG.recoveryValueFunc;\n        // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n        // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n        const shortName = this.ruleShortNameIdx << _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.BITS_FOR_METHOD_TYPE + _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.BITS_FOR_OCCURRENCE_IDX;\n        this.ruleShortNameIdx++;\n        this.shortRuleNameToFull[shortName] = ruleName;\n        this.fullRuleNameToShort[ruleName] = shortName;\n        let invokeRuleWithTry;\n        // Micro optimization, only check the condition **once** on rule definition\n        // instead of **every single** rule invocation.\n        if (this.outputCst === true) {\n            invokeRuleWithTry = function invokeRuleWithTry(...args) {\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    impl.apply(this, args);\n                    const cst = this.CST_STACK[this.CST_STACK.length - 1];\n                    this.cstPostRule(cst);\n                    return cst;\n                } catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                } finally{\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        } else {\n            invokeRuleWithTry = function invokeRuleWithTryCst(...args) {\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    return impl.apply(this, args);\n                } catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                } finally{\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        const wrappedGrammarRule = Object.assign(invokeRuleWithTry, {\n            ruleName,\n            originalGrammarAction: impl\n        });\n        return wrappedGrammarRule;\n    }\n    invokeRuleCatch(e, resyncEnabledConfig, recoveryValueFunc) {\n        const isFirstInvokedRule = this.RULE_STACK.length === 1;\n        // note the reSync is always enabled for the first rule invocation, because we must always be able to\n        // reSync with EOF and just output some INVALID ParseTree\n        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n        // path is really the most valid one\n        const reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n        if ((0,_exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.isRecognitionException)(e)) {\n            const recogError = e;\n            if (reSyncEnabled) {\n                const reSyncTokType = this.findReSyncTokenType();\n                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n                    if (this.outputCst) {\n                        const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        return partialCstResult;\n                    } else {\n                        return recoveryValueFunc(e);\n                    }\n                } else {\n                    if (this.outputCst) {\n                        const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        recogError.partialCstResult = partialCstResult;\n                    }\n                    // to be handled Further up the call stack\n                    throw recogError;\n                }\n            } else if (isFirstInvokedRule) {\n                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n                this.moveToTerminatedState();\n                // the parser should never throw one of its own errors outside its flow.\n                // even if error recovery is disabled\n                return recoveryValueFunc(e);\n            } else {\n                // to be recovered Further up the call stack\n                throw recogError;\n            }\n        } else {\n            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n            throw e;\n        }\n    }\n    // Implementation of parsing DSL\n    optionInternal(actionORMethodDef, occurrence) {\n        const key = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.OPTION_IDX, occurrence);\n        return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    }\n    optionInternalLogic(actionORMethodDef, occurrence, key) {\n        let lookAheadFunc = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookAheadFunc;\n                lookAheadFunc = ()=>{\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        } else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            return action.call(this);\n        }\n        return undefined;\n    }\n    atLeastOneInternal(prodOccurrence, actionORMethodDef) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_IDX, prodOccurrence);\n        return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key) {\n        let lookAheadFunc = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookAheadFunc;\n                lookAheadFunc = ()=>{\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        } else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            let notStuck = this.doSingleRepetition(action);\n            while(lookAheadFunc.call(this) === true && notStuck === true){\n                notStuck = this.doSingleRepetition(action);\n            }\n        } else {\n            throw this.raiseEarlyExitException(prodOccurrence, _grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n        }\n        // note that while it may seem that this can cause an error because by using a recursive call to\n        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [\n            prodOccurrence,\n            actionORMethodDef\n        ], lookAheadFunc, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_IDX, prodOccurrence, _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterAtLeastOneWalker);\n    }\n    atLeastOneSepFirstInternal(prodOccurrence, options) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    atLeastOneSepFirstInternalLogic(prodOccurrence, options, key) {\n        const action = options.DEF;\n        const separator = options.SEP;\n        const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLookaheadFunc.call(this) === true) {\n            action.call(this);\n            //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n            //  because it is only needed in error recovery scenarios.\n            const separatorLookAheadFunc = ()=>{\n                return this.tokenMatcher(this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while(this.tokenMatcher(this.LA(1), separator) === true){\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterAtLeastOneSepWalker\n            ], separatorLookAheadFunc, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_SEP_IDX, prodOccurrence, _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterAtLeastOneSepWalker);\n        } else {\n            throw this.raiseEarlyExitException(prodOccurrence, _grammar_lookahead_js__WEBPACK_IMPORTED_MODULE_2__.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n        }\n    }\n    manyInternal(prodOccurrence, actionORMethodDef) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.MANY_IDX, prodOccurrence);\n        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    manyInternalLogic(prodOccurrence, actionORMethodDef, key) {\n        let lookaheadFunction = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookaheadFunction;\n                lookaheadFunction = ()=>{\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        } else {\n            action = actionORMethodDef;\n        }\n        let notStuck = true;\n        while(lookaheadFunction.call(this) === true && notStuck === true){\n            notStuck = this.doSingleRepetition(action);\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.manyInternal, [\n            prodOccurrence,\n            actionORMethodDef\n        ], lookaheadFunction, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.MANY_IDX, prodOccurrence, _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterManyWalker, // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck);\n    }\n    manySepFirstInternal(prodOccurrence, options) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.MANY_SEP_IDX, prodOccurrence);\n        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    manySepFirstInternalLogic(prodOccurrence, options, key) {\n        const action = options.DEF;\n        const separator = options.SEP;\n        const firstIterationLaFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLaFunc.call(this) === true) {\n            action.call(this);\n            const separatorLookAheadFunc = ()=>{\n                return this.tokenMatcher(this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while(this.tokenMatcher(this.LA(1), separator) === true){\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterManySepWalker\n            ], separatorLookAheadFunc, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.MANY_SEP_IDX, prodOccurrence, _grammar_interpreter_js__WEBPACK_IMPORTED_MODULE_3__.NextTerminalAfterManySepWalker);\n        }\n    }\n    repetitionSepSecondInternal(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n        while(separatorLookAheadFunc()){\n            // note that this CONSUME will never enter recovery because\n            // the separatorLookAheadFunc checks that the separator really does exist.\n            this.CONSUME(separator);\n            action.call(this);\n        }\n        // we can only arrive to this function after an error\n        // has occurred (hence the name 'second') so the following\n        // IF will always be entered, its possible to remove it...\n        // however it is kept to avoid confusion and be consistent.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        /* istanbul ignore else */ this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n            prodOccurrence,\n            separator,\n            separatorLookAheadFunc,\n            action,\n            nextTerminalAfterWalker\n        ], separatorLookAheadFunc, _grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n    }\n    doSingleRepetition(action) {\n        const beforeIteration = this.getLexerPosition();\n        action.call(this);\n        const afterIteration = this.getLexerPosition();\n        // This boolean will indicate if this repetition progressed\n        // or if we are \"stuck\" (potential infinite loop in the repetition).\n        return afterIteration > beforeIteration;\n    }\n    orInternal(altsOrOpts, occurrence) {\n        const laKey = this.getKeyForAutomaticLookahead(_grammar_keys_js__WEBPACK_IMPORTED_MODULE_0__.OR_IDX, occurrence);\n        const alts = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n        const laFunc = this.getLaFuncFromCache(laKey);\n        const altIdxToTake = laFunc.call(this, alts);\n        if (altIdxToTake !== undefined) {\n            const chosenAlternative = alts[altIdxToTake];\n            return chosenAlternative.ALT.call(this);\n        }\n        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    }\n    ruleFinallyStateUpdate() {\n        this.RULE_STACK.pop();\n        this.RULE_OCCURRENCE_STACK.pop();\n        // NOOP when cst is disabled\n        this.cstFinallyStateUpdate();\n        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n            const firstRedundantTok = this.LA(1);\n            const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n                firstRedundant: firstRedundantTok,\n                ruleName: this.getCurrRuleFullName()\n            });\n            this.SAVE_ERROR(new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.NotAllInputParsedException(errMsg, firstRedundantTok));\n        }\n    }\n    subruleInternal(ruleToCall, idx, options) {\n        let ruleResult;\n        try {\n            const args = options !== undefined ? options.ARGS : undefined;\n            this.subruleIdx = idx;\n            ruleResult = ruleToCall.apply(this, args);\n            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleToCall.ruleName);\n            return ruleResult;\n        } catch (e) {\n            throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n        }\n    }\n    subruleInternalError(e, options, ruleName) {\n        if ((0,_exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.isRecognitionException)(e) && e.partialCstResult !== undefined) {\n            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleName);\n            delete e.partialCstResult;\n        }\n        throw e;\n    }\n    consumeInternal(tokType, idx, options) {\n        let consumedToken;\n        try {\n            const nextToken = this.LA(1);\n            if (this.tokenMatcher(nextToken, tokType) === true) {\n                this.consumeToken();\n                consumedToken = nextToken;\n            } else {\n                this.consumeInternalError(tokType, nextToken, options);\n            }\n        } catch (eFromConsumption) {\n            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n        }\n        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined ? options.LABEL : tokType.name, consumedToken);\n        return consumedToken;\n    }\n    consumeInternalError(tokType, nextToken, options) {\n        let msg;\n        const previousToken = this.LA(0);\n        if (options !== undefined && options.ERR_MSG) {\n            msg = options.ERR_MSG;\n        } else {\n            msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: tokType,\n                actual: nextToken,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName()\n            });\n        }\n        throw this.SAVE_ERROR(new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.MismatchedTokenException(msg, nextToken, previousToken));\n    }\n    consumeInternalRecovery(tokType, idx, eFromConsumption) {\n        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n        // but the original syntax could have been parsed successfully without any backtracking + recovery\n        if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n        eFromConsumption.name === \"MismatchedTokenException\" && !this.isBackTracking()) {\n            const follows = this.getFollowsForInRuleRecovery(tokType, idx);\n            try {\n                return this.tryInRuleRecovery(tokType, follows);\n            } catch (eFromInRuleRecovery) {\n                if (eFromInRuleRecovery.name === _recoverable_js__WEBPACK_IMPORTED_MODULE_5__.IN_RULE_RECOVERY_EXCEPTION) {\n                    // failed in RuleRecovery.\n                    // throw the original error in order to trigger reSync error recovery\n                    throw eFromConsumption;\n                } else {\n                    throw eFromInRuleRecovery;\n                }\n            }\n        } else {\n            throw eFromConsumption;\n        }\n    }\n    saveRecogState() {\n        // errors is a getter which will clone the errors array\n        const savedErrors = this.errors;\n        const savedRuleStack = (0,_barrel_optimize_names_clone_every_flatten_has_isArray_isEmpty_isObject_reduce_uniq_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(this.RULE_STACK);\n        return {\n            errors: savedErrors,\n            lexerState: this.exportLexerState(),\n            RULE_STACK: savedRuleStack,\n            CST_STACK: this.CST_STACK\n        };\n    }\n    reloadRecogState(newState) {\n        this.errors = newState.errors;\n        this.importLexerState(newState.lexerState);\n        this.RULE_STACK = newState.RULE_STACK;\n    }\n    ruleInvocationStateUpdate(shortName, fullName, idxInCallingRule) {\n        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n        this.RULE_STACK.push(shortName);\n        // NOOP when cst is disabled\n        this.cstInvocationStateUpdate(fullName);\n    }\n    isBackTracking() {\n        return this.isBackTrackingStack.length !== 0;\n    }\n    getCurrRuleFullName() {\n        const shortName = this.getLastExplicitRuleShortName();\n        return this.shortRuleNameToFull[shortName];\n    }\n    shortRuleNameToFullName(shortName) {\n        return this.shortRuleNameToFull[shortName];\n    }\n    isAtEndOfInput() {\n        return this.tokenMatcher(this.LA(1), _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_6__.EOF);\n    }\n    reset() {\n        this.resetLexerState();\n        this.subruleIdx = 0;\n        this.isBackTrackingStack = [];\n        this.errors = [];\n        this.RULE_STACK = [];\n        // TODO: extract a specific reset for TreeBuilder trait\n        this.CST_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n    }\n} //# sourceMappingURL=recognizer_engine.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js":
/*!****************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EOF_FOLLOW_KEY: () => (/* binding */ EOF_FOLLOW_KEY),\n/* harmony export */   IN_RULE_RECOVERY_EXCEPTION: () => (/* binding */ IN_RULE_RECOVERY_EXCEPTION),\n/* harmony export */   InRuleRecoveryException: () => (/* binding */ InRuleRecoveryException),\n/* harmony export */   Recoverable: () => (/* binding */ Recoverable),\n/* harmony export */   attemptInRepetitionRecovery: () => (/* binding */ attemptInRepetitionRecovery)\n/* harmony export */ });\n/* harmony import */ var _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../scan/tokens_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\");\n/* harmony import */ var _barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=clone,dropRight,find,flatten,has,includes,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=clone,dropRight,find,flatten,has,includes,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/dropRight.js\");\n/* harmony import */ var _barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=clone,dropRight,find,flatten,has,includes,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=clone,dropRight,find,flatten,has,includes,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/find.js\");\n/* harmony import */ var _barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=clone,dropRight,find,flatten,has,includes,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var _barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=clone,dropRight,find,flatten,has,includes,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=clone,dropRight,find,flatten,has,includes,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var _barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=clone,dropRight,find,flatten,has,includes,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../exceptions_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/exceptions_public.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/constants.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n\n\n\n\nconst EOF_FOLLOW_KEY = {};\nconst IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nclass InRuleRecoveryException extends Error {\n    constructor(message){\n        super(message);\n        this.name = IN_RULE_RECOVERY_EXCEPTION;\n    }\n}\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */ class Recoverable {\n    initRecoverable(config) {\n        this.firstAfterRepMap = {};\n        this.resyncFollows = {};\n        this.recoveryEnabled = (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, \"recoveryEnabled\") ? config.recoveryEnabled // assumes end user provides the correct config value/type\n         : _parser_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_PARSER_CONFIG.recoveryEnabled;\n        // performance optimization, NOOP will be inlined which\n        // effectively means that this optional feature does not exist\n        // when not used.\n        if (this.recoveryEnabled) {\n            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n        }\n    }\n    getTokenToInsert(tokType) {\n        const tokToInsert = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.createTokenInstance)(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n        tokToInsert.isInsertedInRecovery = true;\n        return tokToInsert;\n    }\n    canTokenTypeBeInsertedInRecovery(tokType) {\n        return true;\n    }\n    canTokenTypeBeDeletedInRecovery(tokType) {\n        return true;\n    }\n    tryInRepetitionRecovery(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n        // TODO: can the resyncTokenType be cached?\n        const reSyncTokType = this.findReSyncTokenType();\n        const savedLexerState = this.exportLexerState();\n        const resyncedTokens = [];\n        let passedResyncPoint = false;\n        const nextTokenWithoutResync = this.LA(1);\n        let currToken = this.LA(1);\n        const generateErrorMessage = ()=>{\n            const previousToken = this.LA(0);\n            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n            // the error that would have been thrown\n            const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: expectedTokType,\n                actual: nextTokenWithoutResync,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName()\n            });\n            const error = new _exceptions_public_js__WEBPACK_IMPORTED_MODULE_1__.MismatchedTokenException(msg, nextTokenWithoutResync, this.LA(0));\n            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n            error.resyncedTokens = (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(resyncedTokens);\n            this.SAVE_ERROR(error);\n        };\n        while(!passedResyncPoint){\n            // re-synced to a point where we can safely exit the repetition/\n            if (this.tokenMatcher(currToken, expectedTokType)) {\n                generateErrorMessage();\n                return; // must return here to avoid reverting the inputIdx\n            } else if (lookAheadFunc.call(this)) {\n                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n                generateErrorMessage();\n                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n                grammarRule.apply(this, grammarRuleArgs);\n                return; // must return here to avoid reverting the inputIdx\n            } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n                passedResyncPoint = true;\n            } else {\n                currToken = this.SKIP_TOKEN();\n                this.addToResyncTokens(currToken, resyncedTokens);\n            }\n        }\n        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n        // \"between rules\" resync recovery later in the flow.\n        this.importLexerState(savedLexerState);\n    }\n    shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck) {\n        // Edge case of arriving from a MANY repetition which is stuck\n        // Attempting recovery in this case could cause an infinite loop\n        if (notStuck === false) {\n            return false;\n        }\n        // no need to recover, next token is what we expect...\n        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n            return false;\n        }\n        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n        // and prefer some backtracking path that includes recovered errors.\n        if (this.isBackTracking()) {\n            return false;\n        }\n        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n        //noinspection RedundantIfStatementJS\n        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n            return false;\n        }\n        return true;\n    }\n    // Error Recovery functionality\n    getFollowsForInRuleRecovery(tokType, tokIdxInRule) {\n        const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n        const follows = this.getNextPossibleTokenTypes(grammarPath);\n        return follows;\n    }\n    tryInRuleRecovery(expectedTokType, follows) {\n        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n            const tokToInsert = this.getTokenToInsert(expectedTokType);\n            return tokToInsert;\n        }\n        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n            const nextTok = this.SKIP_TOKEN();\n            this.consumeToken();\n            return nextTok;\n        }\n        throw new InRuleRecoveryException(\"sad sad panda\");\n    }\n    canPerformInRuleRecovery(expectedToken, follows) {\n        return this.canRecoverWithSingleTokenInsertion(expectedToken, follows) || this.canRecoverWithSingleTokenDeletion(expectedToken);\n    }\n    canRecoverWithSingleTokenInsertion(expectedTokType, follows) {\n        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n            return false;\n        }\n        // must know the possible following tokens to perform single token insertion\n        if ((0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(follows)) {\n            return false;\n        }\n        const mismatchedTok = this.LA(1);\n        const isMisMatchedTokInFollows = (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(follows, (possibleFollowsTokType)=>{\n            return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n        }) !== undefined;\n        return isMisMatchedTokInFollows;\n    }\n    canRecoverWithSingleTokenDeletion(expectedTokType) {\n        if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n            return false;\n        }\n        const isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n        return isNextTokenWhatIsExpected;\n    }\n    isInCurrentRuleReSyncSet(tokenTypeIdx) {\n        const followKey = this.getCurrFollowKey();\n        const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n        return (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currentRuleReSyncSet, tokenTypeIdx);\n    }\n    findReSyncTokenType() {\n        const allPossibleReSyncTokTypes = this.flattenFollowSet();\n        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n        let nextToken = this.LA(1);\n        let k = 2;\n        while(true){\n            const foundMatch = (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(allPossibleReSyncTokTypes, (resyncTokType)=>{\n                const canMatch = (0,_scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.tokenMatcher)(nextToken, resyncTokType);\n                return canMatch;\n            });\n            if (foundMatch !== undefined) {\n                return foundMatch;\n            }\n            nextToken = this.LA(k);\n            k++;\n        }\n    }\n    getCurrFollowKey() {\n        // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n        if (this.RULE_STACK.length === 1) {\n            return EOF_FOLLOW_KEY;\n        }\n        const currRuleShortName = this.getLastExplicitRuleShortName();\n        const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n        const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n        return {\n            ruleName: this.shortRuleNameToFullName(currRuleShortName),\n            idxInCallingRule: currRuleIdx,\n            inRule: this.shortRuleNameToFullName(prevRuleShortName)\n        };\n    }\n    buildFullFollowKeyStack() {\n        const explicitRuleStack = this.RULE_STACK;\n        const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(explicitRuleStack, (ruleName, idx)=>{\n            if (idx === 0) {\n                return EOF_FOLLOW_KEY;\n            }\n            return {\n                ruleName: this.shortRuleNameToFullName(ruleName),\n                idxInCallingRule: explicitOccurrenceStack[idx],\n                inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n            };\n        });\n    }\n    flattenFollowSet() {\n        const followStack = (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(this.buildFullFollowKeyStack(), (currKey)=>{\n            return this.getFollowSetFromFollowKey(currKey);\n        });\n        return (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(followStack);\n    }\n    getFollowSetFromFollowKey(followKey) {\n        if (followKey === EOF_FOLLOW_KEY) {\n            return [\n                _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.EOF\n            ];\n        }\n        const followName = followKey.ruleName + followKey.idxInCallingRule + _constants_js__WEBPACK_IMPORTED_MODULE_2__.IN + followKey.inRule;\n        return this.resyncFollows[followName];\n    }\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    addToResyncTokens(token, resyncTokens) {\n        if (!this.tokenMatcher(token, _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.EOF)) {\n            resyncTokens.push(token);\n        }\n        return resyncTokens;\n    }\n    reSyncTo(tokType) {\n        const resyncedTokens = [];\n        let nextTok = this.LA(1);\n        while(this.tokenMatcher(nextTok, tokType) === false){\n            nextTok = this.SKIP_TOKEN();\n            this.addToResyncTokens(nextTok, resyncedTokens);\n        }\n        // the last token is not part of the error.\n        return (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(resyncedTokens);\n    }\n    attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n    }\n    getCurrentGrammarPath(tokType, tokIdxInRule) {\n        const pathRuleStack = this.getHumanReadableRuleStack();\n        const pathOccurrenceStack = (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(this.RULE_OCCURRENCE_STACK);\n        const grammarPath = {\n            ruleStack: pathRuleStack,\n            occurrenceStack: pathOccurrenceStack,\n            lastTok: tokType,\n            lastTokOccurrence: tokIdxInRule\n        };\n        return grammarPath;\n    }\n    getHumanReadableRuleStack() {\n        return (0,_barrel_optimize_names_clone_dropRight_find_flatten_has_includes_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(this.RULE_STACK, (currShortName)=>this.shortRuleNameToFullName(currShortName));\n    }\n}\nfunction attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    let firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === undefined) {\n        const currRuleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[currRuleName];\n        const walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n        firstAfterRepInfo = walker.startWalking();\n        this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    let expectTokAfterLastMatch = firstAfterRepInfo.token;\n    let nextTokIdx = firstAfterRepInfo.occurrence;\n    const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === undefined) {\n        expectTokAfterLastMatch = _scan_tokens_public_js__WEBPACK_IMPORTED_MODULE_0__.EOF;\n        nextTokIdx = 1;\n    }\n    // We don't have anything to re-sync to...\n    // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n        return;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n        // TODO: performance optimization: instead of passing the original args here, we modify\n        // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n        // to avoid searching the cache for it once more.\n        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n} //# sourceMappingURL=recoverable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TreeBuilder: () => (/* binding */ TreeBuilder)\n/* harmony export */ });\n/* harmony import */ var _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cst/cst.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst.js\");\n/* harmony import */ var _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=has,isUndefined,keys,noop!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=has,isUndefined,keys,noop!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/noop.js\");\n/* harmony import */ var _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=has,isUndefined,keys,noop!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=has,isUndefined,keys,noop!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/keys.js\");\n/* harmony import */ var _cst_cst_visitor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../cst/cst_visitor.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/parse/parser/parser.js\");\n\n\n\n\n/**\n * This trait is responsible for the CST building logic.\n */ class TreeBuilder {\n    initTreeBuilder(config) {\n        this.CST_STACK = [];\n        // outputCst is no longer exposed/defined in the pubic API\n        this.outputCst = config.outputCst;\n        this.nodeLocationTracking = (0,_barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(config, \"nodeLocationTracking\") ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n         : _parser_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n        if (!this.outputCst) {\n            this.cstInvocationStateUpdate = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            this.cstFinallyStateUpdate = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            this.cstPostTerminal = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            this.cstPostNonTerminal = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            this.cstPostRule = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n        } else {\n            if (/full/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.setNodeLocationFull;\n                    this.setNodeLocationFromNode = _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.setNodeLocationFull;\n                    this.cstPostRule = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n                } else {\n                    this.setNodeLocationFromToken = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.setNodeLocationFromNode = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.cstPostRule = this.cstPostRuleFull;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n                }\n            } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.setNodeLocationOnlyOffset;\n                    this.setNodeLocationFromNode = _cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.setNodeLocationOnlyOffset;\n                    this.cstPostRule = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n                } else {\n                    this.setNodeLocationFromToken = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.setNodeLocationFromNode = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                    this.cstPostRule = this.cstPostRuleOnlyOffset;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n                }\n            } else if (/none/i.test(this.nodeLocationTracking)) {\n                this.setNodeLocationFromToken = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                this.setNodeLocationFromNode = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                this.cstPostRule = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                this.setInitialNodeLocation = _barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n            } else {\n                throw Error(`Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`);\n            }\n        }\n    }\n    setInitialNodeLocationOnlyOffsetRecovery(cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            endOffset: NaN\n        };\n    }\n    setInitialNodeLocationOnlyOffsetRegular(cstNode) {\n        cstNode.location = {\n            // without error recovery the starting Location of a new CstNode is guaranteed\n            // To be the next Token's startOffset (for valid inputs).\n            // For invalid inputs there won't be any CSTOutput so this potential\n            // inaccuracy does not matter\n            startOffset: this.LA(1).startOffset,\n            endOffset: NaN\n        };\n    }\n    setInitialNodeLocationFullRecovery(cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            startLine: NaN,\n            startColumn: NaN,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    }\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */ setInitialNodeLocationFullRegular(cstNode) {\n        const nextToken = this.LA(1);\n        cstNode.location = {\n            startOffset: nextToken.startOffset,\n            startLine: nextToken.startLine,\n            startColumn: nextToken.startColumn,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    }\n    cstInvocationStateUpdate(fullRuleName) {\n        const cstNode = {\n            name: fullRuleName,\n            children: Object.create(null)\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    }\n    cstFinallyStateUpdate() {\n        this.CST_STACK.pop();\n    }\n    cstPostRuleFull(ruleCstNode) {\n        // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n        const prevToken = this.LA(0);\n        const loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n            loc.endLine = prevToken.endLine;\n            loc.endColumn = prevToken.endColumn;\n        } else {\n            loc.startOffset = NaN;\n            loc.startLine = NaN;\n            loc.startColumn = NaN;\n        }\n    }\n    cstPostRuleOnlyOffset(ruleCstNode) {\n        const prevToken = this.LA(0);\n        // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n        const loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n        } else {\n            loc.startOffset = NaN;\n        }\n    }\n    cstPostTerminal(key, consumedToken) {\n        const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n        (0,_cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.addTerminalToCst)(rootCst, consumedToken, key);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    }\n    cstPostNonTerminal(ruleCstResult, ruleName) {\n        const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n        (0,_cst_cst_js__WEBPACK_IMPORTED_MODULE_0__.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    }\n    getBaseCstVisitorConstructor() {\n        if ((0,_barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.baseCstVisitorConstructor)) {\n            const newBaseCstVisitorConstructor = (0,_cst_cst_visitor_js__WEBPACK_IMPORTED_MODULE_1__.createBaseSemanticVisitorConstructor)(this.className, (0,_barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this.gastProductionsCache));\n            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n            return newBaseCstVisitorConstructor;\n        }\n        return this.baseCstVisitorConstructor;\n    }\n    getBaseCstVisitorConstructorWithDefaults() {\n        if ((0,_barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.baseCstVisitorWithDefaultsConstructor)) {\n            const newConstructor = (0,_cst_cst_visitor_js__WEBPACK_IMPORTED_MODULE_1__.createBaseVisitorConstructorWithDefaults)(this.className, (0,_barrel_optimize_names_has_isUndefined_keys_noop_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n            this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n            return newConstructor;\n        }\n        return this.baseCstVisitorWithDefaultsConstructor;\n    }\n    getLastExplicitRuleShortName() {\n        const ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 1];\n    }\n    getPreviousExplicitRuleShortName() {\n        const ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 2];\n    }\n    getLastExplicitRuleOccurrenceIndex() {\n        const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return occurrenceStack[occurrenceStack.length - 1];\n    }\n} //# sourceMappingURL=tree_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js":
/*!****************************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyMixins: () => (/* binding */ applyMixins)\n/* harmony export */ });\nfunction applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach((baseCtor)=>{\n        const baseProto = baseCtor.prototype;\n        Object.getOwnPropertyNames(baseProto).forEach((propName)=>{\n            if (propName === \"constructor\") {\n                return;\n            }\n            const basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);\n            // Handle Accessors\n            if (basePropDescriptor && (basePropDescriptor.get || basePropDescriptor.set)) {\n                Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);\n            } else {\n                derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n            }\n        });\n    });\n} //# sourceMappingURL=apply_mixins.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci91dGlscy9hcHBseV9taXhpbnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLFlBQVlDLFdBQVcsRUFBRUMsU0FBUztJQUM5Q0EsVUFBVUMsT0FBTyxDQUFDLENBQUNDO1FBQ2YsTUFBTUMsWUFBWUQsU0FBU0UsU0FBUztRQUNwQ0MsT0FBT0MsbUJBQW1CLENBQUNILFdBQVdGLE9BQU8sQ0FBQyxDQUFDTTtZQUMzQyxJQUFJQSxhQUFhLGVBQWU7Z0JBQzVCO1lBQ0o7WUFDQSxNQUFNQyxxQkFBcUJILE9BQU9JLHdCQUF3QixDQUFDTixXQUFXSTtZQUN0RSxtQkFBbUI7WUFDbkIsSUFBSUMsc0JBQ0NBLENBQUFBLG1CQUFtQkUsR0FBRyxJQUFJRixtQkFBbUJHLEdBQUcsR0FBRztnQkFDcEROLE9BQU9PLGNBQWMsQ0FBQ2IsWUFBWUssU0FBUyxFQUFFRyxVQUFVQztZQUMzRCxPQUNLO2dCQUNEVCxZQUFZSyxTQUFTLENBQUNHLFNBQVMsR0FBR0wsU0FBU0UsU0FBUyxDQUFDRyxTQUFTO1lBQ2xFO1FBQ0o7SUFDSjtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3BhcnNlL3BhcnNlci91dGlscy9hcHBseV9taXhpbnMuanM/NzA1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYXBwbHlNaXhpbnMoZGVyaXZlZEN0b3IsIGJhc2VDdG9ycykge1xuICAgIGJhc2VDdG9ycy5mb3JFYWNoKChiYXNlQ3RvcikgPT4ge1xuICAgICAgICBjb25zdCBiYXNlUHJvdG8gPSBiYXNlQ3Rvci5wcm90b3R5cGU7XG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGJhc2VQcm90bykuZm9yRWFjaCgocHJvcE5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmIChwcm9wTmFtZSA9PT0gXCJjb25zdHJ1Y3RvclwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYmFzZVByb3BEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlUHJvdG8sIHByb3BOYW1lKTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBBY2Nlc3NvcnNcbiAgICAgICAgICAgIGlmIChiYXNlUHJvcERlc2NyaXB0b3IgJiZcbiAgICAgICAgICAgICAgICAoYmFzZVByb3BEZXNjcmlwdG9yLmdldCB8fCBiYXNlUHJvcERlc2NyaXB0b3Iuc2V0KSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXJpdmVkQ3Rvci5wcm90b3R5cGUsIHByb3BOYW1lLCBiYXNlUHJvcERlc2NyaXB0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVyaXZlZEN0b3IucHJvdG90eXBlW3Byb3BOYW1lXSA9IGJhc2VDdG9yLnByb3RvdHlwZVtwcm9wTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHlfbWl4aW5zLmpzLm1hcCJdLCJuYW1lcyI6WyJhcHBseU1peGlucyIsImRlcml2ZWRDdG9yIiwiYmFzZUN0b3JzIiwiZm9yRWFjaCIsImJhc2VDdG9yIiwiYmFzZVByb3RvIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInByb3BOYW1lIiwiYmFzZVByb3BEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0Iiwic2V0IiwiZGVmaW5lUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/lexer.js":
/*!*******************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/lexer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MODE: () => (/* binding */ DEFAULT_MODE),\n/* harmony export */   LineTerminatorOptimizedTester: () => (/* binding */ LineTerminatorOptimizedTester),\n/* harmony export */   MODES: () => (/* binding */ MODES),\n/* harmony export */   SUPPORT_STICKY: () => (/* binding */ SUPPORT_STICKY),\n/* harmony export */   addStartOfInput: () => (/* binding */ addStartOfInput),\n/* harmony export */   addStickyFlag: () => (/* binding */ addStickyFlag),\n/* harmony export */   analyzeTokenTypes: () => (/* binding */ analyzeTokenTypes),\n/* harmony export */   buildLineBreakIssueMessage: () => (/* binding */ buildLineBreakIssueMessage),\n/* harmony export */   charCodeToOptimizedIndex: () => (/* binding */ charCodeToOptimizedIndex),\n/* harmony export */   cloneEmptyGroups: () => (/* binding */ cloneEmptyGroups),\n/* harmony export */   disableSticky: () => (/* binding */ disableSticky),\n/* harmony export */   enableSticky: () => (/* binding */ enableSticky),\n/* harmony export */   findDuplicatePatterns: () => (/* binding */ findDuplicatePatterns),\n/* harmony export */   findEmptyMatchRegExps: () => (/* binding */ findEmptyMatchRegExps),\n/* harmony export */   findEndOfInputAnchor: () => (/* binding */ findEndOfInputAnchor),\n/* harmony export */   findInvalidGroupType: () => (/* binding */ findInvalidGroupType),\n/* harmony export */   findInvalidPatterns: () => (/* binding */ findInvalidPatterns),\n/* harmony export */   findMissingPatterns: () => (/* binding */ findMissingPatterns),\n/* harmony export */   findModesThatDoNotExist: () => (/* binding */ findModesThatDoNotExist),\n/* harmony export */   findStartOfInputAnchor: () => (/* binding */ findStartOfInputAnchor),\n/* harmony export */   findUnreachablePatterns: () => (/* binding */ findUnreachablePatterns),\n/* harmony export */   findUnsupportedFlags: () => (/* binding */ findUnsupportedFlags),\n/* harmony export */   isCustomPattern: () => (/* binding */ isCustomPattern),\n/* harmony export */   isShortPattern: () => (/* binding */ isShortPattern),\n/* harmony export */   minOptimizationVal: () => (/* binding */ minOptimizationVal),\n/* harmony export */   performRuntimeChecks: () => (/* binding */ performRuntimeChecks),\n/* harmony export */   performWarningRuntimeChecks: () => (/* binding */ performWarningRuntimeChecks),\n/* harmony export */   validatePatterns: () => (/* binding */ validatePatterns)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/./node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n/* harmony import */ var _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lexer_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/defaults.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reject.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isRegExp.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isFunction.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isString.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/indexOf.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/filter.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/difference.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/compact.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/head.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/find.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=compact,defaults,difference,filter,find,first,flatten,forEach,has,includes,indexOf,isArray,isEmpty,isFunction,isRegExp,isString,isUndefined,keys,map,reduce,reject,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/keys.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _reg_exp_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reg_exp.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp.js\");\n/* harmony import */ var _reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reg_exp_parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js\");\n\n\n\n\n\n\nconst PATTERN = \"PATTERN\";\nconst DEFAULT_MODE = \"defaultMode\";\nconst MODES = \"modes\";\nlet SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\nfunction disableSticky() {\n    SUPPORT_STICKY = false;\n}\nfunction enableSticky() {\n    SUPPORT_STICKY = true;\n}\nfunction analyzeTokenTypes(tokenTypes, options) {\n    options = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(options, {\n        useSticky: SUPPORT_STICKY,\n        debug: false,\n        safeMode: false,\n        positionTracking: \"full\",\n        lineTerminatorCharacters: [\n            \"\\r\",\n            \"\\n\"\n        ],\n        tracer: (msg, action)=>action()\n    });\n    const tracer = options.tracer;\n    tracer(\"initCharCodeToOptimizedIndexMap\", ()=>{\n        initCharCodeToOptimizedIndexMap();\n    });\n    let onlyRelevantTypes;\n    tracer(\"Reject Lexer.NA\", ()=>{\n        onlyRelevantTypes = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(tokenTypes, (currType)=>{\n            return currType[PATTERN] === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA;\n        });\n    });\n    let hasCustom = false;\n    let allTransformedPatterns;\n    tracer(\"Transform Patterns\", ()=>{\n        hasCustom = false;\n        allTransformedPatterns = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (currType)=>{\n            const currPattern = currType[PATTERN];\n            /* istanbul ignore else */ if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currPattern)) {\n                const regExpSource = currPattern.source;\n                if (regExpSource.length === 1 && // only these regExp meta characters which can appear in a length one regExp\n                regExpSource !== \"^\" && regExpSource !== \"$\" && regExpSource !== \".\" && !currPattern.ignoreCase) {\n                    return regExpSource;\n                } else if (regExpSource.length === 2 && regExpSource[0] === \"\\\\\" && // not a meta character\n                !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])([\n                    \"d\",\n                    \"D\",\n                    \"s\",\n                    \"S\",\n                    \"t\",\n                    \"r\",\n                    \"n\",\n                    \"t\",\n                    \"0\",\n                    \"c\",\n                    \"b\",\n                    \"B\",\n                    \"f\",\n                    \"v\",\n                    \"w\",\n                    \"W\"\n                ], regExpSource[1])) {\n                    // escaped meta Characters: /\\+/ /\\[/\n                    // or redundant escaping: /\\a/\n                    // without the escaping \"\\\"\n                    return regExpSource[1];\n                } else {\n                    return options.useSticky ? addStickyFlag(currPattern) : addStartOfInput(currPattern);\n                }\n            } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(currPattern)) {\n                hasCustom = true;\n                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n                return {\n                    exec: currPattern\n                };\n            } else if (typeof currPattern === \"object\") {\n                hasCustom = true;\n                // ICustomPattern\n                return currPattern;\n            } else if (typeof currPattern === \"string\") {\n                if (currPattern.length === 1) {\n                    return currPattern;\n                } else {\n                    const escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n                    const wrappedRegExp = new RegExp(escapedRegExpString);\n                    return options.useSticky ? addStickyFlag(wrappedRegExp) : addStartOfInput(wrappedRegExp);\n                }\n            } else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    });\n    let patternIdxToType;\n    let patternIdxToGroup;\n    let patternIdxToLongerAltIdxArr;\n    let patternIdxToPushMode;\n    let patternIdxToPopMode;\n    tracer(\"misc mapping\", ()=>{\n        patternIdxToType = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (currType)=>currType.tokenTypeIdx);\n        patternIdxToGroup = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (clazz)=>{\n            const groupName = clazz.GROUP;\n            /* istanbul ignore next */ if (groupName === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.SKIPPED) {\n                return undefined;\n            } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(groupName)) {\n                return groupName;\n            } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(groupName)) {\n                return false;\n            } else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n        patternIdxToLongerAltIdxArr = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (clazz)=>{\n            const longerAltType = clazz.LONGER_ALT;\n            if (longerAltType) {\n                const longerAltIdxArr = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(longerAltType) ? (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(longerAltType, (type)=>(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(onlyRelevantTypes, type)) : [\n                    (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(onlyRelevantTypes, longerAltType)\n                ];\n                return longerAltIdxArr;\n            }\n        });\n        patternIdxToPushMode = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (clazz)=>clazz.PUSH_MODE);\n        patternIdxToPopMode = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (clazz)=>(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(clazz, \"POP_MODE\"));\n    });\n    let patternIdxToCanLineTerminator;\n    tracer(\"Line Terminator Handling\", ()=>{\n        const lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n        patternIdxToCanLineTerminator = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (tokType)=>false);\n        if (options.positionTracking !== \"onlyOffset\") {\n            patternIdxToCanLineTerminator = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, (tokType)=>{\n                if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(tokType, \"LINE_BREAKS\")) {\n                    return !!tokType.LINE_BREAKS;\n                } else {\n                    return checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false && (0,_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.canMatchCharCode)(lineTerminatorCharCodes, tokType.PATTERN);\n                }\n            });\n        }\n    });\n    let patternIdxToIsCustom;\n    let patternIdxToShort;\n    let emptyGroups;\n    let patternIdxToConfig;\n    tracer(\"Misc Mapping #2\", ()=>{\n        patternIdxToIsCustom = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(onlyRelevantTypes, isCustomPattern);\n        patternIdxToShort = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(allTransformedPatterns, isShortPattern);\n        emptyGroups = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(onlyRelevantTypes, (acc, clazz)=>{\n            const groupName = clazz.GROUP;\n            if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(groupName) && !(groupName === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.SKIPPED)) {\n                acc[groupName] = [];\n            }\n            return acc;\n        }, {});\n        patternIdxToConfig = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(allTransformedPatterns, (x, idx)=>{\n            return {\n                pattern: allTransformedPatterns[idx],\n                longerAlt: patternIdxToLongerAltIdxArr[idx],\n                canLineTerminator: patternIdxToCanLineTerminator[idx],\n                isCustom: patternIdxToIsCustom[idx],\n                short: patternIdxToShort[idx],\n                group: patternIdxToGroup[idx],\n                push: patternIdxToPushMode[idx],\n                pop: patternIdxToPopMode[idx],\n                tokenTypeIdx: patternIdxToType[idx],\n                tokenType: onlyRelevantTypes[idx]\n            };\n        });\n    });\n    let canBeOptimized = true;\n    let charCodeToPatternIdxToConfig = [];\n    if (!options.safeMode) {\n        tracer(\"First Char Optimization\", ()=>{\n            charCodeToPatternIdxToConfig = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(onlyRelevantTypes, (result, currTokType, idx)=>{\n                if (typeof currTokType.PATTERN === \"string\") {\n                    const charCode = currTokType.PATTERN.charCodeAt(0);\n                    const optimizedIdx = charCodeToOptimizedIndex(charCode);\n                    addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n                } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(currTokType.START_CHARS_HINT)) {\n                    let lastOptimizedIdx;\n                    (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(currTokType.START_CHARS_HINT, (charOrInt)=>{\n                        const charCode = typeof charOrInt === \"string\" ? charOrInt.charCodeAt(0) : charOrInt;\n                        const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n                        // Avoid adding the config multiple times\n                        /* istanbul ignore else */ // - Difficult to check this scenario effects as it is only a performance\n                        //   optimization that does not change correctness\n                        if (lastOptimizedIdx !== currOptimizedIdx) {\n                            lastOptimizedIdx = currOptimizedIdx;\n                            addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n                        }\n                    });\n                } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currTokType.PATTERN)) {\n                    if (currTokType.PATTERN.unicode) {\n                        canBeOptimized = false;\n                        if (options.ensureOptimizations) {\n                            (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_2__.PRINT_ERROR)(`${_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.failedOptimizationPrefixMsg}` + `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` + \"\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" + \"\tThis will disable the lexer's first char optimizations.\\n\" + \"\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\");\n                        }\n                    } else {\n                        const optimizedCodes = (0,_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.getOptimizedStartCodesIndices)(currTokType.PATTERN, options.ensureOptimizations);\n                        /* istanbul ignore if */ // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n                        // the first should be a different validation and the second cannot be tested.\n                        if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(optimizedCodes)) {\n                            // we cannot understand what codes may start possible matches\n                            // The optimization correctness requires knowing start codes for ALL patterns.\n                            // Not actually sure this is an error, no debug message\n                            canBeOptimized = false;\n                        }\n                        (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(optimizedCodes, (code)=>{\n                            addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n                        });\n                    }\n                } else {\n                    if (options.ensureOptimizations) {\n                        (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_2__.PRINT_ERROR)(`${_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.failedOptimizationPrefixMsg}` + `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` + \"\tThis will disable the lexer's first char optimizations.\\n\" + \"\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\");\n                    }\n                    canBeOptimized = false;\n                }\n                return result;\n            }, []);\n        });\n    }\n    return {\n        emptyGroups: emptyGroups,\n        patternIdxToConfig: patternIdxToConfig,\n        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n        hasCustom: hasCustom,\n        canBeOptimized: canBeOptimized\n    };\n}\nfunction validatePatterns(tokenTypes, validModesNames) {\n    let errors = [];\n    const missingResult = findMissingPatterns(tokenTypes);\n    errors = errors.concat(missingResult.errors);\n    const invalidResult = findInvalidPatterns(missingResult.valid);\n    const validTokenTypes = invalidResult.valid;\n    errors = errors.concat(invalidResult.errors);\n    errors = errors.concat(validateRegExpPattern(validTokenTypes));\n    errors = errors.concat(findInvalidGroupType(validTokenTypes));\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n    return errors;\n}\nfunction validateRegExpPattern(tokenTypes) {\n    let errors = [];\n    const withRegExpPatterns = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currTokType)=>(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(currTokType[PATTERN]));\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n    return errors;\n}\nfunction findMissingPatterns(tokenTypes) {\n    const tokenTypesWithMissingPattern = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType)=>{\n        return !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(currType, PATTERN);\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(tokenTypesWithMissingPattern, (currType)=>{\n        return {\n            message: \"Token Type: ->\" + currType.name + \"<- missing static 'PATTERN' property\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MISSING_PATTERN,\n            tokenTypes: [\n                currType\n            ]\n        };\n    });\n    const valid = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(tokenTypes, tokenTypesWithMissingPattern);\n    return {\n        errors,\n        valid\n    };\n}\nfunction findInvalidPatterns(tokenTypes) {\n    const tokenTypesWithInvalidPattern = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType)=>{\n        const pattern = currType[PATTERN];\n        return !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pattern) && !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(pattern) && !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(pattern, \"exec\") && !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pattern);\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(tokenTypesWithInvalidPattern, (currType)=>{\n        return {\n            message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' can only be a RegExp, a\" + \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.INVALID_PATTERN,\n            tokenTypes: [\n                currType\n            ]\n        };\n    });\n    const valid = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(tokenTypes, tokenTypesWithInvalidPattern);\n    return {\n        errors,\n        valid\n    };\n}\nconst end_of_input = /[^\\\\][$]/;\nfunction findEndOfInputAnchor(tokenTypes) {\n    class EndAnchorFinder extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n        constructor(){\n            super(...arguments);\n            this.found = false;\n        }\n        visitEndAnchor(node) {\n            this.found = true;\n        }\n    }\n    const invalidRegex = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType)=>{\n        const pattern = currType.PATTERN;\n        try {\n            const regexpAst = (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__.getRegExpAst)(pattern);\n            const endAnchorVisitor = new EndAnchorFinder();\n            endAnchorVisitor.visit(regexpAst);\n            return endAnchorVisitor.found;\n        } catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/ return end_of_input.test(pattern.source);\n        }\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidRegex, (currType)=>{\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" + \"\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" + \"\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" + \"\tfor details.\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n            tokenTypes: [\n                currType\n            ]\n        };\n    });\n    return errors;\n}\nfunction findEmptyMatchRegExps(tokenTypes) {\n    const matchesEmptyString = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType)=>{\n        const pattern = currType.PATTERN;\n        return pattern.test(\"\");\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(matchesEmptyString, (currType)=>{\n        return {\n            message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' must not match an empty string\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n            tokenTypes: [\n                currType\n            ]\n        };\n    });\n    return errors;\n}\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\nfunction findStartOfInputAnchor(tokenTypes) {\n    class StartAnchorFinder extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n        constructor(){\n            super(...arguments);\n            this.found = false;\n        }\n        visitStartAnchor(node) {\n            this.found = true;\n        }\n    }\n    const invalidRegex = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType)=>{\n        const pattern = currType.PATTERN;\n        try {\n            const regexpAst = (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__.getRegExpAst)(pattern);\n            const startAnchorVisitor = new StartAnchorFinder();\n            startAnchorVisitor.visit(regexpAst);\n            return startAnchorVisitor.found;\n        } catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/ return start_of_input.test(pattern.source);\n        }\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidRegex, (currType)=>{\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" + \"\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" + \"\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" + \"\tfor details.\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n            tokenTypes: [\n                currType\n            ]\n        };\n    });\n    return errors;\n}\nfunction findUnsupportedFlags(tokenTypes) {\n    const invalidFlags = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (currType)=>{\n        const pattern = currType[PATTERN];\n        return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidFlags, (currType)=>{\n        return {\n            message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n            tokenTypes: [\n                currType\n            ]\n        };\n    });\n    return errors;\n}\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nfunction findDuplicatePatterns(tokenTypes) {\n    const found = [];\n    let identicalPatterns = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(tokenTypes, (outerType)=>{\n        return (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(tokenTypes, (result, innerType)=>{\n            if (outerType.PATTERN.source === innerType.PATTERN.source && !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(found, innerType) && innerType.PATTERN !== _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA) {\n                // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n                // in essence we are creating Equivalence classes on equality relation.\n                found.push(innerType);\n                result.push(innerType);\n                return result;\n            }\n            return result;\n        }, []);\n    });\n    identicalPatterns = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(identicalPatterns);\n    const duplicatePatterns = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(identicalPatterns, (currIdenticalSet)=>{\n        return currIdenticalSet.length > 1;\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(duplicatePatterns, (setOfIdentical)=>{\n        const tokenTypeNames = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(setOfIdentical, (currType)=>{\n            return currType.name;\n        });\n        const dupPatternSrc = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(setOfIdentical).PATTERN;\n        return {\n            message: `The same RegExp pattern ->${dupPatternSrc}<-` + `has been used in all of the following Token Types: ${tokenTypeNames.join(\", \")} <-`,\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n            tokenTypes: setOfIdentical\n        };\n    });\n    return errors;\n}\nfunction findInvalidGroupType(tokenTypes) {\n    const invalidTypes = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (clazz)=>{\n        if (!(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(clazz, \"GROUP\")) {\n            return false;\n        }\n        const group = clazz.GROUP;\n        return group !== _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.SKIPPED && group !== _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA && !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(group);\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidTypes, (currType)=>{\n        return {\n            message: \"Token Type: ->\" + currType.name + \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n            tokenTypes: [\n                currType\n            ]\n        };\n    });\n    return errors;\n}\nfunction findModesThatDoNotExist(tokenTypes, validModes) {\n    const invalidModes = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(tokenTypes, (clazz)=>{\n        return clazz.PUSH_MODE !== undefined && !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(validModes, clazz.PUSH_MODE);\n    });\n    const errors = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(invalidModes, (tokType)=>{\n        const msg = `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` + `which does not exist`;\n        return {\n            message: msg,\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n            tokenTypes: [\n                tokType\n            ]\n        };\n    });\n    return errors;\n}\nfunction findUnreachablePatterns(tokenTypes) {\n    const errors = [];\n    const canBeTested = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(tokenTypes, (result, tokType, idx)=>{\n        const pattern = tokType.PATTERN;\n        if (pattern === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA) {\n            return result;\n        }\n        // a more comprehensive validation for all forms of regExps would require\n        // deeper regExp analysis capabilities\n        if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pattern)) {\n            result.push({\n                str: pattern,\n                idx,\n                tokenType: tokType\n            });\n        } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pattern) && noMetaChar(pattern)) {\n            result.push({\n                str: pattern.source,\n                idx,\n                tokenType: tokType\n            });\n        }\n        return result;\n    }, []);\n    (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(tokenTypes, (tokType, testIdx)=>{\n        (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(canBeTested, ({ str, idx, tokenType })=>{\n            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n                const msg = `Token: ->${tokenType.name}<- can never be matched.\\n` + `Because it appears AFTER the Token Type ->${tokType.name}<-` + `in the lexer's definition.\\n` + `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n                errors.push({\n                    message: msg,\n                    type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n                    tokenTypes: [\n                        tokType,\n                        tokenType\n                    ]\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction testTokenType(str, pattern) {\n    /* istanbul ignore else */ if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pattern)) {\n        const regExpArray = pattern.exec(str);\n        return regExpArray !== null && regExpArray.index === 0;\n    } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(pattern)) {\n        // maintain the API of custom patterns\n        return pattern(str, 0, [], {});\n    } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(pattern, \"exec\")) {\n        // maintain the API of custom patterns\n        return pattern.exec(str, 0, [], {});\n    } else if (typeof pattern === \"string\") {\n        return pattern === str;\n    } else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction noMetaChar(regExp) {\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n    const metaChars = [\n        \".\",\n        \"\\\\\",\n        \"[\",\n        \"]\",\n        \"|\",\n        \"^\",\n        \"$\",\n        \"(\",\n        \")\",\n        \"?\",\n        \"*\",\n        \"+\",\n        \"{\"\n    ];\n    return (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(metaChars, (char)=>regExp.source.indexOf(char) !== -1) === undefined;\n}\nfunction addStartOfInput(pattern) {\n    const flags = pattern.ignoreCase ? \"i\" : \"\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`^(?:${pattern.source})`, flags);\n}\nfunction addStickyFlag(pattern) {\n    const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`${pattern.source}`, flags);\n}\nfunction performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const errors = [];\n    // some run time checks to help the end users.\n    if (!(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, DEFAULT_MODE)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" + DEFAULT_MODE + \"> property in its definition\\n\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\n        });\n    }\n    if (!(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, MODES)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" + MODES + \"> property in its definition\\n\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\n        });\n    }\n    if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, MODES) && (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, DEFAULT_MODE) && !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n        errors.push({\n            message: `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` + `which does not exist\\n`,\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\n        });\n    }\n    if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(lexerDefinition, MODES)) {\n        (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(lexerDefinition.modes, (currModeValue, currModeName)=>{\n            (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(currModeValue, (currTokType, currIdx)=>{\n                if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(currTokType)) {\n                    errors.push({\n                        message: `A Lexer cannot be initialized using an undefined Token Type. Mode:` + `<${currModeName}> at index: <${currIdx}>\\n`,\n                        type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\n                    });\n                } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(currTokType, \"LONGER_ALT\")) {\n                    const longerAlt = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(currTokType.LONGER_ALT) ? currTokType.LONGER_ALT : [\n                        currTokType.LONGER_ALT\n                    ];\n                    (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(longerAlt, (currLongerAlt)=>{\n                        if (!(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(currLongerAlt) && !(0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(currModeValue, currLongerAlt)) {\n                            errors.push({\n                                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                                type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n    return errors;\n}\nfunction performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const warnings = [];\n    let hasAnyLineBreak = false;\n    const allTokenTypes = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_24__[\"default\"])((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(lexerDefinition.modes)));\n    const concreteTokenTypes = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(allTokenTypes, (currType)=>currType[PATTERN] === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.Lexer.NA);\n    const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n    if (trackLines) {\n        (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(concreteTokenTypes, (tokType)=>{\n            const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n            if (currIssue !== false) {\n                const message = buildLineBreakIssueMessage(tokType, currIssue);\n                const warningDescriptor = {\n                    message,\n                    type: currIssue.issue,\n                    tokenType: tokType\n                };\n                warnings.push(warningDescriptor);\n            } else {\n                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n                if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(tokType, \"LINE_BREAKS\")) {\n                    if (tokType.LINE_BREAKS === true) {\n                        hasAnyLineBreak = true;\n                    }\n                } else {\n                    if ((0,_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.canMatchCharCode)(terminatorCharCodes, tokType.PATTERN)) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n            }\n        });\n    }\n    if (trackLines && !hasAnyLineBreak) {\n        warnings.push({\n            message: \"Warning: No LINE_BREAKS Found.\\n\" + \"\tThis Lexer has been defined to track line and column information,\\n\" + \"\tBut none of the Token Types can be identified as matching a line terminator.\\n\" + \"\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" + \"\tfor details.\",\n            type: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS\n        });\n    }\n    return warnings;\n}\nfunction cloneEmptyGroups(emptyGroups) {\n    const clonedResult = {};\n    const groupKeys = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_26__[\"default\"])(emptyGroups);\n    (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(groupKeys, (currKey)=>{\n        const currGroupValue = emptyGroups[currKey];\n        /* istanbul ignore else */ if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(currGroupValue)) {\n            clonedResult[currKey] = [];\n        } else {\n            throw Error(\"non exhaustive match\");\n        }\n    });\n    return clonedResult;\n}\n// TODO: refactor to avoid duplication\nfunction isCustomPattern(tokenType) {\n    const pattern = tokenType.PATTERN;\n    /* istanbul ignore else */ if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pattern)) {\n        return false;\n    } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(pattern)) {\n        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n        return true;\n    } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(pattern, \"exec\")) {\n        // ICustomPattern\n        return true;\n    } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pattern)) {\n        return false;\n    } else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction isShortPattern(pattern) {\n    if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pattern) && pattern.length === 1) {\n        return pattern.charCodeAt(0);\n    } else {\n        return false;\n    }\n}\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */ const LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function(text) {\n        const len = text.length;\n        for(let i = this.lastIndex; i < len; i++){\n            const c = text.charCodeAt(i);\n            if (c === 10) {\n                this.lastIndex = i + 1;\n                return true;\n            } else if (c === 13) {\n                if (text.charCodeAt(i + 1) === 10) {\n                    this.lastIndex = i + 2;\n                } else {\n                    this.lastIndex = i + 1;\n                }\n                return true;\n            }\n        }\n        return false;\n    },\n    lastIndex: 0\n};\nfunction checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(tokType, \"LINE_BREAKS\")) {\n        // if the user explicitly declared the line_breaks option we will respect their choice\n        // and assume it is correct.\n        return false;\n    } else {\n        /* istanbul ignore else */ if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(tokType.PATTERN)) {\n            try {\n                // TODO: why is the casting suddenly needed?\n                (0,_reg_exp_js__WEBPACK_IMPORTED_MODULE_3__.canMatchCharCode)(lineTerminatorCharCodes, tokType.PATTERN);\n            } catch (e) {\n                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */ return {\n                    issue: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n                    errMsg: e.message\n                };\n            }\n            return false;\n        } else if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(tokType.PATTERN)) {\n            // string literal patterns can always be analyzed to detect line terminator usage\n            return false;\n        } else if (isCustomPattern(tokType)) {\n            // custom token types\n            return {\n                issue: _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.CUSTOM_LINE_BREAK\n            };\n        } else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n}\nfunction buildLineBreakIssueMessage(tokType, details) {\n    /* istanbul ignore else */ if (details.issue === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n        return \"Warning: unable to identify line terminator usage in pattern.\\n\" + `\\tThe problem is in the <${tokType.name}> Token Type\\n` + `\\t Root cause: ${details.errMsg}.\\n` + \"\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\";\n    } else if (details.issue === _lexer_public_js__WEBPACK_IMPORTED_MODULE_1__.LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n        return \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" + `\\tThe problem is in the <${tokType.name}> Token Type\\n` + \"\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\";\n    } else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction getCharCodes(charsOrCodes) {\n    const charCodes = (0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(charsOrCodes, (numOrString)=>{\n        if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(numOrString)) {\n            return numOrString.charCodeAt(0);\n        } else {\n            return numOrString;\n        }\n    });\n    return charCodes;\n}\nfunction addToMapOfArrays(map, key, value) {\n    if (map[key] === undefined) {\n        map[key] = [\n            value\n        ];\n    } else {\n        map[key].push(value);\n    }\n}\nconst minOptimizationVal = 256;\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */ let charCodeToOptimizedIdxMap = [];\nfunction charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal ? charCode : charCodeToOptimizedIdxMap[charCode];\n}\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */ function initCharCodeToOptimizedIndexMap() {\n    if ((0,_barrel_optimize_names_compact_defaults_difference_filter_find_first_flatten_forEach_has_includes_indexOf_isArray_isEmpty_isFunction_isRegExp_isString_isUndefined_keys_map_reduce_reject_values_lodash_es__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(charCodeToOptimizedIdxMap)) {\n        charCodeToOptimizedIdxMap = new Array(65536);\n        for(let i = 0; i < 65536; i++){\n            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n        }\n    }\n} //# sourceMappingURL=lexer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/lexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js":
/*!*********************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultLexerErrorProvider: () => (/* binding */ defaultLexerErrorProvider)\n/* harmony export */ });\nconst defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage (token) {\n        return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n    },\n    buildUnexpectedCharactersMessage (fullText, startOffset, length, line, column) {\n        return `unexpected character: ->${fullText.charAt(startOffset)}<- at offset: ${startOffset},` + ` skipped ${length} characters.`;\n    }\n}; //# sourceMappingURL=lexer_errors_public.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3NjYW4vbGV4ZXJfZXJyb3JzX3B1YmxpYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsNEJBQTRCO0lBQ3JDQyxrQ0FBaUNDLEtBQUs7UUFDbEMsT0FBTyxDQUFDLG9EQUFvRCxFQUFFQSxNQUFNQyxLQUFLLENBQUMsMEJBQTBCLENBQUM7SUFDekc7SUFDQUMsa0NBQWlDQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07UUFDeEUsT0FBUSxDQUFDLHdCQUF3QixFQUFFSixTQUFTSyxNQUFNLENBQUNKLGFBQWEsY0FBYyxFQUFFQSxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFQyxPQUFPLFlBQVksQ0FBQztJQUNySTtBQUNKLEVBQUUsQ0FDRiwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvc2Nhbi9sZXhlcl9lcnJvcnNfcHVibGljLmpzPzNjYTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGRlZmF1bHRMZXhlckVycm9yUHJvdmlkZXIgPSB7XG4gICAgYnVpbGRVbmFibGVUb1BvcExleGVyTW9kZU1lc3NhZ2UodG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIGBVbmFibGUgdG8gcG9wIExleGVyIE1vZGUgYWZ0ZXIgZW5jb3VudGVyaW5nIFRva2VuIC0+JHt0b2tlbi5pbWFnZX08LSBUaGUgTW9kZSBTdGFjayBpcyBlbXB0eWA7XG4gICAgfSxcbiAgICBidWlsZFVuZXhwZWN0ZWRDaGFyYWN0ZXJzTWVzc2FnZShmdWxsVGV4dCwgc3RhcnRPZmZzZXQsIGxlbmd0aCwgbGluZSwgY29sdW1uKSB7XG4gICAgICAgIHJldHVybiAoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyOiAtPiR7ZnVsbFRleHQuY2hhckF0KHN0YXJ0T2Zmc2V0KX08LSBhdCBvZmZzZXQ6ICR7c3RhcnRPZmZzZXR9LGAgKyBgIHNraXBwZWQgJHtsZW5ndGh9IGNoYXJhY3RlcnMuYCk7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZXhlcl9lcnJvcnNfcHVibGljLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0TGV4ZXJFcnJvclByb3ZpZGVyIiwiYnVpbGRVbmFibGVUb1BvcExleGVyTW9kZU1lc3NhZ2UiLCJ0b2tlbiIsImltYWdlIiwiYnVpbGRVbmV4cGVjdGVkQ2hhcmFjdGVyc01lc3NhZ2UiLCJmdWxsVGV4dCIsInN0YXJ0T2Zmc2V0IiwibGVuZ3RoIiwibGluZSIsImNvbHVtbiIsImNoYXJBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js":
/*!**************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/lexer_public.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lexer: () => (/* binding */ Lexer),\n/* harmony export */   LexerDefinitionErrorType: () => (/* binding */ LexerDefinitionErrorType)\n/* harmony export */ });\n/* harmony import */ var _lexer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/assign.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reject.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/keys.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/identity.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/noop.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/reduce.js\");\n/* harmony import */ var _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=assign,clone,forEach,identity,isArray,isEmpty,isUndefined,keys,last,map,noop,reduce,reject!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/last.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _tokens_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n/* harmony import */ var _lexer_errors_public_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lexer_errors_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_errors_public.js\");\n/* harmony import */ var _reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reg_exp_parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js\");\n\n\n\n\n\n\nvar LexerDefinitionErrorType;\n(function(LexerDefinitionErrorType) {\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\"] = 17] = \"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\nconst DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: \"full\",\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: [\n        \"\\n\",\n        \"\\r\"\n    ],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: _lexer_errors_public_js__WEBPACK_IMPORTED_MODULE_3__.defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false,\n    recoveryEnabled: true\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\nclass Lexer {\n    constructor(lexerDefinition, config = DEFAULT_LEXER_CONFIG){\n        this.lexerDefinition = lexerDefinition;\n        this.lexerDefinitionErrors = [];\n        this.lexerDefinitionWarning = [];\n        this.patternIdxToConfig = {};\n        this.charCodeToPatternIdxToConfig = {};\n        this.modes = [];\n        this.emptyGroups = {};\n        this.trackStartLines = true;\n        this.trackEndLines = true;\n        this.hasCustom = false;\n        this.canModeBeOptimized = {};\n        // Duplicated from the parser's perf trace trait to allow future extraction\n        // of the lexer to a separate package.\n        this.TRACE_INIT = (phaseDesc, phaseImpl)=>{\n            // No need to optimize this using NOOP pattern because\n            // It is not called in a hot spot...\n            if (this.traceInitPerf === true) {\n                this.traceInitIndent++;\n                const indent = new Array(this.traceInitIndent + 1).join(\"\t\");\n                if (this.traceInitIndent < this.traceInitMaxIdent) {\n                    console.log(`${indent}--> <${phaseDesc}>`);\n                }\n                const { time, value } = (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.timer)(phaseImpl);\n                /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */ const traceMethod = time > 10 ? console.warn : console.log;\n                if (this.traceInitIndent < this.traceInitMaxIdent) {\n                    traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n                }\n                this.traceInitIndent--;\n                return value;\n            } else {\n                return phaseImpl();\n            }\n        };\n        if (typeof config === \"boolean\") {\n            throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" + \"a boolean 2nd argument is no longer supported\");\n        }\n        // todo: defaults func?\n        this.config = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, DEFAULT_LEXER_CONFIG, config);\n        const traceInitVal = this.config.traceInitPerf;\n        if (traceInitVal === true) {\n            this.traceInitMaxIdent = Infinity;\n            this.traceInitPerf = true;\n        } else if (typeof traceInitVal === \"number\") {\n            this.traceInitMaxIdent = traceInitVal;\n            this.traceInitPerf = true;\n        }\n        this.traceInitIndent = -1;\n        this.TRACE_INIT(\"Lexer Constructor\", ()=>{\n            let actualDefinition;\n            let hasOnlySingleMode = true;\n            this.TRACE_INIT(\"Lexer Config handling\", ()=>{\n                if (this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n                    // optimized built-in implementation for the defaults definition of lineTerminators\n                    this.config.lineTerminatorsPattern = _lexer_js__WEBPACK_IMPORTED_MODULE_0__.LineTerminatorOptimizedTester;\n                } else {\n                    if (this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n                        throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" + \"\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n                    }\n                }\n                if (config.safeMode && config.ensureOptimizations) {\n                    throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n                }\n                this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);\n                this.trackEndLines = /full/i.test(this.config.positionTracking);\n                // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n                if ((0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(lexerDefinition)) {\n                    actualDefinition = {\n                        modes: {\n                            defaultMode: (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(lexerDefinition)\n                        },\n                        defaultMode: _lexer_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_MODE\n                    };\n                } else {\n                    // no conversion needed, input should already be a IMultiModeLexerDefinition\n                    hasOnlySingleMode = false;\n                    actualDefinition = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(lexerDefinition);\n                }\n            });\n            if (this.config.skipValidations === false) {\n                this.TRACE_INIT(\"performRuntimeChecks\", ()=>{\n                    this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat((0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.performRuntimeChecks)(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n                });\n                this.TRACE_INIT(\"performWarningRuntimeChecks\", ()=>{\n                    this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat((0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.performWarningRuntimeChecks)(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n                });\n            }\n            // for extra robustness to avoid throwing an none informative error message\n            actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {};\n            // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n            // this transformation is to increase robustness in the case of partially invalid lexer definition.\n            (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(actualDefinition.modes, (currModeValue, currModeName)=>{\n                actualDefinition.modes[currModeName] = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(currModeValue, (currTokType)=>(0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(currTokType));\n            });\n            const allModeNames = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(actualDefinition.modes);\n            (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(actualDefinition.modes, (currModDef, currModName)=>{\n                this.TRACE_INIT(`Mode: <${currModName}> processing`, ()=>{\n                    this.modes.push(currModName);\n                    if (this.config.skipValidations === false) {\n                        this.TRACE_INIT(`validatePatterns`, ()=>{\n                            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat((0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.validatePatterns)(currModDef, allModeNames));\n                        });\n                    }\n                    // If definition errors were encountered, the analysis phase may fail unexpectedly/\n                    // Considering a lexer with definition errors may never be used, there is no point\n                    // to performing the analysis anyhow...\n                    if ((0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(this.lexerDefinitionErrors)) {\n                        (0,_tokens_js__WEBPACK_IMPORTED_MODULE_2__.augmentTokenTypes)(currModDef);\n                        let currAnalyzeResult;\n                        this.TRACE_INIT(`analyzeTokenTypes`, ()=>{\n                            currAnalyzeResult = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.analyzeTokenTypes)(currModDef, {\n                                lineTerminatorCharacters: this.config.lineTerminatorCharacters,\n                                positionTracking: config.positionTracking,\n                                ensureOptimizations: config.ensureOptimizations,\n                                safeMode: config.safeMode,\n                                tracer: this.TRACE_INIT\n                            });\n                        });\n                        this.patternIdxToConfig[currModName] = currAnalyzeResult.patternIdxToConfig;\n                        this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult.charCodeToPatternIdxToConfig;\n                        this.emptyGroups = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({}, this.emptyGroups, currAnalyzeResult.emptyGroups);\n                        this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n                        this.canModeBeOptimized[currModName] = currAnalyzeResult.canBeOptimized;\n                    }\n                });\n            });\n            this.defaultMode = actualDefinition.defaultMode;\n            if (!(0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {\n                const allErrMessages = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(this.lexerDefinitionErrors, (error)=>{\n                    return error.message;\n                });\n                const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n                throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n            }\n            // Only print warning if there are no errors, This will avoid pl\n            (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(this.lexerDefinitionWarning, (warningDescriptor)=>{\n                (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.PRINT_WARNING)(warningDescriptor.message);\n            });\n            this.TRACE_INIT(\"Choosing sub-methods implementations\", ()=>{\n                // Choose the relevant internal implementations for this specific parser.\n                // These implementations should be in-lined by the JavaScript engine\n                // to provide optimal performance in each scenario.\n                if (_lexer_js__WEBPACK_IMPORTED_MODULE_0__.SUPPORT_STICKY) {\n                    this.chopInput = _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"];\n                    this.match = this.matchWithTest;\n                } else {\n                    this.updateLastIndex = _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"];\n                    this.match = this.matchWithExec;\n                }\n                if (hasOnlySingleMode) {\n                    this.handleModes = _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"];\n                }\n                if (this.trackStartLines === false) {\n                    this.computeNewColumn = _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_14__[\"default\"];\n                }\n                if (this.trackEndLines === false) {\n                    this.updateTokenEndLineColumnLocation = _barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_15__[\"default\"];\n                }\n                if (/full/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createFullToken;\n                } else if (/onlyStart/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createStartOnlyToken;\n                } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createOffsetOnlyToken;\n                } else {\n                    throw Error(`Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`);\n                }\n                if (this.hasCustom) {\n                    this.addToken = this.addTokenUsingPush;\n                    this.handlePayload = this.handlePayloadWithCustom;\n                } else {\n                    this.addToken = this.addTokenUsingMemberAccess;\n                    this.handlePayload = this.handlePayloadNoCustom;\n                }\n            });\n            this.TRACE_INIT(\"Failed Optimization Warnings\", ()=>{\n                const unOptimizedModes = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(this.canModeBeOptimized, (cannotBeOptimized, canBeOptimized, modeName)=>{\n                    if (canBeOptimized === false) {\n                        cannotBeOptimized.push(modeName);\n                    }\n                    return cannotBeOptimized;\n                }, []);\n                if (config.ensureOptimizations && !(0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(unOptimizedModes)) {\n                    throw Error(`Lexer Modes: < ${unOptimizedModes.join(\", \")} > cannot be optimized.\\n` + '\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' + \"\t Or inspect the console log for details on how to resolve these issues.\");\n                }\n            });\n            this.TRACE_INIT(\"clearRegExpParserCache\", ()=>{\n                (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_4__.clearRegExpParserCache)();\n            });\n            this.TRACE_INIT(\"toFastProperties\", ()=>{\n                (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.toFastProperties)(this);\n            });\n        });\n    }\n    tokenize(text, initialMode = this.defaultMode) {\n        if (!(0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(this.lexerDefinitionErrors)) {\n            const allErrMessages = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(this.lexerDefinitionErrors, (error)=>{\n                return error.message;\n            });\n            const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n            throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n        }\n        return this.tokenizeInternal(text, initialMode);\n    }\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    // this method also used quite a bit of `!` none null assertions because it is too optimized\n    // for `tsc` to always understand it is \"safe\"\n    tokenizeInternal(text, initialMode) {\n        let i, j, k, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n        const orgText = text;\n        const orgLength = orgText.length;\n        let offset = 0;\n        let matchedTokensIndex = 0;\n        // initializing the tokensArray to the \"guessed\" size.\n        // guessing too little will still reduce the number of array re-sizes on pushes.\n        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n        // but would still have a faster runtime by avoiding (All but one) array resizing.\n        const guessedNumberOfTokens = this.hasCustom ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n         : Math.floor(text.length / 10);\n        const matchedTokens = new Array(guessedNumberOfTokens);\n        const errors = [];\n        let line = this.trackStartLines ? 1 : undefined;\n        let column = this.trackStartLines ? 1 : undefined;\n        const groups = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.cloneEmptyGroups)(this.emptyGroups);\n        const trackLines = this.trackStartLines;\n        const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n        let currModePatternsLength = 0;\n        let patternIdxToConfig = [];\n        let currCharCodeToPatternIdxToConfig = [];\n        const modeStack = [];\n        const emptyArray = [];\n        Object.freeze(emptyArray);\n        let getPossiblePatterns;\n        function getPossiblePatternsSlow() {\n            return patternIdxToConfig;\n        }\n        function getPossiblePatternsOptimized(charCode) {\n            const optimizedCharIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_0__.charCodeToOptimizedIndex)(charCode);\n            const possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n            if (possiblePatterns === undefined) {\n                return emptyArray;\n            } else {\n                return possiblePatterns;\n            }\n        }\n        const pop_mode = (popToken)=>{\n            // TODO: perhaps avoid this error in the edge case there is no more input?\n            if (modeStack.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n            // So no error should occur.\n            popToken.tokenType.PUSH_MODE === undefined) {\n                // if we try to pop the last mode there lexer will no longer have ANY mode.\n                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n                const msg = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n                errors.push({\n                    offset: popToken.startOffset,\n                    line: popToken.startLine,\n                    column: popToken.startColumn,\n                    length: popToken.image.length,\n                    message: msg\n                });\n            } else {\n                modeStack.pop();\n                const newMode = (0,_barrel_optimize_names_assign_clone_forEach_identity_isArray_isEmpty_isUndefined_keys_last_map_noop_reduce_reject_lodash_es__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(modeStack);\n                patternIdxToConfig = this.patternIdxToConfig[newMode];\n                currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n                currModePatternsLength = patternIdxToConfig.length;\n                const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                    getPossiblePatterns = getPossiblePatternsOptimized;\n                } else {\n                    getPossiblePatterns = getPossiblePatternsSlow;\n                }\n            }\n        };\n        function push_mode(newMode) {\n            modeStack.push(newMode);\n            currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n            patternIdxToConfig = this.patternIdxToConfig[newMode];\n            currModePatternsLength = patternIdxToConfig.length;\n            currModePatternsLength = patternIdxToConfig.length;\n            const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                getPossiblePatterns = getPossiblePatternsOptimized;\n            } else {\n                getPossiblePatterns = getPossiblePatternsSlow;\n            }\n        }\n        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n        // seem to matter performance wise.\n        push_mode.call(this, initialMode);\n        let currConfig;\n        const recoveryEnabled = this.config.recoveryEnabled;\n        while(offset < orgLength){\n            matchedImage = null;\n            const nextCharCode = orgText.charCodeAt(offset);\n            const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n            const chosenPatternsLength = chosenPatternIdxToConfig.length;\n            for(i = 0; i < chosenPatternsLength; i++){\n                currConfig = chosenPatternIdxToConfig[i];\n                const currPattern = currConfig.pattern;\n                payload = null;\n                // manually in-lined because > 600 chars won't be in-lined in V8\n                const singleCharCode = currConfig.short;\n                if (singleCharCode !== false) {\n                    if (nextCharCode === singleCharCode) {\n                        // single character string\n                        matchedImage = currPattern;\n                    }\n                } else if (currConfig.isCustom === true) {\n                    match = currPattern.exec(orgText, offset, matchedTokens, groups);\n                    if (match !== null) {\n                        matchedImage = match[0];\n                        if (match.payload !== undefined) {\n                            payload = match.payload;\n                        }\n                    } else {\n                        matchedImage = null;\n                    }\n                } else {\n                    this.updateLastIndex(currPattern, offset);\n                    matchedImage = this.match(currPattern, text, offset);\n                }\n                if (matchedImage !== null) {\n                    // even though this pattern matched we must try a another longer alternative.\n                    // this can be used to prioritize keywords over identifiers\n                    longerAlt = currConfig.longerAlt;\n                    if (longerAlt !== undefined) {\n                        // TODO: micro optimize, avoid extra prop access\n                        // by saving/linking longerAlt on the original config?\n                        const longerAltLength = longerAlt.length;\n                        for(k = 0; k < longerAltLength; k++){\n                            const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n                            const longerAltPattern = longerAltConfig.pattern;\n                            altPayload = null;\n                            // single Char can never be a longer alt so no need to test it.\n                            // manually in-lined because > 600 chars won't be in-lined in V8\n                            if (longerAltConfig.isCustom === true) {\n                                match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n                                if (match !== null) {\n                                    matchAltImage = match[0];\n                                    if (match.payload !== undefined) {\n                                        altPayload = match.payload;\n                                    }\n                                } else {\n                                    matchAltImage = null;\n                                }\n                            } else {\n                                this.updateLastIndex(longerAltPattern, offset);\n                                matchAltImage = this.match(longerAltPattern, text, offset);\n                            }\n                            if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                                matchedImage = matchAltImage;\n                                payload = altPayload;\n                                currConfig = longerAltConfig;\n                                break;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            // successful match\n            if (matchedImage !== null) {\n                imageLength = matchedImage.length;\n                group = currConfig.group;\n                if (group !== undefined) {\n                    tokType = currConfig.tokenTypeIdx;\n                    // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n                    // createFullToken method\n                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n                    this.handlePayload(newToken, payload);\n                    // TODO: optimize NOOP in case there are no special groups?\n                    if (group === false) {\n                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n                    } else {\n                        groups[group].push(newToken);\n                    }\n                }\n                text = this.chopInput(text, imageLength);\n                offset = offset + imageLength;\n                // TODO: with newlines the column may be assigned twice\n                column = this.computeNewColumn(column, imageLength);\n                if (trackLines === true && currConfig.canLineTerminator === true) {\n                    let numOfLTsInMatch = 0;\n                    let foundTerminator;\n                    let lastLTEndOffset;\n                    lineTerminatorPattern.lastIndex = 0;\n                    do {\n                        foundTerminator = lineTerminatorPattern.test(matchedImage);\n                        if (foundTerminator === true) {\n                            lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n                            numOfLTsInMatch++;\n                        }\n                    }while (foundTerminator === true);\n                    if (numOfLTsInMatch !== 0) {\n                        line = line + numOfLTsInMatch;\n                        column = imageLength - lastLTEndOffset;\n                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n                    }\n                }\n                // will be NOOP if no modes present\n                this.handleModes(currConfig, pop_mode, push_mode, newToken);\n            } else {\n                // error recovery, drop characters until we identify a valid token's start point\n                const errorStartOffset = offset;\n                const errorLine = line;\n                const errorColumn = column;\n                let foundResyncPoint = recoveryEnabled === false;\n                while(foundResyncPoint === false && offset < orgLength){\n                    // Identity Func (when sticky flag is enabled)\n                    text = this.chopInput(text, 1);\n                    offset++;\n                    for(j = 0; j < currModePatternsLength; j++){\n                        const currConfig = patternIdxToConfig[j];\n                        const currPattern = currConfig.pattern;\n                        // manually in-lined because > 600 chars won't be in-lined in V8\n                        const singleCharCode = currConfig.short;\n                        if (singleCharCode !== false) {\n                            if (orgText.charCodeAt(offset) === singleCharCode) {\n                                // single character string\n                                foundResyncPoint = true;\n                            }\n                        } else if (currConfig.isCustom === true) {\n                            foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n                        } else {\n                            this.updateLastIndex(currPattern, offset);\n                            foundResyncPoint = currPattern.exec(text) !== null;\n                        }\n                        if (foundResyncPoint === true) {\n                            break;\n                        }\n                    }\n                }\n                errLength = offset - errorStartOffset;\n                column = this.computeNewColumn(column, errLength);\n                // at this point we either re-synced or reached the end of the input text\n                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n                errors.push({\n                    offset: errorStartOffset,\n                    line: errorLine,\n                    column: errorColumn,\n                    length: errLength,\n                    message: msg\n                });\n                if (recoveryEnabled === false) {\n                    break;\n                }\n            }\n        }\n        // if we do have custom patterns which push directly into the\n        // TODO: custom tokens should not push directly??\n        if (!this.hasCustom) {\n            // if we guessed a too large size for the tokens array this will shrink it to the right size.\n            matchedTokens.length = matchedTokensIndex;\n        }\n        return {\n            tokens: matchedTokens,\n            groups: groups,\n            errors: errors\n        };\n    }\n    handleModes(config, pop_mode, push_mode, newToken) {\n        if (config.pop === true) {\n            // need to save the PUSH_MODE property as if the mode is popped\n            // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n            const pushMode = config.push;\n            pop_mode(newToken);\n            if (pushMode !== undefined) {\n                push_mode.call(this, pushMode);\n            }\n        } else if (config.push !== undefined) {\n            push_mode.call(this, config.push);\n        }\n    }\n    chopInput(text, length) {\n        return text.substring(length);\n    }\n    updateLastIndex(regExp, newLastIndex) {\n        regExp.lastIndex = newLastIndex;\n    }\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    updateTokenEndLineColumnLocation(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n        let lastCharIsLT, fixForEndingInLT;\n        if (group !== undefined) {\n            // a none skipped multi line Token, need to update endLine/endColumn\n            lastCharIsLT = lastLTIdx === imageLength - 1;\n            fixForEndingInLT = lastCharIsLT ? -1 : 0;\n            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n                // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n                newToken.endLine = line + fixForEndingInLT;\n                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n                // inclusive to exclusive range.\n                newToken.endColumn = column - 1 + -fixForEndingInLT;\n            }\n        // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n        }\n    }\n    computeNewColumn(oldColumn, imageLength) {\n        return oldColumn + imageLength;\n    }\n    createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n        return {\n            image,\n            startOffset,\n            tokenTypeIdx,\n            tokenType\n        };\n    }\n    createStartOnlyToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n        return {\n            image,\n            startOffset,\n            startLine,\n            startColumn,\n            tokenTypeIdx,\n            tokenType\n        };\n    }\n    createFullToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n        return {\n            image,\n            startOffset,\n            endOffset: startOffset + imageLength - 1,\n            startLine,\n            endLine: startLine,\n            startColumn,\n            endColumn: startColumn + imageLength - 1,\n            tokenTypeIdx,\n            tokenType\n        };\n    }\n    addTokenUsingPush(tokenVector, index, tokenToAdd) {\n        tokenVector.push(tokenToAdd);\n        return index;\n    }\n    addTokenUsingMemberAccess(tokenVector, index, tokenToAdd) {\n        tokenVector[index] = tokenToAdd;\n        index++;\n        return index;\n    }\n    handlePayloadNoCustom(token, payload) {}\n    handlePayloadWithCustom(token, payload) {\n        if (payload !== null) {\n            token.payload = payload;\n        }\n    }\n    matchWithTest(pattern, text, offset) {\n        const found = pattern.test(text);\n        if (found === true) {\n            return text.substring(offset, pattern.lastIndex);\n        }\n        return null;\n    }\n    matchWithExec(pattern, text) {\n        const regExpArray = pattern.exec(text);\n        return regExpArray !== null ? regExpArray[0] : null;\n    }\n}\nLexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" + \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\nLexer.NA = /NOT_APPLICABLE/; //# sourceMappingURL=lexer_public.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp.js":
/*!*********************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/reg_exp.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canMatchCharCode: () => (/* binding */ canMatchCharCode),\n/* harmony export */   failedOptimizationPrefixMsg: () => (/* binding */ failedOptimizationPrefixMsg),\n/* harmony export */   firstCharOptimizedIndices: () => (/* binding */ firstCharOptimizedIndices),\n/* harmony export */   getOptimizedStartCodesIndices: () => (/* binding */ getOptimizedStartCodesIndices)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/./node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n/* harmony import */ var _barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=every,find,forEach,includes,isArray,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=every,find,forEach,includes,isArray,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/values.js\");\n/* harmony import */ var _barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=every,find,forEach,includes,isArray,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/find.js\");\n/* harmony import */ var _barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=every,find,forEach,includes,isArray,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var _barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=every,find,forEach,includes,isArray,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var _barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=every,find,forEach,includes,isArray,values!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/every.js\");\n/* harmony import */ var _chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chevrotain/utils */ \"(ssr)/./node_modules/@chevrotain/utils/lib/src/api.js\");\n/* harmony import */ var _reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reg_exp_parser.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js\");\n/* harmony import */ var _lexer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer.js\");\n\n\n\n\n\nconst complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nconst failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nfunction getOptimizedStartCodesIndices(regExp, ensureOptimizations = false) {\n    try {\n        const ast = (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_2__.getRegExpAst)(regExp);\n        const firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n        return firstChars;\n    } catch (e) {\n        /* istanbul ignore next */ // Testing this relies on the regexp-to-ast library having a bug... */\n        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n        if (e.message === complementErrorMessage) {\n            if (ensureOptimizations) {\n                (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.PRINT_WARNING)(`${failedOptimizationPrefixMsg}` + `\\tUnable to optimize: < ${regExp.toString()} >\\n` + \"\tComplement Sets cannot be automatically optimized.\\n\" + \"\tThis will disable the lexer's first char optimizations.\\n\" + \"\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n            }\n        } else {\n            let msgSuffix = \"\";\n            if (ensureOptimizations) {\n                msgSuffix = \"\\n\tThis will disable the lexer's first char optimizations.\\n\" + \"\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n            }\n            (0,_chevrotain_utils__WEBPACK_IMPORTED_MODULE_1__.PRINT_ERROR)(`${failedOptimizationPrefixMsg}\\n` + `\\tFailed parsing: < ${regExp.toString()} >\\n` + `\\tUsing the @chevrotain/regexp-to-ast library\\n` + \"\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" + msgSuffix);\n        }\n    }\n    return [];\n}\nfunction firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch(ast.type){\n        case \"Disjunction\":\n            for(let i = 0; i < ast.value.length; i++){\n                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n            }\n            break;\n        case \"Alternative\":\n            const terms = ast.value;\n            for(let i = 0; i < terms.length; i++){\n                const term = terms[i];\n                // skip terms that cannot effect the first char results\n                switch(term.type){\n                    case \"EndAnchor\":\n                    // A group back reference cannot affect potential starting char.\n                    // because if a back reference is the first production than automatically\n                    // the group being referenced has had to come BEFORE so its codes have already been added\n                    case \"GroupBackReference\":\n                    // assertions do not affect potential starting codes\n                    case \"Lookahead\":\n                    case \"NegativeLookahead\":\n                    case \"StartAnchor\":\n                    case \"WordBoundary\":\n                    case \"NonWordBoundary\":\n                        continue;\n                }\n                const atom = term;\n                switch(atom.type){\n                    case \"Character\":\n                        addOptimizedIdxToResult(atom.value, result, ignoreCase);\n                        break;\n                    case \"Set\":\n                        if (atom.complement === true) {\n                            throw Error(complementErrorMessage);\n                        }\n                        (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(atom.value, (code)=>{\n                            if (typeof code === \"number\") {\n                                addOptimizedIdxToResult(code, result, ignoreCase);\n                            } else {\n                                // range\n                                const range = code;\n                                // cannot optimize when ignoreCase is\n                                if (ignoreCase === true) {\n                                    for(let rangeCode = range.from; rangeCode <= range.to; rangeCode++){\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                } else {\n                                    // handle unoptimized values\n                                    for(let rangeCode = range.from; rangeCode <= range.to && rangeCode < _lexer_js__WEBPACK_IMPORTED_MODULE_3__.minOptimizationVal; rangeCode++){\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                                    if (range.to >= _lexer_js__WEBPACK_IMPORTED_MODULE_3__.minOptimizationVal) {\n                                        const minUnOptVal = range.from >= _lexer_js__WEBPACK_IMPORTED_MODULE_3__.minOptimizationVal ? range.from : _lexer_js__WEBPACK_IMPORTED_MODULE_3__.minOptimizationVal;\n                                        const maxUnOptVal = range.to;\n                                        const minOptIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(minUnOptVal);\n                                        const maxOptIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(maxUnOptVal);\n                                        for(let currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++){\n                                            result[currOptIdx] = currOptIdx;\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                        break;\n                    case \"Group\":\n                        firstCharOptimizedIndices(atom.value, result, ignoreCase);\n                        break;\n                    /* istanbul ignore next */ default:\n                        throw Error(\"Non Exhaustive Match\");\n                }\n                // reached a mandatory production, no more **start** codes can be found on this alternative\n                const isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n                if (// A group may be optional due to empty contents /(?:)/\n                // or if everything inside it is optional /((a)?)/\n                atom.type === \"Group\" && isWholeOptional(atom) === false || // If this term is not a group it may only be optional if it has an optional quantifier\n                atom.type !== \"Group\" && isOptionalQuantifier === false) {\n                    break;\n                }\n            }\n            break;\n        /* istanbul ignore next */ default:\n            throw Error(\"non exhaustive match!\");\n    }\n    // console.log(Object.keys(result).length)\n    return (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(result);\n}\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n    const optimizedCharIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n        handleIgnoreCase(code, result);\n    }\n}\nfunction handleIgnoreCase(code, result) {\n    const char = String.fromCharCode(code);\n    const upperChar = char.toUpperCase();\n    /* istanbul ignore else */ if (upperChar !== char) {\n        const optimizedCharIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(upperChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n    } else {\n        const lowerChar = char.toLowerCase();\n        if (lowerChar !== char) {\n            const optimizedCharIdx = (0,_lexer_js__WEBPACK_IMPORTED_MODULE_3__.charCodeToOptimizedIndex)(lowerChar.charCodeAt(0));\n            result[optimizedCharIdx] = optimizedCharIdx;\n        }\n    }\n}\nfunction findCode(setNode, targetCharCodes) {\n    return (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(setNode.value, (codeOrRange)=>{\n        if (typeof codeOrRange === \"number\") {\n            return (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(targetCharCodes, codeOrRange);\n        } else {\n            // range\n            const range = codeOrRange;\n            return (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(targetCharCodes, (targetCode)=>range.from <= targetCode && targetCode <= range.to) !== undefined;\n        }\n    });\n}\nfunction isWholeOptional(ast) {\n    const quantifier = ast.quantifier;\n    if (quantifier && quantifier.atLeast === 0) {\n        return true;\n    }\n    if (!ast.value) {\n        return false;\n    }\n    return (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ast.value) ? (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(ast.value, isWholeOptional) : isWholeOptional(ast.value);\n}\nclass CharCodeFinder extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n    constructor(targetCharCodes){\n        super();\n        this.targetCharCodes = targetCharCodes;\n        this.found = false;\n    }\n    visitChildren(node) {\n        // No need to keep looking...\n        if (this.found === true) {\n            return;\n        }\n        // switch lookaheads as they do not actually consume any characters thus\n        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n        switch(node.type){\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                return;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                return;\n        }\n        super.visitChildren(node);\n    }\n    visitCharacter(node) {\n        if ((0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.targetCharCodes, node.value)) {\n            this.found = true;\n        }\n    }\n    visitSet(node) {\n        if (node.complement) {\n            if (findCode(node, this.targetCharCodes) === undefined) {\n                this.found = true;\n            }\n        } else {\n            if (findCode(node, this.targetCharCodes) !== undefined) {\n                this.found = true;\n            }\n        }\n    }\n}\nfunction canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n        const ast = (0,_reg_exp_parser_js__WEBPACK_IMPORTED_MODULE_2__.getRegExpAst)(pattern);\n        const charCodeFinder = new CharCodeFinder(charCodes);\n        charCodeFinder.visit(ast);\n        return charCodeFinder.found;\n    } else {\n        return (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(pattern, (char)=>{\n            return (0,_barrel_optimize_names_every_find_forEach_includes_isArray_values_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(charCodes, char.charCodeAt(0));\n        }) !== undefined;\n    }\n} //# sourceMappingURL=reg_exp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearRegExpParserCache: () => (/* binding */ clearRegExpParserCache),\n/* harmony export */   getRegExpAst: () => (/* binding */ getRegExpAst)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/./node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n\nlet regExpAstCache = {};\nconst regExpParser = new _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.RegExpParser();\nfunction getRegExpAst(regExp) {\n    const regExpStr = regExp.toString();\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n        return regExpAstCache[regExpStr];\n    } else {\n        const regExpAst = regExpParser.pattern(regExpStr);\n        regExpAstCache[regExpStr] = regExpAst;\n        return regExpAst;\n    }\n}\nfunction clearRegExpParserCache() {\n    regExpAstCache = {};\n} //# sourceMappingURL=reg_exp_parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3NjYW4vcmVnX2V4cF9wYXJzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBEO0FBQzFELElBQUlDLGlCQUFpQixDQUFDO0FBQ3RCLE1BQU1DLGVBQWUsSUFBSUYsbUVBQVlBO0FBQzlCLFNBQVNHLGFBQWFDLE1BQU07SUFDL0IsTUFBTUMsWUFBWUQsT0FBT0UsUUFBUTtJQUNqQyxJQUFJTCxlQUFlTSxjQUFjLENBQUNGLFlBQVk7UUFDMUMsT0FBT0osY0FBYyxDQUFDSSxVQUFVO0lBQ3BDLE9BQ0s7UUFDRCxNQUFNRyxZQUFZTixhQUFhTyxPQUFPLENBQUNKO1FBQ3ZDSixjQUFjLENBQUNJLFVBQVUsR0FBR0c7UUFDNUIsT0FBT0E7SUFDWDtBQUNKO0FBQ08sU0FBU0U7SUFDWlQsaUJBQWlCLENBQUM7QUFDdEIsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvc2Nhbi9yZWdfZXhwX3BhcnNlci5qcz85YTVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZ0V4cFBhcnNlciwgfSBmcm9tIFwiQGNoZXZyb3RhaW4vcmVnZXhwLXRvLWFzdFwiO1xubGV0IHJlZ0V4cEFzdENhY2hlID0ge307XG5jb25zdCByZWdFeHBQYXJzZXIgPSBuZXcgUmVnRXhwUGFyc2VyKCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVnRXhwQXN0KHJlZ0V4cCkge1xuICAgIGNvbnN0IHJlZ0V4cFN0ciA9IHJlZ0V4cC50b1N0cmluZygpO1xuICAgIGlmIChyZWdFeHBBc3RDYWNoZS5oYXNPd25Qcm9wZXJ0eShyZWdFeHBTdHIpKSB7XG4gICAgICAgIHJldHVybiByZWdFeHBBc3RDYWNoZVtyZWdFeHBTdHJdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVnRXhwQXN0ID0gcmVnRXhwUGFyc2VyLnBhdHRlcm4ocmVnRXhwU3RyKTtcbiAgICAgICAgcmVnRXhwQXN0Q2FjaGVbcmVnRXhwU3RyXSA9IHJlZ0V4cEFzdDtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEFzdDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2xlYXJSZWdFeHBQYXJzZXJDYWNoZSgpIHtcbiAgICByZWdFeHBBc3RDYWNoZSA9IHt9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVnX2V4cF9wYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbIlJlZ0V4cFBhcnNlciIsInJlZ0V4cEFzdENhY2hlIiwicmVnRXhwUGFyc2VyIiwiZ2V0UmVnRXhwQXN0IiwicmVnRXhwIiwicmVnRXhwU3RyIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsInJlZ0V4cEFzdCIsInBhdHRlcm4iLCJjbGVhclJlZ0V4cFBhcnNlckNhY2hlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/reg_exp_parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js":
/*!********************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/tokens.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignCategoriesMapProp: () => (/* binding */ assignCategoriesMapProp),\n/* harmony export */   assignCategoriesTokensProp: () => (/* binding */ assignCategoriesTokensProp),\n/* harmony export */   assignTokenDefaultProps: () => (/* binding */ assignTokenDefaultProps),\n/* harmony export */   augmentTokenTypes: () => (/* binding */ augmentTokenTypes),\n/* harmony export */   expandCategories: () => (/* binding */ expandCategories),\n/* harmony export */   hasCategoriesProperty: () => (/* binding */ hasCategoriesProperty),\n/* harmony export */   hasExtendingTokensTypesMapProperty: () => (/* binding */ hasExtendingTokensTypesMapProperty),\n/* harmony export */   hasExtendingTokensTypesProperty: () => (/* binding */ hasExtendingTokensTypesProperty),\n/* harmony export */   hasShortKeyProperty: () => (/* binding */ hasShortKeyProperty),\n/* harmony export */   isTokenType: () => (/* binding */ isTokenType),\n/* harmony export */   singleAssignCategoriesToksMap: () => (/* binding */ singleAssignCategoriesToksMap),\n/* harmony export */   tokenIdxToClass: () => (/* binding */ tokenIdxToClass),\n/* harmony export */   tokenShortNameIdx: () => (/* binding */ tokenShortNameIdx),\n/* harmony export */   tokenStructuredMatcher: () => (/* binding */ tokenStructuredMatcher),\n/* harmony export */   tokenStructuredMatcherNoCategories: () => (/* binding */ tokenStructuredMatcherNoCategories)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/forEach.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/clone.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/compact.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/flatten.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/map.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/difference.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isEmpty.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isArray.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/includes.js\");\n/* harmony import */ var _barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=clone,compact,difference,flatten,forEach,has,includes,isArray,isEmpty,map!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n    const instanceType = tokInstance.tokenTypeIdx;\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n        return true;\n    } else {\n        return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n    }\n}\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\nlet tokenShortNameIdx = 1;\nconst tokenIdxToClass = {};\nfunction augmentTokenTypes(tokenTypes) {\n    // collect the parent Token Types as well.\n    const tokenTypesAndParents = expandCategories(tokenTypes);\n    // add required tokenType and categoryMatches properties\n    assignTokenDefaultProps(tokenTypesAndParents);\n    // fill up the categoryMatches\n    assignCategoriesMapProp(tokenTypesAndParents);\n    assignCategoriesTokensProp(tokenTypesAndParents);\n    (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenTypesAndParents, (tokType)=>{\n        tokType.isParent = tokType.categoryMatches.length > 0;\n    });\n}\nfunction expandCategories(tokenTypes) {\n    let result = (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(tokenTypes);\n    let categories = tokenTypes;\n    let searching = true;\n    while(searching){\n        categories = (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])((0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(categories, (currTokType)=>currTokType.CATEGORIES)));\n        const newCategories = (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(categories, result);\n        result = result.concat(newCategories);\n        if ((0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(newCategories)) {\n            searching = false;\n        } else {\n            categories = newCategories;\n        }\n    }\n    return result;\n}\nfunction assignTokenDefaultProps(tokenTypes) {\n    (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenTypes, (currTokType)=>{\n        if (!hasShortKeyProperty(currTokType)) {\n            tokenIdxToClass[tokenShortNameIdx] = currTokType;\n            currTokType.tokenTypeIdx = tokenShortNameIdx++;\n        }\n        // CATEGORIES? : TokenType | TokenType[]\n        if (hasCategoriesProperty(currTokType) && !(0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(currTokType.CATEGORIES)) {\n            currTokType.CATEGORIES = [\n                currTokType.CATEGORIES\n            ];\n        }\n        if (!hasCategoriesProperty(currTokType)) {\n            currTokType.CATEGORIES = [];\n        }\n        if (!hasExtendingTokensTypesProperty(currTokType)) {\n            currTokType.categoryMatches = [];\n        }\n        if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n            currTokType.categoryMatchesMap = {};\n        }\n    });\n}\nfunction assignCategoriesTokensProp(tokenTypes) {\n    (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenTypes, (currTokType)=>{\n        // avoid duplications\n        currTokType.categoryMatches = [];\n        (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(currTokType.categoryMatchesMap, (val, key)=>{\n            currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);\n        });\n    });\n}\nfunction assignCategoriesMapProp(tokenTypes) {\n    (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tokenTypes, (currTokType)=>{\n        singleAssignCategoriesToksMap([], currTokType);\n    });\n}\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n    (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(path, (pathNode)=>{\n        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n    });\n    (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(nextNode.CATEGORIES, (nextCategory)=>{\n        const newPath = path.concat(nextNode);\n        // avoids infinite loops due to cyclic categories.\n        if (!(0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(newPath, nextCategory)) {\n            singleAssignCategoriesToksMap(newPath, nextCategory);\n        }\n    });\n}\nfunction hasShortKeyProperty(tokType) {\n    return (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"tokenTypeIdx\");\n}\nfunction hasCategoriesProperty(tokType) {\n    return (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"CATEGORIES\");\n}\nfunction hasExtendingTokensTypesProperty(tokType) {\n    return (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"categoryMatches\");\n}\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n    return (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"categoryMatchesMap\");\n}\nfunction isTokenType(tokType) {\n    return (0,_barrel_optimize_names_clone_compact_difference_flatten_forEach_has_includes_isArray_isEmpty_map_lodash_es__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(tokType, \"tokenTypeIdx\");\n} //# sourceMappingURL=tokens.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js":
/*!***************************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/scan/tokens_public.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EOF: () => (/* binding */ EOF),\n/* harmony export */   createToken: () => (/* binding */ createToken),\n/* harmony export */   createTokenInstance: () => (/* binding */ createTokenInstance),\n/* harmony export */   hasTokenLabel: () => (/* binding */ hasTokenLabel),\n/* harmony export */   tokenLabel: () => (/* binding */ tokenLabel),\n/* harmony export */   tokenMatcher: () => (/* binding */ tokenMatcher),\n/* harmony export */   tokenName: () => (/* binding */ tokenName)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=has,isString,isUndefined!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isString.js\");\n/* harmony import */ var _barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=has,isString,isUndefined!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/isUndefined.js\");\n/* harmony import */ var _barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=has,isString,isUndefined!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var _lexer_public_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lexer_public.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/lexer_public.js\");\n/* harmony import */ var _tokens_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokens.js */ \"(ssr)/./node_modules/chevrotain/lib/src/scan/tokens.js\");\n\n\n\nfunction tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n        return tokType.LABEL;\n    } else {\n        return tokType.name;\n    }\n}\nfunction tokenName(tokType) {\n    return tokType.name;\n}\nfunction hasTokenLabel(obj) {\n    return (0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(obj.LABEL) && obj.LABEL !== \"\";\n}\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\nfunction createToken(config) {\n    return createTokenInternal(config);\n}\nfunction createTokenInternal(config) {\n    const pattern = config.pattern;\n    const tokenType = {};\n    tokenType.name = config.name;\n    if (!(0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(pattern)) {\n        tokenType.PATTERN = pattern;\n    }\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, PARENT)) {\n        throw \"The parent property is no longer supported.\\n\" + \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\";\n    }\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, CATEGORIES)) {\n        // casting to ANY as this will be fixed inside `augmentTokenTypes``\n        tokenType.CATEGORIES = config[CATEGORIES];\n    }\n    (0,_tokens_js__WEBPACK_IMPORTED_MODULE_1__.augmentTokenTypes)([\n        tokenType\n    ]);\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, LABEL)) {\n        tokenType.LABEL = config[LABEL];\n    }\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, GROUP)) {\n        tokenType.GROUP = config[GROUP];\n    }\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, POP_MODE)) {\n        tokenType.POP_MODE = config[POP_MODE];\n    }\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, PUSH_MODE)) {\n        tokenType.PUSH_MODE = config[PUSH_MODE];\n    }\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, LONGER_ALT)) {\n        tokenType.LONGER_ALT = config[LONGER_ALT];\n    }\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, LINE_BREAKS)) {\n        tokenType.LINE_BREAKS = config[LINE_BREAKS];\n    }\n    if ((0,_barrel_optimize_names_has_isString_isUndefined_lodash_es__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(config, START_CHARS_HINT)) {\n        tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n    }\n    return tokenType;\n}\nconst EOF = createToken({\n    name: \"EOF\",\n    pattern: _lexer_public_js__WEBPACK_IMPORTED_MODULE_0__.Lexer.NA\n});\n(0,_tokens_js__WEBPACK_IMPORTED_MODULE_1__.augmentTokenTypes)([\n    EOF\n]);\nfunction createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n        image,\n        startOffset,\n        endOffset,\n        startLine,\n        endLine,\n        startColumn,\n        endColumn,\n        tokenTypeIdx: tokType.tokenTypeIdx,\n        tokenType: tokType\n    };\n}\nfunction tokenMatcher(token, tokType) {\n    return (0,_tokens_js__WEBPACK_IMPORTED_MODULE_1__.tokenStructuredMatcher)(token, tokType);\n} //# sourceMappingURL=tokens_public.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3NjYW4vdG9rZW5zX3B1YmxpYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBdUQ7QUFDYjtBQUM4QjtBQUNqRSxTQUFTTSxXQUFXQyxPQUFPO0lBQzlCLElBQUlDLGNBQWNELFVBQVU7UUFDeEIsT0FBT0EsUUFBUUUsS0FBSztJQUN4QixPQUNLO1FBQ0QsT0FBT0YsUUFBUUcsSUFBSTtJQUN2QjtBQUNKO0FBQ08sU0FBU0MsVUFBVUosT0FBTztJQUM3QixPQUFPQSxRQUFRRyxJQUFJO0FBQ3ZCO0FBQ08sU0FBU0YsY0FBY0ksR0FBRztJQUM3QixPQUFPWCxxR0FBUUEsQ0FBQ1csSUFBSUgsS0FBSyxLQUFLRyxJQUFJSCxLQUFLLEtBQUs7QUFDaEQ7QUFDQSxNQUFNSSxTQUFTO0FBQ2YsTUFBTUMsYUFBYTtBQUNuQixNQUFNTCxRQUFRO0FBQ2QsTUFBTU0sUUFBUTtBQUNkLE1BQU1DLFlBQVk7QUFDbEIsTUFBTUMsV0FBVztBQUNqQixNQUFNQyxhQUFhO0FBQ25CLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsbUJBQW1CO0FBQ2xCLFNBQVNDLFlBQVlDLE1BQU07SUFDOUIsT0FBT0Msb0JBQW9CRDtBQUMvQjtBQUNBLFNBQVNDLG9CQUFvQkQsTUFBTTtJQUMvQixNQUFNRSxVQUFVRixPQUFPRSxPQUFPO0lBQzlCLE1BQU1DLFlBQVksQ0FBQztJQUNuQkEsVUFBVWYsSUFBSSxHQUFHWSxPQUFPWixJQUFJO0lBQzVCLElBQUksQ0FBQ1IscUdBQVdBLENBQUNzQixVQUFVO1FBQ3ZCQyxVQUFVQyxPQUFPLEdBQUdGO0lBQ3hCO0lBQ0EsSUFBSXhCLHFHQUFHQSxDQUFDc0IsUUFBUVQsU0FBUztRQUNyQixNQUFPLGtEQUNIO0lBQ1I7SUFDQSxJQUFJYixxR0FBR0EsQ0FBQ3NCLFFBQVFSLGFBQWE7UUFDekIsbUVBQW1FO1FBQ25FVyxVQUFVWCxVQUFVLEdBQUdRLE1BQU0sQ0FBQ1IsV0FBVztJQUM3QztJQUNBViw2REFBaUJBLENBQUM7UUFBQ3FCO0tBQVU7SUFDN0IsSUFBSXpCLHFHQUFHQSxDQUFDc0IsUUFBUWIsUUFBUTtRQUNwQmdCLFVBQVVoQixLQUFLLEdBQUdhLE1BQU0sQ0FBQ2IsTUFBTTtJQUNuQztJQUNBLElBQUlULHFHQUFHQSxDQUFDc0IsUUFBUVAsUUFBUTtRQUNwQlUsVUFBVVYsS0FBSyxHQUFHTyxNQUFNLENBQUNQLE1BQU07SUFDbkM7SUFDQSxJQUFJZixxR0FBR0EsQ0FBQ3NCLFFBQVFMLFdBQVc7UUFDdkJRLFVBQVVSLFFBQVEsR0FBR0ssTUFBTSxDQUFDTCxTQUFTO0lBQ3pDO0lBQ0EsSUFBSWpCLHFHQUFHQSxDQUFDc0IsUUFBUU4sWUFBWTtRQUN4QlMsVUFBVVQsU0FBUyxHQUFHTSxNQUFNLENBQUNOLFVBQVU7SUFDM0M7SUFDQSxJQUFJaEIscUdBQUdBLENBQUNzQixRQUFRSixhQUFhO1FBQ3pCTyxVQUFVUCxVQUFVLEdBQUdJLE1BQU0sQ0FBQ0osV0FBVztJQUM3QztJQUNBLElBQUlsQixxR0FBR0EsQ0FBQ3NCLFFBQVFILGNBQWM7UUFDMUJNLFVBQVVOLFdBQVcsR0FBR0csTUFBTSxDQUFDSCxZQUFZO0lBQy9DO0lBQ0EsSUFBSW5CLHFHQUFHQSxDQUFDc0IsUUFBUUYsbUJBQW1CO1FBQy9CSyxVQUFVTCxnQkFBZ0IsR0FBR0UsTUFBTSxDQUFDRixpQkFBaUI7SUFDekQ7SUFDQSxPQUFPSztBQUNYO0FBQ08sTUFBTUUsTUFBTU4sWUFBWTtJQUFFWCxNQUFNO0lBQU9jLFNBQVNyQixtREFBS0EsQ0FBQ3lCLEVBQUU7QUFBQyxHQUFHO0FBQ25FeEIsNkRBQWlCQSxDQUFDO0lBQUN1QjtDQUFJO0FBQ2hCLFNBQVNFLG9CQUFvQnRCLE9BQU8sRUFBRXVCLEtBQUssRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFQyxXQUFXLEVBQUVDLFNBQVM7SUFDbEgsT0FBTztRQUNITjtRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQyxjQUFjOUIsUUFBUThCLFlBQVk7UUFDbENaLFdBQVdsQjtJQUNmO0FBQ0o7QUFDTyxTQUFTK0IsYUFBYUMsS0FBSyxFQUFFaEMsT0FBTztJQUN2QyxPQUFPRixrRUFBc0JBLENBQUNrQyxPQUFPaEM7QUFDekMsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvc2Nhbi90b2tlbnNfcHVibGljLmpzPzY2NWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzLCBpc1N0cmluZywgaXNVbmRlZmluZWQgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBMZXhlciB9IGZyb20gXCIuL2xleGVyX3B1YmxpYy5qc1wiO1xuaW1wb3J0IHsgYXVnbWVudFRva2VuVHlwZXMsIHRva2VuU3RydWN0dXJlZE1hdGNoZXIgfSBmcm9tIFwiLi90b2tlbnMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB0b2tlbkxhYmVsKHRva1R5cGUpIHtcbiAgICBpZiAoaGFzVG9rZW5MYWJlbCh0b2tUeXBlKSkge1xuICAgICAgICByZXR1cm4gdG9rVHlwZS5MQUJFTDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2tUeXBlLm5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHRva2VuTmFtZSh0b2tUeXBlKSB7XG4gICAgcmV0dXJuIHRva1R5cGUubmFtZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNUb2tlbkxhYmVsKG9iaikge1xuICAgIHJldHVybiBpc1N0cmluZyhvYmouTEFCRUwpICYmIG9iai5MQUJFTCAhPT0gXCJcIjtcbn1cbmNvbnN0IFBBUkVOVCA9IFwicGFyZW50XCI7XG5jb25zdCBDQVRFR09SSUVTID0gXCJjYXRlZ29yaWVzXCI7XG5jb25zdCBMQUJFTCA9IFwibGFiZWxcIjtcbmNvbnN0IEdST1VQID0gXCJncm91cFwiO1xuY29uc3QgUFVTSF9NT0RFID0gXCJwdXNoX21vZGVcIjtcbmNvbnN0IFBPUF9NT0RFID0gXCJwb3BfbW9kZVwiO1xuY29uc3QgTE9OR0VSX0FMVCA9IFwibG9uZ2VyX2FsdFwiO1xuY29uc3QgTElORV9CUkVBS1MgPSBcImxpbmVfYnJlYWtzXCI7XG5jb25zdCBTVEFSVF9DSEFSU19ISU5UID0gXCJzdGFydF9jaGFyc19oaW50XCI7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVG9rZW4oY29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVRva2VuSW50ZXJuYWwoY29uZmlnKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRva2VuSW50ZXJuYWwoY29uZmlnKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IGNvbmZpZy5wYXR0ZXJuO1xuICAgIGNvbnN0IHRva2VuVHlwZSA9IHt9O1xuICAgIHRva2VuVHlwZS5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgaWYgKCFpc1VuZGVmaW5lZChwYXR0ZXJuKSkge1xuICAgICAgICB0b2tlblR5cGUuUEFUVEVSTiA9IHBhdHRlcm47XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBQQVJFTlQpKSB7XG4gICAgICAgIHRocm93IChcIlRoZSBwYXJlbnQgcHJvcGVydHkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC5cXG5cIiArXG4gICAgICAgICAgICBcIlNlZTogaHR0cHM6Ly9naXRodWIuY29tL2NoZXZyb3RhaW4vY2hldnJvdGFpbi9pc3N1ZXMvNTY0I2lzc3VlY29tbWVudC0zNDkwNjIzNDYgZm9yIGRldGFpbHMuXCIpO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgQ0FURUdPUklFUykpIHtcbiAgICAgICAgLy8gY2FzdGluZyB0byBBTlkgYXMgdGhpcyB3aWxsIGJlIGZpeGVkIGluc2lkZSBgYXVnbWVudFRva2VuVHlwZXNgYFxuICAgICAgICB0b2tlblR5cGUuQ0FURUdPUklFUyA9IGNvbmZpZ1tDQVRFR09SSUVTXTtcbiAgICB9XG4gICAgYXVnbWVudFRva2VuVHlwZXMoW3Rva2VuVHlwZV0pO1xuICAgIGlmIChoYXMoY29uZmlnLCBMQUJFTCkpIHtcbiAgICAgICAgdG9rZW5UeXBlLkxBQkVMID0gY29uZmlnW0xBQkVMXTtcbiAgICB9XG4gICAgaWYgKGhhcyhjb25maWcsIEdST1VQKSkge1xuICAgICAgICB0b2tlblR5cGUuR1JPVVAgPSBjb25maWdbR1JPVVBdO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgUE9QX01PREUpKSB7XG4gICAgICAgIHRva2VuVHlwZS5QT1BfTU9ERSA9IGNvbmZpZ1tQT1BfTU9ERV07XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBQVVNIX01PREUpKSB7XG4gICAgICAgIHRva2VuVHlwZS5QVVNIX01PREUgPSBjb25maWdbUFVTSF9NT0RFXTtcbiAgICB9XG4gICAgaWYgKGhhcyhjb25maWcsIExPTkdFUl9BTFQpKSB7XG4gICAgICAgIHRva2VuVHlwZS5MT05HRVJfQUxUID0gY29uZmlnW0xPTkdFUl9BTFRdO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgTElORV9CUkVBS1MpKSB7XG4gICAgICAgIHRva2VuVHlwZS5MSU5FX0JSRUFLUyA9IGNvbmZpZ1tMSU5FX0JSRUFLU107XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBTVEFSVF9DSEFSU19ISU5UKSkge1xuICAgICAgICB0b2tlblR5cGUuU1RBUlRfQ0hBUlNfSElOVCA9IGNvbmZpZ1tTVEFSVF9DSEFSU19ISU5UXTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuVHlwZTtcbn1cbmV4cG9ydCBjb25zdCBFT0YgPSBjcmVhdGVUb2tlbih7IG5hbWU6IFwiRU9GXCIsIHBhdHRlcm46IExleGVyLk5BIH0pO1xuYXVnbWVudFRva2VuVHlwZXMoW0VPRl0pO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRva2VuSW5zdGFuY2UodG9rVHlwZSwgaW1hZ2UsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQsIHN0YXJ0TGluZSwgZW5kTGluZSwgc3RhcnRDb2x1bW4sIGVuZENvbHVtbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGltYWdlLFxuICAgICAgICBzdGFydE9mZnNldCxcbiAgICAgICAgZW5kT2Zmc2V0LFxuICAgICAgICBzdGFydExpbmUsXG4gICAgICAgIGVuZExpbmUsXG4gICAgICAgIHN0YXJ0Q29sdW1uLFxuICAgICAgICBlbmRDb2x1bW4sXG4gICAgICAgIHRva2VuVHlwZUlkeDogdG9rVHlwZS50b2tlblR5cGVJZHgsXG4gICAgICAgIHRva2VuVHlwZTogdG9rVHlwZSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRva2VuTWF0Y2hlcih0b2tlbiwgdG9rVHlwZSkge1xuICAgIHJldHVybiB0b2tlblN0cnVjdHVyZWRNYXRjaGVyKHRva2VuLCB0b2tUeXBlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2Vuc19wdWJsaWMuanMubWFwIl0sIm5hbWVzIjpbImhhcyIsImlzU3RyaW5nIiwiaXNVbmRlZmluZWQiLCJMZXhlciIsImF1Z21lbnRUb2tlblR5cGVzIiwidG9rZW5TdHJ1Y3R1cmVkTWF0Y2hlciIsInRva2VuTGFiZWwiLCJ0b2tUeXBlIiwiaGFzVG9rZW5MYWJlbCIsIkxBQkVMIiwibmFtZSIsInRva2VuTmFtZSIsIm9iaiIsIlBBUkVOVCIsIkNBVEVHT1JJRVMiLCJHUk9VUCIsIlBVU0hfTU9ERSIsIlBPUF9NT0RFIiwiTE9OR0VSX0FMVCIsIkxJTkVfQlJFQUtTIiwiU1RBUlRfQ0hBUlNfSElOVCIsImNyZWF0ZVRva2VuIiwiY29uZmlnIiwiY3JlYXRlVG9rZW5JbnRlcm5hbCIsInBhdHRlcm4iLCJ0b2tlblR5cGUiLCJQQVRURVJOIiwiRU9GIiwiTkEiLCJjcmVhdGVUb2tlbkluc3RhbmNlIiwiaW1hZ2UiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzdGFydENvbHVtbiIsImVuZENvbHVtbiIsInRva2VuVHlwZUlkeCIsInRva2VuTWF0Y2hlciIsInRva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/scan/tokens_public.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chevrotain/lib/src/version.js":
/*!****************************************************!*\
  !*** ./node_modules/chevrotain/lib/src/version.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n// needs a separate module as this is required inside chevrotain productive code\n// and also in the entry point for webpack(api.ts).\n// A separate file avoids cyclic dependencies and webpack errors.\nconst VERSION = \"11.0.3\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWIvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGdGQUFnRjtBQUNoRixtREFBbUQ7QUFDbkQsaUVBQWlFO0FBQzFELE1BQU1BLFVBQVUsU0FBUyxDQUNoQyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYi9zcmMvdmVyc2lvbi5qcz8yMjM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIG5lZWRzIGEgc2VwYXJhdGUgbW9kdWxlIGFzIHRoaXMgaXMgcmVxdWlyZWQgaW5zaWRlIGNoZXZyb3RhaW4gcHJvZHVjdGl2ZSBjb2RlXG4vLyBhbmQgYWxzbyBpbiB0aGUgZW50cnkgcG9pbnQgZm9yIHdlYnBhY2soYXBpLnRzKS5cbi8vIEEgc2VwYXJhdGUgZmlsZSBhdm9pZHMgY3ljbGljIGRlcGVuZGVuY2llcyBhbmQgd2VicGFjayBlcnJvcnMuXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMTEuMC4zXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJWRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chevrotain/lib/src/version.js\n");

/***/ })

};
;