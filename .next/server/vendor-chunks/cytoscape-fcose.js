/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cytoscape-fcose";
exports.ids = ["vendor-chunks/cytoscape-fcose"];
exports.modules = {

/***/ "(ssr)/./node_modules/cytoscape-fcose/cytoscape-fcose.js":
/*!*********************************************************!*\
  !*** ./node_modules/cytoscape-fcose/cytoscape-fcose.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory(__webpack_require__(/*! cose-base */ \"(ssr)/./node_modules/cytoscape-fcose/node_modules/cose-base/cose-base.js\"));\n    else {}\n})(this, function(__WEBPACK_EXTERNAL_MODULE__140__) {\n    return /******/ (()=>{\n        /******/ \"use strict\";\n        /******/ var __webpack_modules__ = {\n            /***/ 658: /***/ (module1)=>{\n                // Simple, internal Object.assign() polyfill for options objects etc.\n                module1.exports = Object.assign != null ? Object.assign.bind(Object) : function(tgt) {\n                    for(var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        srcs[_key - 1] = arguments[_key];\n                    }\n                    srcs.forEach(function(src) {\n                        Object.keys(src).forEach(function(k) {\n                            return tgt[k] = src[k];\n                        });\n                    });\n                    return tgt;\n                };\n            /***/ },\n            /***/ 548: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_1385__)=>{\n                var _slicedToArray = function() {\n                    function sliceIterator(arr, i) {\n                        var _arr = [];\n                        var _n = true;\n                        var _d = false;\n                        var _e = undefined;\n                        try {\n                            for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                                _arr.push(_s.value);\n                                if (i && _arr.length === i) break;\n                            }\n                        } catch (err) {\n                            _d = true;\n                            _e = err;\n                        } finally{\n                            try {\n                                if (!_n && _i[\"return\"]) _i[\"return\"]();\n                            } finally{\n                                if (_d) throw _e;\n                            }\n                        }\n                        return _arr;\n                    }\n                    return function(arr, i) {\n                        if (Array.isArray(arr)) {\n                            return arr;\n                        } else if (Symbol.iterator in Object(arr)) {\n                            return sliceIterator(arr, i);\n                        } else {\n                            throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n                        }\n                    };\n                }();\n                /*\n * Auxiliary functions\n */ var LinkedList = __nested_webpack_require_1385__(140).layoutBase.LinkedList;\n                var auxiliary = {};\n                // get the top most nodes\n                auxiliary.getTopMostNodes = function(nodes) {\n                    var nodesMap = {};\n                    for(var i = 0; i < nodes.length; i++){\n                        nodesMap[nodes[i].id()] = true;\n                    }\n                    var roots = nodes.filter(function(ele, i) {\n                        if (typeof ele === \"number\") {\n                            ele = i;\n                        }\n                        var parent = ele.parent()[0];\n                        while(parent != null){\n                            if (nodesMap[parent.id()]) {\n                                return false;\n                            }\n                            parent = parent.parent()[0];\n                        }\n                        return true;\n                    });\n                    return roots;\n                };\n                // find disconnected components and create dummy nodes that connect them\n                auxiliary.connectComponents = function(cy, eles, topMostNodes, dummyNodes) {\n                    var queue = new LinkedList();\n                    var visited = new Set();\n                    var visitedTopMostNodes = [];\n                    var currentNeighbor = void 0;\n                    var minDegreeNode = void 0;\n                    var minDegree = void 0;\n                    var isConnected = false;\n                    var count = 1;\n                    var nodesConnectedToDummy = [];\n                    var components = [];\n                    var _loop = function _loop() {\n                        var cmpt = cy.collection();\n                        components.push(cmpt);\n                        var currentNode = topMostNodes[0];\n                        var childrenOfCurrentNode = cy.collection();\n                        childrenOfCurrentNode.merge(currentNode).merge(currentNode.descendants().intersection(eles));\n                        visitedTopMostNodes.push(currentNode);\n                        childrenOfCurrentNode.forEach(function(node) {\n                            queue.push(node);\n                            visited.add(node);\n                            cmpt.merge(node);\n                        });\n                        var _loop2 = function _loop2() {\n                            currentNode = queue.shift();\n                            // Traverse all neighbors of this node\n                            var neighborNodes = cy.collection();\n                            currentNode.neighborhood().nodes().forEach(function(node) {\n                                if (eles.intersection(currentNode.edgesWith(node)).length > 0) {\n                                    neighborNodes.merge(node);\n                                }\n                            });\n                            for(var i = 0; i < neighborNodes.length; i++){\n                                var neighborNode = neighborNodes[i];\n                                currentNeighbor = topMostNodes.intersection(neighborNode.union(neighborNode.ancestors()));\n                                if (currentNeighbor != null && !visited.has(currentNeighbor[0])) {\n                                    var childrenOfNeighbor = currentNeighbor.union(currentNeighbor.descendants());\n                                    childrenOfNeighbor.forEach(function(node) {\n                                        queue.push(node);\n                                        visited.add(node);\n                                        cmpt.merge(node);\n                                        if (topMostNodes.has(node)) {\n                                            visitedTopMostNodes.push(node);\n                                        }\n                                    });\n                                }\n                            }\n                        };\n                        while(queue.length != 0){\n                            _loop2();\n                        }\n                        cmpt.forEach(function(node) {\n                            eles.intersection(node.connectedEdges()).forEach(function(e) {\n                                // connectedEdges() usually cached\n                                if (cmpt.has(e.source()) && cmpt.has(e.target())) {\n                                    // has() is cheap\n                                    cmpt.merge(e);\n                                }\n                            });\n                        });\n                        if (visitedTopMostNodes.length == topMostNodes.length) {\n                            isConnected = true;\n                        }\n                        if (!isConnected || isConnected && count > 1) {\n                            minDegreeNode = visitedTopMostNodes[0];\n                            minDegree = minDegreeNode.connectedEdges().length;\n                            visitedTopMostNodes.forEach(function(node) {\n                                if (node.connectedEdges().length < minDegree) {\n                                    minDegree = node.connectedEdges().length;\n                                    minDegreeNode = node;\n                                }\n                            });\n                            nodesConnectedToDummy.push(minDegreeNode.id());\n                            // TO DO: Check efficiency of this part\n                            var temp = cy.collection();\n                            temp.merge(visitedTopMostNodes[0]);\n                            visitedTopMostNodes.forEach(function(node) {\n                                temp.merge(node);\n                            });\n                            visitedTopMostNodes = [];\n                            topMostNodes = topMostNodes.difference(temp);\n                            count++;\n                        }\n                    };\n                    do {\n                        _loop();\n                    }while (!isConnected);\n                    if (dummyNodes) {\n                        if (nodesConnectedToDummy.length > 0) {\n                            dummyNodes.set(\"dummy\" + (dummyNodes.size + 1), nodesConnectedToDummy);\n                        }\n                    }\n                    return components;\n                };\n                // relocates componentResult to originalCenter if there is no fixedNodeConstraint\n                auxiliary.relocateComponent = function(originalCenter, componentResult, options) {\n                    if (!options.fixedNodeConstraint) {\n                        var minXCoord = Number.POSITIVE_INFINITY;\n                        var maxXCoord = Number.NEGATIVE_INFINITY;\n                        var minYCoord = Number.POSITIVE_INFINITY;\n                        var maxYCoord = Number.NEGATIVE_INFINITY;\n                        if (options.quality == \"draft\") {\n                            // calculate current bounding box\n                            var _iteratorNormalCompletion = true;\n                            var _didIteratorError = false;\n                            var _iteratorError = undefined;\n                            try {\n                                for(var _iterator = componentResult.nodeIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                    var _ref = _step.value;\n                                    var _ref2 = _slicedToArray(_ref, 2);\n                                    var key = _ref2[0];\n                                    var value = _ref2[1];\n                                    var cyNode = options.cy.getElementById(key);\n                                    if (cyNode) {\n                                        var nodeBB = cyNode.boundingBox();\n                                        var leftX = componentResult.xCoords[value] - nodeBB.w / 2;\n                                        var rightX = componentResult.xCoords[value] + nodeBB.w / 2;\n                                        var topY = componentResult.yCoords[value] - nodeBB.h / 2;\n                                        var bottomY = componentResult.yCoords[value] + nodeBB.h / 2;\n                                        if (leftX < minXCoord) minXCoord = leftX;\n                                        if (rightX > maxXCoord) maxXCoord = rightX;\n                                        if (topY < minYCoord) minYCoord = topY;\n                                        if (bottomY > maxYCoord) maxYCoord = bottomY;\n                                    }\n                                }\n                            // find difference between current and original center\n                            } catch (err) {\n                                _didIteratorError = true;\n                                _iteratorError = err;\n                            } finally{\n                                try {\n                                    if (!_iteratorNormalCompletion && _iterator.return) {\n                                        _iterator.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError) {\n                                        throw _iteratorError;\n                                    }\n                                }\n                            }\n                            var diffOnX = originalCenter.x - (maxXCoord + minXCoord) / 2;\n                            var diffOnY = originalCenter.y - (maxYCoord + minYCoord) / 2;\n                            // move component to original center\n                            componentResult.xCoords = componentResult.xCoords.map(function(x) {\n                                return x + diffOnX;\n                            });\n                            componentResult.yCoords = componentResult.yCoords.map(function(y) {\n                                return y + diffOnY;\n                            });\n                        } else {\n                            // calculate current bounding box\n                            Object.keys(componentResult).forEach(function(item) {\n                                var node = componentResult[item];\n                                var leftX = node.getRect().x;\n                                var rightX = node.getRect().x + node.getRect().width;\n                                var topY = node.getRect().y;\n                                var bottomY = node.getRect().y + node.getRect().height;\n                                if (leftX < minXCoord) minXCoord = leftX;\n                                if (rightX > maxXCoord) maxXCoord = rightX;\n                                if (topY < minYCoord) minYCoord = topY;\n                                if (bottomY > maxYCoord) maxYCoord = bottomY;\n                            });\n                            // find difference between current and original center\n                            var _diffOnX = originalCenter.x - (maxXCoord + minXCoord) / 2;\n                            var _diffOnY = originalCenter.y - (maxYCoord + minYCoord) / 2;\n                            // move component to original center\n                            Object.keys(componentResult).forEach(function(item) {\n                                var node = componentResult[item];\n                                node.setCenter(node.getCenterX() + _diffOnX, node.getCenterY() + _diffOnY);\n                            });\n                        }\n                    }\n                };\n                auxiliary.calcBoundingBox = function(parentNode, xCoords, yCoords, nodeIndexes) {\n                    // calculate bounds\n                    var left = Number.MAX_SAFE_INTEGER;\n                    var right = Number.MIN_SAFE_INTEGER;\n                    var top = Number.MAX_SAFE_INTEGER;\n                    var bottom = Number.MIN_SAFE_INTEGER;\n                    var nodeLeft = void 0;\n                    var nodeRight = void 0;\n                    var nodeTop = void 0;\n                    var nodeBottom = void 0;\n                    var nodes = parentNode.descendants().not(\":parent\");\n                    var s = nodes.length;\n                    for(var i = 0; i < s; i++){\n                        var node = nodes[i];\n                        nodeLeft = xCoords[nodeIndexes.get(node.id())] - node.width() / 2;\n                        nodeRight = xCoords[nodeIndexes.get(node.id())] + node.width() / 2;\n                        nodeTop = yCoords[nodeIndexes.get(node.id())] - node.height() / 2;\n                        nodeBottom = yCoords[nodeIndexes.get(node.id())] + node.height() / 2;\n                        if (left > nodeLeft) {\n                            left = nodeLeft;\n                        }\n                        if (right < nodeRight) {\n                            right = nodeRight;\n                        }\n                        if (top > nodeTop) {\n                            top = nodeTop;\n                        }\n                        if (bottom < nodeBottom) {\n                            bottom = nodeBottom;\n                        }\n                    }\n                    var boundingBox = {};\n                    boundingBox.topLeftX = left;\n                    boundingBox.topLeftY = top;\n                    boundingBox.width = right - left;\n                    boundingBox.height = bottom - top;\n                    return boundingBox;\n                };\n                // This function finds and returns parent nodes whose all children are hidden\n                auxiliary.calcParentsWithoutChildren = function(cy, eles) {\n                    var parentsWithoutChildren = cy.collection();\n                    eles.nodes(\":parent\").forEach(function(parent) {\n                        var check = false;\n                        parent.children().forEach(function(child) {\n                            if (child.css(\"display\") != \"none\") {\n                                check = true;\n                            }\n                        });\n                        if (!check) {\n                            parentsWithoutChildren.merge(parent);\n                        }\n                    });\n                    return parentsWithoutChildren;\n                };\n                module1.exports = auxiliary;\n            /***/ },\n            /***/ 816: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_17389__)=>{\n                /**\n  The implementation of the postprocessing part that applies CoSE layout over the spectral layout\n*/ var aux = __nested_webpack_require_17389__(548);\n                var CoSELayout = __nested_webpack_require_17389__(140).CoSELayout;\n                var CoSENode = __nested_webpack_require_17389__(140).CoSENode;\n                var PointD = __nested_webpack_require_17389__(140).layoutBase.PointD;\n                var DimensionD = __nested_webpack_require_17389__(140).layoutBase.DimensionD;\n                var LayoutConstants = __nested_webpack_require_17389__(140).layoutBase.LayoutConstants;\n                var FDLayoutConstants = __nested_webpack_require_17389__(140).layoutBase.FDLayoutConstants;\n                var CoSEConstants = __nested_webpack_require_17389__(140).CoSEConstants;\n                // main function that cose layout is processed\n                var coseLayout = function coseLayout(options, spectralResult) {\n                    var cy = options.cy;\n                    var eles = options.eles;\n                    var nodes = eles.nodes();\n                    var edges = eles.edges();\n                    var nodeIndexes = void 0;\n                    var xCoords = void 0;\n                    var yCoords = void 0;\n                    var idToLNode = {};\n                    if (options.randomize) {\n                        nodeIndexes = spectralResult[\"nodeIndexes\"];\n                        xCoords = spectralResult[\"xCoords\"];\n                        yCoords = spectralResult[\"yCoords\"];\n                    }\n                    var isFn = function isFn(fn) {\n                        return typeof fn === \"function\";\n                    };\n                    var optFn = function optFn(opt, ele) {\n                        if (isFn(opt)) {\n                            return opt(ele);\n                        } else {\n                            return opt;\n                        }\n                    };\n                    /**** Postprocessing functions ****/ var parentsWithoutChildren = aux.calcParentsWithoutChildren(cy, eles);\n                    // transfer cytoscape nodes to cose nodes\n                    var processChildrenList = function processChildrenList(parent, children, layout, options) {\n                        var size = children.length;\n                        for(var i = 0; i < size; i++){\n                            var theChild = children[i];\n                            var children_of_children = null;\n                            if (theChild.intersection(parentsWithoutChildren).length == 0) {\n                                children_of_children = theChild.children();\n                            }\n                            var theNode = void 0;\n                            var dimensions = theChild.layoutDimensions({\n                                nodeDimensionsIncludeLabels: options.nodeDimensionsIncludeLabels\n                            });\n                            if (theChild.outerWidth() != null && theChild.outerHeight() != null) {\n                                if (options.randomize) {\n                                    if (!theChild.isParent()) {\n                                        theNode = parent.add(new CoSENode(layout.graphManager, new PointD(xCoords[nodeIndexes.get(theChild.id())] - dimensions.w / 2, yCoords[nodeIndexes.get(theChild.id())] - dimensions.h / 2), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));\n                                    } else {\n                                        var parentInfo = aux.calcBoundingBox(theChild, xCoords, yCoords, nodeIndexes);\n                                        if (theChild.intersection(parentsWithoutChildren).length == 0) {\n                                            theNode = parent.add(new CoSENode(layout.graphManager, new PointD(parentInfo.topLeftX, parentInfo.topLeftY), new DimensionD(parentInfo.width, parentInfo.height)));\n                                        } else {\n                                            // for the parentsWithoutChildren\n                                            theNode = parent.add(new CoSENode(layout.graphManager, new PointD(parentInfo.topLeftX, parentInfo.topLeftY), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));\n                                        }\n                                    }\n                                } else {\n                                    theNode = parent.add(new CoSENode(layout.graphManager, new PointD(theChild.position(\"x\") - dimensions.w / 2, theChild.position(\"y\") - dimensions.h / 2), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));\n                                }\n                            } else {\n                                theNode = parent.add(new CoSENode(this.graphManager));\n                            }\n                            // Attach id to the layout node and repulsion value\n                            theNode.id = theChild.data(\"id\");\n                            theNode.nodeRepulsion = optFn(options.nodeRepulsion, theChild);\n                            // Attach the paddings of cy node to layout node\n                            theNode.paddingLeft = parseInt(theChild.css(\"padding\"));\n                            theNode.paddingTop = parseInt(theChild.css(\"padding\"));\n                            theNode.paddingRight = parseInt(theChild.css(\"padding\"));\n                            theNode.paddingBottom = parseInt(theChild.css(\"padding\"));\n                            //Attach the label properties to both compound and simple nodes if labels will be included in node dimensions\n                            //These properties will be used while updating bounds of compounds during iterations or tiling\n                            //and will be used for simple nodes while transferring final positions to cytoscape\n                            if (options.nodeDimensionsIncludeLabels) {\n                                theNode.labelWidth = theChild.boundingBox({\n                                    includeLabels: true,\n                                    includeNodes: false,\n                                    includeOverlays: false\n                                }).w;\n                                theNode.labelHeight = theChild.boundingBox({\n                                    includeLabels: true,\n                                    includeNodes: false,\n                                    includeOverlays: false\n                                }).h;\n                                theNode.labelPosVertical = theChild.css(\"text-valign\");\n                                theNode.labelPosHorizontal = theChild.css(\"text-halign\");\n                            }\n                            // Map the layout node\n                            idToLNode[theChild.data(\"id\")] = theNode;\n                            if (isNaN(theNode.rect.x)) {\n                                theNode.rect.x = 0;\n                            }\n                            if (isNaN(theNode.rect.y)) {\n                                theNode.rect.y = 0;\n                            }\n                            if (children_of_children != null && children_of_children.length > 0) {\n                                var theNewGraph = void 0;\n                                theNewGraph = layout.getGraphManager().add(layout.newGraph(), theNode);\n                                processChildrenList(theNewGraph, children_of_children, layout, options);\n                            }\n                        }\n                    };\n                    // transfer cytoscape edges to cose edges\n                    var processEdges = function processEdges(layout, gm, edges) {\n                        var idealLengthTotal = 0;\n                        var edgeCount = 0;\n                        for(var i = 0; i < edges.length; i++){\n                            var edge = edges[i];\n                            var sourceNode = idToLNode[edge.data(\"source\")];\n                            var targetNode = idToLNode[edge.data(\"target\")];\n                            if (sourceNode && targetNode && sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {\n                                var e1 = gm.add(layout.newEdge(), sourceNode, targetNode);\n                                e1.id = edge.id();\n                                e1.idealLength = optFn(options.idealEdgeLength, edge);\n                                e1.edgeElasticity = optFn(options.edgeElasticity, edge);\n                                idealLengthTotal += e1.idealLength;\n                                edgeCount++;\n                            }\n                        }\n                        // we need to update the ideal edge length constant with the avg. ideal length value after processing edges\n                        // in case there is no edge, use other options\n                        if (options.idealEdgeLength != null) {\n                            if (edgeCount > 0) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = idealLengthTotal / edgeCount;\n                            else if (!isFn(options.idealEdgeLength)) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options.idealEdgeLength;\n                            else CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;\n                            // we need to update these constant values based on the ideal edge length constant\n                            CoSEConstants.MIN_REPULSION_DIST = FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10.0;\n                            CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n                        }\n                    };\n                    // transfer cytoscape constraints to cose layout\n                    var processConstraints = function processConstraints(layout, options) {\n                        // get nodes to be fixed\n                        if (options.fixedNodeConstraint) {\n                            layout.constraints[\"fixedNodeConstraint\"] = options.fixedNodeConstraint;\n                        }\n                        // get nodes to be aligned\n                        if (options.alignmentConstraint) {\n                            layout.constraints[\"alignmentConstraint\"] = options.alignmentConstraint;\n                        }\n                        // get nodes to be relatively placed\n                        if (options.relativePlacementConstraint) {\n                            layout.constraints[\"relativePlacementConstraint\"] = options.relativePlacementConstraint;\n                        }\n                    };\n                    /**** Apply postprocessing ****/ if (options.nestingFactor != null) CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options.nestingFactor;\n                    if (options.gravity != null) CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options.gravity;\n                    if (options.numIter != null) CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options.numIter;\n                    if (options.gravityRange != null) CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options.gravityRange;\n                    if (options.gravityCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options.gravityCompound;\n                    if (options.gravityRangeCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options.gravityRangeCompound;\n                    if (options.initialEnergyOnIncremental != null) CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options.initialEnergyOnIncremental;\n                    if (options.tilingCompareBy != null) CoSEConstants.TILING_COMPARE_BY = options.tilingCompareBy;\n                    if (options.quality == \"proof\") LayoutConstants.QUALITY = 2;\n                    else LayoutConstants.QUALITY = 0;\n                    CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options.nodeDimensionsIncludeLabels;\n                    CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options.randomize;\n                    CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options.animate;\n                    CoSEConstants.TILE = options.tile;\n                    CoSEConstants.TILING_PADDING_VERTICAL = typeof options.tilingPaddingVertical === \"function\" ? options.tilingPaddingVertical.call() : options.tilingPaddingVertical;\n                    CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options.tilingPaddingHorizontal === \"function\" ? options.tilingPaddingHorizontal.call() : options.tilingPaddingHorizontal;\n                    CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = true;\n                    CoSEConstants.PURE_INCREMENTAL = !options.randomize;\n                    LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = options.uniformNodeDimensions;\n                    // This part is for debug/demo purpose\n                    if (options.step == \"transformed\") {\n                        CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = true;\n                        CoSEConstants.ENFORCE_CONSTRAINTS = false;\n                        CoSEConstants.APPLY_LAYOUT = false;\n                    }\n                    if (options.step == \"enforced\") {\n                        CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = false;\n                        CoSEConstants.ENFORCE_CONSTRAINTS = true;\n                        CoSEConstants.APPLY_LAYOUT = false;\n                    }\n                    if (options.step == \"cose\") {\n                        CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = false;\n                        CoSEConstants.ENFORCE_CONSTRAINTS = false;\n                        CoSEConstants.APPLY_LAYOUT = true;\n                    }\n                    if (options.step == \"all\") {\n                        if (options.randomize) CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = true;\n                        else CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = false;\n                        CoSEConstants.ENFORCE_CONSTRAINTS = true;\n                        CoSEConstants.APPLY_LAYOUT = true;\n                    }\n                    if (options.fixedNodeConstraint || options.alignmentConstraint || options.relativePlacementConstraint) {\n                        CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false;\n                    } else {\n                        CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = true;\n                    }\n                    var coseLayout = new CoSELayout();\n                    var gm = coseLayout.newGraphManager();\n                    processChildrenList(gm.addRoot(), aux.getTopMostNodes(nodes), coseLayout, options);\n                    processEdges(coseLayout, gm, edges);\n                    processConstraints(coseLayout, options);\n                    coseLayout.runLayout();\n                    return idToLNode;\n                };\n                module1.exports = {\n                    coseLayout: coseLayout\n                };\n            /***/ },\n            /***/ 212: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_33038__)=>{\n                var _createClass = function() {\n                    function defineProperties(target, props) {\n                        for(var i = 0; i < props.length; i++){\n                            var descriptor = props[i];\n                            descriptor.enumerable = descriptor.enumerable || false;\n                            descriptor.configurable = true;\n                            if (\"value\" in descriptor) descriptor.writable = true;\n                            Object.defineProperty(target, descriptor.key, descriptor);\n                        }\n                    }\n                    return function(Constructor, protoProps, staticProps) {\n                        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                        if (staticProps) defineProperties(Constructor, staticProps);\n                        return Constructor;\n                    };\n                }();\n                function _classCallCheck(instance, Constructor) {\n                    if (!(instance instanceof Constructor)) {\n                        throw new TypeError(\"Cannot call a class as a function\");\n                    }\n                }\n                /**\n  The implementation of the fcose layout algorithm\n*/ var assign = __nested_webpack_require_33038__(658);\n                var aux = __nested_webpack_require_33038__(548);\n                var _require = __nested_webpack_require_33038__(657), spectralLayout = _require.spectralLayout;\n                var _require2 = __nested_webpack_require_33038__(816), coseLayout = _require2.coseLayout;\n                var defaults = Object.freeze({\n                    // 'draft', 'default' or 'proof' \n                    // - 'draft' only applies spectral layout \n                    // - 'default' improves the quality with subsequent CoSE layout (fast cooling rate)\n                    // - 'proof' improves the quality with subsequent CoSE layout (slow cooling rate) \n                    quality: \"default\",\n                    // Use random node positions at beginning of layout\n                    // if this is set to false, then quality option must be \"proof\"\n                    randomize: true,\n                    // Whether or not to animate the layout\n                    animate: true,\n                    // Duration of animation in ms, if enabled\n                    animationDuration: 1000,\n                    // Easing of animation, if enabled\n                    animationEasing: undefined,\n                    // Fit the viewport to the repositioned nodes\n                    fit: true,\n                    // Padding around layout\n                    padding: 30,\n                    // Whether to include labels in node dimensions. Valid in \"proof\" quality\n                    nodeDimensionsIncludeLabels: false,\n                    // Whether or not simple nodes (non-compound nodes) are of uniform dimensions\n                    uniformNodeDimensions: false,\n                    // Whether to pack disconnected components - valid only if randomize: true\n                    packComponents: true,\n                    // Layout step - all, transformed, enforced, cose - for debug purpose only\n                    step: \"all\",\n                    /* spectral layout options */ // False for random, true for greedy\n                    samplingType: true,\n                    // Sample size to construct distance matrix\n                    sampleSize: 25,\n                    // Separation amount between nodes\n                    nodeSeparation: 75,\n                    // Power iteration tolerance\n                    piTol: 0.0000001,\n                    /* CoSE layout options */ // Node repulsion (non overlapping) multiplier\n                    nodeRepulsion: function nodeRepulsion(node) {\n                        return 4500;\n                    },\n                    // Ideal edge (non nested) length\n                    idealEdgeLength: function idealEdgeLength(edge) {\n                        return 50;\n                    },\n                    // Divisor to compute edge forces\n                    edgeElasticity: function edgeElasticity(edge) {\n                        return 0.45;\n                    },\n                    // Nesting factor (multiplier) to compute ideal edge length for nested edges\n                    nestingFactor: 0.1,\n                    // Gravity force (constant)\n                    gravity: 0.25,\n                    // Maximum number of iterations to perform\n                    numIter: 2500,\n                    // For enabling tiling\n                    tile: true,\n                    // The function that specifies the criteria for comparing nodes while sorting them during tiling operation.\n                    // Takes the node id as a parameter and the default tiling operation is perfomed when this option is not set.\n                    tilingCompareBy: undefined,\n                    // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)\n                    tilingPaddingVertical: 10,\n                    // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)\n                    tilingPaddingHorizontal: 10,\n                    // Gravity range (constant) for compounds\n                    gravityRangeCompound: 1.5,\n                    // Gravity force (constant) for compounds\n                    gravityCompound: 1.0,\n                    // Gravity range (constant)\n                    gravityRange: 3.8,\n                    // Initial cooling factor for incremental layout  \n                    initialEnergyOnIncremental: 0.3,\n                    /* constraint options */ // Fix required nodes to predefined positions\n                    // [{nodeId: 'n1', position: {x: 100, y: 200}, {...}]\n                    fixedNodeConstraint: undefined,\n                    // Align required nodes in vertical/horizontal direction\n                    // {vertical: [['n1', 'n2')], ['n3', 'n4']], horizontal: ['n2', 'n4']}\n                    alignmentConstraint: undefined,\n                    // Place two nodes relatively in vertical/horizontal direction \n                    // [{top: 'n1', bottom: 'n2', gap: 100}, {left: 'n3', right: 'n4', gap: 75}]\n                    relativePlacementConstraint: undefined,\n                    /* layout event callbacks */ ready: function ready() {},\n                    stop: function stop() {} // on layoutstop\n                });\n                var Layout = function() {\n                    function Layout(options) {\n                        _classCallCheck(this, Layout);\n                        this.options = assign({}, defaults, options);\n                    }\n                    _createClass(Layout, [\n                        {\n                            key: \"run\",\n                            value: function run() {\n                                var layout = this;\n                                var options = this.options;\n                                var cy = options.cy;\n                                var eles = options.eles;\n                                var spectralResult = [];\n                                var xCoords = void 0;\n                                var yCoords = void 0;\n                                var coseResult = [];\n                                var components = void 0;\n                                var componentCenters = [];\n                                // basic validity check for constraint inputs \n                                if (options.fixedNodeConstraint && (!Array.isArray(options.fixedNodeConstraint) || options.fixedNodeConstraint.length == 0)) {\n                                    options.fixedNodeConstraint = undefined;\n                                }\n                                if (options.alignmentConstraint) {\n                                    if (options.alignmentConstraint.vertical && (!Array.isArray(options.alignmentConstraint.vertical) || options.alignmentConstraint.vertical.length == 0)) {\n                                        options.alignmentConstraint.vertical = undefined;\n                                    }\n                                    if (options.alignmentConstraint.horizontal && (!Array.isArray(options.alignmentConstraint.horizontal) || options.alignmentConstraint.horizontal.length == 0)) {\n                                        options.alignmentConstraint.horizontal = undefined;\n                                    }\n                                }\n                                if (options.relativePlacementConstraint && (!Array.isArray(options.relativePlacementConstraint) || options.relativePlacementConstraint.length == 0)) {\n                                    options.relativePlacementConstraint = undefined;\n                                }\n                                // if any constraint exists, set some options\n                                var constraintExist = options.fixedNodeConstraint || options.alignmentConstraint || options.relativePlacementConstraint;\n                                if (constraintExist) {\n                                    // constraints work with these options\n                                    options.tile = false;\n                                    options.packComponents = false;\n                                }\n                                // decide component packing is enabled or not\n                                var layUtil = void 0;\n                                var packingEnabled = false;\n                                if (cy.layoutUtilities && options.packComponents) {\n                                    layUtil = cy.layoutUtilities(\"get\");\n                                    if (!layUtil) layUtil = cy.layoutUtilities();\n                                    packingEnabled = true;\n                                }\n                                if (eles.nodes().length > 0) {\n                                    // if packing is not enabled, perform layout on the whole graph\n                                    if (!packingEnabled) {\n                                        // store component center\n                                        var boundingBox = options.eles.boundingBox();\n                                        componentCenters.push({\n                                            x: boundingBox.x1 + boundingBox.w / 2,\n                                            y: boundingBox.y1 + boundingBox.h / 2\n                                        });\n                                        // apply spectral layout\n                                        if (options.randomize) {\n                                            var result = spectralLayout(options);\n                                            spectralResult.push(result);\n                                        }\n                                        // apply cose layout as postprocessing\n                                        if (options.quality == \"default\" || options.quality == \"proof\") {\n                                            coseResult.push(coseLayout(options, spectralResult[0]));\n                                            aux.relocateComponent(componentCenters[0], coseResult[0], options); // relocate center to original position\n                                        } else {\n                                            aux.relocateComponent(componentCenters[0], spectralResult[0], options); // relocate center to original position\n                                        }\n                                    } else {\n                                        // packing is enabled\n                                        var topMostNodes = aux.getTopMostNodes(options.eles.nodes());\n                                        components = aux.connectComponents(cy, options.eles, topMostNodes);\n                                        // store component centers\n                                        components.forEach(function(component) {\n                                            var boundingBox = component.boundingBox();\n                                            componentCenters.push({\n                                                x: boundingBox.x1 + boundingBox.w / 2,\n                                                y: boundingBox.y1 + boundingBox.h / 2\n                                            });\n                                        });\n                                        //send each component to spectral layout if randomized\n                                        if (options.randomize) {\n                                            components.forEach(function(component) {\n                                                options.eles = component;\n                                                spectralResult.push(spectralLayout(options));\n                                            });\n                                        }\n                                        if (options.quality == \"default\" || options.quality == \"proof\") {\n                                            var toBeTiledNodes = cy.collection();\n                                            if (options.tile) {\n                                                // behave nodes to be tiled as one component\n                                                var nodeIndexes = new Map();\n                                                var _xCoords = [];\n                                                var _yCoords = [];\n                                                var count = 0;\n                                                var tempSpectralResult = {\n                                                    nodeIndexes: nodeIndexes,\n                                                    xCoords: _xCoords,\n                                                    yCoords: _yCoords\n                                                };\n                                                var indexesToBeDeleted = [];\n                                                components.forEach(function(component, index) {\n                                                    if (component.edges().length == 0) {\n                                                        component.nodes().forEach(function(node, i) {\n                                                            toBeTiledNodes.merge(component.nodes()[i]);\n                                                            if (!node.isParent()) {\n                                                                tempSpectralResult.nodeIndexes.set(component.nodes()[i].id(), count++);\n                                                                tempSpectralResult.xCoords.push(component.nodes()[0].position().x);\n                                                                tempSpectralResult.yCoords.push(component.nodes()[0].position().y);\n                                                            }\n                                                        });\n                                                        indexesToBeDeleted.push(index);\n                                                    }\n                                                });\n                                                if (toBeTiledNodes.length > 1) {\n                                                    var _boundingBox = toBeTiledNodes.boundingBox();\n                                                    componentCenters.push({\n                                                        x: _boundingBox.x1 + _boundingBox.w / 2,\n                                                        y: _boundingBox.y1 + _boundingBox.h / 2\n                                                    });\n                                                    components.push(toBeTiledNodes);\n                                                    spectralResult.push(tempSpectralResult);\n                                                    for(var i = indexesToBeDeleted.length - 1; i >= 0; i--){\n                                                        components.splice(indexesToBeDeleted[i], 1);\n                                                        spectralResult.splice(indexesToBeDeleted[i], 1);\n                                                        componentCenters.splice(indexesToBeDeleted[i], 1);\n                                                    }\n                                                    ;\n                                                }\n                                            }\n                                            components.forEach(function(component, index) {\n                                                // send each component to cose layout\n                                                options.eles = component;\n                                                coseResult.push(coseLayout(options, spectralResult[index]));\n                                                aux.relocateComponent(componentCenters[index], coseResult[index], options); // relocate center to original position\n                                            });\n                                        } else {\n                                            components.forEach(function(component, index) {\n                                                aux.relocateComponent(componentCenters[index], spectralResult[index], options); // relocate center to original position\n                                            });\n                                        }\n                                        // packing\n                                        var componentsEvaluated = new Set();\n                                        if (components.length > 1) {\n                                            var subgraphs = [];\n                                            var hiddenEles = eles.filter(function(ele) {\n                                                return ele.css(\"display\") == \"none\";\n                                            });\n                                            components.forEach(function(component, index) {\n                                                var nodeIndexes = void 0;\n                                                if (options.quality == \"draft\") {\n                                                    nodeIndexes = spectralResult[index].nodeIndexes;\n                                                }\n                                                if (component.nodes().not(hiddenEles).length > 0) {\n                                                    var subgraph = {};\n                                                    subgraph.edges = [];\n                                                    subgraph.nodes = [];\n                                                    var nodeIndex = void 0;\n                                                    component.nodes().not(hiddenEles).forEach(function(node) {\n                                                        if (options.quality == \"draft\") {\n                                                            if (!node.isParent()) {\n                                                                nodeIndex = nodeIndexes.get(node.id());\n                                                                subgraph.nodes.push({\n                                                                    x: spectralResult[index].xCoords[nodeIndex] - node.boundingbox().w / 2,\n                                                                    y: spectralResult[index].yCoords[nodeIndex] - node.boundingbox().h / 2,\n                                                                    width: node.boundingbox().w,\n                                                                    height: node.boundingbox().h\n                                                                });\n                                                            } else {\n                                                                var parentInfo = aux.calcBoundingBox(node, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes);\n                                                                subgraph.nodes.push({\n                                                                    x: parentInfo.topLeftX,\n                                                                    y: parentInfo.topLeftY,\n                                                                    width: parentInfo.width,\n                                                                    height: parentInfo.height\n                                                                });\n                                                            }\n                                                        } else {\n                                                            if (coseResult[index][node.id()]) {\n                                                                subgraph.nodes.push({\n                                                                    x: coseResult[index][node.id()].getLeft(),\n                                                                    y: coseResult[index][node.id()].getTop(),\n                                                                    width: coseResult[index][node.id()].getWidth(),\n                                                                    height: coseResult[index][node.id()].getHeight()\n                                                                });\n                                                            }\n                                                        }\n                                                    });\n                                                    component.edges().forEach(function(edge) {\n                                                        var source = edge.source();\n                                                        var target = edge.target();\n                                                        if (source.css(\"display\") != \"none\" && target.css(\"display\") != \"none\") {\n                                                            if (options.quality == \"draft\") {\n                                                                var sourceNodeIndex = nodeIndexes.get(source.id());\n                                                                var targetNodeIndex = nodeIndexes.get(target.id());\n                                                                var sourceCenter = [];\n                                                                var targetCenter = [];\n                                                                if (source.isParent()) {\n                                                                    var parentInfo = aux.calcBoundingBox(source, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes);\n                                                                    sourceCenter.push(parentInfo.topLeftX + parentInfo.width / 2);\n                                                                    sourceCenter.push(parentInfo.topLeftY + parentInfo.height / 2);\n                                                                } else {\n                                                                    sourceCenter.push(spectralResult[index].xCoords[sourceNodeIndex]);\n                                                                    sourceCenter.push(spectralResult[index].yCoords[sourceNodeIndex]);\n                                                                }\n                                                                if (target.isParent()) {\n                                                                    var _parentInfo = aux.calcBoundingBox(target, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes);\n                                                                    targetCenter.push(_parentInfo.topLeftX + _parentInfo.width / 2);\n                                                                    targetCenter.push(_parentInfo.topLeftY + _parentInfo.height / 2);\n                                                                } else {\n                                                                    targetCenter.push(spectralResult[index].xCoords[targetNodeIndex]);\n                                                                    targetCenter.push(spectralResult[index].yCoords[targetNodeIndex]);\n                                                                }\n                                                                subgraph.edges.push({\n                                                                    startX: sourceCenter[0],\n                                                                    startY: sourceCenter[1],\n                                                                    endX: targetCenter[0],\n                                                                    endY: targetCenter[1]\n                                                                });\n                                                            } else {\n                                                                if (coseResult[index][source.id()] && coseResult[index][target.id()]) {\n                                                                    subgraph.edges.push({\n                                                                        startX: coseResult[index][source.id()].getCenterX(),\n                                                                        startY: coseResult[index][source.id()].getCenterY(),\n                                                                        endX: coseResult[index][target.id()].getCenterX(),\n                                                                        endY: coseResult[index][target.id()].getCenterY()\n                                                                    });\n                                                                }\n                                                            }\n                                                        }\n                                                    });\n                                                    if (subgraph.nodes.length > 0) {\n                                                        subgraphs.push(subgraph);\n                                                        componentsEvaluated.add(index);\n                                                    }\n                                                }\n                                            });\n                                            var shiftResult = layUtil.packComponents(subgraphs, options.randomize).shifts;\n                                            if (options.quality == \"draft\") {\n                                                spectralResult.forEach(function(result, index) {\n                                                    var newXCoords = result.xCoords.map(function(x) {\n                                                        return x + shiftResult[index].dx;\n                                                    });\n                                                    var newYCoords = result.yCoords.map(function(y) {\n                                                        return y + shiftResult[index].dy;\n                                                    });\n                                                    result.xCoords = newXCoords;\n                                                    result.yCoords = newYCoords;\n                                                });\n                                            } else {\n                                                var _count = 0;\n                                                componentsEvaluated.forEach(function(index) {\n                                                    Object.keys(coseResult[index]).forEach(function(item) {\n                                                        var nodeRectangle = coseResult[index][item];\n                                                        nodeRectangle.setCenter(nodeRectangle.getCenterX() + shiftResult[_count].dx, nodeRectangle.getCenterY() + shiftResult[_count].dy);\n                                                    });\n                                                    _count++;\n                                                });\n                                            }\n                                        }\n                                    }\n                                }\n                                // get each element's calculated position\n                                var getPositions = function getPositions(ele, i) {\n                                    if (options.quality == \"default\" || options.quality == \"proof\") {\n                                        if (typeof ele === \"number\") {\n                                            ele = i;\n                                        }\n                                        var pos = void 0;\n                                        var node = void 0;\n                                        var theId = ele.data(\"id\");\n                                        coseResult.forEach(function(result) {\n                                            if (theId in result) {\n                                                pos = {\n                                                    x: result[theId].getRect().getCenterX(),\n                                                    y: result[theId].getRect().getCenterY()\n                                                };\n                                                node = result[theId];\n                                            }\n                                        });\n                                        if (options.nodeDimensionsIncludeLabels) {\n                                            if (node.labelWidth) {\n                                                if (node.labelPosHorizontal == \"left\") {\n                                                    pos.x += node.labelWidth / 2;\n                                                } else if (node.labelPosHorizontal == \"right\") {\n                                                    pos.x -= node.labelWidth / 2;\n                                                }\n                                            }\n                                            if (node.labelHeight) {\n                                                if (node.labelPosVertical == \"top\") {\n                                                    pos.y += node.labelHeight / 2;\n                                                } else if (node.labelPosVertical == \"bottom\") {\n                                                    pos.y -= node.labelHeight / 2;\n                                                }\n                                            }\n                                        }\n                                        if (pos == undefined) pos = {\n                                            x: ele.position(\"x\"),\n                                            y: ele.position(\"y\")\n                                        };\n                                        return {\n                                            x: pos.x,\n                                            y: pos.y\n                                        };\n                                    } else {\n                                        var _pos = void 0;\n                                        spectralResult.forEach(function(result) {\n                                            var index = result.nodeIndexes.get(ele.id());\n                                            if (index != undefined) {\n                                                _pos = {\n                                                    x: result.xCoords[index],\n                                                    y: result.yCoords[index]\n                                                };\n                                            }\n                                        });\n                                        if (_pos == undefined) _pos = {\n                                            x: ele.position(\"x\"),\n                                            y: ele.position(\"y\")\n                                        };\n                                        return {\n                                            x: _pos.x,\n                                            y: _pos.y\n                                        };\n                                    }\n                                };\n                                // quality = \"draft\" and randomize = false are contradictive so in that case positions don't change\n                                if (options.quality == \"default\" || options.quality == \"proof\" || options.randomize) {\n                                    // transfer calculated positions to nodes (positions of only simple nodes are evaluated, compounds are positioned automatically)\n                                    var parentsWithoutChildren = aux.calcParentsWithoutChildren(cy, eles);\n                                    var _hiddenEles = eles.filter(function(ele) {\n                                        return ele.css(\"display\") == \"none\";\n                                    });\n                                    options.eles = eles.not(_hiddenEles);\n                                    eles.nodes().not(\":parent\").not(_hiddenEles).layoutPositions(layout, options, getPositions);\n                                    if (parentsWithoutChildren.length > 0) {\n                                        parentsWithoutChildren.forEach(function(ele) {\n                                            ele.position(getPositions(ele));\n                                        });\n                                    }\n                                } else {\n                                    console.log(\"If randomize option is set to false, then quality option must be 'default' or 'proof'.\");\n                                }\n                            }\n                        }\n                    ]);\n                    return Layout;\n                }();\n                module1.exports = Layout;\n            /***/ },\n            /***/ 657: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_67167__)=>{\n                /**\n  The implementation of the spectral layout that is the first part of the fcose layout algorithm\n*/ var aux = __nested_webpack_require_67167__(548);\n                var Matrix = __nested_webpack_require_67167__(140).layoutBase.Matrix;\n                var SVD = __nested_webpack_require_67167__(140).layoutBase.SVD;\n                // main function that spectral layout is processed\n                var spectralLayout = function spectralLayout(options) {\n                    var cy = options.cy;\n                    var eles = options.eles;\n                    var nodes = eles.nodes();\n                    var parentNodes = eles.nodes(\":parent\");\n                    var dummyNodes = new Map(); // map to keep dummy nodes and their neighbors\n                    var nodeIndexes = new Map(); // map to keep indexes to nodes\n                    var parentChildMap = new Map(); // mapping btw. compound and its representative node \n                    var allNodesNeighborhood = []; // array to keep neighborhood of all nodes\n                    var xCoords = [];\n                    var yCoords = [];\n                    var samplesColumn = []; // sampled vertices\n                    var minDistancesColumn = [];\n                    var C = []; // column sampling matrix\n                    var PHI = []; // intersection of column and row sampling matrices \n                    var INV = []; // inverse of PHI \n                    var firstSample = void 0; // the first sampled node\n                    var nodeSize = void 0;\n                    var infinity = 100000000;\n                    var small = 0.000000001;\n                    var piTol = options.piTol;\n                    var samplingType = options.samplingType; // false for random, true for greedy\n                    var nodeSeparation = options.nodeSeparation;\n                    var sampleSize = void 0;\n                    /**** Spectral-preprocessing functions ****/ /**** Spectral layout functions ****/ // determine which columns to be sampled\n                    var randomSampleCR = function randomSampleCR() {\n                        var sample = 0;\n                        var count = 0;\n                        var flag = false;\n                        while(count < sampleSize){\n                            sample = Math.floor(Math.random() * nodeSize);\n                            flag = false;\n                            for(var i = 0; i < count; i++){\n                                if (samplesColumn[i] == sample) {\n                                    flag = true;\n                                    break;\n                                }\n                            }\n                            if (!flag) {\n                                samplesColumn[count] = sample;\n                                count++;\n                            } else {\n                                continue;\n                            }\n                        }\n                    };\n                    // takes the index of the node(pivot) to initiate BFS as a parameter\n                    var BFS = function BFS(pivot, index, samplingMethod) {\n                        var path = []; // the front of the path\n                        var front = 0; // the back of the path\n                        var back = 0;\n                        var current = 0;\n                        var temp = void 0;\n                        var distance = [];\n                        var max_dist = 0; // the furthest node to be returned\n                        var max_ind = 1;\n                        for(var i = 0; i < nodeSize; i++){\n                            distance[i] = infinity;\n                        }\n                        path[back] = pivot;\n                        distance[pivot] = 0;\n                        while(back >= front){\n                            current = path[front++];\n                            var neighbors = allNodesNeighborhood[current];\n                            for(var _i = 0; _i < neighbors.length; _i++){\n                                temp = nodeIndexes.get(neighbors[_i]);\n                                if (distance[temp] == infinity) {\n                                    distance[temp] = distance[current] + 1;\n                                    path[++back] = temp;\n                                }\n                            }\n                            C[current][index] = distance[current] * nodeSeparation;\n                        }\n                        if (samplingMethod) {\n                            for(var _i2 = 0; _i2 < nodeSize; _i2++){\n                                if (C[_i2][index] < minDistancesColumn[_i2]) minDistancesColumn[_i2] = C[_i2][index];\n                            }\n                            for(var _i3 = 0; _i3 < nodeSize; _i3++){\n                                if (minDistancesColumn[_i3] > max_dist) {\n                                    max_dist = minDistancesColumn[_i3];\n                                    max_ind = _i3;\n                                }\n                            }\n                        }\n                        return max_ind;\n                    };\n                    // apply BFS to all nodes or selected samples\n                    var allBFS = function allBFS(samplingMethod) {\n                        var sample = void 0;\n                        if (!samplingMethod) {\n                            randomSampleCR();\n                            // call BFS\n                            for(var i = 0; i < sampleSize; i++){\n                                BFS(samplesColumn[i], i, samplingMethod, false);\n                            }\n                        } else {\n                            sample = Math.floor(Math.random() * nodeSize);\n                            firstSample = sample;\n                            for(var _i4 = 0; _i4 < nodeSize; _i4++){\n                                minDistancesColumn[_i4] = infinity;\n                            }\n                            for(var _i5 = 0; _i5 < sampleSize; _i5++){\n                                samplesColumn[_i5] = sample;\n                                sample = BFS(sample, _i5, samplingMethod);\n                            }\n                        }\n                        // form the squared distances for C\n                        for(var _i6 = 0; _i6 < nodeSize; _i6++){\n                            for(var j = 0; j < sampleSize; j++){\n                                C[_i6][j] *= C[_i6][j];\n                            }\n                        }\n                        // form PHI\n                        for(var _i7 = 0; _i7 < sampleSize; _i7++){\n                            PHI[_i7] = [];\n                        }\n                        for(var _i8 = 0; _i8 < sampleSize; _i8++){\n                            for(var _j = 0; _j < sampleSize; _j++){\n                                PHI[_i8][_j] = C[samplesColumn[_j]][_i8];\n                            }\n                        }\n                    };\n                    // perform the SVD algorithm and apply a regularization step\n                    var sample = function sample() {\n                        var SVDResult = SVD.svd(PHI);\n                        var a_q = SVDResult.S;\n                        var a_u = SVDResult.U;\n                        var a_v = SVDResult.V;\n                        var max_s = a_q[0] * a_q[0] * a_q[0];\n                        var a_Sig = [];\n                        //  regularization\n                        for(var i = 0; i < sampleSize; i++){\n                            a_Sig[i] = [];\n                            for(var j = 0; j < sampleSize; j++){\n                                a_Sig[i][j] = 0;\n                                if (i == j) {\n                                    a_Sig[i][j] = a_q[i] / (a_q[i] * a_q[i] + max_s / (a_q[i] * a_q[i]));\n                                }\n                            }\n                        }\n                        INV = Matrix.multMat(Matrix.multMat(a_v, a_Sig), Matrix.transpose(a_u));\n                    };\n                    // calculate final coordinates \n                    var powerIteration = function powerIteration() {\n                        // two largest eigenvalues\n                        var theta1 = void 0;\n                        var theta2 = void 0;\n                        // initial guesses for eigenvectors\n                        var Y1 = [];\n                        var Y2 = [];\n                        var V1 = [];\n                        var V2 = [];\n                        for(var i = 0; i < nodeSize; i++){\n                            Y1[i] = Math.random();\n                            Y2[i] = Math.random();\n                        }\n                        Y1 = Matrix.normalize(Y1);\n                        Y2 = Matrix.normalize(Y2);\n                        var count = 0;\n                        // to keep track of the improvement ratio in power iteration\n                        var current = small;\n                        var previous = small;\n                        var temp = void 0;\n                        while(true){\n                            count++;\n                            for(var _i9 = 0; _i9 < nodeSize; _i9++){\n                                V1[_i9] = Y1[_i9];\n                            }\n                            Y1 = Matrix.multGamma(Matrix.multL(Matrix.multGamma(V1), C, INV));\n                            theta1 = Matrix.dotProduct(V1, Y1);\n                            Y1 = Matrix.normalize(Y1);\n                            current = Matrix.dotProduct(V1, Y1);\n                            temp = Math.abs(current / previous);\n                            if (temp <= 1 + piTol && temp >= 1) {\n                                break;\n                            }\n                            previous = current;\n                        }\n                        for(var _i10 = 0; _i10 < nodeSize; _i10++){\n                            V1[_i10] = Y1[_i10];\n                        }\n                        count = 0;\n                        previous = small;\n                        while(true){\n                            count++;\n                            for(var _i11 = 0; _i11 < nodeSize; _i11++){\n                                V2[_i11] = Y2[_i11];\n                            }\n                            V2 = Matrix.minusOp(V2, Matrix.multCons(V1, Matrix.dotProduct(V1, V2)));\n                            Y2 = Matrix.multGamma(Matrix.multL(Matrix.multGamma(V2), C, INV));\n                            theta2 = Matrix.dotProduct(V2, Y2);\n                            Y2 = Matrix.normalize(Y2);\n                            current = Matrix.dotProduct(V2, Y2);\n                            temp = Math.abs(current / previous);\n                            if (temp <= 1 + piTol && temp >= 1) {\n                                break;\n                            }\n                            previous = current;\n                        }\n                        for(var _i12 = 0; _i12 < nodeSize; _i12++){\n                            V2[_i12] = Y2[_i12];\n                        }\n                        // theta1 now contains dominant eigenvalue\n                        // theta2 now contains the second-largest eigenvalue\n                        // V1 now contains theta1's eigenvector\n                        // V2 now contains theta2's eigenvector\n                        //populate the two vectors\n                        xCoords = Matrix.multCons(V1, Math.sqrt(Math.abs(theta1)));\n                        yCoords = Matrix.multCons(V2, Math.sqrt(Math.abs(theta2)));\n                    };\n                    /**** Preparation for spectral layout (Preprocessing) ****/ // connect disconnected components (first top level, then inside of each compound node)\n                    aux.connectComponents(cy, eles, aux.getTopMostNodes(nodes), dummyNodes);\n                    parentNodes.forEach(function(ele) {\n                        aux.connectComponents(cy, eles, aux.getTopMostNodes(ele.descendants().intersection(eles)), dummyNodes);\n                    });\n                    // assign indexes to nodes (first real, then dummy nodes)\n                    var index = 0;\n                    for(var i = 0; i < nodes.length; i++){\n                        if (!nodes[i].isParent()) {\n                            nodeIndexes.set(nodes[i].id(), index++);\n                        }\n                    }\n                    var _iteratorNormalCompletion = true;\n                    var _didIteratorError = false;\n                    var _iteratorError = undefined;\n                    try {\n                        for(var _iterator = dummyNodes.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var key = _step.value;\n                            nodeIndexes.set(key, index++);\n                        }\n                    // instantiate the neighborhood matrix\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    for(var _i13 = 0; _i13 < nodeIndexes.size; _i13++){\n                        allNodesNeighborhood[_i13] = [];\n                    }\n                    // form a parent-child map to keep representative node of each compound node  \n                    parentNodes.forEach(function(ele) {\n                        var children = ele.children().intersection(eles);\n                        //      let random = 0;\n                        while(children.nodes(\":childless\").length == 0){\n                            //        random = Math.floor(Math.random() * children.nodes().length); // if all children are compound then proceed randomly\n                            children = children.nodes()[0].children().intersection(eles);\n                        }\n                        //  select the representative node - we can apply different methods here\n                        //      random = Math.floor(Math.random() * children.nodes(\":childless\").length);\n                        var index = 0;\n                        var min = children.nodes(\":childless\")[0].connectedEdges().length;\n                        children.nodes(\":childless\").forEach(function(ele2, i) {\n                            if (ele2.connectedEdges().length < min) {\n                                min = ele2.connectedEdges().length;\n                                index = i;\n                            }\n                        });\n                        parentChildMap.set(ele.id(), children.nodes(\":childless\")[index].id());\n                    });\n                    // add neighborhood relations (first real, then dummy nodes)\n                    nodes.forEach(function(ele) {\n                        var eleIndex = void 0;\n                        if (ele.isParent()) eleIndex = nodeIndexes.get(parentChildMap.get(ele.id()));\n                        else eleIndex = nodeIndexes.get(ele.id());\n                        ele.neighborhood().nodes().forEach(function(node) {\n                            if (eles.intersection(ele.edgesWith(node)).length > 0) {\n                                if (node.isParent()) allNodesNeighborhood[eleIndex].push(parentChildMap.get(node.id()));\n                                else allNodesNeighborhood[eleIndex].push(node.id());\n                            }\n                        });\n                    });\n                    var _loop = function _loop(_key) {\n                        var eleIndex = nodeIndexes.get(_key);\n                        var disconnectedId = void 0;\n                        dummyNodes.get(_key).forEach(function(id) {\n                            if (cy.getElementById(id).isParent()) disconnectedId = parentChildMap.get(id);\n                            else disconnectedId = id;\n                            allNodesNeighborhood[eleIndex].push(disconnectedId);\n                            allNodesNeighborhood[nodeIndexes.get(disconnectedId)].push(_key);\n                        });\n                    };\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n                    try {\n                        for(var _iterator2 = dummyNodes.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){\n                            var _key = _step2.value;\n                            _loop(_key);\n                        }\n                    // nodeSize now only considers the size of transformed graph\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                _iterator2.return();\n                            }\n                        } finally{\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n                    nodeSize = nodeIndexes.size;\n                    var spectralResult = void 0;\n                    // If number of nodes in transformed graph is 1 or 2, either SVD or powerIteration causes problem\n                    // So skip spectral and layout the graph with cose\n                    if (nodeSize > 2) {\n                        // if # of nodes in transformed graph is smaller than sample size,\n                        // then use # of nodes as sample size\n                        sampleSize = nodeSize < options.sampleSize ? nodeSize : options.sampleSize;\n                        // instantiates the partial matrices that will be used in spectral layout\n                        for(var _i14 = 0; _i14 < nodeSize; _i14++){\n                            C[_i14] = [];\n                        }\n                        for(var _i15 = 0; _i15 < sampleSize; _i15++){\n                            INV[_i15] = [];\n                        }\n                        /**** Apply spectral layout ****/ if (options.quality == \"draft\" || options.step == \"all\") {\n                            allBFS(samplingType);\n                            sample();\n                            powerIteration();\n                            spectralResult = {\n                                nodeIndexes: nodeIndexes,\n                                xCoords: xCoords,\n                                yCoords: yCoords\n                            };\n                        } else {\n                            nodeIndexes.forEach(function(value, key) {\n                                xCoords.push(cy.getElementById(key).position(\"x\"));\n                                yCoords.push(cy.getElementById(key).position(\"y\"));\n                            });\n                            spectralResult = {\n                                nodeIndexes: nodeIndexes,\n                                xCoords: xCoords,\n                                yCoords: yCoords\n                            };\n                        }\n                        return spectralResult;\n                    } else {\n                        var iterator = nodeIndexes.keys();\n                        var firstNode = cy.getElementById(iterator.next().value);\n                        var firstNodePos = firstNode.position();\n                        var firstNodeWidth = firstNode.outerWidth();\n                        xCoords.push(firstNodePos.x);\n                        yCoords.push(firstNodePos.y);\n                        if (nodeSize == 2) {\n                            var secondNode = cy.getElementById(iterator.next().value);\n                            var secondNodeWidth = secondNode.outerWidth();\n                            xCoords.push(firstNodePos.x + firstNodeWidth / 2 + secondNodeWidth / 2 + options.idealEdgeLength);\n                            yCoords.push(firstNodePos.y);\n                        }\n                        spectralResult = {\n                            nodeIndexes: nodeIndexes,\n                            xCoords: xCoords,\n                            yCoords: yCoords\n                        };\n                        return spectralResult;\n                    }\n                };\n                module1.exports = {\n                    spectralLayout: spectralLayout\n                };\n            /***/ },\n            /***/ 579: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_88218__)=>{\n                var impl = __nested_webpack_require_88218__(212);\n                // registers the extension on a cytoscape lib ref\n                var register = function register(cytoscape1) {\n                    if (!cytoscape1) {\n                        return;\n                    } // can't register if cytoscape unspecified\n                    cytoscape1(\"layout\", \"fcose\", impl); // register with cytoscape.js\n                };\n                if (typeof cytoscape !== \"undefined\") {\n                    // expose to global cytoscape (i.e. window.cytoscape)\n                    register(cytoscape);\n                }\n                module1.exports = register;\n            /***/ },\n            /***/ 140: /***/ (module1)=>{\n                module1.exports = __WEBPACK_EXTERNAL_MODULE__140__;\n            /***/ }\n        };\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_89292__(moduleId) {\n            /******/ // Check if module is in cache\n            /******/ var cachedModule = __webpack_module_cache__[moduleId];\n            /******/ if (cachedModule !== undefined) {\n                /******/ return cachedModule.exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = __webpack_module_cache__[moduleId] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId](module1, module1.exports, __nested_webpack_require_89292__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /************************************************************************/ /******/ /******/ // startup\n        /******/ // Load entry module and return exports\n        /******/ // This entry module is referenced by other modules so it can't be inlined\n        /******/ var __nested_webpack_exports__ = __nested_webpack_require_89292__(579);\n        /******/ /******/ return __nested_webpack_exports__;\n    /******/ })();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cytoscape-fcose/cytoscape-fcose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cytoscape-fcose/node_modules/cose-base/cose-base.js":
/*!**************************************************************************!*\
  !*** ./node_modules/cytoscape-fcose/node_modules/cose-base/cose-base.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory(__webpack_require__(/*! layout-base */ \"(ssr)/./node_modules/cytoscape-fcose/node_modules/layout-base/layout-base.js\"));\n    else {}\n})(this, function(__WEBPACK_EXTERNAL_MODULE__551__) {\n    return /******/ (()=>{\n        /******/ \"use strict\";\n        /******/ var __webpack_modules__ = {\n            /***/ 45: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_657__)=>{\n                var coseBase = {};\n                coseBase.layoutBase = __nested_webpack_require_657__(551);\n                coseBase.CoSEConstants = __nested_webpack_require_657__(806);\n                coseBase.CoSEEdge = __nested_webpack_require_657__(767);\n                coseBase.CoSEGraph = __nested_webpack_require_657__(880);\n                coseBase.CoSEGraphManager = __nested_webpack_require_657__(578);\n                coseBase.CoSELayout = __nested_webpack_require_657__(765);\n                coseBase.CoSENode = __nested_webpack_require_657__(991);\n                coseBase.ConstraintHandler = __nested_webpack_require_657__(902);\n                module1.exports = coseBase;\n            /***/ },\n            /***/ 806: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_1369__)=>{\n                var FDLayoutConstants = __nested_webpack_require_1369__(551).FDLayoutConstants;\n                function CoSEConstants() {}\n                //CoSEConstants inherits static props in FDLayoutConstants\n                for(var prop in FDLayoutConstants){\n                    CoSEConstants[prop] = FDLayoutConstants[prop];\n                }\n                CoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;\n                CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n                CoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;\n                CoSEConstants.TILE = true;\n                CoSEConstants.TILING_PADDING_VERTICAL = 10;\n                CoSEConstants.TILING_PADDING_HORIZONTAL = 10;\n                CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = true;\n                CoSEConstants.ENFORCE_CONSTRAINTS = true;\n                CoSEConstants.APPLY_LAYOUT = true;\n                CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS = true;\n                CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = true; // this should be set to false if there will be a constraint\n                // This constant is for differentiating whether actual layout algorithm that uses cose-base wants to apply only incremental layout or \n                // an incremental layout on top of a randomized layout. If it is only incremental layout, then this constant should be true.\n                CoSEConstants.PURE_INCREMENTAL = CoSEConstants.DEFAULT_INCREMENTAL;\n                module1.exports = CoSEConstants;\n            /***/ },\n            /***/ 767: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_3019__)=>{\n                var FDLayoutEdge = __nested_webpack_require_3019__(551).FDLayoutEdge;\n                function CoSEEdge(source, target, vEdge) {\n                    FDLayoutEdge.call(this, source, target, vEdge);\n                }\n                CoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);\n                for(var prop in FDLayoutEdge){\n                    CoSEEdge[prop] = FDLayoutEdge[prop];\n                }\n                module1.exports = CoSEEdge;\n            /***/ },\n            /***/ 880: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_3590__)=>{\n                var LGraph = __nested_webpack_require_3590__(551).LGraph;\n                function CoSEGraph(parent, graphMgr, vGraph) {\n                    LGraph.call(this, parent, graphMgr, vGraph);\n                }\n                CoSEGraph.prototype = Object.create(LGraph.prototype);\n                for(var prop in LGraph){\n                    CoSEGraph[prop] = LGraph[prop];\n                }\n                module1.exports = CoSEGraph;\n            /***/ },\n            /***/ 578: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_4135__)=>{\n                var LGraphManager = __nested_webpack_require_4135__(551).LGraphManager;\n                function CoSEGraphManager(layout) {\n                    LGraphManager.call(this, layout);\n                }\n                CoSEGraphManager.prototype = Object.create(LGraphManager.prototype);\n                for(var prop in LGraphManager){\n                    CoSEGraphManager[prop] = LGraphManager[prop];\n                }\n                module1.exports = CoSEGraphManager;\n            /***/ },\n            /***/ 765: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_4714__)=>{\n                var FDLayout = __nested_webpack_require_4714__(551).FDLayout;\n                var CoSEGraphManager = __nested_webpack_require_4714__(578);\n                var CoSEGraph = __nested_webpack_require_4714__(880);\n                var CoSENode = __nested_webpack_require_4714__(991);\n                var CoSEEdge = __nested_webpack_require_4714__(767);\n                var CoSEConstants = __nested_webpack_require_4714__(806);\n                var ConstraintHandler = __nested_webpack_require_4714__(902);\n                var FDLayoutConstants = __nested_webpack_require_4714__(551).FDLayoutConstants;\n                var LayoutConstants = __nested_webpack_require_4714__(551).LayoutConstants;\n                var Point = __nested_webpack_require_4714__(551).Point;\n                var PointD = __nested_webpack_require_4714__(551).PointD;\n                var DimensionD = __nested_webpack_require_4714__(551).DimensionD;\n                var Layout = __nested_webpack_require_4714__(551).Layout;\n                var Integer = __nested_webpack_require_4714__(551).Integer;\n                var IGeometry = __nested_webpack_require_4714__(551).IGeometry;\n                var LGraph = __nested_webpack_require_4714__(551).LGraph;\n                var Transform = __nested_webpack_require_4714__(551).Transform;\n                var LinkedList = __nested_webpack_require_4714__(551).LinkedList;\n                function CoSELayout() {\n                    FDLayout.call(this);\n                    this.toBeTiled = {}; // Memorize if a node is to be tiled or is tiled\n                    this.constraints = {}; // keep layout constraints\n                }\n                CoSELayout.prototype = Object.create(FDLayout.prototype);\n                for(var prop in FDLayout){\n                    CoSELayout[prop] = FDLayout[prop];\n                }\n                CoSELayout.prototype.newGraphManager = function() {\n                    var gm = new CoSEGraphManager(this);\n                    this.graphManager = gm;\n                    return gm;\n                };\n                CoSELayout.prototype.newGraph = function(vGraph) {\n                    return new CoSEGraph(null, this.graphManager, vGraph);\n                };\n                CoSELayout.prototype.newNode = function(vNode) {\n                    return new CoSENode(this.graphManager, vNode);\n                };\n                CoSELayout.prototype.newEdge = function(vEdge) {\n                    return new CoSEEdge(null, null, vEdge);\n                };\n                CoSELayout.prototype.initParameters = function() {\n                    FDLayout.prototype.initParameters.call(this, arguments);\n                    if (!this.isSubLayout) {\n                        if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {\n                            this.idealEdgeLength = 10;\n                        } else {\n                            this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;\n                        }\n                        this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n                        this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n                        this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n                        this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n                        this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n                        // variables for tree reduction support\n                        this.prunedNodesAll = [];\n                        this.growTreeIterations = 0;\n                        this.afterGrowthIterations = 0;\n                        this.isTreeGrowing = false;\n                        this.isGrowthFinished = false;\n                    }\n                };\n                // This method is used to set CoSE related parameters used by spring embedder.\n                CoSELayout.prototype.initSpringEmbedder = function() {\n                    FDLayout.prototype.initSpringEmbedder.call(this);\n                    // variables for cooling\n                    this.coolingCycle = 0;\n                    this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;\n                    this.finalTemperature = 0.04;\n                    this.coolingAdjuster = 1;\n                };\n                CoSELayout.prototype.layout = function() {\n                    var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n                    if (createBendsAsNeeded) {\n                        this.createBendpoints();\n                        this.graphManager.resetAllEdges();\n                    }\n                    this.level = 0;\n                    return this.classicLayout();\n                };\n                CoSELayout.prototype.classicLayout = function() {\n                    this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();\n                    this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);\n                    this.calcNoOfChildrenForAllNodes();\n                    this.graphManager.calcLowestCommonAncestors();\n                    this.graphManager.calcInclusionTreeDepths();\n                    this.graphManager.getRoot().calcEstimatedSize();\n                    this.calcIdealEdgeLengths();\n                    if (!this.incremental) {\n                        var forest = this.getFlatForest();\n                        // The graph associated with this layout is flat and a forest\n                        if (forest.length > 0) {\n                            this.positionNodesRadially(forest);\n                        } else {\n                            // Reduce the trees when incremental mode is not enabled and graph is not a forest \n                            this.reduceTrees();\n                            // Update nodes that gravity will be applied\n                            this.graphManager.resetAllNodesToApplyGravitation();\n                            var allNodes = new Set(this.getAllNodes());\n                            var intersection = this.nodesWithGravity.filter(function(x) {\n                                return allNodes.has(x);\n                            });\n                            this.graphManager.setAllNodesToApplyGravitation(intersection);\n                            this.positionNodesRandomly();\n                        }\n                    } else {\n                        if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {\n                            // Reduce the trees in incremental mode if only this constant is set to true \n                            this.reduceTrees();\n                            // Update nodes that gravity will be applied\n                            this.graphManager.resetAllNodesToApplyGravitation();\n                            var allNodes = new Set(this.getAllNodes());\n                            var intersection = this.nodesWithGravity.filter(function(x) {\n                                return allNodes.has(x);\n                            });\n                            this.graphManager.setAllNodesToApplyGravitation(intersection);\n                        }\n                    }\n                    if (Object.keys(this.constraints).length > 0) {\n                        ConstraintHandler.handleConstraints(this);\n                        this.initConstraintVariables();\n                    }\n                    this.initSpringEmbedder();\n                    if (CoSEConstants.APPLY_LAYOUT) {\n                        this.runSpringEmbedder();\n                    }\n                    return true;\n                };\n                CoSELayout.prototype.tick = function() {\n                    this.totalIterations++;\n                    if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {\n                        if (this.prunedNodesAll.length > 0) {\n                            this.isTreeGrowing = true;\n                        } else {\n                            return true;\n                        }\n                    }\n                    if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {\n                        if (this.isConverged()) {\n                            if (this.prunedNodesAll.length > 0) {\n                                this.isTreeGrowing = true;\n                            } else {\n                                return true;\n                            }\n                        }\n                        this.coolingCycle++;\n                        if (this.layoutQuality == 0) {\n                            // quality - \"draft\"\n                            this.coolingAdjuster = this.coolingCycle;\n                        } else if (this.layoutQuality == 1) {\n                            // quality - \"default\"\n                            this.coolingAdjuster = this.coolingCycle / 3;\n                        }\n                        // cooling schedule is based on http://www.btluke.com/simanf1.html -> cooling schedule 3\n                        this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);\n                        this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));\n                    }\n                    // Operations while tree is growing again \n                    if (this.isTreeGrowing) {\n                        if (this.growTreeIterations % 10 == 0) {\n                            if (this.prunedNodesAll.length > 0) {\n                                this.graphManager.updateBounds();\n                                this.updateGrid();\n                                this.growTree(this.prunedNodesAll);\n                                // Update nodes that gravity will be applied\n                                this.graphManager.resetAllNodesToApplyGravitation();\n                                var allNodes = new Set(this.getAllNodes());\n                                var intersection = this.nodesWithGravity.filter(function(x) {\n                                    return allNodes.has(x);\n                                });\n                                this.graphManager.setAllNodesToApplyGravitation(intersection);\n                                this.graphManager.updateBounds();\n                                this.updateGrid();\n                                if (CoSEConstants.PURE_INCREMENTAL) this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL / 2;\n                                else this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n                            } else {\n                                this.isTreeGrowing = false;\n                                this.isGrowthFinished = true;\n                            }\n                        }\n                        this.growTreeIterations++;\n                    }\n                    // Operations after growth is finished\n                    if (this.isGrowthFinished) {\n                        if (this.isConverged()) {\n                            return true;\n                        }\n                        if (this.afterGrowthIterations % 10 == 0) {\n                            this.graphManager.updateBounds();\n                            this.updateGrid();\n                        }\n                        if (CoSEConstants.PURE_INCREMENTAL) this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL / 2 * ((100 - this.afterGrowthIterations) / 100);\n                        else this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);\n                        this.afterGrowthIterations++;\n                    }\n                    var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;\n                    var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;\n                    this.totalDisplacement = 0;\n                    this.graphManager.updateBounds();\n                    this.calcSpringForces();\n                    this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);\n                    this.calcGravitationalForces();\n                    this.moveNodes();\n                    this.animate();\n                    return false; // Layout is not ended yet return false\n                };\n                CoSELayout.prototype.getPositionsData = function() {\n                    var allNodes = this.graphManager.getAllNodes();\n                    var pData = {};\n                    for(var i = 0; i < allNodes.length; i++){\n                        var rect = allNodes[i].rect;\n                        var id = allNodes[i].id;\n                        pData[id] = {\n                            id: id,\n                            x: rect.getCenterX(),\n                            y: rect.getCenterY(),\n                            w: rect.width,\n                            h: rect.height\n                        };\n                    }\n                    return pData;\n                };\n                CoSELayout.prototype.runSpringEmbedder = function() {\n                    this.initialAnimationPeriod = 25;\n                    this.animationPeriod = this.initialAnimationPeriod;\n                    var layoutEnded = false;\n                    // If aminate option is 'during' signal that layout is supposed to start iterating\n                    if (FDLayoutConstants.ANIMATE === \"during\") {\n                        this.emit(\"layoutstarted\");\n                    } else {\n                        // If aminate option is 'during' tick() function will be called on index.js\n                        while(!layoutEnded){\n                            layoutEnded = this.tick();\n                        }\n                        this.graphManager.updateBounds();\n                    }\n                };\n                // overrides moveNodes method in FDLayout\n                CoSELayout.prototype.moveNodes = function() {\n                    var lNodes = this.getAllNodes();\n                    var node;\n                    // calculate displacement for each node \n                    for(var i = 0; i < lNodes.length; i++){\n                        node = lNodes[i];\n                        node.calculateDisplacement();\n                    }\n                    if (Object.keys(this.constraints).length > 0) {\n                        this.updateDisplacements();\n                    }\n                    // move each node\n                    for(var i = 0; i < lNodes.length; i++){\n                        node = lNodes[i];\n                        node.move();\n                    }\n                };\n                // constraint related methods: initConstraintVariables and updateDisplacements\n                // initialize constraint related variables\n                CoSELayout.prototype.initConstraintVariables = function() {\n                    var self = this;\n                    this.idToNodeMap = new Map();\n                    this.fixedNodeSet = new Set();\n                    var allNodes = this.graphManager.getAllNodes();\n                    // fill idToNodeMap\n                    for(var i = 0; i < allNodes.length; i++){\n                        var node = allNodes[i];\n                        this.idToNodeMap.set(node.id, node);\n                    }\n                    // calculate fixed node weight for given compound node\n                    var calculateCompoundWeight = function calculateCompoundWeight(compoundNode) {\n                        var nodes = compoundNode.getChild().getNodes();\n                        var node;\n                        var fixedNodeWeight = 0;\n                        for(var i = 0; i < nodes.length; i++){\n                            node = nodes[i];\n                            if (node.getChild() == null) {\n                                if (self.fixedNodeSet.has(node.id)) {\n                                    fixedNodeWeight += 100;\n                                }\n                            } else {\n                                fixedNodeWeight += calculateCompoundWeight(node);\n                            }\n                        }\n                        return fixedNodeWeight;\n                    };\n                    if (this.constraints.fixedNodeConstraint) {\n                        // fill fixedNodeSet\n                        this.constraints.fixedNodeConstraint.forEach(function(nodeData) {\n                            self.fixedNodeSet.add(nodeData.nodeId);\n                        });\n                        // assign fixed node weights to compounds if they contain fixed nodes\n                        var allNodes = this.graphManager.getAllNodes();\n                        var node;\n                        for(var i = 0; i < allNodes.length; i++){\n                            node = allNodes[i];\n                            if (node.getChild() != null) {\n                                var fixedNodeWeight = calculateCompoundWeight(node);\n                                if (fixedNodeWeight > 0) {\n                                    node.fixedNodeWeight = fixedNodeWeight;\n                                }\n                            }\n                        }\n                    }\n                    if (this.constraints.relativePlacementConstraint) {\n                        var nodeToDummyForVerticalAlignment = new Map();\n                        var nodeToDummyForHorizontalAlignment = new Map();\n                        this.dummyToNodeForVerticalAlignment = new Map();\n                        this.dummyToNodeForHorizontalAlignment = new Map();\n                        this.fixedNodesOnHorizontal = new Set();\n                        this.fixedNodesOnVertical = new Set();\n                        // fill maps and sets\n                        this.fixedNodeSet.forEach(function(nodeId) {\n                            self.fixedNodesOnHorizontal.add(nodeId);\n                            self.fixedNodesOnVertical.add(nodeId);\n                        });\n                        if (this.constraints.alignmentConstraint) {\n                            if (this.constraints.alignmentConstraint.vertical) {\n                                var verticalAlignment = this.constraints.alignmentConstraint.vertical;\n                                for(var i = 0; i < verticalAlignment.length; i++){\n                                    this.dummyToNodeForVerticalAlignment.set(\"dummy\" + i, []);\n                                    verticalAlignment[i].forEach(function(nodeId) {\n                                        nodeToDummyForVerticalAlignment.set(nodeId, \"dummy\" + i);\n                                        self.dummyToNodeForVerticalAlignment.get(\"dummy\" + i).push(nodeId);\n                                        if (self.fixedNodeSet.has(nodeId)) {\n                                            self.fixedNodesOnHorizontal.add(\"dummy\" + i);\n                                        }\n                                    });\n                                }\n                            }\n                            if (this.constraints.alignmentConstraint.horizontal) {\n                                var horizontalAlignment = this.constraints.alignmentConstraint.horizontal;\n                                for(var i = 0; i < horizontalAlignment.length; i++){\n                                    this.dummyToNodeForHorizontalAlignment.set(\"dummy\" + i, []);\n                                    horizontalAlignment[i].forEach(function(nodeId) {\n                                        nodeToDummyForHorizontalAlignment.set(nodeId, \"dummy\" + i);\n                                        self.dummyToNodeForHorizontalAlignment.get(\"dummy\" + i).push(nodeId);\n                                        if (self.fixedNodeSet.has(nodeId)) {\n                                            self.fixedNodesOnVertical.add(\"dummy\" + i);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                        if (CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS) {\n                            this.shuffle = function(array) {\n                                var j, x, i;\n                                for(i = array.length - 1; i >= 2 * array.length / 3; i--){\n                                    j = Math.floor(Math.random() * (i + 1));\n                                    x = array[i];\n                                    array[i] = array[j];\n                                    array[j] = x;\n                                }\n                                return array;\n                            };\n                            this.nodesInRelativeHorizontal = [];\n                            this.nodesInRelativeVertical = [];\n                            this.nodeToRelativeConstraintMapHorizontal = new Map();\n                            this.nodeToRelativeConstraintMapVertical = new Map();\n                            this.nodeToTempPositionMapHorizontal = new Map();\n                            this.nodeToTempPositionMapVertical = new Map();\n                            // fill arrays and maps\n                            this.constraints.relativePlacementConstraint.forEach(function(constraint) {\n                                if (constraint.left) {\n                                    var nodeIdLeft = nodeToDummyForVerticalAlignment.has(constraint.left) ? nodeToDummyForVerticalAlignment.get(constraint.left) : constraint.left;\n                                    var nodeIdRight = nodeToDummyForVerticalAlignment.has(constraint.right) ? nodeToDummyForVerticalAlignment.get(constraint.right) : constraint.right;\n                                    if (!self.nodesInRelativeHorizontal.includes(nodeIdLeft)) {\n                                        self.nodesInRelativeHorizontal.push(nodeIdLeft);\n                                        self.nodeToRelativeConstraintMapHorizontal.set(nodeIdLeft, []);\n                                        if (self.dummyToNodeForVerticalAlignment.has(nodeIdLeft)) {\n                                            self.nodeToTempPositionMapHorizontal.set(nodeIdLeft, self.idToNodeMap.get(self.dummyToNodeForVerticalAlignment.get(nodeIdLeft)[0]).getCenterX());\n                                        } else {\n                                            self.nodeToTempPositionMapHorizontal.set(nodeIdLeft, self.idToNodeMap.get(nodeIdLeft).getCenterX());\n                                        }\n                                    }\n                                    if (!self.nodesInRelativeHorizontal.includes(nodeIdRight)) {\n                                        self.nodesInRelativeHorizontal.push(nodeIdRight);\n                                        self.nodeToRelativeConstraintMapHorizontal.set(nodeIdRight, []);\n                                        if (self.dummyToNodeForVerticalAlignment.has(nodeIdRight)) {\n                                            self.nodeToTempPositionMapHorizontal.set(nodeIdRight, self.idToNodeMap.get(self.dummyToNodeForVerticalAlignment.get(nodeIdRight)[0]).getCenterX());\n                                        } else {\n                                            self.nodeToTempPositionMapHorizontal.set(nodeIdRight, self.idToNodeMap.get(nodeIdRight).getCenterX());\n                                        }\n                                    }\n                                    self.nodeToRelativeConstraintMapHorizontal.get(nodeIdLeft).push({\n                                        right: nodeIdRight,\n                                        gap: constraint.gap\n                                    });\n                                    self.nodeToRelativeConstraintMapHorizontal.get(nodeIdRight).push({\n                                        left: nodeIdLeft,\n                                        gap: constraint.gap\n                                    });\n                                } else {\n                                    var nodeIdTop = nodeToDummyForHorizontalAlignment.has(constraint.top) ? nodeToDummyForHorizontalAlignment.get(constraint.top) : constraint.top;\n                                    var nodeIdBottom = nodeToDummyForHorizontalAlignment.has(constraint.bottom) ? nodeToDummyForHorizontalAlignment.get(constraint.bottom) : constraint.bottom;\n                                    if (!self.nodesInRelativeVertical.includes(nodeIdTop)) {\n                                        self.nodesInRelativeVertical.push(nodeIdTop);\n                                        self.nodeToRelativeConstraintMapVertical.set(nodeIdTop, []);\n                                        if (self.dummyToNodeForHorizontalAlignment.has(nodeIdTop)) {\n                                            self.nodeToTempPositionMapVertical.set(nodeIdTop, self.idToNodeMap.get(self.dummyToNodeForHorizontalAlignment.get(nodeIdTop)[0]).getCenterY());\n                                        } else {\n                                            self.nodeToTempPositionMapVertical.set(nodeIdTop, self.idToNodeMap.get(nodeIdTop).getCenterY());\n                                        }\n                                    }\n                                    if (!self.nodesInRelativeVertical.includes(nodeIdBottom)) {\n                                        self.nodesInRelativeVertical.push(nodeIdBottom);\n                                        self.nodeToRelativeConstraintMapVertical.set(nodeIdBottom, []);\n                                        if (self.dummyToNodeForHorizontalAlignment.has(nodeIdBottom)) {\n                                            self.nodeToTempPositionMapVertical.set(nodeIdBottom, self.idToNodeMap.get(self.dummyToNodeForHorizontalAlignment.get(nodeIdBottom)[0]).getCenterY());\n                                        } else {\n                                            self.nodeToTempPositionMapVertical.set(nodeIdBottom, self.idToNodeMap.get(nodeIdBottom).getCenterY());\n                                        }\n                                    }\n                                    self.nodeToRelativeConstraintMapVertical.get(nodeIdTop).push({\n                                        bottom: nodeIdBottom,\n                                        gap: constraint.gap\n                                    });\n                                    self.nodeToRelativeConstraintMapVertical.get(nodeIdBottom).push({\n                                        top: nodeIdTop,\n                                        gap: constraint.gap\n                                    });\n                                }\n                            });\n                        } else {\n                            var subGraphOnHorizontal = new Map(); // subgraph from vertical RP constraints\n                            var subGraphOnVertical = new Map(); // subgraph from vertical RP constraints\n                            // construct subgraphs from relative placement constraints \n                            this.constraints.relativePlacementConstraint.forEach(function(constraint) {\n                                if (constraint.left) {\n                                    var left = nodeToDummyForVerticalAlignment.has(constraint.left) ? nodeToDummyForVerticalAlignment.get(constraint.left) : constraint.left;\n                                    var right = nodeToDummyForVerticalAlignment.has(constraint.right) ? nodeToDummyForVerticalAlignment.get(constraint.right) : constraint.right;\n                                    if (subGraphOnHorizontal.has(left)) {\n                                        subGraphOnHorizontal.get(left).push(right);\n                                    } else {\n                                        subGraphOnHorizontal.set(left, [\n                                            right\n                                        ]);\n                                    }\n                                    if (subGraphOnHorizontal.has(right)) {\n                                        subGraphOnHorizontal.get(right).push(left);\n                                    } else {\n                                        subGraphOnHorizontal.set(right, [\n                                            left\n                                        ]);\n                                    }\n                                } else {\n                                    var top = nodeToDummyForHorizontalAlignment.has(constraint.top) ? nodeToDummyForHorizontalAlignment.get(constraint.top) : constraint.top;\n                                    var bottom = nodeToDummyForHorizontalAlignment.has(constraint.bottom) ? nodeToDummyForHorizontalAlignment.get(constraint.bottom) : constraint.bottom;\n                                    if (subGraphOnVertical.has(top)) {\n                                        subGraphOnVertical.get(top).push(bottom);\n                                    } else {\n                                        subGraphOnVertical.set(top, [\n                                            bottom\n                                        ]);\n                                    }\n                                    if (subGraphOnVertical.has(bottom)) {\n                                        subGraphOnVertical.get(bottom).push(top);\n                                    } else {\n                                        subGraphOnVertical.set(bottom, [\n                                            top\n                                        ]);\n                                    }\n                                }\n                            });\n                            // function to construct components from a given graph \n                            // also returns an array that keeps whether each component contains fixed node\n                            var constructComponents = function constructComponents(graph, fixedNodes) {\n                                var components = [];\n                                var isFixed = [];\n                                var queue = new LinkedList();\n                                var visited = new Set();\n                                var count = 0;\n                                graph.forEach(function(value, key) {\n                                    if (!visited.has(key)) {\n                                        components[count] = [];\n                                        isFixed[count] = false;\n                                        var currentNode = key;\n                                        queue.push(currentNode);\n                                        visited.add(currentNode);\n                                        components[count].push(currentNode);\n                                        while(queue.length != 0){\n                                            currentNode = queue.shift();\n                                            if (fixedNodes.has(currentNode)) {\n                                                isFixed[count] = true;\n                                            }\n                                            var neighbors = graph.get(currentNode);\n                                            neighbors.forEach(function(neighbor) {\n                                                if (!visited.has(neighbor)) {\n                                                    queue.push(neighbor);\n                                                    visited.add(neighbor);\n                                                    components[count].push(neighbor);\n                                                }\n                                            });\n                                        }\n                                        count++;\n                                    }\n                                });\n                                return {\n                                    components: components,\n                                    isFixed: isFixed\n                                };\n                            };\n                            var resultOnHorizontal = constructComponents(subGraphOnHorizontal, self.fixedNodesOnHorizontal);\n                            this.componentsOnHorizontal = resultOnHorizontal.components;\n                            this.fixedComponentsOnHorizontal = resultOnHorizontal.isFixed;\n                            var resultOnVertical = constructComponents(subGraphOnVertical, self.fixedNodesOnVertical);\n                            this.componentsOnVertical = resultOnVertical.components;\n                            this.fixedComponentsOnVertical = resultOnVertical.isFixed;\n                        }\n                    }\n                };\n                // updates node displacements based on constraints\n                CoSELayout.prototype.updateDisplacements = function() {\n                    var self = this;\n                    if (this.constraints.fixedNodeConstraint) {\n                        this.constraints.fixedNodeConstraint.forEach(function(nodeData) {\n                            var fixedNode = self.idToNodeMap.get(nodeData.nodeId);\n                            fixedNode.displacementX = 0;\n                            fixedNode.displacementY = 0;\n                        });\n                    }\n                    if (this.constraints.alignmentConstraint) {\n                        if (this.constraints.alignmentConstraint.vertical) {\n                            var allVerticalAlignments = this.constraints.alignmentConstraint.vertical;\n                            for(var i = 0; i < allVerticalAlignments.length; i++){\n                                var totalDisplacementX = 0;\n                                for(var j = 0; j < allVerticalAlignments[i].length; j++){\n                                    if (this.fixedNodeSet.has(allVerticalAlignments[i][j])) {\n                                        totalDisplacementX = 0;\n                                        break;\n                                    }\n                                    totalDisplacementX += this.idToNodeMap.get(allVerticalAlignments[i][j]).displacementX;\n                                }\n                                var averageDisplacementX = totalDisplacementX / allVerticalAlignments[i].length;\n                                for(var j = 0; j < allVerticalAlignments[i].length; j++){\n                                    this.idToNodeMap.get(allVerticalAlignments[i][j]).displacementX = averageDisplacementX;\n                                }\n                            }\n                        }\n                        if (this.constraints.alignmentConstraint.horizontal) {\n                            var allHorizontalAlignments = this.constraints.alignmentConstraint.horizontal;\n                            for(var i = 0; i < allHorizontalAlignments.length; i++){\n                                var totalDisplacementY = 0;\n                                for(var j = 0; j < allHorizontalAlignments[i].length; j++){\n                                    if (this.fixedNodeSet.has(allHorizontalAlignments[i][j])) {\n                                        totalDisplacementY = 0;\n                                        break;\n                                    }\n                                    totalDisplacementY += this.idToNodeMap.get(allHorizontalAlignments[i][j]).displacementY;\n                                }\n                                var averageDisplacementY = totalDisplacementY / allHorizontalAlignments[i].length;\n                                for(var j = 0; j < allHorizontalAlignments[i].length; j++){\n                                    this.idToNodeMap.get(allHorizontalAlignments[i][j]).displacementY = averageDisplacementY;\n                                }\n                            }\n                        }\n                    }\n                    if (this.constraints.relativePlacementConstraint) {\n                        if (CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS) {\n                            // shuffle array to randomize node processing order\n                            if (this.totalIterations % 10 == 0) {\n                                this.shuffle(this.nodesInRelativeHorizontal);\n                                this.shuffle(this.nodesInRelativeVertical);\n                            }\n                            this.nodesInRelativeHorizontal.forEach(function(nodeId) {\n                                if (!self.fixedNodesOnHorizontal.has(nodeId)) {\n                                    var displacement = 0;\n                                    if (self.dummyToNodeForVerticalAlignment.has(nodeId)) {\n                                        displacement = self.idToNodeMap.get(self.dummyToNodeForVerticalAlignment.get(nodeId)[0]).displacementX;\n                                    } else {\n                                        displacement = self.idToNodeMap.get(nodeId).displacementX;\n                                    }\n                                    self.nodeToRelativeConstraintMapHorizontal.get(nodeId).forEach(function(constraint) {\n                                        if (constraint.right) {\n                                            var diff = self.nodeToTempPositionMapHorizontal.get(constraint.right) - self.nodeToTempPositionMapHorizontal.get(nodeId) - displacement;\n                                            if (diff < constraint.gap) {\n                                                displacement -= constraint.gap - diff;\n                                            }\n                                        } else {\n                                            var diff = self.nodeToTempPositionMapHorizontal.get(nodeId) - self.nodeToTempPositionMapHorizontal.get(constraint.left) + displacement;\n                                            if (diff < constraint.gap) {\n                                                displacement += constraint.gap - diff;\n                                            }\n                                        }\n                                    });\n                                    self.nodeToTempPositionMapHorizontal.set(nodeId, self.nodeToTempPositionMapHorizontal.get(nodeId) + displacement);\n                                    if (self.dummyToNodeForVerticalAlignment.has(nodeId)) {\n                                        self.dummyToNodeForVerticalAlignment.get(nodeId).forEach(function(nodeId) {\n                                            self.idToNodeMap.get(nodeId).displacementX = displacement;\n                                        });\n                                    } else {\n                                        self.idToNodeMap.get(nodeId).displacementX = displacement;\n                                    }\n                                }\n                            });\n                            this.nodesInRelativeVertical.forEach(function(nodeId) {\n                                if (!self.fixedNodesOnHorizontal.has(nodeId)) {\n                                    var displacement = 0;\n                                    if (self.dummyToNodeForHorizontalAlignment.has(nodeId)) {\n                                        displacement = self.idToNodeMap.get(self.dummyToNodeForHorizontalAlignment.get(nodeId)[0]).displacementY;\n                                    } else {\n                                        displacement = self.idToNodeMap.get(nodeId).displacementY;\n                                    }\n                                    self.nodeToRelativeConstraintMapVertical.get(nodeId).forEach(function(constraint) {\n                                        if (constraint.bottom) {\n                                            var diff = self.nodeToTempPositionMapVertical.get(constraint.bottom) - self.nodeToTempPositionMapVertical.get(nodeId) - displacement;\n                                            if (diff < constraint.gap) {\n                                                displacement -= constraint.gap - diff;\n                                            }\n                                        } else {\n                                            var diff = self.nodeToTempPositionMapVertical.get(nodeId) - self.nodeToTempPositionMapVertical.get(constraint.top) + displacement;\n                                            if (diff < constraint.gap) {\n                                                displacement += constraint.gap - diff;\n                                            }\n                                        }\n                                    });\n                                    self.nodeToTempPositionMapVertical.set(nodeId, self.nodeToTempPositionMapVertical.get(nodeId) + displacement);\n                                    if (self.dummyToNodeForHorizontalAlignment.has(nodeId)) {\n                                        self.dummyToNodeForHorizontalAlignment.get(nodeId).forEach(function(nodeId) {\n                                            self.idToNodeMap.get(nodeId).displacementY = displacement;\n                                        });\n                                    } else {\n                                        self.idToNodeMap.get(nodeId).displacementY = displacement;\n                                    }\n                                }\n                            });\n                        } else {\n                            for(var i = 0; i < this.componentsOnHorizontal.length; i++){\n                                var component = this.componentsOnHorizontal[i];\n                                if (this.fixedComponentsOnHorizontal[i]) {\n                                    for(var j = 0; j < component.length; j++){\n                                        if (this.dummyToNodeForVerticalAlignment.has(component[j])) {\n                                            this.dummyToNodeForVerticalAlignment.get(component[j]).forEach(function(nodeId) {\n                                                self.idToNodeMap.get(nodeId).displacementX = 0;\n                                            });\n                                        } else {\n                                            this.idToNodeMap.get(component[j]).displacementX = 0;\n                                        }\n                                    }\n                                } else {\n                                    var sum = 0;\n                                    var count = 0;\n                                    for(var j = 0; j < component.length; j++){\n                                        if (this.dummyToNodeForVerticalAlignment.has(component[j])) {\n                                            var actualNodes = this.dummyToNodeForVerticalAlignment.get(component[j]);\n                                            sum += actualNodes.length * this.idToNodeMap.get(actualNodes[0]).displacementX;\n                                            count += actualNodes.length;\n                                        } else {\n                                            sum += this.idToNodeMap.get(component[j]).displacementX;\n                                            count++;\n                                        }\n                                    }\n                                    var averageDisplacement = sum / count;\n                                    for(var j = 0; j < component.length; j++){\n                                        if (this.dummyToNodeForVerticalAlignment.has(component[j])) {\n                                            this.dummyToNodeForVerticalAlignment.get(component[j]).forEach(function(nodeId) {\n                                                self.idToNodeMap.get(nodeId).displacementX = averageDisplacement;\n                                            });\n                                        } else {\n                                            this.idToNodeMap.get(component[j]).displacementX = averageDisplacement;\n                                        }\n                                    }\n                                }\n                            }\n                            for(var i = 0; i < this.componentsOnVertical.length; i++){\n                                var component = this.componentsOnVertical[i];\n                                if (this.fixedComponentsOnVertical[i]) {\n                                    for(var j = 0; j < component.length; j++){\n                                        if (this.dummyToNodeForHorizontalAlignment.has(component[j])) {\n                                            this.dummyToNodeForHorizontalAlignment.get(component[j]).forEach(function(nodeId) {\n                                                self.idToNodeMap.get(nodeId).displacementY = 0;\n                                            });\n                                        } else {\n                                            this.idToNodeMap.get(component[j]).displacementY = 0;\n                                        }\n                                    }\n                                } else {\n                                    var sum = 0;\n                                    var count = 0;\n                                    for(var j = 0; j < component.length; j++){\n                                        if (this.dummyToNodeForHorizontalAlignment.has(component[j])) {\n                                            var actualNodes = this.dummyToNodeForHorizontalAlignment.get(component[j]);\n                                            sum += actualNodes.length * this.idToNodeMap.get(actualNodes[0]).displacementY;\n                                            count += actualNodes.length;\n                                        } else {\n                                            sum += this.idToNodeMap.get(component[j]).displacementY;\n                                            count++;\n                                        }\n                                    }\n                                    var averageDisplacement = sum / count;\n                                    for(var j = 0; j < component.length; j++){\n                                        if (this.dummyToNodeForHorizontalAlignment.has(component[j])) {\n                                            this.dummyToNodeForHorizontalAlignment.get(component[j]).forEach(function(nodeId) {\n                                                self.idToNodeMap.get(nodeId).displacementY = averageDisplacement;\n                                            });\n                                        } else {\n                                            this.idToNodeMap.get(component[j]).displacementY = averageDisplacement;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                };\n                CoSELayout.prototype.calculateNodesToApplyGravitationTo = function() {\n                    var nodeList = [];\n                    var graph;\n                    var graphs = this.graphManager.getGraphs();\n                    var size = graphs.length;\n                    var i;\n                    for(i = 0; i < size; i++){\n                        graph = graphs[i];\n                        graph.updateConnected();\n                        if (!graph.isConnected) {\n                            nodeList = nodeList.concat(graph.getNodes());\n                        }\n                    }\n                    return nodeList;\n                };\n                CoSELayout.prototype.createBendpoints = function() {\n                    var edges = [];\n                    edges = edges.concat(this.graphManager.getAllEdges());\n                    var visited = new Set();\n                    var i;\n                    for(i = 0; i < edges.length; i++){\n                        var edge = edges[i];\n                        if (!visited.has(edge)) {\n                            var source = edge.getSource();\n                            var target = edge.getTarget();\n                            if (source == target) {\n                                edge.getBendpoints().push(new PointD());\n                                edge.getBendpoints().push(new PointD());\n                                this.createDummyNodesForBendpoints(edge);\n                                visited.add(edge);\n                            } else {\n                                var edgeList = [];\n                                edgeList = edgeList.concat(source.getEdgeListToNode(target));\n                                edgeList = edgeList.concat(target.getEdgeListToNode(source));\n                                if (!visited.has(edgeList[0])) {\n                                    if (edgeList.length > 1) {\n                                        var k;\n                                        for(k = 0; k < edgeList.length; k++){\n                                            var multiEdge = edgeList[k];\n                                            multiEdge.getBendpoints().push(new PointD());\n                                            this.createDummyNodesForBendpoints(multiEdge);\n                                        }\n                                    }\n                                    edgeList.forEach(function(edge) {\n                                        visited.add(edge);\n                                    });\n                                }\n                            }\n                        }\n                        if (visited.size == edges.length) {\n                            break;\n                        }\n                    }\n                };\n                CoSELayout.prototype.positionNodesRadially = function(forest) {\n                    // We tile the trees to a grid row by row; first tree starts at (0,0)\n                    var currentStartingPoint = new Point(0, 0);\n                    var numberOfColumns = Math.ceil(Math.sqrt(forest.length));\n                    var height = 0;\n                    var currentY = 0;\n                    var currentX = 0;\n                    var point = new PointD(0, 0);\n                    for(var i = 0; i < forest.length; i++){\n                        if (i % numberOfColumns == 0) {\n                            // Start of a new row, make the x coordinate 0, increment the\n                            // y coordinate with the max height of the previous row\n                            currentX = 0;\n                            currentY = height;\n                            if (i != 0) {\n                                currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;\n                            }\n                            height = 0;\n                        }\n                        var tree = forest[i];\n                        // Find the center of the tree\n                        var centerNode = Layout.findCenterOfTree(tree);\n                        // Set the staring point of the next tree\n                        currentStartingPoint.x = currentX;\n                        currentStartingPoint.y = currentY;\n                        // Do a radial layout starting with the center\n                        point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);\n                        if (point.y > height) {\n                            height = Math.floor(point.y);\n                        }\n                        currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);\n                    }\n                    this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));\n                };\n                CoSELayout.radialLayout = function(tree, centerNode, startingPoint) {\n                    var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);\n                    CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);\n                    var bounds = LGraph.calculateBounds(tree);\n                    var transform = new Transform();\n                    transform.setDeviceOrgX(bounds.getMinX());\n                    transform.setDeviceOrgY(bounds.getMinY());\n                    transform.setWorldOrgX(startingPoint.x);\n                    transform.setWorldOrgY(startingPoint.y);\n                    for(var i = 0; i < tree.length; i++){\n                        var node = tree[i];\n                        node.transform(transform);\n                    }\n                    var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());\n                    return transform.inverseTransformPoint(bottomRight);\n                };\n                CoSELayout.branchRadialLayout = function(node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {\n                    // First, position this node by finding its angle.\n                    var halfInterval = (endAngle - startAngle + 1) / 2;\n                    if (halfInterval < 0) {\n                        halfInterval += 180;\n                    }\n                    var nodeAngle = (halfInterval + startAngle) % 360;\n                    var teta = nodeAngle * IGeometry.TWO_PI / 360;\n                    // Make polar to java cordinate conversion.\n                    var cos_teta = Math.cos(teta);\n                    var x_ = distance * Math.cos(teta);\n                    var y_ = distance * Math.sin(teta);\n                    node.setCenter(x_, y_);\n                    // Traverse all neighbors of this node and recursively call this\n                    // function.\n                    var neighborEdges = [];\n                    neighborEdges = neighborEdges.concat(node.getEdges());\n                    var childCount = neighborEdges.length;\n                    if (parentOfNode != null) {\n                        childCount--;\n                    }\n                    var branchCount = 0;\n                    var incEdgesCount = neighborEdges.length;\n                    var startIndex;\n                    var edges = node.getEdgesBetween(parentOfNode);\n                    // If there are multiple edges, prune them until there remains only one\n                    // edge.\n                    while(edges.length > 1){\n                        //neighborEdges.remove(edges.remove(0));\n                        var temp = edges[0];\n                        edges.splice(0, 1);\n                        var index = neighborEdges.indexOf(temp);\n                        if (index >= 0) {\n                            neighborEdges.splice(index, 1);\n                        }\n                        incEdgesCount--;\n                        childCount--;\n                    }\n                    if (parentOfNode != null) {\n                        //assert edges.length == 1;\n                        startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;\n                    } else {\n                        startIndex = 0;\n                    }\n                    var stepAngle = Math.abs(endAngle - startAngle) / childCount;\n                    for(var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount){\n                        var currentNeighbor = neighborEdges[i].getOtherEnd(node);\n                        // Don't back traverse to root node in current tree.\n                        if (currentNeighbor == parentOfNode) {\n                            continue;\n                        }\n                        var childStartAngle = (startAngle + branchCount * stepAngle) % 360;\n                        var childEndAngle = (childStartAngle + stepAngle) % 360;\n                        CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);\n                        branchCount++;\n                    }\n                };\n                CoSELayout.maxDiagonalInTree = function(tree) {\n                    var maxDiagonal = Integer.MIN_VALUE;\n                    for(var i = 0; i < tree.length; i++){\n                        var node = tree[i];\n                        var diagonal = node.getDiagonal();\n                        if (diagonal > maxDiagonal) {\n                            maxDiagonal = diagonal;\n                        }\n                    }\n                    return maxDiagonal;\n                };\n                CoSELayout.prototype.calcRepulsionRange = function() {\n                    // formula is 2 x (level + 1) x idealEdgeLength\n                    return 2 * (this.level + 1) * this.idealEdgeLength;\n                };\n                // Tiling methods\n                // Group zero degree members whose parents are not to be tiled, create dummy parents where needed and fill memberGroups by their dummp parent id's\n                CoSELayout.prototype.groupZeroDegreeMembers = function() {\n                    var self = this;\n                    // array of [parent_id x oneDegreeNode_id]\n                    var tempMemberGroups = {}; // A temporary map of parent node and its zero degree members\n                    this.memberGroups = {}; // A map of dummy parent node and its zero degree members whose parents are not to be tiled\n                    this.idToDummyNode = {}; // A map of id to dummy node \n                    var zeroDegree = []; // List of zero degree nodes whose parents are not to be tiled\n                    var allNodes = this.graphManager.getAllNodes();\n                    // Fill zero degree list\n                    for(var i = 0; i < allNodes.length; i++){\n                        var node = allNodes[i];\n                        var parent = node.getParent();\n                        // If a node has zero degree and its parent is not to be tiled if exists add that node to zeroDegres list\n                        if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == undefined || !this.getToBeTiled(parent))) {\n                            zeroDegree.push(node);\n                        }\n                    }\n                    // Create a map of parent node and its zero degree members\n                    for(var i = 0; i < zeroDegree.length; i++){\n                        var node = zeroDegree[i]; // Zero degree node itself\n                        var p_id = node.getParent().id; // Parent id\n                        if (typeof tempMemberGroups[p_id] === \"undefined\") tempMemberGroups[p_id] = [];\n                        tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node); // Push node to the list belongs to its parent in tempMemberGroups\n                    }\n                    // If there are at least two nodes at a level, create a dummy compound for them\n                    Object.keys(tempMemberGroups).forEach(function(p_id) {\n                        if (tempMemberGroups[p_id].length > 1) {\n                            var dummyCompoundId = \"DummyCompound_\" + p_id; // The id of dummy compound which will be created soon\n                            self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id]; // Add dummy compound to memberGroups\n                            var parent = tempMemberGroups[p_id][0].getParent(); // The parent of zero degree nodes will be the parent of new dummy compound\n                            // Create a dummy compound with calculated id\n                            var dummyCompound = new CoSENode(self.graphManager);\n                            dummyCompound.id = dummyCompoundId;\n                            dummyCompound.paddingLeft = parent.paddingLeft || 0;\n                            dummyCompound.paddingRight = parent.paddingRight || 0;\n                            dummyCompound.paddingBottom = parent.paddingBottom || 0;\n                            dummyCompound.paddingTop = parent.paddingTop || 0;\n                            self.idToDummyNode[dummyCompoundId] = dummyCompound;\n                            var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);\n                            var parentGraph = parent.getChild();\n                            // Add dummy compound to parent the graph\n                            parentGraph.add(dummyCompound);\n                            // For each zero degree node in this level remove it from its parent graph and add it to the graph of dummy parent\n                            for(var i = 0; i < tempMemberGroups[p_id].length; i++){\n                                var node = tempMemberGroups[p_id][i];\n                                parentGraph.remove(node);\n                                dummyParentGraph.add(node);\n                            }\n                        }\n                    });\n                };\n                CoSELayout.prototype.clearCompounds = function() {\n                    var childGraphMap = {};\n                    var idToNode = {};\n                    // Get compound ordering by finding the inner one first\n                    this.performDFSOnCompounds();\n                    for(var i = 0; i < this.compoundOrder.length; i++){\n                        idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];\n                        childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());\n                        // Remove children of compounds\n                        this.graphManager.remove(this.compoundOrder[i].getChild());\n                        this.compoundOrder[i].child = null;\n                    }\n                    this.graphManager.resetAllNodes();\n                    // Tile the removed children\n                    this.tileCompoundMembers(childGraphMap, idToNode);\n                };\n                CoSELayout.prototype.clearZeroDegreeMembers = function() {\n                    var self = this;\n                    var tiledZeroDegreePack = this.tiledZeroDegreePack = [];\n                    Object.keys(this.memberGroups).forEach(function(id) {\n                        var compoundNode = self.idToDummyNode[id]; // Get the dummy compound\n                        tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n                        // Set the width and height of the dummy compound as calculated\n                        compoundNode.rect.width = tiledZeroDegreePack[id].width;\n                        compoundNode.rect.height = tiledZeroDegreePack[id].height;\n                        compoundNode.setCenter(tiledZeroDegreePack[id].centerX, tiledZeroDegreePack[id].centerY);\n                        // compound left and top margings for labels\n                        // when node labels are included, these values may be set to different values below and are used in tilingPostLayout,\n                        // otherwise they stay as zero\n                        compoundNode.labelMarginLeft = 0;\n                        compoundNode.labelMarginTop = 0;\n                        // Update compound bounds considering its label properties and set label margins for left and top\n                        if (CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {\n                            var width = compoundNode.rect.width;\n                            var height = compoundNode.rect.height;\n                            if (compoundNode.labelWidth) {\n                                if (compoundNode.labelPosHorizontal == \"left\") {\n                                    compoundNode.rect.x -= compoundNode.labelWidth;\n                                    compoundNode.setWidth(width + compoundNode.labelWidth);\n                                    compoundNode.labelMarginLeft = compoundNode.labelWidth;\n                                } else if (compoundNode.labelPosHorizontal == \"center\" && compoundNode.labelWidth > width) {\n                                    compoundNode.rect.x -= (compoundNode.labelWidth - width) / 2;\n                                    compoundNode.setWidth(compoundNode.labelWidth);\n                                    compoundNode.labelMarginLeft = (compoundNode.labelWidth - width) / 2;\n                                } else if (compoundNode.labelPosHorizontal == \"right\") {\n                                    compoundNode.setWidth(width + compoundNode.labelWidth);\n                                }\n                            }\n                            if (compoundNode.labelHeight) {\n                                if (compoundNode.labelPosVertical == \"top\") {\n                                    compoundNode.rect.y -= compoundNode.labelHeight;\n                                    compoundNode.setHeight(height + compoundNode.labelHeight);\n                                    compoundNode.labelMarginTop = compoundNode.labelHeight;\n                                } else if (compoundNode.labelPosVertical == \"center\" && compoundNode.labelHeight > height) {\n                                    compoundNode.rect.y -= (compoundNode.labelHeight - height) / 2;\n                                    compoundNode.setHeight(compoundNode.labelHeight);\n                                    compoundNode.labelMarginTop = (compoundNode.labelHeight - height) / 2;\n                                } else if (compoundNode.labelPosVertical == \"bottom\") {\n                                    compoundNode.setHeight(height + compoundNode.labelHeight);\n                                }\n                            }\n                        }\n                    });\n                };\n                CoSELayout.prototype.repopulateCompounds = function() {\n                    for(var i = this.compoundOrder.length - 1; i >= 0; i--){\n                        var lCompoundNode = this.compoundOrder[i];\n                        var id = lCompoundNode.id;\n                        var horizontalMargin = lCompoundNode.paddingLeft;\n                        var verticalMargin = lCompoundNode.paddingTop;\n                        var labelMarginLeft = lCompoundNode.labelMarginLeft;\n                        var labelMarginTop = lCompoundNode.labelMarginTop;\n                        this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin, labelMarginLeft, labelMarginTop);\n                    }\n                };\n                CoSELayout.prototype.repopulateZeroDegreeMembers = function() {\n                    var self = this;\n                    var tiledPack = this.tiledZeroDegreePack;\n                    Object.keys(tiledPack).forEach(function(id) {\n                        var compoundNode = self.idToDummyNode[id]; // Get the dummy compound by its id\n                        var horizontalMargin = compoundNode.paddingLeft;\n                        var verticalMargin = compoundNode.paddingTop;\n                        var labelMarginLeft = compoundNode.labelMarginLeft;\n                        var labelMarginTop = compoundNode.labelMarginTop;\n                        // Adjust the positions of nodes wrt its compound\n                        self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin, labelMarginLeft, labelMarginTop);\n                    });\n                };\n                CoSELayout.prototype.getToBeTiled = function(node) {\n                    var id = node.id;\n                    //firstly check the previous results\n                    if (this.toBeTiled[id] != null) {\n                        return this.toBeTiled[id];\n                    }\n                    //only compound nodes are to be tiled\n                    var childGraph = node.getChild();\n                    if (childGraph == null) {\n                        this.toBeTiled[id] = false;\n                        return false;\n                    }\n                    var children = childGraph.getNodes(); // Get the children nodes\n                    //a compound node is not to be tiled if all of its compound children are not to be tiled\n                    for(var i = 0; i < children.length; i++){\n                        var theChild = children[i];\n                        if (this.getNodeDegree(theChild) > 0) {\n                            this.toBeTiled[id] = false;\n                            return false;\n                        }\n                        //pass the children not having the compound structure\n                        if (theChild.getChild() == null) {\n                            this.toBeTiled[theChild.id] = false;\n                            continue;\n                        }\n                        if (!this.getToBeTiled(theChild)) {\n                            this.toBeTiled[id] = false;\n                            return false;\n                        }\n                    }\n                    this.toBeTiled[id] = true;\n                    return true;\n                };\n                // Get degree of a node depending of its edges and independent of its children\n                CoSELayout.prototype.getNodeDegree = function(node) {\n                    var id = node.id;\n                    var edges = node.getEdges();\n                    var degree = 0;\n                    // For the edges connected\n                    for(var i = 0; i < edges.length; i++){\n                        var edge = edges[i];\n                        if (edge.getSource().id !== edge.getTarget().id) {\n                            degree = degree + 1;\n                        }\n                    }\n                    return degree;\n                };\n                // Get degree of a node with its children\n                CoSELayout.prototype.getNodeDegreeWithChildren = function(node) {\n                    var degree = this.getNodeDegree(node);\n                    if (node.getChild() == null) {\n                        return degree;\n                    }\n                    var children = node.getChild().getNodes();\n                    for(var i = 0; i < children.length; i++){\n                        var child = children[i];\n                        degree += this.getNodeDegreeWithChildren(child);\n                    }\n                    return degree;\n                };\n                CoSELayout.prototype.performDFSOnCompounds = function() {\n                    this.compoundOrder = [];\n                    this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());\n                };\n                CoSELayout.prototype.fillCompexOrderByDFS = function(children) {\n                    for(var i = 0; i < children.length; i++){\n                        var child = children[i];\n                        if (child.getChild() != null) {\n                            this.fillCompexOrderByDFS(child.getChild().getNodes());\n                        }\n                        if (this.getToBeTiled(child)) {\n                            this.compoundOrder.push(child);\n                        }\n                    }\n                };\n                /**\n* This method places each zero degree member wrt given (x,y) coordinates (top left).\n*/ CoSELayout.prototype.adjustLocations = function(organization, x, y, compoundHorizontalMargin, compoundVerticalMargin, compoundLabelMarginLeft, compoundLabelMarginTop) {\n                    x += compoundHorizontalMargin + compoundLabelMarginLeft;\n                    y += compoundVerticalMargin + compoundLabelMarginTop;\n                    var left = x;\n                    for(var i = 0; i < organization.rows.length; i++){\n                        var row = organization.rows[i];\n                        x = left;\n                        var maxHeight = 0;\n                        for(var j = 0; j < row.length; j++){\n                            var lnode = row[j];\n                            lnode.rect.x = x; // + lnode.rect.width / 2;\n                            lnode.rect.y = y; // + lnode.rect.height / 2;\n                            x += lnode.rect.width + organization.horizontalPadding;\n                            if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;\n                        }\n                        y += maxHeight + organization.verticalPadding;\n                    }\n                };\n                CoSELayout.prototype.tileCompoundMembers = function(childGraphMap, idToNode) {\n                    var self = this;\n                    this.tiledMemberPack = [];\n                    Object.keys(childGraphMap).forEach(function(id) {\n                        // Get the compound node\n                        var compoundNode = idToNode[id];\n                        self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n                        compoundNode.rect.width = self.tiledMemberPack[id].width;\n                        compoundNode.rect.height = self.tiledMemberPack[id].height;\n                        compoundNode.setCenter(self.tiledMemberPack[id].centerX, self.tiledMemberPack[id].centerY);\n                        // compound left and top margings for labels\n                        // when node labels are included, these values may be set to different values below and are used in tilingPostLayout,\n                        // otherwise they stay as zero\n                        compoundNode.labelMarginLeft = 0;\n                        compoundNode.labelMarginTop = 0;\n                        // Update compound bounds considering its label properties and set label margins for left and top\n                        if (CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {\n                            var width = compoundNode.rect.width;\n                            var height = compoundNode.rect.height;\n                            if (compoundNode.labelWidth) {\n                                if (compoundNode.labelPosHorizontal == \"left\") {\n                                    compoundNode.rect.x -= compoundNode.labelWidth;\n                                    compoundNode.setWidth(width + compoundNode.labelWidth);\n                                    compoundNode.labelMarginLeft = compoundNode.labelWidth;\n                                } else if (compoundNode.labelPosHorizontal == \"center\" && compoundNode.labelWidth > width) {\n                                    compoundNode.rect.x -= (compoundNode.labelWidth - width) / 2;\n                                    compoundNode.setWidth(compoundNode.labelWidth);\n                                    compoundNode.labelMarginLeft = (compoundNode.labelWidth - width) / 2;\n                                } else if (compoundNode.labelPosHorizontal == \"right\") {\n                                    compoundNode.setWidth(width + compoundNode.labelWidth);\n                                }\n                            }\n                            if (compoundNode.labelHeight) {\n                                if (compoundNode.labelPosVertical == \"top\") {\n                                    compoundNode.rect.y -= compoundNode.labelHeight;\n                                    compoundNode.setHeight(height + compoundNode.labelHeight);\n                                    compoundNode.labelMarginTop = compoundNode.labelHeight;\n                                } else if (compoundNode.labelPosVertical == \"center\" && compoundNode.labelHeight > height) {\n                                    compoundNode.rect.y -= (compoundNode.labelHeight - height) / 2;\n                                    compoundNode.setHeight(compoundNode.labelHeight);\n                                    compoundNode.labelMarginTop = (compoundNode.labelHeight - height) / 2;\n                                } else if (compoundNode.labelPosVertical == \"bottom\") {\n                                    compoundNode.setHeight(height + compoundNode.labelHeight);\n                                }\n                            }\n                        }\n                    });\n                };\n                CoSELayout.prototype.tileNodes = function(nodes, minWidth) {\n                    var horizontalOrg = this.tileNodesByFavoringDim(nodes, minWidth, true);\n                    var verticalOrg = this.tileNodesByFavoringDim(nodes, minWidth, false);\n                    var horizontalRatio = this.getOrgRatio(horizontalOrg);\n                    var verticalRatio = this.getOrgRatio(verticalOrg);\n                    var bestOrg;\n                    // the best ratio is the one that is closer to 1 since the ratios are already normalized\n                    // and the best organization is the one that has the best ratio\n                    if (verticalRatio < horizontalRatio) {\n                        bestOrg = verticalOrg;\n                    } else {\n                        bestOrg = horizontalOrg;\n                    }\n                    return bestOrg;\n                };\n                // get the width/height ratio of the organization that is normalized so that it will not be less than 1\n                CoSELayout.prototype.getOrgRatio = function(organization) {\n                    // get dimensions and calculate the initial ratio\n                    var width = organization.width;\n                    var height = organization.height;\n                    var ratio = width / height;\n                    // if the initial ratio is less then 1 then inverse it\n                    if (ratio < 1) {\n                        ratio = 1 / ratio;\n                    }\n                    // return the normalized ratio\n                    return ratio;\n                };\n                /*\n * Calculates the ideal width for the rows. This method assumes that\n * each node has the same sizes and calculates the ideal row width that\n * approximates a square shaped complex accordingly. However, since nodes would\n * have different sizes some rows would have different sizes and the resulting\n * shape would not be an exact square.\n */ CoSELayout.prototype.calcIdealRowWidth = function(members, favorHorizontalDim) {\n                    // To approximate a square shaped complex we need to make complex width equal to complex height.\n                    // To achieve this we need to solve the following equation system for hc:\n                    // (x + bx) * hc - bx = (y + by) * vc - by, hc * vc = n\n                    // where x is the avarage width of the nodes, y is the avarage height of nodes\n                    // bx and by are the buffer sizes in horizontal and vertical dimensions accordingly,\n                    // hc and vc are the number of rows in horizontal and vertical dimensions\n                    // n is number of members.\n                    var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;\n                    var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;\n                    // number of members\n                    var membersSize = members.length;\n                    // sum of the width of all members\n                    var totalWidth = 0;\n                    // sum of the height of all members\n                    var totalHeight = 0;\n                    var maxWidth = 0;\n                    // traverse all members to calculate total width and total height and get the maximum members width\n                    members.forEach(function(node) {\n                        totalWidth += node.getWidth();\n                        totalHeight += node.getHeight();\n                        if (node.getWidth() > maxWidth) {\n                            maxWidth = node.getWidth();\n                        }\n                    });\n                    // average width of the members\n                    var averageWidth = totalWidth / membersSize;\n                    // average height of the members\n                    var averageHeight = totalHeight / membersSize;\n                    // solving the initial equation system for the hc yields the following second degree equation:\n                    // hc^2 * (x+bx) + hc * (by - bx) - n * (y + by) = 0\n                    // the delta value to solve the equation above for hc\n                    var delta = Math.pow(verticalPadding - horizontalPadding, 2) + 4 * (averageWidth + horizontalPadding) * (averageHeight + verticalPadding) * membersSize;\n                    // solve the equation using delta value to calculate the horizontal count\n                    // that represents the number of nodes in an ideal row\n                    var horizontalCountDouble = (horizontalPadding - verticalPadding + Math.sqrt(delta)) / (2 * (averageWidth + horizontalPadding));\n                    // round the calculated horizontal count up or down according to the favored dimension\n                    var horizontalCount;\n                    if (favorHorizontalDim) {\n                        horizontalCount = Math.ceil(horizontalCountDouble);\n                        // if horizontalCount count is not a float value then both of rounding to floor and ceil\n                        // will yield the same values. Instead of repeating the same calculation try going up\n                        // while favoring horizontal dimension in such cases\n                        if (horizontalCount == horizontalCountDouble) {\n                            horizontalCount++;\n                        }\n                    } else {\n                        horizontalCount = Math.floor(horizontalCountDouble);\n                    }\n                    // ideal width to be calculated\n                    var idealWidth = horizontalCount * (averageWidth + horizontalPadding) - horizontalPadding;\n                    // if max width is bigger than calculated ideal width reset ideal width to it\n                    if (maxWidth > idealWidth) {\n                        idealWidth = maxWidth;\n                    }\n                    // add the left-right margins to the ideal row width\n                    idealWidth += horizontalPadding * 2;\n                    // return the ideal row width1\n                    return idealWidth;\n                };\n                CoSELayout.prototype.tileNodesByFavoringDim = function(nodes, minWidth, favorHorizontalDim) {\n                    var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;\n                    var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;\n                    var tilingCompareBy = CoSEConstants.TILING_COMPARE_BY;\n                    var organization = {\n                        rows: [],\n                        rowWidth: [],\n                        rowHeight: [],\n                        width: 0,\n                        height: minWidth,\n                        verticalPadding: verticalPadding,\n                        horizontalPadding: horizontalPadding,\n                        centerX: 0,\n                        centerY: 0\n                    };\n                    if (tilingCompareBy) {\n                        organization.idealRowWidth = this.calcIdealRowWidth(nodes, favorHorizontalDim);\n                    }\n                    var getNodeArea = function getNodeArea(n) {\n                        return n.rect.width * n.rect.height;\n                    };\n                    var areaCompareFcn = function areaCompareFcn(n1, n2) {\n                        return getNodeArea(n2) - getNodeArea(n1);\n                    };\n                    // Sort the nodes in descending order of their areas\n                    nodes.sort(function(n1, n2) {\n                        var cmpBy = areaCompareFcn;\n                        if (organization.idealRowWidth) {\n                            cmpBy = tilingCompareBy;\n                            return cmpBy(n1.id, n2.id);\n                        }\n                        return cmpBy(n1, n2);\n                    });\n                    // Create the organization -> calculate compound center\n                    var sumCenterX = 0;\n                    var sumCenterY = 0;\n                    for(var i = 0; i < nodes.length; i++){\n                        var lNode = nodes[i];\n                        sumCenterX += lNode.getCenterX();\n                        sumCenterY += lNode.getCenterY();\n                    }\n                    organization.centerX = sumCenterX / nodes.length;\n                    organization.centerY = sumCenterY / nodes.length;\n                    // Create the organization -> tile members\n                    for(var i = 0; i < nodes.length; i++){\n                        var lNode = nodes[i];\n                        if (organization.rows.length == 0) {\n                            this.insertNodeToRow(organization, lNode, 0, minWidth);\n                        } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {\n                            var rowIndex = organization.rows.length - 1;\n                            if (!organization.idealRowWidth) {\n                                rowIndex = this.getShortestRowIndex(organization);\n                            }\n                            this.insertNodeToRow(organization, lNode, rowIndex, minWidth);\n                        } else {\n                            this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);\n                        }\n                        this.shiftToLastRow(organization);\n                    }\n                    return organization;\n                };\n                CoSELayout.prototype.insertNodeToRow = function(organization, node, rowIndex, minWidth) {\n                    var minCompoundSize = minWidth;\n                    // Add new row if needed\n                    if (rowIndex == organization.rows.length) {\n                        var secondDimension = [];\n                        organization.rows.push(secondDimension);\n                        organization.rowWidth.push(minCompoundSize);\n                        organization.rowHeight.push(0);\n                    }\n                    // Update row width\n                    var w = organization.rowWidth[rowIndex] + node.rect.width;\n                    if (organization.rows[rowIndex].length > 0) {\n                        w += organization.horizontalPadding;\n                    }\n                    organization.rowWidth[rowIndex] = w;\n                    // Update compound width\n                    if (organization.width < w) {\n                        organization.width = w;\n                    }\n                    // Update height\n                    var h = node.rect.height;\n                    if (rowIndex > 0) h += organization.verticalPadding;\n                    var extraHeight = 0;\n                    if (h > organization.rowHeight[rowIndex]) {\n                        extraHeight = organization.rowHeight[rowIndex];\n                        organization.rowHeight[rowIndex] = h;\n                        extraHeight = organization.rowHeight[rowIndex] - extraHeight;\n                    }\n                    organization.height += extraHeight;\n                    // Insert node\n                    organization.rows[rowIndex].push(node);\n                };\n                //Scans the rows of an organization and returns the one with the min width\n                CoSELayout.prototype.getShortestRowIndex = function(organization) {\n                    var r = -1;\n                    var min = Number.MAX_VALUE;\n                    for(var i = 0; i < organization.rows.length; i++){\n                        if (organization.rowWidth[i] < min) {\n                            r = i;\n                            min = organization.rowWidth[i];\n                        }\n                    }\n                    return r;\n                };\n                //Scans the rows of an organization and returns the one with the max width\n                CoSELayout.prototype.getLongestRowIndex = function(organization) {\n                    var r = -1;\n                    var max = Number.MIN_VALUE;\n                    for(var i = 0; i < organization.rows.length; i++){\n                        if (organization.rowWidth[i] > max) {\n                            r = i;\n                            max = organization.rowWidth[i];\n                        }\n                    }\n                    return r;\n                };\n                /**\n* This method checks whether adding extra width to the organization violates\n* the aspect ratio(1) or not.\n*/ CoSELayout.prototype.canAddHorizontal = function(organization, extraWidth, extraHeight) {\n                    // if there is an ideal row width specified use it instead of checking the aspect ratio\n                    if (organization.idealRowWidth) {\n                        var lastRowIndex = organization.rows.length - 1;\n                        var lastRowWidth = organization.rowWidth[lastRowIndex];\n                        // check and return if ideal row width will be exceed if the node is added to the row\n                        return lastRowWidth + extraWidth + organization.horizontalPadding <= organization.idealRowWidth;\n                    }\n                    var sri = this.getShortestRowIndex(organization);\n                    if (sri < 0) {\n                        return true;\n                    }\n                    var min = organization.rowWidth[sri];\n                    if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;\n                    var hDiff = 0;\n                    // Adding to an existing row\n                    if (organization.rowHeight[sri] < extraHeight) {\n                        if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];\n                    }\n                    var add_to_row_ratio;\n                    if (organization.width - min >= extraWidth + organization.horizontalPadding) {\n                        add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);\n                    } else {\n                        add_to_row_ratio = (organization.height + hDiff) / organization.width;\n                    }\n                    // Adding a new row for this node\n                    hDiff = extraHeight + organization.verticalPadding;\n                    var add_new_row_ratio;\n                    if (organization.width < extraWidth) {\n                        add_new_row_ratio = (organization.height + hDiff) / extraWidth;\n                    } else {\n                        add_new_row_ratio = (organization.height + hDiff) / organization.width;\n                    }\n                    if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;\n                    if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;\n                    return add_to_row_ratio < add_new_row_ratio;\n                };\n                //If moving the last node from the longest row and adding it to the last\n                //row makes the bounding box smaller, do it.\n                CoSELayout.prototype.shiftToLastRow = function(organization) {\n                    var longest = this.getLongestRowIndex(organization);\n                    var last = organization.rowWidth.length - 1;\n                    var row = organization.rows[longest];\n                    var node = row[row.length - 1];\n                    var diff = node.width + organization.horizontalPadding;\n                    // Check if there is enough space on the last row\n                    if (organization.width - organization.rowWidth[last] > diff && longest != last) {\n                        // Remove the last element of the longest row\n                        row.splice(-1, 1);\n                        // Push it to the last row\n                        organization.rows[last].push(node);\n                        organization.rowWidth[longest] = organization.rowWidth[longest] - diff;\n                        organization.rowWidth[last] = organization.rowWidth[last] + diff;\n                        organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];\n                        // Update heights of the organization\n                        var maxHeight = Number.MIN_VALUE;\n                        for(var i = 0; i < row.length; i++){\n                            if (row[i].height > maxHeight) maxHeight = row[i].height;\n                        }\n                        if (longest > 0) maxHeight += organization.verticalPadding;\n                        var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n                        organization.rowHeight[longest] = maxHeight;\n                        if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;\n                        var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n                        organization.height += finalTotal - prevTotal;\n                        this.shiftToLastRow(organization);\n                    }\n                };\n                CoSELayout.prototype.tilingPreLayout = function() {\n                    if (CoSEConstants.TILE) {\n                        // Find zero degree nodes and create a compound for each level\n                        this.groupZeroDegreeMembers();\n                        // Tile and clear children of each compound\n                        this.clearCompounds();\n                        // Separately tile and clear zero degree nodes for each level\n                        this.clearZeroDegreeMembers();\n                    }\n                };\n                CoSELayout.prototype.tilingPostLayout = function() {\n                    if (CoSEConstants.TILE) {\n                        this.repopulateZeroDegreeMembers();\n                        this.repopulateCompounds();\n                    }\n                };\n                // -----------------------------------------------------------------------------\n                // Section: Tree Reduction methods\n                // -----------------------------------------------------------------------------\n                // Reduce trees \n                CoSELayout.prototype.reduceTrees = function() {\n                    var prunedNodesAll = [];\n                    var containsLeaf = true;\n                    var node;\n                    while(containsLeaf){\n                        var allNodes = this.graphManager.getAllNodes();\n                        var prunedNodesInStepTemp = [];\n                        containsLeaf = false;\n                        for(var i = 0; i < allNodes.length; i++){\n                            node = allNodes[i];\n                            if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {\n                                if (CoSEConstants.PURE_INCREMENTAL) {\n                                    var otherEnd = node.getEdges()[0].getOtherEnd(node);\n                                    var relativePosition = new DimensionD(node.getCenterX() - otherEnd.getCenterX(), node.getCenterY() - otherEnd.getCenterY());\n                                    prunedNodesInStepTemp.push([\n                                        node,\n                                        node.getEdges()[0],\n                                        node.getOwner(),\n                                        relativePosition\n                                    ]);\n                                } else {\n                                    prunedNodesInStepTemp.push([\n                                        node,\n                                        node.getEdges()[0],\n                                        node.getOwner()\n                                    ]);\n                                }\n                                containsLeaf = true;\n                            }\n                        }\n                        if (containsLeaf == true) {\n                            var prunedNodesInStep = [];\n                            for(var j = 0; j < prunedNodesInStepTemp.length; j++){\n                                if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {\n                                    prunedNodesInStep.push(prunedNodesInStepTemp[j]);\n                                    prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);\n                                }\n                            }\n                            prunedNodesAll.push(prunedNodesInStep);\n                            this.graphManager.resetAllNodes();\n                            this.graphManager.resetAllEdges();\n                        }\n                    }\n                    this.prunedNodesAll = prunedNodesAll;\n                };\n                // Grow tree one step \n                CoSELayout.prototype.growTree = function(prunedNodesAll) {\n                    var lengthOfPrunedNodesInStep = prunedNodesAll.length;\n                    var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];\n                    var nodeData;\n                    for(var i = 0; i < prunedNodesInStep.length; i++){\n                        nodeData = prunedNodesInStep[i];\n                        this.findPlaceforPrunedNode(nodeData);\n                        nodeData[2].add(nodeData[0]);\n                        nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);\n                    }\n                    prunedNodesAll.splice(prunedNodesAll.length - 1, 1);\n                    this.graphManager.resetAllNodes();\n                    this.graphManager.resetAllEdges();\n                };\n                // Find an appropriate position to replace pruned node, this method can be improved\n                CoSELayout.prototype.findPlaceforPrunedNode = function(nodeData) {\n                    var gridForPrunedNode;\n                    var nodeToConnect;\n                    var prunedNode = nodeData[0];\n                    if (prunedNode == nodeData[1].source) {\n                        nodeToConnect = nodeData[1].target;\n                    } else {\n                        nodeToConnect = nodeData[1].source;\n                    }\n                    if (CoSEConstants.PURE_INCREMENTAL) {\n                        prunedNode.setCenter(nodeToConnect.getCenterX() + nodeData[3].getWidth(), nodeToConnect.getCenterY() + nodeData[3].getHeight());\n                    } else {\n                        var startGridX = nodeToConnect.startX;\n                        var finishGridX = nodeToConnect.finishX;\n                        var startGridY = nodeToConnect.startY;\n                        var finishGridY = nodeToConnect.finishY;\n                        var upNodeCount = 0;\n                        var downNodeCount = 0;\n                        var rightNodeCount = 0;\n                        var leftNodeCount = 0;\n                        var controlRegions = [\n                            upNodeCount,\n                            rightNodeCount,\n                            downNodeCount,\n                            leftNodeCount\n                        ];\n                        if (startGridY > 0) {\n                            for(var i = startGridX; i <= finishGridX; i++){\n                                controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;\n                            }\n                        }\n                        if (finishGridX < this.grid.length - 1) {\n                            for(var i = startGridY; i <= finishGridY; i++){\n                                controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;\n                            }\n                        }\n                        if (finishGridY < this.grid[0].length - 1) {\n                            for(var i = startGridX; i <= finishGridX; i++){\n                                controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;\n                            }\n                        }\n                        if (startGridX > 0) {\n                            for(var i = startGridY; i <= finishGridY; i++){\n                                controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;\n                            }\n                        }\n                        var min = Integer.MAX_VALUE;\n                        var minCount;\n                        var minIndex;\n                        for(var j = 0; j < controlRegions.length; j++){\n                            if (controlRegions[j] < min) {\n                                min = controlRegions[j];\n                                minCount = 1;\n                                minIndex = j;\n                            } else if (controlRegions[j] == min) {\n                                minCount++;\n                            }\n                        }\n                        if (minCount == 3 && min == 0) {\n                            if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {\n                                gridForPrunedNode = 1;\n                            } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {\n                                gridForPrunedNode = 0;\n                            } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n                                gridForPrunedNode = 3;\n                            } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n                                gridForPrunedNode = 2;\n                            }\n                        } else if (minCount == 2 && min == 0) {\n                            var random = Math.floor(Math.random() * 2);\n                            if (controlRegions[0] == 0 && controlRegions[1] == 0) {\n                                ;\n                                if (random == 0) {\n                                    gridForPrunedNode = 0;\n                                } else {\n                                    gridForPrunedNode = 1;\n                                }\n                            } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {\n                                if (random == 0) {\n                                    gridForPrunedNode = 0;\n                                } else {\n                                    gridForPrunedNode = 2;\n                                }\n                            } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {\n                                if (random == 0) {\n                                    gridForPrunedNode = 0;\n                                } else {\n                                    gridForPrunedNode = 3;\n                                }\n                            } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {\n                                if (random == 0) {\n                                    gridForPrunedNode = 1;\n                                } else {\n                                    gridForPrunedNode = 2;\n                                }\n                            } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {\n                                if (random == 0) {\n                                    gridForPrunedNode = 1;\n                                } else {\n                                    gridForPrunedNode = 3;\n                                }\n                            } else {\n                                if (random == 0) {\n                                    gridForPrunedNode = 2;\n                                } else {\n                                    gridForPrunedNode = 3;\n                                }\n                            }\n                        } else if (minCount == 4 && min == 0) {\n                            var random = Math.floor(Math.random() * 4);\n                            gridForPrunedNode = random;\n                        } else {\n                            gridForPrunedNode = minIndex;\n                        }\n                        if (gridForPrunedNode == 0) {\n                            prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);\n                        } else if (gridForPrunedNode == 1) {\n                            prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n                        } else if (gridForPrunedNode == 2) {\n                            prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);\n                        } else {\n                            prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n                        }\n                    }\n                };\n                module1.exports = CoSELayout;\n            /***/ },\n            /***/ 991: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_109971__)=>{\n                var FDLayoutNode = __nested_webpack_require_109971__(551).FDLayoutNode;\n                var IMath = __nested_webpack_require_109971__(551).IMath;\n                function CoSENode(gm, loc, size, vNode) {\n                    FDLayoutNode.call(this, gm, loc, size, vNode);\n                }\n                CoSENode.prototype = Object.create(FDLayoutNode.prototype);\n                for(var prop in FDLayoutNode){\n                    CoSENode[prop] = FDLayoutNode[prop];\n                }\n                CoSENode.prototype.calculateDisplacement = function() {\n                    var layout = this.graphManager.getLayout();\n                    // this check is for compound nodes that contain fixed nodes\n                    if (this.getChild() != null && this.fixedNodeWeight) {\n                        this.displacementX += layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.fixedNodeWeight;\n                        this.displacementY += layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.fixedNodeWeight;\n                    } else {\n                        this.displacementX += layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;\n                        this.displacementY += layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;\n                    }\n                    if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {\n                        this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);\n                    }\n                    if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {\n                        this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);\n                    }\n                    // non-empty compound node, propogate movement to children as well\n                    if (this.child && this.child.getNodes().length > 0) {\n                        this.propogateDisplacementToChildren(this.displacementX, this.displacementY);\n                    }\n                };\n                CoSENode.prototype.propogateDisplacementToChildren = function(dX, dY) {\n                    var nodes = this.getChild().getNodes();\n                    var node;\n                    for(var i = 0; i < nodes.length; i++){\n                        node = nodes[i];\n                        if (node.getChild() == null) {\n                            node.displacementX += dX;\n                            node.displacementY += dY;\n                        } else {\n                            node.propogateDisplacementToChildren(dX, dY);\n                        }\n                    }\n                };\n                CoSENode.prototype.move = function() {\n                    var layout = this.graphManager.getLayout();\n                    // a simple node or an empty compound node, move it\n                    if (this.child == null || this.child.getNodes().length == 0) {\n                        this.moveBy(this.displacementX, this.displacementY);\n                        layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);\n                    }\n                    this.springForceX = 0;\n                    this.springForceY = 0;\n                    this.repulsionForceX = 0;\n                    this.repulsionForceY = 0;\n                    this.gravitationForceX = 0;\n                    this.gravitationForceY = 0;\n                    this.displacementX = 0;\n                    this.displacementY = 0;\n                };\n                CoSENode.prototype.setPred1 = function(pred11) {\n                    this.pred1 = pred11;\n                };\n                CoSENode.prototype.getPred1 = function() {\n                    return pred1;\n                };\n                CoSENode.prototype.getPred2 = function() {\n                    return pred2;\n                };\n                CoSENode.prototype.setNext = function(next1) {\n                    this.next = next1;\n                };\n                CoSENode.prototype.getNext = function() {\n                    return next;\n                };\n                CoSENode.prototype.setProcessed = function(processed1) {\n                    this.processed = processed1;\n                };\n                CoSENode.prototype.isProcessed = function() {\n                    return processed;\n                };\n                module1.exports = CoSENode;\n            /***/ },\n            /***/ 902: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_114725__)=>{\n                function _toConsumableArray(arr) {\n                    if (Array.isArray(arr)) {\n                        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++){\n                            arr2[i] = arr[i];\n                        }\n                        return arr2;\n                    } else {\n                        return Array.from(arr);\n                    }\n                }\n                var CoSEConstants = __nested_webpack_require_114725__(806);\n                var LinkedList = __nested_webpack_require_114725__(551).LinkedList;\n                var Matrix = __nested_webpack_require_114725__(551).Matrix;\n                var SVD = __nested_webpack_require_114725__(551).SVD;\n                function ConstraintHandler() {}\n                ConstraintHandler.handleConstraints = function(layout) {\n                    //  let layout = this.graphManager.getLayout();\n                    // get constraints from layout\n                    var constraints = {};\n                    constraints.fixedNodeConstraint = layout.constraints.fixedNodeConstraint;\n                    constraints.alignmentConstraint = layout.constraints.alignmentConstraint;\n                    constraints.relativePlacementConstraint = layout.constraints.relativePlacementConstraint;\n                    var idToNodeMap = new Map();\n                    var nodeIndexes = new Map();\n                    var xCoords = [];\n                    var yCoords = [];\n                    var allNodes = layout.getAllNodes();\n                    var index = 0;\n                    // fill index map and coordinates\n                    for(var i = 0; i < allNodes.length; i++){\n                        var node = allNodes[i];\n                        if (node.getChild() == null) {\n                            nodeIndexes.set(node.id, index++);\n                            xCoords.push(node.getCenterX());\n                            yCoords.push(node.getCenterY());\n                            idToNodeMap.set(node.id, node);\n                        }\n                    }\n                    // if there exists relative placement constraint without gap value, set it to default \n                    if (constraints.relativePlacementConstraint) {\n                        constraints.relativePlacementConstraint.forEach(function(constraint) {\n                            if (!constraint.gap && constraint.gap != 0) {\n                                if (constraint.left) {\n                                    constraint.gap = CoSEConstants.DEFAULT_EDGE_LENGTH + idToNodeMap.get(constraint.left).getWidth() / 2 + idToNodeMap.get(constraint.right).getWidth() / 2;\n                                } else {\n                                    constraint.gap = CoSEConstants.DEFAULT_EDGE_LENGTH + idToNodeMap.get(constraint.top).getHeight() / 2 + idToNodeMap.get(constraint.bottom).getHeight() / 2;\n                                }\n                            }\n                        });\n                    }\n                    /* auxiliary functions */ // calculate difference between two position objects\n                    var calculatePositionDiff = function calculatePositionDiff(pos1, pos2) {\n                        return {\n                            x: pos1.x - pos2.x,\n                            y: pos1.y - pos2.y\n                        };\n                    };\n                    // calculate average position of the nodes\n                    var calculateAvgPosition = function calculateAvgPosition(nodeIdSet) {\n                        var xPosSum = 0;\n                        var yPosSum = 0;\n                        nodeIdSet.forEach(function(nodeId) {\n                            xPosSum += xCoords[nodeIndexes.get(nodeId)];\n                            yPosSum += yCoords[nodeIndexes.get(nodeId)];\n                        });\n                        return {\n                            x: xPosSum / nodeIdSet.size,\n                            y: yPosSum / nodeIdSet.size\n                        };\n                    };\n                    // find an appropriate positioning for the nodes in a given graph according to relative placement constraints\n                    // this function also takes the fixed nodes and alignment constraints into account\n                    // graph: dag to be evaluated, direction: \"horizontal\" or \"vertical\", \n                    // fixedNodes: set of fixed nodes to consider during evaluation, dummyPositions: appropriate coordinates of the dummy nodes  \n                    var findAppropriatePositionForRelativePlacement = function findAppropriatePositionForRelativePlacement(graph, direction, fixedNodes, dummyPositions, componentSources) {\n                        // find union of two sets\n                        function setUnion(setA, setB) {\n                            var union = new Set(setA);\n                            var _iteratorNormalCompletion = true;\n                            var _didIteratorError = false;\n                            var _iteratorError = undefined;\n                            try {\n                                for(var _iterator = setB[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                    var elem = _step.value;\n                                    union.add(elem);\n                                }\n                            } catch (err) {\n                                _didIteratorError = true;\n                                _iteratorError = err;\n                            } finally{\n                                try {\n                                    if (!_iteratorNormalCompletion && _iterator.return) {\n                                        _iterator.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError) {\n                                        throw _iteratorError;\n                                    }\n                                }\n                            }\n                            return union;\n                        }\n                        // find indegree count for each node\n                        var inDegrees = new Map();\n                        graph.forEach(function(value, key) {\n                            inDegrees.set(key, 0);\n                        });\n                        graph.forEach(function(value, key) {\n                            value.forEach(function(adjacent) {\n                                inDegrees.set(adjacent.id, inDegrees.get(adjacent.id) + 1);\n                            });\n                        });\n                        var positionMap = new Map(); // keeps the position for each node\n                        var pastMap = new Map(); // keeps the predecessors(past) of a node\n                        var queue = new LinkedList();\n                        inDegrees.forEach(function(value, key) {\n                            if (value == 0) {\n                                queue.push(key);\n                                if (!fixedNodes) {\n                                    if (direction == \"horizontal\") {\n                                        positionMap.set(key, nodeIndexes.has(key) ? xCoords[nodeIndexes.get(key)] : dummyPositions.get(key));\n                                    } else {\n                                        positionMap.set(key, nodeIndexes.has(key) ? yCoords[nodeIndexes.get(key)] : dummyPositions.get(key));\n                                    }\n                                }\n                            } else {\n                                positionMap.set(key, Number.NEGATIVE_INFINITY);\n                            }\n                            if (fixedNodes) {\n                                pastMap.set(key, new Set([\n                                    key\n                                ]));\n                            }\n                        });\n                        // align sources of each component in enforcement phase\n                        if (fixedNodes) {\n                            componentSources.forEach(function(component) {\n                                var fixedIds = [];\n                                component.forEach(function(nodeId) {\n                                    if (fixedNodes.has(nodeId)) {\n                                        fixedIds.push(nodeId);\n                                    }\n                                });\n                                if (fixedIds.length > 0) {\n                                    var position = 0;\n                                    fixedIds.forEach(function(fixedId) {\n                                        if (direction == \"horizontal\") {\n                                            positionMap.set(fixedId, nodeIndexes.has(fixedId) ? xCoords[nodeIndexes.get(fixedId)] : dummyPositions.get(fixedId));\n                                            position += positionMap.get(fixedId);\n                                        } else {\n                                            positionMap.set(fixedId, nodeIndexes.has(fixedId) ? yCoords[nodeIndexes.get(fixedId)] : dummyPositions.get(fixedId));\n                                            position += positionMap.get(fixedId);\n                                        }\n                                    });\n                                    position = position / fixedIds.length;\n                                    component.forEach(function(nodeId) {\n                                        if (!fixedNodes.has(nodeId)) {\n                                            positionMap.set(nodeId, position);\n                                        }\n                                    });\n                                } else {\n                                    var _position = 0;\n                                    component.forEach(function(nodeId) {\n                                        if (direction == \"horizontal\") {\n                                            _position += nodeIndexes.has(nodeId) ? xCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);\n                                        } else {\n                                            _position += nodeIndexes.has(nodeId) ? yCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);\n                                        }\n                                    });\n                                    _position = _position / component.length;\n                                    component.forEach(function(nodeId) {\n                                        positionMap.set(nodeId, _position);\n                                    });\n                                }\n                            });\n                        }\n                        // calculate positions of the nodes\n                        var _loop = function _loop() {\n                            var currentNode = queue.shift();\n                            var neighbors = graph.get(currentNode);\n                            neighbors.forEach(function(neighbor) {\n                                if (positionMap.get(neighbor.id) < positionMap.get(currentNode) + neighbor.gap) {\n                                    if (fixedNodes && fixedNodes.has(neighbor.id)) {\n                                        var fixedPosition = void 0;\n                                        if (direction == \"horizontal\") {\n                                            fixedPosition = nodeIndexes.has(neighbor.id) ? xCoords[nodeIndexes.get(neighbor.id)] : dummyPositions.get(neighbor.id);\n                                        } else {\n                                            fixedPosition = nodeIndexes.has(neighbor.id) ? yCoords[nodeIndexes.get(neighbor.id)] : dummyPositions.get(neighbor.id);\n                                        }\n                                        positionMap.set(neighbor.id, fixedPosition); // TODO: may do unnecessary work\n                                        if (fixedPosition < positionMap.get(currentNode) + neighbor.gap) {\n                                            var diff = positionMap.get(currentNode) + neighbor.gap - fixedPosition;\n                                            pastMap.get(currentNode).forEach(function(nodeId) {\n                                                positionMap.set(nodeId, positionMap.get(nodeId) - diff);\n                                            });\n                                        }\n                                    } else {\n                                        positionMap.set(neighbor.id, positionMap.get(currentNode) + neighbor.gap);\n                                    }\n                                }\n                                inDegrees.set(neighbor.id, inDegrees.get(neighbor.id) - 1);\n                                if (inDegrees.get(neighbor.id) == 0) {\n                                    queue.push(neighbor.id);\n                                }\n                                if (fixedNodes) {\n                                    pastMap.set(neighbor.id, setUnion(pastMap.get(currentNode), pastMap.get(neighbor.id)));\n                                }\n                            });\n                        };\n                        while(queue.length != 0){\n                            _loop();\n                        }\n                        // readjust position of the nodes after enforcement\n                        if (fixedNodes) {\n                            // find indegree count for each node\n                            var sinkNodes = new Set();\n                            graph.forEach(function(value, key) {\n                                if (value.length == 0) {\n                                    sinkNodes.add(key);\n                                }\n                            });\n                            var _components = [];\n                            pastMap.forEach(function(value, key) {\n                                if (sinkNodes.has(key)) {\n                                    var isFixedComponent = false;\n                                    var _iteratorNormalCompletion2 = true;\n                                    var _didIteratorError2 = false;\n                                    var _iteratorError2 = undefined;\n                                    try {\n                                        for(var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){\n                                            var nodeId = _step2.value;\n                                            if (fixedNodes.has(nodeId)) {\n                                                isFixedComponent = true;\n                                            }\n                                        }\n                                    } catch (err) {\n                                        _didIteratorError2 = true;\n                                        _iteratorError2 = err;\n                                    } finally{\n                                        try {\n                                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                                _iterator2.return();\n                                            }\n                                        } finally{\n                                            if (_didIteratorError2) {\n                                                throw _iteratorError2;\n                                            }\n                                        }\n                                    }\n                                    if (!isFixedComponent) {\n                                        var isExist = false;\n                                        var existAt = void 0;\n                                        _components.forEach(function(component, index) {\n                                            if (component.has([].concat(_toConsumableArray(value))[0])) {\n                                                isExist = true;\n                                                existAt = index;\n                                            }\n                                        });\n                                        if (!isExist) {\n                                            _components.push(new Set(value));\n                                        } else {\n                                            value.forEach(function(ele) {\n                                                _components[existAt].add(ele);\n                                            });\n                                        }\n                                    }\n                                }\n                            });\n                            _components.forEach(function(component, index) {\n                                var minBefore = Number.POSITIVE_INFINITY;\n                                var minAfter = Number.POSITIVE_INFINITY;\n                                var maxBefore = Number.NEGATIVE_INFINITY;\n                                var maxAfter = Number.NEGATIVE_INFINITY;\n                                var _iteratorNormalCompletion3 = true;\n                                var _didIteratorError3 = false;\n                                var _iteratorError3 = undefined;\n                                try {\n                                    for(var _iterator3 = component[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true){\n                                        var nodeId = _step3.value;\n                                        var posBefore = void 0;\n                                        if (direction == \"horizontal\") {\n                                            posBefore = nodeIndexes.has(nodeId) ? xCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);\n                                        } else {\n                                            posBefore = nodeIndexes.has(nodeId) ? yCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);\n                                        }\n                                        var posAfter = positionMap.get(nodeId);\n                                        if (posBefore < minBefore) {\n                                            minBefore = posBefore;\n                                        }\n                                        if (posBefore > maxBefore) {\n                                            maxBefore = posBefore;\n                                        }\n                                        if (posAfter < minAfter) {\n                                            minAfter = posAfter;\n                                        }\n                                        if (posAfter > maxAfter) {\n                                            maxAfter = posAfter;\n                                        }\n                                    }\n                                } catch (err) {\n                                    _didIteratorError3 = true;\n                                    _iteratorError3 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                            _iterator3.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError3) {\n                                            throw _iteratorError3;\n                                        }\n                                    }\n                                }\n                                var diff = (minBefore + maxBefore) / 2 - (minAfter + maxAfter) / 2;\n                                var _iteratorNormalCompletion4 = true;\n                                var _didIteratorError4 = false;\n                                var _iteratorError4 = undefined;\n                                try {\n                                    for(var _iterator4 = component[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true){\n                                        var _nodeId = _step4.value;\n                                        positionMap.set(_nodeId, positionMap.get(_nodeId) + diff);\n                                    }\n                                } catch (err) {\n                                    _didIteratorError4 = true;\n                                    _iteratorError4 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                            _iterator4.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError4) {\n                                            throw _iteratorError4;\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                        return positionMap;\n                    };\n                    // find transformation based on rel. placement constraints if there are both alignment and rel. placement constraints\n                    // or if there are only rel. placement contraints where the largest component isn't sufficiently large\n                    var applyReflectionForRelativePlacement = function applyReflectionForRelativePlacement(relativePlacementConstraints) {\n                        // variables to count votes\n                        var reflectOnY = 0, notReflectOnY = 0;\n                        var reflectOnX = 0, notReflectOnX = 0;\n                        relativePlacementConstraints.forEach(function(constraint) {\n                            if (constraint.left) {\n                                xCoords[nodeIndexes.get(constraint.left)] - xCoords[nodeIndexes.get(constraint.right)] >= 0 ? reflectOnY++ : notReflectOnY++;\n                            } else {\n                                yCoords[nodeIndexes.get(constraint.top)] - yCoords[nodeIndexes.get(constraint.bottom)] >= 0 ? reflectOnX++ : notReflectOnX++;\n                            }\n                        });\n                        if (reflectOnY > notReflectOnY && reflectOnX > notReflectOnX) {\n                            for(var _i = 0; _i < nodeIndexes.size; _i++){\n                                xCoords[_i] = -1 * xCoords[_i];\n                                yCoords[_i] = -1 * yCoords[_i];\n                            }\n                        } else if (reflectOnY > notReflectOnY) {\n                            for(var _i2 = 0; _i2 < nodeIndexes.size; _i2++){\n                                xCoords[_i2] = -1 * xCoords[_i2];\n                            }\n                        } else if (reflectOnX > notReflectOnX) {\n                            for(var _i3 = 0; _i3 < nodeIndexes.size; _i3++){\n                                yCoords[_i3] = -1 * yCoords[_i3];\n                            }\n                        }\n                    };\n                    // find weakly connected components in undirected graph\n                    var findComponents = function findComponents(graph) {\n                        // find weakly connected components in dag\n                        var components = [];\n                        var queue = new LinkedList();\n                        var visited = new Set();\n                        var count = 0;\n                        graph.forEach(function(value, key) {\n                            if (!visited.has(key)) {\n                                components[count] = [];\n                                var _currentNode = key;\n                                queue.push(_currentNode);\n                                visited.add(_currentNode);\n                                components[count].push(_currentNode);\n                                while(queue.length != 0){\n                                    _currentNode = queue.shift();\n                                    var neighbors = graph.get(_currentNode);\n                                    neighbors.forEach(function(neighbor) {\n                                        if (!visited.has(neighbor.id)) {\n                                            queue.push(neighbor.id);\n                                            visited.add(neighbor.id);\n                                            components[count].push(neighbor.id);\n                                        }\n                                    });\n                                }\n                                count++;\n                            }\n                        });\n                        return components;\n                    };\n                    // return undirected version of given dag\n                    var dagToUndirected = function dagToUndirected(dag) {\n                        var undirected = new Map();\n                        dag.forEach(function(value, key) {\n                            undirected.set(key, []);\n                        });\n                        dag.forEach(function(value, key) {\n                            value.forEach(function(adjacent) {\n                                undirected.get(key).push(adjacent);\n                                undirected.get(adjacent.id).push({\n                                    id: key,\n                                    gap: adjacent.gap,\n                                    direction: adjacent.direction\n                                });\n                            });\n                        });\n                        return undirected;\n                    };\n                    // return reversed (directions inverted) version of given dag\n                    var dagToReversed = function dagToReversed(dag) {\n                        var reversed = new Map();\n                        dag.forEach(function(value, key) {\n                            reversed.set(key, []);\n                        });\n                        dag.forEach(function(value, key) {\n                            value.forEach(function(adjacent) {\n                                reversed.get(adjacent.id).push({\n                                    id: key,\n                                    gap: adjacent.gap,\n                                    direction: adjacent.direction\n                                });\n                            });\n                        });\n                        return reversed;\n                    };\n                    /****  apply transformation to the initial draft layout to better align with constrained nodes ****/ // solve the Orthogonal Procrustean Problem to rotate and/or reflect initial draft layout\n                    // here we follow the solution in Chapter 20.2 of Borg, I. & Groenen, P. (2005) Modern Multidimensional Scaling: Theory and Applications \n                    /* construct source and target configurations */ var targetMatrix = []; // A - target configuration\n                    var sourceMatrix = []; // B - source configuration \n                    var standardTransformation = false; // false for no transformation, true for standart (Procrustes) transformation (rotation and/or reflection)\n                    var reflectionType = false; // false/true for reflection check, 'reflectOnX', 'reflectOnY' or 'reflectOnBoth' for reflection type if necessary\n                    var fixedNodes = new Set();\n                    var dag = new Map(); // adjacency list to keep directed acyclic graph (dag) that consists of relative placement constraints\n                    var dagUndirected = new Map(); // undirected version of the dag\n                    var components = []; // weakly connected components\n                    // fill fixedNodes collection to use later\n                    if (constraints.fixedNodeConstraint) {\n                        constraints.fixedNodeConstraint.forEach(function(nodeData) {\n                            fixedNodes.add(nodeData.nodeId);\n                        });\n                    }\n                    // construct dag from relative placement constraints \n                    if (constraints.relativePlacementConstraint) {\n                        // construct both directed and undirected version of the dag\n                        constraints.relativePlacementConstraint.forEach(function(constraint) {\n                            if (constraint.left) {\n                                if (dag.has(constraint.left)) {\n                                    dag.get(constraint.left).push({\n                                        id: constraint.right,\n                                        gap: constraint.gap,\n                                        direction: \"horizontal\"\n                                    });\n                                } else {\n                                    dag.set(constraint.left, [\n                                        {\n                                            id: constraint.right,\n                                            gap: constraint.gap,\n                                            direction: \"horizontal\"\n                                        }\n                                    ]);\n                                }\n                                if (!dag.has(constraint.right)) {\n                                    dag.set(constraint.right, []);\n                                }\n                            } else {\n                                if (dag.has(constraint.top)) {\n                                    dag.get(constraint.top).push({\n                                        id: constraint.bottom,\n                                        gap: constraint.gap,\n                                        direction: \"vertical\"\n                                    });\n                                } else {\n                                    dag.set(constraint.top, [\n                                        {\n                                            id: constraint.bottom,\n                                            gap: constraint.gap,\n                                            direction: \"vertical\"\n                                        }\n                                    ]);\n                                }\n                                if (!dag.has(constraint.bottom)) {\n                                    dag.set(constraint.bottom, []);\n                                }\n                            }\n                        });\n                        dagUndirected = dagToUndirected(dag);\n                        components = findComponents(dagUndirected);\n                    }\n                    if (CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING) {\n                        // first check fixed node constraint\n                        if (constraints.fixedNodeConstraint && constraints.fixedNodeConstraint.length > 1) {\n                            constraints.fixedNodeConstraint.forEach(function(nodeData, i) {\n                                targetMatrix[i] = [\n                                    nodeData.position.x,\n                                    nodeData.position.y\n                                ];\n                                sourceMatrix[i] = [\n                                    xCoords[nodeIndexes.get(nodeData.nodeId)],\n                                    yCoords[nodeIndexes.get(nodeData.nodeId)]\n                                ];\n                            });\n                            standardTransformation = true;\n                        } else if (constraints.alignmentConstraint) {\n                            (function() {\n                                // then check alignment constraint\n                                var count = 0;\n                                if (constraints.alignmentConstraint.vertical) {\n                                    var verticalAlign = constraints.alignmentConstraint.vertical;\n                                    var _loop2 = function _loop2(_i4) {\n                                        var alignmentSet = new Set();\n                                        verticalAlign[_i4].forEach(function(nodeId) {\n                                            alignmentSet.add(nodeId);\n                                        });\n                                        var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function(x) {\n                                            return fixedNodes.has(x);\n                                        }));\n                                        var xPos = void 0;\n                                        if (intersection.size > 0) xPos = xCoords[nodeIndexes.get(intersection.values().next().value)];\n                                        else xPos = calculateAvgPosition(alignmentSet).x;\n                                        verticalAlign[_i4].forEach(function(nodeId) {\n                                            targetMatrix[count] = [\n                                                xPos,\n                                                yCoords[nodeIndexes.get(nodeId)]\n                                            ];\n                                            sourceMatrix[count] = [\n                                                xCoords[nodeIndexes.get(nodeId)],\n                                                yCoords[nodeIndexes.get(nodeId)]\n                                            ];\n                                            count++;\n                                        });\n                                    };\n                                    for(var _i4 = 0; _i4 < verticalAlign.length; _i4++){\n                                        _loop2(_i4);\n                                    }\n                                    standardTransformation = true;\n                                }\n                                if (constraints.alignmentConstraint.horizontal) {\n                                    var horizontalAlign = constraints.alignmentConstraint.horizontal;\n                                    var _loop3 = function _loop3(_i5) {\n                                        var alignmentSet = new Set();\n                                        horizontalAlign[_i5].forEach(function(nodeId) {\n                                            alignmentSet.add(nodeId);\n                                        });\n                                        var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function(x) {\n                                            return fixedNodes.has(x);\n                                        }));\n                                        var yPos = void 0;\n                                        if (intersection.size > 0) yPos = xCoords[nodeIndexes.get(intersection.values().next().value)];\n                                        else yPos = calculateAvgPosition(alignmentSet).y;\n                                        horizontalAlign[_i5].forEach(function(nodeId) {\n                                            targetMatrix[count] = [\n                                                xCoords[nodeIndexes.get(nodeId)],\n                                                yPos\n                                            ];\n                                            sourceMatrix[count] = [\n                                                xCoords[nodeIndexes.get(nodeId)],\n                                                yCoords[nodeIndexes.get(nodeId)]\n                                            ];\n                                            count++;\n                                        });\n                                    };\n                                    for(var _i5 = 0; _i5 < horizontalAlign.length; _i5++){\n                                        _loop3(_i5);\n                                    }\n                                    standardTransformation = true;\n                                }\n                                if (constraints.relativePlacementConstraint) {\n                                    reflectionType = true;\n                                }\n                            })();\n                        } else if (constraints.relativePlacementConstraint) {\n                            // finally check relative placement constraint\n                            // find largest component in dag\n                            var largestComponentSize = 0;\n                            var largestComponentIndex = 0;\n                            for(var _i6 = 0; _i6 < components.length; _i6++){\n                                if (components[_i6].length > largestComponentSize) {\n                                    largestComponentSize = components[_i6].length;\n                                    largestComponentIndex = _i6;\n                                }\n                            }\n                            // if largest component isn't dominant, then take the votes for reflection\n                            if (largestComponentSize < dagUndirected.size / 2) {\n                                applyReflectionForRelativePlacement(constraints.relativePlacementConstraint);\n                                standardTransformation = false;\n                                reflectionType = false;\n                            } else {\n                                // use largest component for transformation\n                                // construct horizontal and vertical subgraphs in the largest component\n                                var subGraphOnHorizontal = new Map();\n                                var subGraphOnVertical = new Map();\n                                var constraintsInlargestComponent = [];\n                                components[largestComponentIndex].forEach(function(nodeId) {\n                                    dag.get(nodeId).forEach(function(adjacent) {\n                                        if (adjacent.direction == \"horizontal\") {\n                                            if (subGraphOnHorizontal.has(nodeId)) {\n                                                subGraphOnHorizontal.get(nodeId).push(adjacent);\n                                            } else {\n                                                subGraphOnHorizontal.set(nodeId, [\n                                                    adjacent\n                                                ]);\n                                            }\n                                            if (!subGraphOnHorizontal.has(adjacent.id)) {\n                                                subGraphOnHorizontal.set(adjacent.id, []);\n                                            }\n                                            constraintsInlargestComponent.push({\n                                                left: nodeId,\n                                                right: adjacent.id\n                                            });\n                                        } else {\n                                            if (subGraphOnVertical.has(nodeId)) {\n                                                subGraphOnVertical.get(nodeId).push(adjacent);\n                                            } else {\n                                                subGraphOnVertical.set(nodeId, [\n                                                    adjacent\n                                                ]);\n                                            }\n                                            if (!subGraphOnVertical.has(adjacent.id)) {\n                                                subGraphOnVertical.set(adjacent.id, []);\n                                            }\n                                            constraintsInlargestComponent.push({\n                                                top: nodeId,\n                                                bottom: adjacent.id\n                                            });\n                                        }\n                                    });\n                                });\n                                applyReflectionForRelativePlacement(constraintsInlargestComponent);\n                                reflectionType = false;\n                                // calculate appropriate positioning for subgraphs\n                                var positionMapHorizontal = findAppropriatePositionForRelativePlacement(subGraphOnHorizontal, \"horizontal\");\n                                var positionMapVertical = findAppropriatePositionForRelativePlacement(subGraphOnVertical, \"vertical\");\n                                // construct source and target configuration\n                                components[largestComponentIndex].forEach(function(nodeId, i) {\n                                    sourceMatrix[i] = [\n                                        xCoords[nodeIndexes.get(nodeId)],\n                                        yCoords[nodeIndexes.get(nodeId)]\n                                    ];\n                                    targetMatrix[i] = [];\n                                    if (positionMapHorizontal.has(nodeId)) {\n                                        targetMatrix[i][0] = positionMapHorizontal.get(nodeId);\n                                    } else {\n                                        targetMatrix[i][0] = xCoords[nodeIndexes.get(nodeId)];\n                                    }\n                                    if (positionMapVertical.has(nodeId)) {\n                                        targetMatrix[i][1] = positionMapVertical.get(nodeId);\n                                    } else {\n                                        targetMatrix[i][1] = yCoords[nodeIndexes.get(nodeId)];\n                                    }\n                                });\n                                standardTransformation = true;\n                            }\n                        }\n                        // if transformation is required, then calculate and apply transformation matrix\n                        if (standardTransformation) {\n                            /* calculate transformation matrix */ var transformationMatrix = void 0;\n                            var targetMatrixTranspose = Matrix.transpose(targetMatrix); // A'\n                            var sourceMatrixTranspose = Matrix.transpose(sourceMatrix); // B'\n                            // centralize transpose matrices\n                            for(var _i7 = 0; _i7 < targetMatrixTranspose.length; _i7++){\n                                targetMatrixTranspose[_i7] = Matrix.multGamma(targetMatrixTranspose[_i7]);\n                                sourceMatrixTranspose[_i7] = Matrix.multGamma(sourceMatrixTranspose[_i7]);\n                            }\n                            // do actual calculation for transformation matrix\n                            var tempMatrix = Matrix.multMat(targetMatrixTranspose, Matrix.transpose(sourceMatrixTranspose)); // tempMatrix = A'B\n                            var SVDResult = SVD.svd(tempMatrix); // SVD(A'B) = USV', svd function returns U, S and V \n                            transformationMatrix = Matrix.multMat(SVDResult.V, Matrix.transpose(SVDResult.U)); // transformationMatrix = T = VU'\n                            /* apply found transformation matrix to obtain final draft layout */ for(var _i8 = 0; _i8 < nodeIndexes.size; _i8++){\n                                var temp1 = [\n                                    xCoords[_i8],\n                                    yCoords[_i8]\n                                ];\n                                var temp2 = [\n                                    transformationMatrix[0][0],\n                                    transformationMatrix[1][0]\n                                ];\n                                var temp3 = [\n                                    transformationMatrix[0][1],\n                                    transformationMatrix[1][1]\n                                ];\n                                xCoords[_i8] = Matrix.dotProduct(temp1, temp2);\n                                yCoords[_i8] = Matrix.dotProduct(temp1, temp3);\n                            }\n                            // applied only both alignment and rel. placement constraints exist\n                            if (reflectionType) {\n                                applyReflectionForRelativePlacement(constraints.relativePlacementConstraint);\n                            }\n                        }\n                    }\n                    if (CoSEConstants.ENFORCE_CONSTRAINTS) {\n                        /****  enforce constraints on the transformed draft layout ****/ /* first enforce fixed node constraint */ if (constraints.fixedNodeConstraint && constraints.fixedNodeConstraint.length > 0) {\n                            var translationAmount = {\n                                x: 0,\n                                y: 0\n                            };\n                            constraints.fixedNodeConstraint.forEach(function(nodeData, i) {\n                                var posInTheory = {\n                                    x: xCoords[nodeIndexes.get(nodeData.nodeId)],\n                                    y: yCoords[nodeIndexes.get(nodeData.nodeId)]\n                                };\n                                var posDesired = nodeData.position;\n                                var posDiff = calculatePositionDiff(posDesired, posInTheory);\n                                translationAmount.x += posDiff.x;\n                                translationAmount.y += posDiff.y;\n                            });\n                            translationAmount.x /= constraints.fixedNodeConstraint.length;\n                            translationAmount.y /= constraints.fixedNodeConstraint.length;\n                            xCoords.forEach(function(value, i) {\n                                xCoords[i] += translationAmount.x;\n                            });\n                            yCoords.forEach(function(value, i) {\n                                yCoords[i] += translationAmount.y;\n                            });\n                            constraints.fixedNodeConstraint.forEach(function(nodeData) {\n                                xCoords[nodeIndexes.get(nodeData.nodeId)] = nodeData.position.x;\n                                yCoords[nodeIndexes.get(nodeData.nodeId)] = nodeData.position.y;\n                            });\n                        }\n                        /* then enforce alignment constraint */ if (constraints.alignmentConstraint) {\n                            if (constraints.alignmentConstraint.vertical) {\n                                var xAlign = constraints.alignmentConstraint.vertical;\n                                var _loop4 = function _loop4(_i9) {\n                                    var alignmentSet = new Set();\n                                    xAlign[_i9].forEach(function(nodeId) {\n                                        alignmentSet.add(nodeId);\n                                    });\n                                    var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function(x) {\n                                        return fixedNodes.has(x);\n                                    }));\n                                    var xPos = void 0;\n                                    if (intersection.size > 0) xPos = xCoords[nodeIndexes.get(intersection.values().next().value)];\n                                    else xPos = calculateAvgPosition(alignmentSet).x;\n                                    alignmentSet.forEach(function(nodeId) {\n                                        if (!fixedNodes.has(nodeId)) xCoords[nodeIndexes.get(nodeId)] = xPos;\n                                    });\n                                };\n                                for(var _i9 = 0; _i9 < xAlign.length; _i9++){\n                                    _loop4(_i9);\n                                }\n                            }\n                            if (constraints.alignmentConstraint.horizontal) {\n                                var yAlign = constraints.alignmentConstraint.horizontal;\n                                var _loop5 = function _loop5(_i10) {\n                                    var alignmentSet = new Set();\n                                    yAlign[_i10].forEach(function(nodeId) {\n                                        alignmentSet.add(nodeId);\n                                    });\n                                    var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function(x) {\n                                        return fixedNodes.has(x);\n                                    }));\n                                    var yPos = void 0;\n                                    if (intersection.size > 0) yPos = yCoords[nodeIndexes.get(intersection.values().next().value)];\n                                    else yPos = calculateAvgPosition(alignmentSet).y;\n                                    alignmentSet.forEach(function(nodeId) {\n                                        if (!fixedNodes.has(nodeId)) yCoords[nodeIndexes.get(nodeId)] = yPos;\n                                    });\n                                };\n                                for(var _i10 = 0; _i10 < yAlign.length; _i10++){\n                                    _loop5(_i10);\n                                }\n                            }\n                        }\n                        /* finally enforce relative placement constraint */ if (constraints.relativePlacementConstraint) {\n                            (function() {\n                                var nodeToDummyForVerticalAlignment = new Map();\n                                var nodeToDummyForHorizontalAlignment = new Map();\n                                var dummyToNodeForVerticalAlignment = new Map();\n                                var dummyToNodeForHorizontalAlignment = new Map();\n                                var dummyPositionsForVerticalAlignment = new Map();\n                                var dummyPositionsForHorizontalAlignment = new Map();\n                                var fixedNodesOnHorizontal = new Set();\n                                var fixedNodesOnVertical = new Set();\n                                // fill maps and sets      \n                                fixedNodes.forEach(function(nodeId) {\n                                    fixedNodesOnHorizontal.add(nodeId);\n                                    fixedNodesOnVertical.add(nodeId);\n                                });\n                                if (constraints.alignmentConstraint) {\n                                    if (constraints.alignmentConstraint.vertical) {\n                                        var verticalAlignment = constraints.alignmentConstraint.vertical;\n                                        var _loop6 = function _loop6(_i11) {\n                                            dummyToNodeForVerticalAlignment.set(\"dummy\" + _i11, []);\n                                            verticalAlignment[_i11].forEach(function(nodeId) {\n                                                nodeToDummyForVerticalAlignment.set(nodeId, \"dummy\" + _i11);\n                                                dummyToNodeForVerticalAlignment.get(\"dummy\" + _i11).push(nodeId);\n                                                if (fixedNodes.has(nodeId)) {\n                                                    fixedNodesOnHorizontal.add(\"dummy\" + _i11);\n                                                }\n                                            });\n                                            dummyPositionsForVerticalAlignment.set(\"dummy\" + _i11, xCoords[nodeIndexes.get(verticalAlignment[_i11][0])]);\n                                        };\n                                        for(var _i11 = 0; _i11 < verticalAlignment.length; _i11++){\n                                            _loop6(_i11);\n                                        }\n                                    }\n                                    if (constraints.alignmentConstraint.horizontal) {\n                                        var horizontalAlignment = constraints.alignmentConstraint.horizontal;\n                                        var _loop7 = function _loop7(_i12) {\n                                            dummyToNodeForHorizontalAlignment.set(\"dummy\" + _i12, []);\n                                            horizontalAlignment[_i12].forEach(function(nodeId) {\n                                                nodeToDummyForHorizontalAlignment.set(nodeId, \"dummy\" + _i12);\n                                                dummyToNodeForHorizontalAlignment.get(\"dummy\" + _i12).push(nodeId);\n                                                if (fixedNodes.has(nodeId)) {\n                                                    fixedNodesOnVertical.add(\"dummy\" + _i12);\n                                                }\n                                            });\n                                            dummyPositionsForHorizontalAlignment.set(\"dummy\" + _i12, yCoords[nodeIndexes.get(horizontalAlignment[_i12][0])]);\n                                        };\n                                        for(var _i12 = 0; _i12 < horizontalAlignment.length; _i12++){\n                                            _loop7(_i12);\n                                        }\n                                    }\n                                }\n                                // construct horizontal and vertical dags (subgraphs) from overall dag\n                                var dagOnHorizontal = new Map();\n                                var dagOnVertical = new Map();\n                                var _loop8 = function _loop8(nodeId) {\n                                    dag.get(nodeId).forEach(function(adjacent) {\n                                        var sourceId = void 0;\n                                        var targetNode = void 0;\n                                        if (adjacent[\"direction\"] == \"horizontal\") {\n                                            sourceId = nodeToDummyForVerticalAlignment.get(nodeId) ? nodeToDummyForVerticalAlignment.get(nodeId) : nodeId;\n                                            if (nodeToDummyForVerticalAlignment.get(adjacent.id)) {\n                                                targetNode = {\n                                                    id: nodeToDummyForVerticalAlignment.get(adjacent.id),\n                                                    gap: adjacent.gap,\n                                                    direction: adjacent.direction\n                                                };\n                                            } else {\n                                                targetNode = adjacent;\n                                            }\n                                            if (dagOnHorizontal.has(sourceId)) {\n                                                dagOnHorizontal.get(sourceId).push(targetNode);\n                                            } else {\n                                                dagOnHorizontal.set(sourceId, [\n                                                    targetNode\n                                                ]);\n                                            }\n                                            if (!dagOnHorizontal.has(targetNode.id)) {\n                                                dagOnHorizontal.set(targetNode.id, []);\n                                            }\n                                        } else {\n                                            sourceId = nodeToDummyForHorizontalAlignment.get(nodeId) ? nodeToDummyForHorizontalAlignment.get(nodeId) : nodeId;\n                                            if (nodeToDummyForHorizontalAlignment.get(adjacent.id)) {\n                                                targetNode = {\n                                                    id: nodeToDummyForHorizontalAlignment.get(adjacent.id),\n                                                    gap: adjacent.gap,\n                                                    direction: adjacent.direction\n                                                };\n                                            } else {\n                                                targetNode = adjacent;\n                                            }\n                                            if (dagOnVertical.has(sourceId)) {\n                                                dagOnVertical.get(sourceId).push(targetNode);\n                                            } else {\n                                                dagOnVertical.set(sourceId, [\n                                                    targetNode\n                                                ]);\n                                            }\n                                            if (!dagOnVertical.has(targetNode.id)) {\n                                                dagOnVertical.set(targetNode.id, []);\n                                            }\n                                        }\n                                    });\n                                };\n                                var _iteratorNormalCompletion5 = true;\n                                var _didIteratorError5 = false;\n                                var _iteratorError5 = undefined;\n                                try {\n                                    for(var _iterator5 = dag.keys()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true){\n                                        var nodeId = _step5.value;\n                                        _loop8(nodeId);\n                                    }\n                                // find source nodes of each component in horizontal and vertical dags\n                                } catch (err) {\n                                    _didIteratorError5 = true;\n                                    _iteratorError5 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                                            _iterator5.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError5) {\n                                            throw _iteratorError5;\n                                        }\n                                    }\n                                }\n                                var undirectedOnHorizontal = dagToUndirected(dagOnHorizontal);\n                                var undirectedOnVertical = dagToUndirected(dagOnVertical);\n                                var componentsOnHorizontal = findComponents(undirectedOnHorizontal);\n                                var componentsOnVertical = findComponents(undirectedOnVertical);\n                                var reversedDagOnHorizontal = dagToReversed(dagOnHorizontal);\n                                var reversedDagOnVertical = dagToReversed(dagOnVertical);\n                                var componentSourcesOnHorizontal = [];\n                                var componentSourcesOnVertical = [];\n                                componentsOnHorizontal.forEach(function(component, index) {\n                                    componentSourcesOnHorizontal[index] = [];\n                                    component.forEach(function(nodeId) {\n                                        if (reversedDagOnHorizontal.get(nodeId).length == 0) {\n                                            componentSourcesOnHorizontal[index].push(nodeId);\n                                        }\n                                    });\n                                });\n                                componentsOnVertical.forEach(function(component, index) {\n                                    componentSourcesOnVertical[index] = [];\n                                    component.forEach(function(nodeId) {\n                                        if (reversedDagOnVertical.get(nodeId).length == 0) {\n                                            componentSourcesOnVertical[index].push(nodeId);\n                                        }\n                                    });\n                                });\n                                // calculate appropriate positioning for subgraphs\n                                var positionMapHorizontal = findAppropriatePositionForRelativePlacement(dagOnHorizontal, \"horizontal\", fixedNodesOnHorizontal, dummyPositionsForVerticalAlignment, componentSourcesOnHorizontal);\n                                var positionMapVertical = findAppropriatePositionForRelativePlacement(dagOnVertical, \"vertical\", fixedNodesOnVertical, dummyPositionsForHorizontalAlignment, componentSourcesOnVertical);\n                                // update positions of the nodes based on relative placement constraints\n                                var _loop9 = function _loop9(key) {\n                                    if (dummyToNodeForVerticalAlignment.get(key)) {\n                                        dummyToNodeForVerticalAlignment.get(key).forEach(function(nodeId) {\n                                            xCoords[nodeIndexes.get(nodeId)] = positionMapHorizontal.get(key);\n                                        });\n                                    } else {\n                                        xCoords[nodeIndexes.get(key)] = positionMapHorizontal.get(key);\n                                    }\n                                };\n                                var _iteratorNormalCompletion6 = true;\n                                var _didIteratorError6 = false;\n                                var _iteratorError6 = undefined;\n                                try {\n                                    for(var _iterator6 = positionMapHorizontal.keys()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true){\n                                        var key = _step6.value;\n                                        _loop9(key);\n                                    }\n                                } catch (err) {\n                                    _didIteratorError6 = true;\n                                    _iteratorError6 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                                            _iterator6.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError6) {\n                                            throw _iteratorError6;\n                                        }\n                                    }\n                                }\n                                var _loop10 = function _loop10(key) {\n                                    if (dummyToNodeForHorizontalAlignment.get(key)) {\n                                        dummyToNodeForHorizontalAlignment.get(key).forEach(function(nodeId) {\n                                            yCoords[nodeIndexes.get(nodeId)] = positionMapVertical.get(key);\n                                        });\n                                    } else {\n                                        yCoords[nodeIndexes.get(key)] = positionMapVertical.get(key);\n                                    }\n                                };\n                                var _iteratorNormalCompletion7 = true;\n                                var _didIteratorError7 = false;\n                                var _iteratorError7 = undefined;\n                                try {\n                                    for(var _iterator7 = positionMapVertical.keys()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true){\n                                        var key = _step7.value;\n                                        _loop10(key);\n                                    }\n                                } catch (err) {\n                                    _didIteratorError7 = true;\n                                    _iteratorError7 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                                            _iterator7.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError7) {\n                                            throw _iteratorError7;\n                                        }\n                                    }\n                                }\n                            })();\n                        }\n                    }\n                    // assign new coordinates to nodes after constraint handling\n                    for(var _i13 = 0; _i13 < allNodes.length; _i13++){\n                        var _node = allNodes[_i13];\n                        if (_node.getChild() == null) {\n                            _node.setCenter(xCoords[nodeIndexes.get(_node.id)], yCoords[nodeIndexes.get(_node.id)]);\n                        }\n                    }\n                };\n                module1.exports = ConstraintHandler;\n            /***/ },\n            /***/ 551: /***/ (module1)=>{\n                module1.exports = __WEBPACK_EXTERNAL_MODULE__551__;\n            /***/ }\n        };\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_181000__(moduleId) {\n            /******/ // Check if module is in cache\n            /******/ var cachedModule = __webpack_module_cache__[moduleId];\n            /******/ if (cachedModule !== undefined) {\n                /******/ return cachedModule.exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = __webpack_module_cache__[moduleId] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId](module1, module1.exports, __nested_webpack_require_181000__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /************************************************************************/ /******/ /******/ // startup\n        /******/ // Load entry module and return exports\n        /******/ // This entry module is referenced by other modules so it can't be inlined\n        /******/ var __nested_webpack_exports__ = __nested_webpack_require_181000__(45);\n        /******/ /******/ return __nested_webpack_exports__;\n    /******/ })();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cytoscape-fcose/node_modules/cose-base/cose-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cytoscape-fcose/node_modules/layout-base/layout-base.js":
/*!******************************************************************************!*\
  !*** ./node_modules/cytoscape-fcose/node_modules/layout-base/layout-base.js ***!
  \******************************************************************************/
/***/ (function(module) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory();\n    else {}\n})(this, function() {\n    return /******/ function(modules) {\n        /******/ // The module cache\n        /******/ var installedModules = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_561__(moduleId) {\n            /******/ /******/ // Check if module is in cache\n            /******/ if (installedModules[moduleId]) {\n                /******/ return installedModules[moduleId].exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = installedModules[moduleId] = {\n                /******/ i: moduleId,\n                /******/ l: false,\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_561__);\n            /******/ /******/ // Flag the module as loaded\n            /******/ module1.l = true;\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n        /******/ __nested_webpack_require_561__.m = modules;\n        /******/ /******/ // expose the module cache\n        /******/ __nested_webpack_require_561__.c = installedModules;\n        /******/ /******/ // identity function for calling harmony imports with the correct context\n        /******/ __nested_webpack_require_561__.i = function(value) {\n            return value;\n        };\n        /******/ /******/ // define getter function for harmony exports\n        /******/ __nested_webpack_require_561__.d = function(exports1, name, getter) {\n            /******/ if (!__nested_webpack_require_561__.o(exports1, name)) {\n                /******/ Object.defineProperty(exports1, name, {\n                    /******/ configurable: false,\n                    /******/ enumerable: true,\n                    /******/ get: getter\n                });\n            /******/ }\n        /******/ };\n        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n        /******/ __nested_webpack_require_561__.n = function(module1) {\n            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {\n                return module1[\"default\"];\n            } : /******/ function getModuleExports() {\n                return module1;\n            };\n            /******/ __nested_webpack_require_561__.d(getter, \"a\", getter);\n            /******/ return getter;\n        /******/ };\n        /******/ /******/ // Object.prototype.hasOwnProperty.call\n        /******/ __nested_webpack_require_561__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n        };\n        /******/ /******/ // __webpack_public_path__\n        /******/ __nested_webpack_require_561__.p = \"\";\n        /******/ /******/ // Load entry module and return exports\n        /******/ return __nested_webpack_require_561__(__nested_webpack_require_561__.s = 28);\n    /******/ }([\n        /* 0 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function LayoutConstants() {}\n            /**\r\n * Layout Quality: 0:draft, 1:default, 2:proof\r\n */ LayoutConstants.QUALITY = 1;\n            /**\r\n * Default parameters\r\n */ LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;\n            LayoutConstants.DEFAULT_INCREMENTAL = false;\n            LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;\n            LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;\n            LayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;\n            LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;\n            // -----------------------------------------------------------------------------\n            // Section: General other constants\n            // -----------------------------------------------------------------------------\n            /*\r\n * Margins of a graph to be applied on bouding rectangle of its contents. We\r\n * assume margins on all four sides to be uniform.\r\n */ LayoutConstants.DEFAULT_GRAPH_MARGIN = 15;\n            /*\r\n * Whether to consider labels in node dimensions or not\r\n */ LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;\n            /*\r\n * Default dimension of a non-compound node.\r\n */ LayoutConstants.SIMPLE_NODE_SIZE = 40;\n            /*\r\n * Default dimension of a non-compound node.\r\n */ LayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;\n            /*\r\n * Empty compound node size. When a compound node is empty, its both\r\n * dimensions should be of this value.\r\n */ LayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;\n            /*\r\n * Minimum length that an edge should take during layout\r\n */ LayoutConstants.MIN_EDGE_LENGTH = 1;\n            /*\r\n * World boundaries that layout operates on\r\n */ LayoutConstants.WORLD_BOUNDARY = 1000000;\n            /*\r\n * World boundaries that random positioning can be performed with\r\n */ LayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1000;\n            /*\r\n * Coordinates of the world center\r\n */ LayoutConstants.WORLD_CENTER_X = 1200;\n            LayoutConstants.WORLD_CENTER_Y = 900;\n            module1.exports = LayoutConstants;\n        /***/ },\n        /* 1 */ /***/ function(module1, exports1, __nested_webpack_require_5686__) {\n            \"use strict\";\n            var LGraphObject = __nested_webpack_require_5686__(2);\n            var IGeometry = __nested_webpack_require_5686__(8);\n            var IMath = __nested_webpack_require_5686__(9);\n            function LEdge(source, target, vEdge) {\n                LGraphObject.call(this, vEdge);\n                this.isOverlapingSourceAndTarget = false;\n                this.vGraphObject = vEdge;\n                this.bendpoints = [];\n                this.source = source;\n                this.target = target;\n            }\n            LEdge.prototype = Object.create(LGraphObject.prototype);\n            for(var prop in LGraphObject){\n                LEdge[prop] = LGraphObject[prop];\n            }\n            LEdge.prototype.getSource = function() {\n                return this.source;\n            };\n            LEdge.prototype.getTarget = function() {\n                return this.target;\n            };\n            LEdge.prototype.isInterGraph = function() {\n                return this.isInterGraph;\n            };\n            LEdge.prototype.getLength = function() {\n                return this.length;\n            };\n            LEdge.prototype.isOverlapingSourceAndTarget = function() {\n                return this.isOverlapingSourceAndTarget;\n            };\n            LEdge.prototype.getBendpoints = function() {\n                return this.bendpoints;\n            };\n            LEdge.prototype.getLca = function() {\n                return this.lca;\n            };\n            LEdge.prototype.getSourceInLca = function() {\n                return this.sourceInLca;\n            };\n            LEdge.prototype.getTargetInLca = function() {\n                return this.targetInLca;\n            };\n            LEdge.prototype.getOtherEnd = function(node) {\n                if (this.source === node) {\n                    return this.target;\n                } else if (this.target === node) {\n                    return this.source;\n                } else {\n                    throw \"Node is not incident with this edge\";\n                }\n            };\n            LEdge.prototype.getOtherEndInGraph = function(node, graph) {\n                var otherEnd = this.getOtherEnd(node);\n                var root = graph.getGraphManager().getRoot();\n                while(true){\n                    if (otherEnd.getOwner() == graph) {\n                        return otherEnd;\n                    }\n                    if (otherEnd.getOwner() == root) {\n                        break;\n                    }\n                    otherEnd = otherEnd.getOwner().getParent();\n                }\n                return null;\n            };\n            LEdge.prototype.updateLength = function() {\n                var clipPointCoordinates = new Array(4);\n                this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);\n                if (!this.isOverlapingSourceAndTarget) {\n                    this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];\n                    this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];\n                    if (Math.abs(this.lengthX) < 1.0) {\n                        this.lengthX = IMath.sign(this.lengthX);\n                    }\n                    if (Math.abs(this.lengthY) < 1.0) {\n                        this.lengthY = IMath.sign(this.lengthY);\n                    }\n                    this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n                }\n            };\n            LEdge.prototype.updateLengthSimple = function() {\n                this.lengthX = this.target.getCenterX() - this.source.getCenterX();\n                this.lengthY = this.target.getCenterY() - this.source.getCenterY();\n                if (Math.abs(this.lengthX) < 1.0) {\n                    this.lengthX = IMath.sign(this.lengthX);\n                }\n                if (Math.abs(this.lengthY) < 1.0) {\n                    this.lengthY = IMath.sign(this.lengthY);\n                }\n                this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n            };\n            module1.exports = LEdge;\n        /***/ },\n        /* 2 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function LGraphObject(vGraphObject) {\n                this.vGraphObject = vGraphObject;\n            }\n            module1.exports = LGraphObject;\n        /***/ },\n        /* 3 */ /***/ function(module1, exports1, __nested_webpack_require_10226__) {\n            \"use strict\";\n            var LGraphObject = __nested_webpack_require_10226__(2);\n            var Integer = __nested_webpack_require_10226__(10);\n            var RectangleD = __nested_webpack_require_10226__(13);\n            var LayoutConstants = __nested_webpack_require_10226__(0);\n            var RandomSeed = __nested_webpack_require_10226__(16);\n            var PointD = __nested_webpack_require_10226__(5);\n            function LNode(gm, loc, size, vNode) {\n                //Alternative constructor 1 : LNode(LGraphManager gm, Point loc, Dimension size, Object vNode)\n                if (size == null && vNode == null) {\n                    vNode = loc;\n                }\n                LGraphObject.call(this, vNode);\n                //Alternative constructor 2 : LNode(Layout layout, Object vNode)\n                if (gm.graphManager != null) gm = gm.graphManager;\n                this.estimatedSize = Integer.MIN_VALUE;\n                this.inclusionTreeDepth = Integer.MAX_VALUE;\n                this.vGraphObject = vNode;\n                this.edges = [];\n                this.graphManager = gm;\n                if (size != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);\n                else this.rect = new RectangleD();\n            }\n            LNode.prototype = Object.create(LGraphObject.prototype);\n            for(var prop in LGraphObject){\n                LNode[prop] = LGraphObject[prop];\n            }\n            LNode.prototype.getEdges = function() {\n                return this.edges;\n            };\n            LNode.prototype.getChild = function() {\n                return this.child;\n            };\n            LNode.prototype.getOwner = function() {\n                //  if (this.owner != null) {\n                //    if (!(this.owner == null || this.owner.getNodes().indexOf(this) > -1)) {\n                //      throw \"assert failed\";\n                //    }\n                //  }\n                return this.owner;\n            };\n            LNode.prototype.getWidth = function() {\n                return this.rect.width;\n            };\n            LNode.prototype.setWidth = function(width) {\n                this.rect.width = width;\n            };\n            LNode.prototype.getHeight = function() {\n                return this.rect.height;\n            };\n            LNode.prototype.setHeight = function(height) {\n                this.rect.height = height;\n            };\n            LNode.prototype.getCenterX = function() {\n                return this.rect.x + this.rect.width / 2;\n            };\n            LNode.prototype.getCenterY = function() {\n                return this.rect.y + this.rect.height / 2;\n            };\n            LNode.prototype.getCenter = function() {\n                return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);\n            };\n            LNode.prototype.getLocation = function() {\n                return new PointD(this.rect.x, this.rect.y);\n            };\n            LNode.prototype.getRect = function() {\n                return this.rect;\n            };\n            LNode.prototype.getDiagonal = function() {\n                return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);\n            };\n            /**\n * This method returns half the diagonal length of this node.\n */ LNode.prototype.getHalfTheDiagonal = function() {\n                return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;\n            };\n            LNode.prototype.setRect = function(upperLeft, dimension) {\n                this.rect.x = upperLeft.x;\n                this.rect.y = upperLeft.y;\n                this.rect.width = dimension.width;\n                this.rect.height = dimension.height;\n            };\n            LNode.prototype.setCenter = function(cx, cy) {\n                this.rect.x = cx - this.rect.width / 2;\n                this.rect.y = cy - this.rect.height / 2;\n            };\n            LNode.prototype.setLocation = function(x, y) {\n                this.rect.x = x;\n                this.rect.y = y;\n            };\n            LNode.prototype.moveBy = function(dx, dy) {\n                this.rect.x += dx;\n                this.rect.y += dy;\n            };\n            LNode.prototype.getEdgeListToNode = function(to) {\n                var edgeList = [];\n                var edge;\n                var self = this;\n                self.edges.forEach(function(edge) {\n                    if (edge.target == to) {\n                        if (edge.source != self) throw \"Incorrect edge source!\";\n                        edgeList.push(edge);\n                    }\n                });\n                return edgeList;\n            };\n            LNode.prototype.getEdgesBetween = function(other) {\n                var edgeList = [];\n                var edge;\n                var self = this;\n                self.edges.forEach(function(edge) {\n                    if (!(edge.source == self || edge.target == self)) throw \"Incorrect edge source and/or target\";\n                    if (edge.target == other || edge.source == other) {\n                        edgeList.push(edge);\n                    }\n                });\n                return edgeList;\n            };\n            LNode.prototype.getNeighborsList = function() {\n                var neighbors = new Set();\n                var self = this;\n                self.edges.forEach(function(edge) {\n                    if (edge.source == self) {\n                        neighbors.add(edge.target);\n                    } else {\n                        if (edge.target != self) {\n                            throw \"Incorrect incidency!\";\n                        }\n                        neighbors.add(edge.source);\n                    }\n                });\n                return neighbors;\n            };\n            LNode.prototype.withChildren = function() {\n                var withNeighborsList = new Set();\n                var childNode;\n                var children;\n                withNeighborsList.add(this);\n                if (this.child != null) {\n                    var nodes = this.child.getNodes();\n                    for(var i = 0; i < nodes.length; i++){\n                        childNode = nodes[i];\n                        children = childNode.withChildren();\n                        children.forEach(function(node) {\n                            withNeighborsList.add(node);\n                        });\n                    }\n                }\n                return withNeighborsList;\n            };\n            LNode.prototype.getNoOfChildren = function() {\n                var noOfChildren = 0;\n                var childNode;\n                if (this.child == null) {\n                    noOfChildren = 1;\n                } else {\n                    var nodes = this.child.getNodes();\n                    for(var i = 0; i < nodes.length; i++){\n                        childNode = nodes[i];\n                        noOfChildren += childNode.getNoOfChildren();\n                    }\n                }\n                if (noOfChildren == 0) {\n                    noOfChildren = 1;\n                }\n                return noOfChildren;\n            };\n            LNode.prototype.getEstimatedSize = function() {\n                if (this.estimatedSize == Integer.MIN_VALUE) {\n                    throw \"assert failed\";\n                }\n                return this.estimatedSize;\n            };\n            LNode.prototype.calcEstimatedSize = function() {\n                if (this.child == null) {\n                    return this.estimatedSize = (this.rect.width + this.rect.height) / 2;\n                } else {\n                    this.estimatedSize = this.child.calcEstimatedSize();\n                    this.rect.width = this.estimatedSize;\n                    this.rect.height = this.estimatedSize;\n                    return this.estimatedSize;\n                }\n            };\n            LNode.prototype.scatter = function() {\n                var randomCenterX;\n                var randomCenterY;\n                var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n                var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n                randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;\n                var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n                var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n                randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;\n                this.rect.x = randomCenterX;\n                this.rect.y = randomCenterY;\n            };\n            LNode.prototype.updateBounds = function() {\n                if (this.getChild() == null) {\n                    throw \"assert failed\";\n                }\n                if (this.getChild().getNodes().length != 0) {\n                    // wrap the children nodes by re-arranging the boundaries\n                    var childGraph = this.getChild();\n                    childGraph.updateBounds(true);\n                    this.rect.x = childGraph.getLeft();\n                    this.rect.y = childGraph.getTop();\n                    this.setWidth(childGraph.getRight() - childGraph.getLeft());\n                    this.setHeight(childGraph.getBottom() - childGraph.getTop());\n                    // Update compound bounds considering its label properties    \n                    if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {\n                        var width = childGraph.getRight() - childGraph.getLeft();\n                        var height = childGraph.getBottom() - childGraph.getTop();\n                        if (this.labelWidth) {\n                            if (this.labelPosHorizontal == \"left\") {\n                                this.rect.x -= this.labelWidth;\n                                this.setWidth(width + this.labelWidth);\n                            } else if (this.labelPosHorizontal == \"center\" && this.labelWidth > width) {\n                                this.rect.x -= (this.labelWidth - width) / 2;\n                                this.setWidth(this.labelWidth);\n                            } else if (this.labelPosHorizontal == \"right\") {\n                                this.setWidth(width + this.labelWidth);\n                            }\n                        }\n                        if (this.labelHeight) {\n                            if (this.labelPosVertical == \"top\") {\n                                this.rect.y -= this.labelHeight;\n                                this.setHeight(height + this.labelHeight);\n                            } else if (this.labelPosVertical == \"center\" && this.labelHeight > height) {\n                                this.rect.y -= (this.labelHeight - height) / 2;\n                                this.setHeight(this.labelHeight);\n                            } else if (this.labelPosVertical == \"bottom\") {\n                                this.setHeight(height + this.labelHeight);\n                            }\n                        }\n                    }\n                }\n            };\n            LNode.prototype.getInclusionTreeDepth = function() {\n                if (this.inclusionTreeDepth == Integer.MAX_VALUE) {\n                    throw \"assert failed\";\n                }\n                return this.inclusionTreeDepth;\n            };\n            LNode.prototype.transform = function(trans) {\n                var left = this.rect.x;\n                if (left > LayoutConstants.WORLD_BOUNDARY) {\n                    left = LayoutConstants.WORLD_BOUNDARY;\n                } else if (left < -LayoutConstants.WORLD_BOUNDARY) {\n                    left = -LayoutConstants.WORLD_BOUNDARY;\n                }\n                var top = this.rect.y;\n                if (top > LayoutConstants.WORLD_BOUNDARY) {\n                    top = LayoutConstants.WORLD_BOUNDARY;\n                } else if (top < -LayoutConstants.WORLD_BOUNDARY) {\n                    top = -LayoutConstants.WORLD_BOUNDARY;\n                }\n                var leftTop = new PointD(left, top);\n                var vLeftTop = trans.inverseTransformPoint(leftTop);\n                this.setLocation(vLeftTop.x, vLeftTop.y);\n            };\n            LNode.prototype.getLeft = function() {\n                return this.rect.x;\n            };\n            LNode.prototype.getRight = function() {\n                return this.rect.x + this.rect.width;\n            };\n            LNode.prototype.getTop = function() {\n                return this.rect.y;\n            };\n            LNode.prototype.getBottom = function() {\n                return this.rect.y + this.rect.height;\n            };\n            LNode.prototype.getParent = function() {\n                if (this.owner == null) {\n                    return null;\n                }\n                return this.owner.getParent();\n            };\n            module1.exports = LNode;\n        /***/ },\n        /* 4 */ /***/ function(module1, exports1, __nested_webpack_require_23243__) {\n            \"use strict\";\n            var LayoutConstants = __nested_webpack_require_23243__(0);\n            function FDLayoutConstants() {}\n            //FDLayoutConstants inherits static props in LayoutConstants\n            for(var prop in LayoutConstants){\n                FDLayoutConstants[prop] = LayoutConstants[prop];\n            }\n            FDLayoutConstants.MAX_ITERATIONS = 2500;\n            FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;\n            FDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;\n            FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500.0;\n            FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;\n            FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1.0;\n            FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;\n            FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;\n            FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;\n            FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;\n            FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;\n            FDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;\n            FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1000;\n            FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5000;\n            FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100.0;\n            FDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;\n            FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10.0;\n            FDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;\n            FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;\n            FDLayoutConstants.MIN_EDGE_LENGTH = 1;\n            FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;\n            module1.exports = FDLayoutConstants;\n        /***/ },\n        /* 5 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function PointD(x, y) {\n                if (x == null && y == null) {\n                    this.x = 0;\n                    this.y = 0;\n                } else {\n                    this.x = x;\n                    this.y = y;\n                }\n            }\n            PointD.prototype.getX = function() {\n                return this.x;\n            };\n            PointD.prototype.getY = function() {\n                return this.y;\n            };\n            PointD.prototype.setX = function(x) {\n                this.x = x;\n            };\n            PointD.prototype.setY = function(y) {\n                this.y = y;\n            };\n            PointD.prototype.getDifference = function(pt) {\n                return new DimensionD(this.x - pt.x, this.y - pt.y);\n            };\n            PointD.prototype.getCopy = function() {\n                return new PointD(this.x, this.y);\n            };\n            PointD.prototype.translate = function(dim) {\n                this.x += dim.width;\n                this.y += dim.height;\n                return this;\n            };\n            module1.exports = PointD;\n        /***/ },\n        /* 6 */ /***/ function(module1, exports1, __nested_webpack_require_26425__) {\n            \"use strict\";\n            var LGraphObject = __nested_webpack_require_26425__(2);\n            var Integer = __nested_webpack_require_26425__(10);\n            var LayoutConstants = __nested_webpack_require_26425__(0);\n            var LGraphManager = __nested_webpack_require_26425__(7);\n            var LNode = __nested_webpack_require_26425__(3);\n            var LEdge = __nested_webpack_require_26425__(1);\n            var RectangleD = __nested_webpack_require_26425__(13);\n            var Point1 = __nested_webpack_require_26425__(12);\n            var LinkedList = __nested_webpack_require_26425__(11);\n            function LGraph(parent, obj2, vGraph) {\n                LGraphObject.call(this, vGraph);\n                this.estimatedSize = Integer.MIN_VALUE;\n                this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;\n                this.edges = [];\n                this.nodes = [];\n                this.isConnected = false;\n                this.parent = parent;\n                if (obj2 != null && obj2 instanceof LGraphManager) {\n                    this.graphManager = obj2;\n                } else if (obj2 != null && obj2 instanceof Layout) {\n                    this.graphManager = obj2.graphManager;\n                }\n            }\n            LGraph.prototype = Object.create(LGraphObject.prototype);\n            for(var prop in LGraphObject){\n                LGraph[prop] = LGraphObject[prop];\n            }\n            LGraph.prototype.getNodes = function() {\n                return this.nodes;\n            };\n            LGraph.prototype.getEdges = function() {\n                return this.edges;\n            };\n            LGraph.prototype.getGraphManager = function() {\n                return this.graphManager;\n            };\n            LGraph.prototype.getParent = function() {\n                return this.parent;\n            };\n            LGraph.prototype.getLeft = function() {\n                return this.left;\n            };\n            LGraph.prototype.getRight = function() {\n                return this.right;\n            };\n            LGraph.prototype.getTop = function() {\n                return this.top;\n            };\n            LGraph.prototype.getBottom = function() {\n                return this.bottom;\n            };\n            LGraph.prototype.isConnected = function() {\n                return this.isConnected;\n            };\n            LGraph.prototype.add = function(obj1, sourceNode, targetNode) {\n                if (sourceNode == null && targetNode == null) {\n                    var newNode = obj1;\n                    if (this.graphManager == null) {\n                        throw \"Graph has no graph mgr!\";\n                    }\n                    if (this.getNodes().indexOf(newNode) > -1) {\n                        throw \"Node already in graph!\";\n                    }\n                    newNode.owner = this;\n                    this.getNodes().push(newNode);\n                    return newNode;\n                } else {\n                    var newEdge = obj1;\n                    if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {\n                        throw \"Source or target not in graph!\";\n                    }\n                    if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {\n                        throw \"Both owners must be this graph!\";\n                    }\n                    if (sourceNode.owner != targetNode.owner) {\n                        return null;\n                    }\n                    // set source and target\n                    newEdge.source = sourceNode;\n                    newEdge.target = targetNode;\n                    // set as intra-graph edge\n                    newEdge.isInterGraph = false;\n                    // add to graph edge list\n                    this.getEdges().push(newEdge);\n                    // add to incidency lists\n                    sourceNode.edges.push(newEdge);\n                    if (targetNode != sourceNode) {\n                        targetNode.edges.push(newEdge);\n                    }\n                    return newEdge;\n                }\n            };\n            LGraph.prototype.remove = function(obj) {\n                var node = obj;\n                if (obj instanceof LNode) {\n                    if (node == null) {\n                        throw \"Node is null!\";\n                    }\n                    if (!(node.owner != null && node.owner == this)) {\n                        throw \"Owner graph is invalid!\";\n                    }\n                    if (this.graphManager == null) {\n                        throw \"Owner graph manager is invalid!\";\n                    }\n                    // remove incident edges first (make a copy to do it safely)\n                    var edgesToBeRemoved = node.edges.slice();\n                    var edge;\n                    var s = edgesToBeRemoved.length;\n                    for(var i = 0; i < s; i++){\n                        edge = edgesToBeRemoved[i];\n                        if (edge.isInterGraph) {\n                            this.graphManager.remove(edge);\n                        } else {\n                            edge.source.owner.remove(edge);\n                        }\n                    }\n                    // now the node itself\n                    var index = this.nodes.indexOf(node);\n                    if (index == -1) {\n                        throw \"Node not in owner node list!\";\n                    }\n                    this.nodes.splice(index, 1);\n                } else if (obj instanceof LEdge) {\n                    var edge = obj;\n                    if (edge == null) {\n                        throw \"Edge is null!\";\n                    }\n                    if (!(edge.source != null && edge.target != null)) {\n                        throw \"Source and/or target is null!\";\n                    }\n                    if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {\n                        throw \"Source and/or target owner is invalid!\";\n                    }\n                    var sourceIndex = edge.source.edges.indexOf(edge);\n                    var targetIndex = edge.target.edges.indexOf(edge);\n                    if (!(sourceIndex > -1 && targetIndex > -1)) {\n                        throw \"Source and/or target doesn't know this edge!\";\n                    }\n                    edge.source.edges.splice(sourceIndex, 1);\n                    if (edge.target != edge.source) {\n                        edge.target.edges.splice(targetIndex, 1);\n                    }\n                    var index = edge.source.owner.getEdges().indexOf(edge);\n                    if (index == -1) {\n                        throw \"Not in owner's edge list!\";\n                    }\n                    edge.source.owner.getEdges().splice(index, 1);\n                }\n            };\n            LGraph.prototype.updateLeftTop = function() {\n                var top = Integer.MAX_VALUE;\n                var left = Integer.MAX_VALUE;\n                var nodeTop;\n                var nodeLeft;\n                var margin;\n                var nodes = this.getNodes();\n                var s = nodes.length;\n                for(var i = 0; i < s; i++){\n                    var lNode = nodes[i];\n                    nodeTop = lNode.getTop();\n                    nodeLeft = lNode.getLeft();\n                    if (top > nodeTop) {\n                        top = nodeTop;\n                    }\n                    if (left > nodeLeft) {\n                        left = nodeLeft;\n                    }\n                }\n                // Do we have any nodes in this graph?\n                if (top == Integer.MAX_VALUE) {\n                    return null;\n                }\n                if (nodes[0].getParent().paddingLeft != undefined) {\n                    margin = nodes[0].getParent().paddingLeft;\n                } else {\n                    margin = this.margin;\n                }\n                this.left = left - margin;\n                this.top = top - margin;\n                // Apply the margins and return the result\n                return new Point1(this.left, this.top);\n            };\n            LGraph.prototype.updateBounds = function(recursive) {\n                // calculate bounds\n                var left = Integer.MAX_VALUE;\n                var right = -Integer.MAX_VALUE;\n                var top = Integer.MAX_VALUE;\n                var bottom = -Integer.MAX_VALUE;\n                var nodeLeft;\n                var nodeRight;\n                var nodeTop;\n                var nodeBottom;\n                var margin;\n                var nodes = this.nodes;\n                var s = nodes.length;\n                for(var i = 0; i < s; i++){\n                    var lNode = nodes[i];\n                    if (recursive && lNode.child != null) {\n                        lNode.updateBounds();\n                    }\n                    nodeLeft = lNode.getLeft();\n                    nodeRight = lNode.getRight();\n                    nodeTop = lNode.getTop();\n                    nodeBottom = lNode.getBottom();\n                    if (left > nodeLeft) {\n                        left = nodeLeft;\n                    }\n                    if (right < nodeRight) {\n                        right = nodeRight;\n                    }\n                    if (top > nodeTop) {\n                        top = nodeTop;\n                    }\n                    if (bottom < nodeBottom) {\n                        bottom = nodeBottom;\n                    }\n                }\n                var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n                if (left == Integer.MAX_VALUE) {\n                    this.left = this.parent.getLeft();\n                    this.right = this.parent.getRight();\n                    this.top = this.parent.getTop();\n                    this.bottom = this.parent.getBottom();\n                }\n                if (nodes[0].getParent().paddingLeft != undefined) {\n                    margin = nodes[0].getParent().paddingLeft;\n                } else {\n                    margin = this.margin;\n                }\n                this.left = boundingRect.x - margin;\n                this.right = boundingRect.x + boundingRect.width + margin;\n                this.top = boundingRect.y - margin;\n                this.bottom = boundingRect.y + boundingRect.height + margin;\n            };\n            LGraph.calculateBounds = function(nodes) {\n                var left = Integer.MAX_VALUE;\n                var right = -Integer.MAX_VALUE;\n                var top = Integer.MAX_VALUE;\n                var bottom = -Integer.MAX_VALUE;\n                var nodeLeft;\n                var nodeRight;\n                var nodeTop;\n                var nodeBottom;\n                var s = nodes.length;\n                for(var i = 0; i < s; i++){\n                    var lNode = nodes[i];\n                    nodeLeft = lNode.getLeft();\n                    nodeRight = lNode.getRight();\n                    nodeTop = lNode.getTop();\n                    nodeBottom = lNode.getBottom();\n                    if (left > nodeLeft) {\n                        left = nodeLeft;\n                    }\n                    if (right < nodeRight) {\n                        right = nodeRight;\n                    }\n                    if (top > nodeTop) {\n                        top = nodeTop;\n                    }\n                    if (bottom < nodeBottom) {\n                        bottom = nodeBottom;\n                    }\n                }\n                var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n                return boundingRect;\n            };\n            LGraph.prototype.getInclusionTreeDepth = function() {\n                if (this == this.graphManager.getRoot()) {\n                    return 1;\n                } else {\n                    return this.parent.getInclusionTreeDepth();\n                }\n            };\n            LGraph.prototype.getEstimatedSize = function() {\n                if (this.estimatedSize == Integer.MIN_VALUE) {\n                    throw \"assert failed\";\n                }\n                return this.estimatedSize;\n            };\n            LGraph.prototype.calcEstimatedSize = function() {\n                var size = 0;\n                var nodes = this.nodes;\n                var s = nodes.length;\n                for(var i = 0; i < s; i++){\n                    var lNode = nodes[i];\n                    size += lNode.calcEstimatedSize();\n                }\n                if (size == 0) {\n                    this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;\n                } else {\n                    this.estimatedSize = size / Math.sqrt(this.nodes.length);\n                }\n                return this.estimatedSize;\n            };\n            LGraph.prototype.updateConnected = function() {\n                var self = this;\n                if (this.nodes.length == 0) {\n                    this.isConnected = true;\n                    return;\n                }\n                var queue = new LinkedList();\n                var visited = new Set();\n                var currentNode = this.nodes[0];\n                var neighborEdges;\n                var currentNeighbor;\n                var childrenOfNode = currentNode.withChildren();\n                childrenOfNode.forEach(function(node) {\n                    queue.push(node);\n                    visited.add(node);\n                });\n                while(queue.length !== 0){\n                    currentNode = queue.shift();\n                    // Traverse all neighbors of this node\n                    neighborEdges = currentNode.getEdges();\n                    var size = neighborEdges.length;\n                    for(var i = 0; i < size; i++){\n                        var neighborEdge = neighborEdges[i];\n                        currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);\n                        // Add unvisited neighbors to the list to visit\n                        if (currentNeighbor != null && !visited.has(currentNeighbor)) {\n                            var childrenOfNeighbor = currentNeighbor.withChildren();\n                            childrenOfNeighbor.forEach(function(node) {\n                                queue.push(node);\n                                visited.add(node);\n                            });\n                        }\n                    }\n                }\n                this.isConnected = false;\n                if (visited.size >= this.nodes.length) {\n                    var noOfVisitedInThisGraph = 0;\n                    visited.forEach(function(visitedNode) {\n                        if (visitedNode.owner == self) {\n                            noOfVisitedInThisGraph++;\n                        }\n                    });\n                    if (noOfVisitedInThisGraph == this.nodes.length) {\n                        this.isConnected = true;\n                    }\n                }\n            };\n            module1.exports = LGraph;\n        /***/ },\n        /* 7 */ /***/ function(module1, exports1, __nested_webpack_require_41561__) {\n            \"use strict\";\n            var LGraph;\n            var LEdge = __nested_webpack_require_41561__(1);\n            function LGraphManager(layout) {\n                LGraph = __nested_webpack_require_41561__(6); // It may be better to initilize this out of this function but it gives an error (Right-hand side of 'instanceof' is not callable) now.\n                this.layout = layout;\n                this.graphs = [];\n                this.edges = [];\n            }\n            LGraphManager.prototype.addRoot = function() {\n                var ngraph = this.layout.newGraph();\n                var nnode = this.layout.newNode(null);\n                var root = this.add(ngraph, nnode);\n                this.setRootGraph(root);\n                return this.rootGraph;\n            };\n            LGraphManager.prototype.add = function(newGraph, parentNode, newEdge, sourceNode, targetNode) {\n                //there are just 2 parameters are passed then it adds an LGraph else it adds an LEdge\n                if (newEdge == null && sourceNode == null && targetNode == null) {\n                    if (newGraph == null) {\n                        throw \"Graph is null!\";\n                    }\n                    if (parentNode == null) {\n                        throw \"Parent node is null!\";\n                    }\n                    if (this.graphs.indexOf(newGraph) > -1) {\n                        throw \"Graph already in this graph mgr!\";\n                    }\n                    this.graphs.push(newGraph);\n                    if (newGraph.parent != null) {\n                        throw \"Already has a parent!\";\n                    }\n                    if (parentNode.child != null) {\n                        throw \"Already has a child!\";\n                    }\n                    newGraph.parent = parentNode;\n                    parentNode.child = newGraph;\n                    return newGraph;\n                } else {\n                    //change the order of the parameters\n                    targetNode = newEdge;\n                    sourceNode = parentNode;\n                    newEdge = newGraph;\n                    var sourceGraph = sourceNode.getOwner();\n                    var targetGraph = targetNode.getOwner();\n                    if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {\n                        throw \"Source not in this graph mgr!\";\n                    }\n                    if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {\n                        throw \"Target not in this graph mgr!\";\n                    }\n                    if (sourceGraph == targetGraph) {\n                        newEdge.isInterGraph = false;\n                        return sourceGraph.add(newEdge, sourceNode, targetNode);\n                    } else {\n                        newEdge.isInterGraph = true;\n                        // set source and target\n                        newEdge.source = sourceNode;\n                        newEdge.target = targetNode;\n                        // add edge to inter-graph edge list\n                        if (this.edges.indexOf(newEdge) > -1) {\n                            throw \"Edge already in inter-graph edge list!\";\n                        }\n                        this.edges.push(newEdge);\n                        // add edge to source and target incidency lists\n                        if (!(newEdge.source != null && newEdge.target != null)) {\n                            throw \"Edge source and/or target is null!\";\n                        }\n                        if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {\n                            throw \"Edge already in source and/or target incidency list!\";\n                        }\n                        newEdge.source.edges.push(newEdge);\n                        newEdge.target.edges.push(newEdge);\n                        return newEdge;\n                    }\n                }\n            };\n            LGraphManager.prototype.remove = function(lObj) {\n                if (lObj instanceof LGraph) {\n                    var graph = lObj;\n                    if (graph.getGraphManager() != this) {\n                        throw \"Graph not in this graph mgr\";\n                    }\n                    if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {\n                        throw \"Invalid parent node!\";\n                    }\n                    // first the edges (make a copy to do it safely)\n                    var edgesToBeRemoved = [];\n                    edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());\n                    var edge;\n                    var s = edgesToBeRemoved.length;\n                    for(var i = 0; i < s; i++){\n                        edge = edgesToBeRemoved[i];\n                        graph.remove(edge);\n                    }\n                    // then the nodes (make a copy to do it safely)\n                    var nodesToBeRemoved = [];\n                    nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());\n                    var node;\n                    s = nodesToBeRemoved.length;\n                    for(var i = 0; i < s; i++){\n                        node = nodesToBeRemoved[i];\n                        graph.remove(node);\n                    }\n                    // check if graph is the root\n                    if (graph == this.rootGraph) {\n                        this.setRootGraph(null);\n                    }\n                    // now remove the graph itself\n                    var index = this.graphs.indexOf(graph);\n                    this.graphs.splice(index, 1);\n                    // also reset the parent of the graph\n                    graph.parent = null;\n                } else if (lObj instanceof LEdge) {\n                    edge = lObj;\n                    if (edge == null) {\n                        throw \"Edge is null!\";\n                    }\n                    if (!edge.isInterGraph) {\n                        throw \"Not an inter-graph edge!\";\n                    }\n                    if (!(edge.source != null && edge.target != null)) {\n                        throw \"Source and/or target is null!\";\n                    }\n                    // remove edge from source and target nodes' incidency lists\n                    if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {\n                        throw \"Source and/or target doesn't know this edge!\";\n                    }\n                    var index = edge.source.edges.indexOf(edge);\n                    edge.source.edges.splice(index, 1);\n                    index = edge.target.edges.indexOf(edge);\n                    edge.target.edges.splice(index, 1);\n                    // remove edge from owner graph manager's inter-graph edge list\n                    if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {\n                        throw \"Edge owner graph or owner graph manager is null!\";\n                    }\n                    if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {\n                        throw \"Not in owner graph manager's edge list!\";\n                    }\n                    var index = edge.source.owner.getGraphManager().edges.indexOf(edge);\n                    edge.source.owner.getGraphManager().edges.splice(index, 1);\n                }\n            };\n            LGraphManager.prototype.updateBounds = function() {\n                this.rootGraph.updateBounds(true);\n            };\n            LGraphManager.prototype.getGraphs = function() {\n                return this.graphs;\n            };\n            LGraphManager.prototype.getAllNodes = function() {\n                if (this.allNodes == null) {\n                    var nodeList = [];\n                    var graphs = this.getGraphs();\n                    var s = graphs.length;\n                    for(var i = 0; i < s; i++){\n                        nodeList = nodeList.concat(graphs[i].getNodes());\n                    }\n                    this.allNodes = nodeList;\n                }\n                return this.allNodes;\n            };\n            LGraphManager.prototype.resetAllNodes = function() {\n                this.allNodes = null;\n            };\n            LGraphManager.prototype.resetAllEdges = function() {\n                this.allEdges = null;\n            };\n            LGraphManager.prototype.resetAllNodesToApplyGravitation = function() {\n                this.allNodesToApplyGravitation = null;\n            };\n            LGraphManager.prototype.getAllEdges = function() {\n                if (this.allEdges == null) {\n                    var edgeList = [];\n                    var graphs = this.getGraphs();\n                    var s = graphs.length;\n                    for(var i = 0; i < graphs.length; i++){\n                        edgeList = edgeList.concat(graphs[i].getEdges());\n                    }\n                    edgeList = edgeList.concat(this.edges);\n                    this.allEdges = edgeList;\n                }\n                return this.allEdges;\n            };\n            LGraphManager.prototype.getAllNodesToApplyGravitation = function() {\n                return this.allNodesToApplyGravitation;\n            };\n            LGraphManager.prototype.setAllNodesToApplyGravitation = function(nodeList) {\n                if (this.allNodesToApplyGravitation != null) {\n                    throw \"assert failed\";\n                }\n                this.allNodesToApplyGravitation = nodeList;\n            };\n            LGraphManager.prototype.getRoot = function() {\n                return this.rootGraph;\n            };\n            LGraphManager.prototype.setRootGraph = function(graph) {\n                if (graph.getGraphManager() != this) {\n                    throw \"Root not in this graph mgr!\";\n                }\n                this.rootGraph = graph;\n                // root graph must have a root node associated with it for convenience\n                if (graph.parent == null) {\n                    graph.parent = this.layout.newNode(\"Root node\");\n                }\n            };\n            LGraphManager.prototype.getLayout = function() {\n                return this.layout;\n            };\n            LGraphManager.prototype.isOneAncestorOfOther = function(firstNode, secondNode) {\n                if (!(firstNode != null && secondNode != null)) {\n                    throw \"assert failed\";\n                }\n                if (firstNode == secondNode) {\n                    return true;\n                }\n                // Is second node an ancestor of the first one?\n                var ownerGraph = firstNode.getOwner();\n                var parentNode;\n                do {\n                    parentNode = ownerGraph.getParent();\n                    if (parentNode == null) {\n                        break;\n                    }\n                    if (parentNode == secondNode) {\n                        return true;\n                    }\n                    ownerGraph = parentNode.getOwner();\n                    if (ownerGraph == null) {\n                        break;\n                    }\n                }while (true);\n                // Is first node an ancestor of the second one?\n                ownerGraph = secondNode.getOwner();\n                do {\n                    parentNode = ownerGraph.getParent();\n                    if (parentNode == null) {\n                        break;\n                    }\n                    if (parentNode == firstNode) {\n                        return true;\n                    }\n                    ownerGraph = parentNode.getOwner();\n                    if (ownerGraph == null) {\n                        break;\n                    }\n                }while (true);\n                return false;\n            };\n            LGraphManager.prototype.calcLowestCommonAncestors = function() {\n                var edge;\n                var sourceNode;\n                var targetNode;\n                var sourceAncestorGraph;\n                var targetAncestorGraph;\n                var edges = this.getAllEdges();\n                var s = edges.length;\n                for(var i = 0; i < s; i++){\n                    edge = edges[i];\n                    sourceNode = edge.source;\n                    targetNode = edge.target;\n                    edge.lca = null;\n                    edge.sourceInLca = sourceNode;\n                    edge.targetInLca = targetNode;\n                    if (sourceNode == targetNode) {\n                        edge.lca = sourceNode.getOwner();\n                        continue;\n                    }\n                    sourceAncestorGraph = sourceNode.getOwner();\n                    while(edge.lca == null){\n                        edge.targetInLca = targetNode;\n                        targetAncestorGraph = targetNode.getOwner();\n                        while(edge.lca == null){\n                            if (targetAncestorGraph == sourceAncestorGraph) {\n                                edge.lca = targetAncestorGraph;\n                                break;\n                            }\n                            if (targetAncestorGraph == this.rootGraph) {\n                                break;\n                            }\n                            if (edge.lca != null) {\n                                throw \"assert failed\";\n                            }\n                            edge.targetInLca = targetAncestorGraph.getParent();\n                            targetAncestorGraph = edge.targetInLca.getOwner();\n                        }\n                        if (sourceAncestorGraph == this.rootGraph) {\n                            break;\n                        }\n                        if (edge.lca == null) {\n                            edge.sourceInLca = sourceAncestorGraph.getParent();\n                            sourceAncestorGraph = edge.sourceInLca.getOwner();\n                        }\n                    }\n                    if (edge.lca == null) {\n                        throw \"assert failed\";\n                    }\n                }\n            };\n            LGraphManager.prototype.calcLowestCommonAncestor = function(firstNode, secondNode) {\n                if (firstNode == secondNode) {\n                    return firstNode.getOwner();\n                }\n                var firstOwnerGraph = firstNode.getOwner();\n                do {\n                    if (firstOwnerGraph == null) {\n                        break;\n                    }\n                    var secondOwnerGraph = secondNode.getOwner();\n                    do {\n                        if (secondOwnerGraph == null) {\n                            break;\n                        }\n                        if (secondOwnerGraph == firstOwnerGraph) {\n                            return secondOwnerGraph;\n                        }\n                        secondOwnerGraph = secondOwnerGraph.getParent().getOwner();\n                    }while (true);\n                    firstOwnerGraph = firstOwnerGraph.getParent().getOwner();\n                }while (true);\n                return firstOwnerGraph;\n            };\n            LGraphManager.prototype.calcInclusionTreeDepths = function(graph, depth) {\n                if (graph == null && depth == null) {\n                    graph = this.rootGraph;\n                    depth = 1;\n                }\n                var node;\n                var nodes = graph.getNodes();\n                var s = nodes.length;\n                for(var i = 0; i < s; i++){\n                    node = nodes[i];\n                    node.inclusionTreeDepth = depth;\n                    if (node.child != null) {\n                        this.calcInclusionTreeDepths(node.child, depth + 1);\n                    }\n                }\n            };\n            LGraphManager.prototype.includesInvalidEdge = function() {\n                var edge;\n                var edgesToRemove = [];\n                var s = this.edges.length;\n                for(var i = 0; i < s; i++){\n                    edge = this.edges[i];\n                    if (this.isOneAncestorOfOther(edge.source, edge.target)) {\n                        edgesToRemove.push(edge);\n                    }\n                }\n                // Remove invalid edges from graph manager\n                for(var i = 0; i < edgesToRemove.length; i++){\n                    this.remove(edgesToRemove[i]);\n                }\n                // Invalid edges are cleared, so return false\n                return false;\n            };\n            module1.exports = LGraphManager;\n        /***/ },\n        /* 8 */ /***/ function(module1, exports1, __nested_webpack_require_58301__) {\n            \"use strict\";\n            /**\n * This class maintains a list of static geometry related utility methods.\n *\n *\n * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\n */ var Point1 = __nested_webpack_require_58301__(12);\n            function IGeometry() {}\n            /**\n * This method calculates *half* the amount in x and y directions of the two\n * input rectangles needed to separate them keeping their respective\n * positioning, and returns the result in the input array. An input\n * separation buffer added to the amount in both directions. We assume that\n * the two rectangles do intersect.\n */ IGeometry.calcSeparationAmount = function(rectA, rectB, overlapAmount, separationBuffer) {\n                if (!rectA.intersects(rectB)) {\n                    throw \"assert failed\";\n                }\n                var directions = new Array(2);\n                this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);\n                overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);\n                overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);\n                // update the overlapping amounts for the following cases:\n                if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {\n                    /* Case x.1:\n    *\n    * rectA\n    * \t|                       |\n    * \t|        _________      |\n    * \t|        |       |      |\n    * \t|________|_______|______|\n    * \t\t\t |       |\n    *           |       |\n    *        rectB\n    */ overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());\n                } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {\n                    /* Case x.2:\n    *\n    * rectB\n    * \t|                       |\n    * \t|        _________      |\n    * \t|        |       |      |\n    * \t|________|_______|______|\n    * \t\t\t |       |\n    *           |       |\n    *        rectA\n    */ overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());\n                }\n                if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {\n                    /* Case y.1:\n     *          ________ rectA\n     *         |\n     *         |\n     *   ______|____  rectB\n     *         |    |\n     *         |    |\n     *   ______|____|\n     *         |\n     *         |\n     *         |________\n     *\n     */ overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());\n                } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {\n                    /* Case y.2:\n    *          ________ rectB\n    *         |\n    *         |\n    *   ______|____  rectA\n    *         |    |\n    *         |    |\n    *   ______|____|\n    *         |\n    *         |\n    *         |________\n    *\n    */ overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());\n                }\n                // find slope of the line passes two centers\n                var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));\n                // if centers are overlapped\n                if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {\n                    // assume the slope is 1 (45 degree)\n                    slope = 1.0;\n                }\n                var moveByY = slope * overlapAmount[0];\n                var moveByX = overlapAmount[1] / slope;\n                if (overlapAmount[0] < moveByX) {\n                    moveByX = overlapAmount[0];\n                } else {\n                    moveByY = overlapAmount[1];\n                }\n                // return half the amount so that if each rectangle is moved by these\n                // amounts in opposite directions, overlap will be resolved\n                overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);\n                overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);\n            };\n            /**\n * This method decides the separation direction of overlapping nodes\n *\n * if directions[0] = -1, then rectA goes left\n * if directions[0] = 1,  then rectA goes right\n * if directions[1] = -1, then rectA goes up\n * if directions[1] = 1,  then rectA goes down\n */ IGeometry.decideDirectionsForOverlappingNodes = function(rectA, rectB, directions) {\n                if (rectA.getCenterX() < rectB.getCenterX()) {\n                    directions[0] = -1;\n                } else {\n                    directions[0] = 1;\n                }\n                if (rectA.getCenterY() < rectB.getCenterY()) {\n                    directions[1] = -1;\n                } else {\n                    directions[1] = 1;\n                }\n            };\n            /**\n * This method calculates the intersection (clipping) points of the two\n * input rectangles with line segment defined by the centers of these two\n * rectangles. The clipping points are saved in the input double array and\n * whether or not the two rectangles overlap is returned.\n */ IGeometry.getIntersection2 = function(rectA, rectB, result) {\n                //result[0-1] will contain clipPoint of rectA, result[2-3] will contain clipPoint of rectB\n                var p1x = rectA.getCenterX();\n                var p1y = rectA.getCenterY();\n                var p2x = rectB.getCenterX();\n                var p2y = rectB.getCenterY();\n                //if two rectangles intersect, then clipping points are centers\n                if (rectA.intersects(rectB)) {\n                    result[0] = p1x;\n                    result[1] = p1y;\n                    result[2] = p2x;\n                    result[3] = p2y;\n                    return true;\n                }\n                //variables for rectA\n                var topLeftAx = rectA.getX();\n                var topLeftAy = rectA.getY();\n                var topRightAx = rectA.getRight();\n                var bottomLeftAx = rectA.getX();\n                var bottomLeftAy = rectA.getBottom();\n                var bottomRightAx = rectA.getRight();\n                var halfWidthA = rectA.getWidthHalf();\n                var halfHeightA = rectA.getHeightHalf();\n                //variables for rectB\n                var topLeftBx = rectB.getX();\n                var topLeftBy = rectB.getY();\n                var topRightBx = rectB.getRight();\n                var bottomLeftBx = rectB.getX();\n                var bottomLeftBy = rectB.getBottom();\n                var bottomRightBx = rectB.getRight();\n                var halfWidthB = rectB.getWidthHalf();\n                var halfHeightB = rectB.getHeightHalf();\n                //flag whether clipping points are found\n                var clipPointAFound = false;\n                var clipPointBFound = false;\n                // line is vertical\n                if (p1x === p2x) {\n                    if (p1y > p2y) {\n                        result[0] = p1x;\n                        result[1] = topLeftAy;\n                        result[2] = p2x;\n                        result[3] = bottomLeftBy;\n                        return false;\n                    } else if (p1y < p2y) {\n                        result[0] = p1x;\n                        result[1] = bottomLeftAy;\n                        result[2] = p2x;\n                        result[3] = topLeftBy;\n                        return false;\n                    } else {\n                    //not line, return null;\n                    }\n                } else if (p1y === p2y) {\n                    if (p1x > p2x) {\n                        result[0] = topLeftAx;\n                        result[1] = p1y;\n                        result[2] = topRightBx;\n                        result[3] = p2y;\n                        return false;\n                    } else if (p1x < p2x) {\n                        result[0] = topRightAx;\n                        result[1] = p1y;\n                        result[2] = topLeftBx;\n                        result[3] = p2y;\n                        return false;\n                    } else {\n                    //not valid line, return null;\n                    }\n                } else {\n                    //slopes of rectA's and rectB's diagonals\n                    var slopeA = rectA.height / rectA.width;\n                    var slopeB = rectB.height / rectB.width;\n                    //slope of line between center of rectA and center of rectB\n                    var slopePrime = (p2y - p1y) / (p2x - p1x);\n                    var cardinalDirectionA = void 0;\n                    var cardinalDirectionB = void 0;\n                    var tempPointAx = void 0;\n                    var tempPointAy = void 0;\n                    var tempPointBx = void 0;\n                    var tempPointBy = void 0;\n                    //determine whether clipping point is the corner of nodeA\n                    if (-slopeA === slopePrime) {\n                        if (p1x > p2x) {\n                            result[0] = bottomLeftAx;\n                            result[1] = bottomLeftAy;\n                            clipPointAFound = true;\n                        } else {\n                            result[0] = topRightAx;\n                            result[1] = topLeftAy;\n                            clipPointAFound = true;\n                        }\n                    } else if (slopeA === slopePrime) {\n                        if (p1x > p2x) {\n                            result[0] = topLeftAx;\n                            result[1] = topLeftAy;\n                            clipPointAFound = true;\n                        } else {\n                            result[0] = bottomRightAx;\n                            result[1] = bottomLeftAy;\n                            clipPointAFound = true;\n                        }\n                    }\n                    //determine whether clipping point is the corner of nodeB\n                    if (-slopeB === slopePrime) {\n                        if (p2x > p1x) {\n                            result[2] = bottomLeftBx;\n                            result[3] = bottomLeftBy;\n                            clipPointBFound = true;\n                        } else {\n                            result[2] = topRightBx;\n                            result[3] = topLeftBy;\n                            clipPointBFound = true;\n                        }\n                    } else if (slopeB === slopePrime) {\n                        if (p2x > p1x) {\n                            result[2] = topLeftBx;\n                            result[3] = topLeftBy;\n                            clipPointBFound = true;\n                        } else {\n                            result[2] = bottomRightBx;\n                            result[3] = bottomLeftBy;\n                            clipPointBFound = true;\n                        }\n                    }\n                    //if both clipping points are corners\n                    if (clipPointAFound && clipPointBFound) {\n                        return false;\n                    }\n                    //determine Cardinal Direction of rectangles\n                    if (p1x > p2x) {\n                        if (p1y > p2y) {\n                            cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);\n                            cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);\n                        } else {\n                            cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);\n                            cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);\n                        }\n                    } else {\n                        if (p1y > p2y) {\n                            cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);\n                            cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);\n                        } else {\n                            cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);\n                            cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);\n                        }\n                    }\n                    //calculate clipping Point if it is not found before\n                    if (!clipPointAFound) {\n                        switch(cardinalDirectionA){\n                            case 1:\n                                tempPointAy = topLeftAy;\n                                tempPointAx = p1x + -halfHeightA / slopePrime;\n                                result[0] = tempPointAx;\n                                result[1] = tempPointAy;\n                                break;\n                            case 2:\n                                tempPointAx = bottomRightAx;\n                                tempPointAy = p1y + halfWidthA * slopePrime;\n                                result[0] = tempPointAx;\n                                result[1] = tempPointAy;\n                                break;\n                            case 3:\n                                tempPointAy = bottomLeftAy;\n                                tempPointAx = p1x + halfHeightA / slopePrime;\n                                result[0] = tempPointAx;\n                                result[1] = tempPointAy;\n                                break;\n                            case 4:\n                                tempPointAx = bottomLeftAx;\n                                tempPointAy = p1y + -halfWidthA * slopePrime;\n                                result[0] = tempPointAx;\n                                result[1] = tempPointAy;\n                                break;\n                        }\n                    }\n                    if (!clipPointBFound) {\n                        switch(cardinalDirectionB){\n                            case 1:\n                                tempPointBy = topLeftBy;\n                                tempPointBx = p2x + -halfHeightB / slopePrime;\n                                result[2] = tempPointBx;\n                                result[3] = tempPointBy;\n                                break;\n                            case 2:\n                                tempPointBx = bottomRightBx;\n                                tempPointBy = p2y + halfWidthB * slopePrime;\n                                result[2] = tempPointBx;\n                                result[3] = tempPointBy;\n                                break;\n                            case 3:\n                                tempPointBy = bottomLeftBy;\n                                tempPointBx = p2x + halfHeightB / slopePrime;\n                                result[2] = tempPointBx;\n                                result[3] = tempPointBy;\n                                break;\n                            case 4:\n                                tempPointBx = bottomLeftBx;\n                                tempPointBy = p2y + -halfWidthB * slopePrime;\n                                result[2] = tempPointBx;\n                                result[3] = tempPointBy;\n                                break;\n                        }\n                    }\n                }\n                return false;\n            };\n            /**\n * This method returns in which cardinal direction does input point stays\n * 1: North\n * 2: East\n * 3: South\n * 4: West\n */ IGeometry.getCardinalDirection = function(slope, slopePrime, line) {\n                if (slope > slopePrime) {\n                    return line;\n                } else {\n                    return 1 + line % 4;\n                }\n            };\n            /**\n * This method calculates the intersection of the two lines defined by\n * point pairs (s1,s2) and (f1,f2).\n */ IGeometry.getIntersection = function(s1, s2, f1, f2) {\n                if (f2 == null) {\n                    return this.getIntersection2(s1, s2, f1);\n                }\n                var x1 = s1.x;\n                var y1 = s1.y;\n                var x2 = s2.x;\n                var y2 = s2.y;\n                var x3 = f1.x;\n                var y3 = f1.y;\n                var x4 = f2.x;\n                var y4 = f2.y;\n                var x = void 0, y = void 0; // intersection point\n                var a1 = void 0, a2 = void 0, b1 = void 0, b2 = void 0, c1 = void 0, c2 = void 0; // coefficients of line eqns.\n                var denom = void 0;\n                a1 = y2 - y1;\n                b1 = x1 - x2;\n                c1 = x2 * y1 - x1 * y2; // { a1*x + b1*y + c1 = 0 is line 1 }\n                a2 = y4 - y3;\n                b2 = x3 - x4;\n                c2 = x4 * y3 - x3 * y4; // { a2*x + b2*y + c2 = 0 is line 2 }\n                denom = a1 * b2 - a2 * b1;\n                if (denom === 0) {\n                    return null;\n                }\n                x = (b1 * c2 - b2 * c1) / denom;\n                y = (a2 * c1 - a1 * c2) / denom;\n                return new Point1(x, y);\n            };\n            /**\n * This method finds and returns the angle of the vector from the + x-axis\n * in clockwise direction (compatible w/ Java coordinate system!).\n */ IGeometry.angleOfVector = function(Cx, Cy, Nx, Ny) {\n                var C_angle = void 0;\n                if (Cx !== Nx) {\n                    C_angle = Math.atan((Ny - Cy) / (Nx - Cx));\n                    if (Nx < Cx) {\n                        C_angle += Math.PI;\n                    } else if (Ny < Cy) {\n                        C_angle += this.TWO_PI;\n                    }\n                } else if (Ny < Cy) {\n                    C_angle = this.ONE_AND_HALF_PI; // 270 degrees\n                } else {\n                    C_angle = this.HALF_PI; // 90 degrees\n                }\n                return C_angle;\n            };\n            /**\n * This method checks whether the given two line segments (one with point\n * p1 and p2, the other with point p3 and p4) intersect at a point other\n * than these points.\n */ IGeometry.doIntersect = function(p1, p2, p3, p4) {\n                var a = p1.x;\n                var b = p1.y;\n                var c = p2.x;\n                var d = p2.y;\n                var p = p3.x;\n                var q = p3.y;\n                var r = p4.x;\n                var s = p4.y;\n                var det = (c - a) * (s - q) - (r - p) * (d - b);\n                if (det === 0) {\n                    return false;\n                } else {\n                    var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\n                    var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\n                    return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;\n                }\n            };\n            /**\n * This method checks and calculates the intersection of \n * a line segment and a circle.\n */ IGeometry.findCircleLineIntersections = function(Ex, Ey, Lx, Ly, Cx, Cy, r) {\n                // E is the starting point of the ray,\n                // L is the end point of the ray,\n                // C is the center of sphere you're testing against\n                // r is the radius of that sphere\n                // Compute:\n                // d = L - E ( Direction vector of ray, from start to end )\n                // f = E - C ( Vector from center sphere to ray start )\n                // Then the intersection is found by..\n                // P = E + t * d\n                // This is a parametric equation:\n                // Px = Ex + tdx\n                // Py = Ey + tdy\n                // get a, b, c values\n                var a = (Lx - Ex) * (Lx - Ex) + (Ly - Ey) * (Ly - Ey);\n                var b = 2 * ((Ex - Cx) * (Lx - Ex) + (Ey - Cy) * (Ly - Ey));\n                var c = (Ex - Cx) * (Ex - Cx) + (Ey - Cy) * (Ey - Cy) - r * r;\n                // get discriminant\n                var disc = b * b - 4 * a * c;\n                if (disc >= 0) {\n                    // insert into quadratic formula\n                    var t1 = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n                    var t2 = (-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n                    var intersections = null;\n                    if (t1 >= 0 && t1 <= 1) {\n                        // t1 is the intersection, and it's closer than t2\n                        // (since t1 uses -b - discriminant)\n                        // Impale, Poke\n                        return [\n                            t1\n                        ];\n                    }\n                    // here t1 didn't intersect so we are either started\n                    // inside the sphere or completely past it\n                    if (t2 >= 0 && t2 <= 1) {\n                        // ExitWound\n                        return [\n                            t2\n                        ];\n                    }\n                    return intersections;\n                } else return null;\n            };\n            // -----------------------------------------------------------------------------\n            // Section: Class Constants\n            // -----------------------------------------------------------------------------\n            /**\n * Some useful pre-calculated constants\n */ IGeometry.HALF_PI = 0.5 * Math.PI;\n            IGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;\n            IGeometry.TWO_PI = 2.0 * Math.PI;\n            IGeometry.THREE_PI = 3.0 * Math.PI;\n            module1.exports = IGeometry;\n        /***/ },\n        /* 9 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function IMath() {}\n            /**\n * This method returns the sign of the input value.\n */ IMath.sign = function(value) {\n                if (value > 0) {\n                    return 1;\n                } else if (value < 0) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            };\n            IMath.floor = function(value) {\n                return value < 0 ? Math.ceil(value) : Math.floor(value);\n            };\n            IMath.ceil = function(value) {\n                return value < 0 ? Math.floor(value) : Math.ceil(value);\n            };\n            module1.exports = IMath;\n        /***/ },\n        /* 10 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function Integer() {}\n            Integer.MAX_VALUE = 2147483647;\n            Integer.MIN_VALUE = -2147483648;\n            module1.exports = Integer;\n        /***/ },\n        /* 11 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            var nodeFrom = function nodeFrom(value) {\n                return {\n                    value: value,\n                    next: null,\n                    prev: null\n                };\n            };\n            var add = function add(prev, node, next, list) {\n                if (prev !== null) {\n                    prev.next = node;\n                } else {\n                    list.head = node;\n                }\n                if (next !== null) {\n                    next.prev = node;\n                } else {\n                    list.tail = node;\n                }\n                node.prev = prev;\n                node.next = next;\n                list.length++;\n                return node;\n            };\n            var _remove = function _remove(node, list) {\n                var prev = node.prev, next = node.next;\n                if (prev !== null) {\n                    prev.next = next;\n                } else {\n                    list.head = next;\n                }\n                if (next !== null) {\n                    next.prev = prev;\n                } else {\n                    list.tail = prev;\n                }\n                node.prev = node.next = null;\n                list.length--;\n                return node;\n            };\n            var LinkedList = function() {\n                function LinkedList(vals) {\n                    var _this = this;\n                    _classCallCheck(this, LinkedList);\n                    this.length = 0;\n                    this.head = null;\n                    this.tail = null;\n                    if (vals != null) {\n                        vals.forEach(function(v) {\n                            return _this.push(v);\n                        });\n                    }\n                }\n                _createClass(LinkedList, [\n                    {\n                        key: \"size\",\n                        value: function size() {\n                            return this.length;\n                        }\n                    },\n                    {\n                        key: \"insertBefore\",\n                        value: function insertBefore(val, otherNode) {\n                            return add(otherNode.prev, nodeFrom(val), otherNode, this);\n                        }\n                    },\n                    {\n                        key: \"insertAfter\",\n                        value: function insertAfter(val, otherNode) {\n                            return add(otherNode, nodeFrom(val), otherNode.next, this);\n                        }\n                    },\n                    {\n                        key: \"insertNodeBefore\",\n                        value: function insertNodeBefore(newNode, otherNode) {\n                            return add(otherNode.prev, newNode, otherNode, this);\n                        }\n                    },\n                    {\n                        key: \"insertNodeAfter\",\n                        value: function insertNodeAfter(newNode, otherNode) {\n                            return add(otherNode, newNode, otherNode.next, this);\n                        }\n                    },\n                    {\n                        key: \"push\",\n                        value: function push(val) {\n                            return add(this.tail, nodeFrom(val), null, this);\n                        }\n                    },\n                    {\n                        key: \"unshift\",\n                        value: function unshift(val) {\n                            return add(null, nodeFrom(val), this.head, this);\n                        }\n                    },\n                    {\n                        key: \"remove\",\n                        value: function remove(node) {\n                            return _remove(node, this);\n                        }\n                    },\n                    {\n                        key: \"pop\",\n                        value: function pop() {\n                            return _remove(this.tail, this).value;\n                        }\n                    },\n                    {\n                        key: \"popNode\",\n                        value: function popNode() {\n                            return _remove(this.tail, this);\n                        }\n                    },\n                    {\n                        key: \"shift\",\n                        value: function shift() {\n                            return _remove(this.head, this).value;\n                        }\n                    },\n                    {\n                        key: \"shiftNode\",\n                        value: function shiftNode() {\n                            return _remove(this.head, this);\n                        }\n                    },\n                    {\n                        key: \"get_object_at\",\n                        value: function get_object_at(index) {\n                            if (index <= this.length()) {\n                                var i = 1;\n                                var current = this.head;\n                                while(i < index){\n                                    current = current.next;\n                                    i++;\n                                }\n                                return current.value;\n                            }\n                        }\n                    },\n                    {\n                        key: \"set_object_at\",\n                        value: function set_object_at(index, value) {\n                            if (index <= this.length()) {\n                                var i = 1;\n                                var current = this.head;\n                                while(i < index){\n                                    current = current.next;\n                                    i++;\n                                }\n                                current.value = value;\n                            }\n                        }\n                    }\n                ]);\n                return LinkedList;\n            }();\n            module1.exports = LinkedList;\n        /***/ },\n        /* 12 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            /*\r\n *This class is the javascript implementation of the Point.java class in jdk\r\n */ function Point1(x, y, p) {\n                this.x = null;\n                this.y = null;\n                if (x == null && y == null && p == null) {\n                    this.x = 0;\n                    this.y = 0;\n                } else if (typeof x == \"number\" && typeof y == \"number\" && p == null) {\n                    this.x = x;\n                    this.y = y;\n                } else if (x.constructor.name == \"Point\" && y == null && p == null) {\n                    p = x;\n                    this.x = p.x;\n                    this.y = p.y;\n                }\n            }\n            Point1.prototype.getX = function() {\n                return this.x;\n            };\n            Point1.prototype.getY = function() {\n                return this.y;\n            };\n            Point1.prototype.getLocation = function() {\n                return new Point1(this.x, this.y);\n            };\n            Point1.prototype.setLocation = function(x, y, p) {\n                if (x.constructor.name == \"Point\" && y == null && p == null) {\n                    p = x;\n                    this.setLocation(p.x, p.y);\n                } else if (typeof x == \"number\" && typeof y == \"number\" && p == null) {\n                    //if both parameters are integer just move (x,y) location\n                    if (parseInt(x) == x && parseInt(y) == y) {\n                        this.move(x, y);\n                    } else {\n                        this.x = Math.floor(x + 0.5);\n                        this.y = Math.floor(y + 0.5);\n                    }\n                }\n            };\n            Point1.prototype.move = function(x, y) {\n                this.x = x;\n                this.y = y;\n            };\n            Point1.prototype.translate = function(dx, dy) {\n                this.x += dx;\n                this.y += dy;\n            };\n            Point1.prototype.equals = function(obj) {\n                if (obj.constructor.name == \"Point\") {\n                    var pt = obj;\n                    return this.x == pt.x && this.y == pt.y;\n                }\n                return this == obj;\n            };\n            Point1.prototype.toString = function() {\n                return new Point1().constructor.name + \"[x=\" + this.x + \",y=\" + this.y + \"]\";\n            };\n            module1.exports = Point1;\n        /***/ },\n        /* 13 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function RectangleD(x, y, width, height) {\n                this.x = 0;\n                this.y = 0;\n                this.width = 0;\n                this.height = 0;\n                if (x != null && y != null && width != null && height != null) {\n                    this.x = x;\n                    this.y = y;\n                    this.width = width;\n                    this.height = height;\n                }\n            }\n            RectangleD.prototype.getX = function() {\n                return this.x;\n            };\n            RectangleD.prototype.setX = function(x) {\n                this.x = x;\n            };\n            RectangleD.prototype.getY = function() {\n                return this.y;\n            };\n            RectangleD.prototype.setY = function(y) {\n                this.y = y;\n            };\n            RectangleD.prototype.getWidth = function() {\n                return this.width;\n            };\n            RectangleD.prototype.setWidth = function(width) {\n                this.width = width;\n            };\n            RectangleD.prototype.getHeight = function() {\n                return this.height;\n            };\n            RectangleD.prototype.setHeight = function(height) {\n                this.height = height;\n            };\n            RectangleD.prototype.getRight = function() {\n                return this.x + this.width;\n            };\n            RectangleD.prototype.getBottom = function() {\n                return this.y + this.height;\n            };\n            RectangleD.prototype.intersects = function(a) {\n                if (this.getRight() < a.x) {\n                    return false;\n                }\n                if (this.getBottom() < a.y) {\n                    return false;\n                }\n                if (a.getRight() < this.x) {\n                    return false;\n                }\n                if (a.getBottom() < this.y) {\n                    return false;\n                }\n                return true;\n            };\n            RectangleD.prototype.getCenterX = function() {\n                return this.x + this.width / 2;\n            };\n            RectangleD.prototype.getMinX = function() {\n                return this.getX();\n            };\n            RectangleD.prototype.getMaxX = function() {\n                return this.getX() + this.width;\n            };\n            RectangleD.prototype.getCenterY = function() {\n                return this.y + this.height / 2;\n            };\n            RectangleD.prototype.getMinY = function() {\n                return this.getY();\n            };\n            RectangleD.prototype.getMaxY = function() {\n                return this.getY() + this.height;\n            };\n            RectangleD.prototype.getWidthHalf = function() {\n                return this.width / 2;\n            };\n            RectangleD.prototype.getHeightHalf = function() {\n                return this.height / 2;\n            };\n            module1.exports = RectangleD;\n        /***/ },\n        /* 14 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n                return typeof obj;\n            } : function(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            function UniqueIDGeneretor() {}\n            UniqueIDGeneretor.lastID = 0;\n            UniqueIDGeneretor.createID = function(obj) {\n                if (UniqueIDGeneretor.isPrimitive(obj)) {\n                    return obj;\n                }\n                if (obj.uniqueID != null) {\n                    return obj.uniqueID;\n                }\n                obj.uniqueID = UniqueIDGeneretor.getString();\n                UniqueIDGeneretor.lastID++;\n                return obj.uniqueID;\n            };\n            UniqueIDGeneretor.getString = function(id) {\n                if (id == null) id = UniqueIDGeneretor.lastID;\n                return \"Object#\" + id + \"\";\n            };\n            UniqueIDGeneretor.isPrimitive = function(arg) {\n                var type = typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg);\n                return arg == null || type != \"object\" && type != \"function\";\n            };\n            module1.exports = UniqueIDGeneretor;\n        /***/ },\n        /* 15 */ /***/ function(module1, exports1, __nested_webpack_require_95260__) {\n            \"use strict\";\n            function _toConsumableArray(arr) {\n                if (Array.isArray(arr)) {\n                    for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++){\n                        arr2[i] = arr[i];\n                    }\n                    return arr2;\n                } else {\n                    return Array.from(arr);\n                }\n            }\n            var LayoutConstants = __nested_webpack_require_95260__(0);\n            var LGraphManager = __nested_webpack_require_95260__(7);\n            var LNode = __nested_webpack_require_95260__(3);\n            var LEdge = __nested_webpack_require_95260__(1);\n            var LGraph = __nested_webpack_require_95260__(6);\n            var PointD = __nested_webpack_require_95260__(5);\n            var Transform = __nested_webpack_require_95260__(17);\n            var Emitter = __nested_webpack_require_95260__(29);\n            function Layout1(isRemoteUse) {\n                Emitter.call(this);\n                //Layout Quality: 0:draft, 1:default, 2:proof\n                this.layoutQuality = LayoutConstants.QUALITY;\n                //Whether layout should create bendpoints as needed or not\n                this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n                //Whether layout should be incremental or not\n                this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n                //Whether we animate from before to after layout node positions\n                this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n                //Whether we animate the layout process or not\n                this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n                //Number iterations that should be done between two successive animations\n                this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n                /**\r\n   * Whether or not leaf nodes (non-compound nodes) are of uniform sizes. When\r\n   * they are, both spring and repulsion forces between two leaf nodes can be\r\n   * calculated without the expensive clipping point calculations, resulting\r\n   * in major speed-up.\r\n   */ this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n                /**\r\n   * This is used for creation of bendpoints by using dummy nodes and edges.\r\n   * Maps an LEdge to its dummy bendpoint path.\r\n   */ this.edgeToDummyNodes = new Map();\n                this.graphManager = new LGraphManager(this);\n                this.isLayoutFinished = false;\n                this.isSubLayout = false;\n                this.isRemoteUse = false;\n                if (isRemoteUse != null) {\n                    this.isRemoteUse = isRemoteUse;\n                }\n            }\n            Layout1.RANDOM_SEED = 1;\n            Layout1.prototype = Object.create(Emitter.prototype);\n            Layout1.prototype.getGraphManager = function() {\n                return this.graphManager;\n            };\n            Layout1.prototype.getAllNodes = function() {\n                return this.graphManager.getAllNodes();\n            };\n            Layout1.prototype.getAllEdges = function() {\n                return this.graphManager.getAllEdges();\n            };\n            Layout1.prototype.getAllNodesToApplyGravitation = function() {\n                return this.graphManager.getAllNodesToApplyGravitation();\n            };\n            Layout1.prototype.newGraphManager = function() {\n                var gm = new LGraphManager(this);\n                this.graphManager = gm;\n                return gm;\n            };\n            Layout1.prototype.newGraph = function(vGraph) {\n                return new LGraph(null, this.graphManager, vGraph);\n            };\n            Layout1.prototype.newNode = function(vNode) {\n                return new LNode(this.graphManager, vNode);\n            };\n            Layout1.prototype.newEdge = function(vEdge) {\n                return new LEdge(null, null, vEdge);\n            };\n            Layout1.prototype.checkLayoutSuccess = function() {\n                return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();\n            };\n            Layout1.prototype.runLayout = function() {\n                this.isLayoutFinished = false;\n                if (this.tilingPreLayout) {\n                    this.tilingPreLayout();\n                }\n                this.initParameters();\n                var isLayoutSuccessfull;\n                if (this.checkLayoutSuccess()) {\n                    isLayoutSuccessfull = false;\n                } else {\n                    isLayoutSuccessfull = this.layout();\n                }\n                if (LayoutConstants.ANIMATE === \"during\") {\n                    // If this is a 'during' layout animation. Layout is not finished yet. \n                    // We need to perform these in index.js when layout is really finished.\n                    return false;\n                }\n                if (isLayoutSuccessfull) {\n                    if (!this.isSubLayout) {\n                        this.doPostLayout();\n                    }\n                }\n                if (this.tilingPostLayout) {\n                    this.tilingPostLayout();\n                }\n                this.isLayoutFinished = true;\n                return isLayoutSuccessfull;\n            };\n            /**\r\n * This method performs the operations required after layout.\r\n */ Layout1.prototype.doPostLayout = function() {\n                //assert !isSubLayout : \"Should not be called on sub-layout!\";\n                // Propagate geometric changes to v-level objects\n                if (!this.incremental) {\n                    this.transform();\n                }\n                this.update();\n            };\n            /**\r\n * This method updates the geometry of the target graph according to\r\n * calculated layout.\r\n */ Layout1.prototype.update2 = function() {\n                // update bend points\n                if (this.createBendsAsNeeded) {\n                    this.createBendpointsFromDummyNodes();\n                    // reset all edges, since the topology has changed\n                    this.graphManager.resetAllEdges();\n                }\n                // perform edge, node and root updates if layout is not called\n                // remotely\n                if (!this.isRemoteUse) {\n                    // update all edges\n                    var edge;\n                    var allEdges = this.graphManager.getAllEdges();\n                    for(var i = 0; i < allEdges.length; i++){\n                        edge = allEdges[i];\n                    //      this.update(edge);\n                    }\n                    // recursively update nodes\n                    var node;\n                    var nodes = this.graphManager.getRoot().getNodes();\n                    for(var i = 0; i < nodes.length; i++){\n                        node = nodes[i];\n                    //      this.update(node);\n                    }\n                    // update root graph\n                    this.update(this.graphManager.getRoot());\n                }\n            };\n            Layout1.prototype.update = function(obj) {\n                if (obj == null) {\n                    this.update2();\n                } else if (obj instanceof LNode) {\n                    var node = obj;\n                    if (node.getChild() != null) {\n                        // since node is compound, recursively update child nodes\n                        var nodes = node.getChild().getNodes();\n                        for(var i = 0; i < nodes.length; i++){\n                            update(nodes[i]);\n                        }\n                    }\n                    // if the l-level node is associated with a v-level graph object,\n                    // then it is assumed that the v-level node implements the\n                    // interface Updatable.\n                    if (node.vGraphObject != null) {\n                        // cast to Updatable without any type check\n                        var vNode = node.vGraphObject;\n                        // call the update method of the interface\n                        vNode.update(node);\n                    }\n                } else if (obj instanceof LEdge) {\n                    var edge = obj;\n                    // if the l-level edge is associated with a v-level graph object,\n                    // then it is assumed that the v-level edge implements the\n                    // interface Updatable.\n                    if (edge.vGraphObject != null) {\n                        // cast to Updatable without any type check\n                        var vEdge = edge.vGraphObject;\n                        // call the update method of the interface\n                        vEdge.update(edge);\n                    }\n                } else if (obj instanceof LGraph) {\n                    var graph = obj;\n                    // if the l-level graph is associated with a v-level graph object,\n                    // then it is assumed that the v-level object implements the\n                    // interface Updatable.\n                    if (graph.vGraphObject != null) {\n                        // cast to Updatable without any type check\n                        var vGraph = graph.vGraphObject;\n                        // call the update method of the interface\n                        vGraph.update(graph);\n                    }\n                }\n            };\n            /**\r\n * This method is used to set all layout parameters to default values\r\n * determined at compile time.\r\n */ Layout1.prototype.initParameters = function() {\n                if (!this.isSubLayout) {\n                    this.layoutQuality = LayoutConstants.QUALITY;\n                    this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n                    this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n                    this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n                    this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n                    this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n                    this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n                }\n                if (this.animationDuringLayout) {\n                    this.animationOnLayout = false;\n                }\n            };\n            Layout1.prototype.transform = function(newLeftTop) {\n                if (newLeftTop == undefined) {\n                    this.transform(new PointD(0, 0));\n                } else {\n                    // create a transformation object (from Eclipse to layout). When an\n                    // inverse transform is applied, we get upper-left coordinate of the\n                    // drawing or the root graph at given input coordinate (some margins\n                    // already included in calculation of left-top).\n                    var trans = new Transform();\n                    var leftTop = this.graphManager.getRoot().updateLeftTop();\n                    if (leftTop != null) {\n                        trans.setWorldOrgX(newLeftTop.x);\n                        trans.setWorldOrgY(newLeftTop.y);\n                        trans.setDeviceOrgX(leftTop.x);\n                        trans.setDeviceOrgY(leftTop.y);\n                        var nodes = this.getAllNodes();\n                        var node;\n                        for(var i = 0; i < nodes.length; i++){\n                            node = nodes[i];\n                            node.transform(trans);\n                        }\n                    }\n                }\n            };\n            Layout1.prototype.positionNodesRandomly = function(graph) {\n                if (graph == undefined) {\n                    //assert !this.incremental;\n                    this.positionNodesRandomly(this.getGraphManager().getRoot());\n                    this.getGraphManager().getRoot().updateBounds(true);\n                } else {\n                    var lNode;\n                    var childGraph;\n                    var nodes = graph.getNodes();\n                    for(var i = 0; i < nodes.length; i++){\n                        lNode = nodes[i];\n                        childGraph = lNode.getChild();\n                        if (childGraph == null) {\n                            lNode.scatter();\n                        } else if (childGraph.getNodes().length == 0) {\n                            lNode.scatter();\n                        } else {\n                            this.positionNodesRandomly(childGraph);\n                            lNode.updateBounds();\n                        }\n                    }\n                }\n            };\n            /**\r\n * This method returns a list of trees where each tree is represented as a\r\n * list of l-nodes. The method returns a list of size 0 when:\r\n * - The graph is not flat or\r\n * - One of the component(s) of the graph is not a tree.\r\n */ Layout1.prototype.getFlatForest = function() {\n                var flatForest = [];\n                var isForest = true;\n                // Quick reference for all nodes in the graph manager associated with\n                // this layout. The list should not be changed.\n                var allNodes = this.graphManager.getRoot().getNodes();\n                // First be sure that the graph is flat\n                var isFlat = true;\n                for(var i = 0; i < allNodes.length; i++){\n                    if (allNodes[i].getChild() != null) {\n                        isFlat = false;\n                    }\n                }\n                // Return empty forest if the graph is not flat.\n                if (!isFlat) {\n                    return flatForest;\n                }\n                // Run BFS for each component of the graph.\n                var visited = new Set();\n                var toBeVisited = [];\n                var parents = new Map();\n                var unProcessedNodes = [];\n                unProcessedNodes = unProcessedNodes.concat(allNodes);\n                // Each iteration of this loop finds a component of the graph and\n                // decides whether it is a tree or not. If it is a tree, adds it to the\n                // forest and continued with the next component.\n                while(unProcessedNodes.length > 0 && isForest){\n                    toBeVisited.push(unProcessedNodes[0]);\n                    // Start the BFS. Each iteration of this loop visits a node in a\n                    // BFS manner.\n                    while(toBeVisited.length > 0 && isForest){\n                        //pool operation\n                        var currentNode = toBeVisited[0];\n                        toBeVisited.splice(0, 1);\n                        visited.add(currentNode);\n                        // Traverse all neighbors of this node\n                        var neighborEdges = currentNode.getEdges();\n                        for(var i = 0; i < neighborEdges.length; i++){\n                            var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode);\n                            // If BFS is not growing from this neighbor.\n                            if (parents.get(currentNode) != currentNeighbor) {\n                                // We haven't previously visited this neighbor.\n                                if (!visited.has(currentNeighbor)) {\n                                    toBeVisited.push(currentNeighbor);\n                                    parents.set(currentNeighbor, currentNode);\n                                } else {\n                                    isForest = false;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    // The graph contains a component that is not a tree. Empty\n                    // previously found trees. The method will end.\n                    if (!isForest) {\n                        flatForest = [];\n                    } else {\n                        var temp = [].concat(_toConsumableArray(visited));\n                        flatForest.push(temp);\n                        //flatForest = flatForest.concat(temp);\n                        //unProcessedNodes.removeAll(visited);\n                        for(var i = 0; i < temp.length; i++){\n                            var value = temp[i];\n                            var index = unProcessedNodes.indexOf(value);\n                            if (index > -1) {\n                                unProcessedNodes.splice(index, 1);\n                            }\n                        }\n                        visited = new Set();\n                        parents = new Map();\n                    }\n                }\n                return flatForest;\n            };\n            /**\r\n * This method creates dummy nodes (an l-level node with minimal dimensions)\r\n * for the given edge (one per bendpoint). The existing l-level structure\r\n * is updated accordingly.\r\n */ Layout1.prototype.createDummyNodesForBendpoints = function(edge) {\n                var dummyNodes = [];\n                var prev = edge.source;\n                var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);\n                for(var i = 0; i < edge.bendpoints.length; i++){\n                    // create new dummy node\n                    var dummyNode = this.newNode(null);\n                    dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));\n                    graph.add(dummyNode);\n                    // create new dummy edge between prev and dummy node\n                    var dummyEdge = this.newEdge(null);\n                    this.graphManager.add(dummyEdge, prev, dummyNode);\n                    dummyNodes.add(dummyNode);\n                    prev = dummyNode;\n                }\n                var dummyEdge = this.newEdge(null);\n                this.graphManager.add(dummyEdge, prev, edge.target);\n                this.edgeToDummyNodes.set(edge, dummyNodes);\n                // remove real edge from graph manager if it is inter-graph\n                if (edge.isInterGraph()) {\n                    this.graphManager.remove(edge);\n                } else {\n                    graph.remove(edge);\n                }\n                return dummyNodes;\n            };\n            /**\r\n * This method creates bendpoints for edges from the dummy nodes\r\n * at l-level.\r\n */ Layout1.prototype.createBendpointsFromDummyNodes = function() {\n                var edges = [];\n                edges = edges.concat(this.graphManager.getAllEdges());\n                edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);\n                for(var k = 0; k < edges.length; k++){\n                    var lEdge = edges[k];\n                    if (lEdge.bendpoints.length > 0) {\n                        var path = this.edgeToDummyNodes.get(lEdge);\n                        for(var i = 0; i < path.length; i++){\n                            var dummyNode = path[i];\n                            var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());\n                            // update bendpoint's location according to dummy node\n                            var ebp = lEdge.bendpoints.get(i);\n                            ebp.x = p.x;\n                            ebp.y = p.y;\n                            // remove the dummy node, dummy edges incident with this\n                            // dummy node is also removed (within the remove method)\n                            dummyNode.getOwner().remove(dummyNode);\n                        }\n                        // add the real edge to graph\n                        this.graphManager.add(lEdge, lEdge.source, lEdge.target);\n                    }\n                }\n            };\n            Layout1.transform = function(sliderValue, defaultValue, minDiv, maxMul) {\n                if (minDiv != undefined && maxMul != undefined) {\n                    var value = defaultValue;\n                    if (sliderValue <= 50) {\n                        var minValue = defaultValue / minDiv;\n                        value -= (defaultValue - minValue) / 50 * (50 - sliderValue);\n                    } else {\n                        var maxValue = defaultValue * maxMul;\n                        value += (maxValue - defaultValue) / 50 * (sliderValue - 50);\n                    }\n                    return value;\n                } else {\n                    var a, b;\n                    if (sliderValue <= 50) {\n                        a = 9.0 * defaultValue / 500.0;\n                        b = defaultValue / 10.0;\n                    } else {\n                        a = 9.0 * defaultValue / 50.0;\n                        b = -8 * defaultValue;\n                    }\n                    return a * sliderValue + b;\n                }\n            };\n            /**\r\n * This method finds and returns the center of the given nodes, assuming\r\n * that the given nodes form a tree in themselves.\r\n */ Layout1.findCenterOfTree = function(nodes) {\n                var list = [];\n                list = list.concat(nodes);\n                var removedNodes = [];\n                var remainingDegrees = new Map();\n                var foundCenter = false;\n                var centerNode = null;\n                if (list.length == 1 || list.length == 2) {\n                    foundCenter = true;\n                    centerNode = list[0];\n                }\n                for(var i = 0; i < list.length; i++){\n                    var node = list[i];\n                    var degree = node.getNeighborsList().size;\n                    remainingDegrees.set(node, node.getNeighborsList().size);\n                    if (degree == 1) {\n                        removedNodes.push(node);\n                    }\n                }\n                var tempList = [];\n                tempList = tempList.concat(removedNodes);\n                while(!foundCenter){\n                    var tempList2 = [];\n                    tempList2 = tempList2.concat(tempList);\n                    tempList = [];\n                    for(var i = 0; i < list.length; i++){\n                        var node = list[i];\n                        var index = list.indexOf(node);\n                        if (index >= 0) {\n                            list.splice(index, 1);\n                        }\n                        var neighbours = node.getNeighborsList();\n                        neighbours.forEach(function(neighbour) {\n                            if (removedNodes.indexOf(neighbour) < 0) {\n                                var otherDegree = remainingDegrees.get(neighbour);\n                                var newDegree = otherDegree - 1;\n                                if (newDegree == 1) {\n                                    tempList.push(neighbour);\n                                }\n                                remainingDegrees.set(neighbour, newDegree);\n                            }\n                        });\n                    }\n                    removedNodes = removedNodes.concat(tempList);\n                    if (list.length == 1 || list.length == 2) {\n                        foundCenter = true;\n                        centerNode = list[0];\n                    }\n                }\n                return centerNode;\n            };\n            /**\r\n * During the coarsening process, this layout may be referenced by two graph managers\r\n * this setter function grants access to change the currently being used graph manager\r\n */ Layout1.prototype.setGraphManager = function(gm) {\n                this.graphManager = gm;\n            };\n            module1.exports = Layout1;\n        /***/ },\n        /* 16 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function RandomSeed() {}\n            // adapted from: https://stackoverflow.com/a/19303725\n            RandomSeed.seed = 1;\n            RandomSeed.x = 0;\n            RandomSeed.nextDouble = function() {\n                RandomSeed.x = Math.sin(RandomSeed.seed++) * 10000;\n                return RandomSeed.x - Math.floor(RandomSeed.x);\n            };\n            module1.exports = RandomSeed;\n        /***/ },\n        /* 17 */ /***/ function(module1, exports1, __nested_webpack_require_119564__) {\n            \"use strict\";\n            var PointD = __nested_webpack_require_119564__(5);\n            function Transform(x, y) {\n                this.lworldOrgX = 0.0;\n                this.lworldOrgY = 0.0;\n                this.ldeviceOrgX = 0.0;\n                this.ldeviceOrgY = 0.0;\n                this.lworldExtX = 1.0;\n                this.lworldExtY = 1.0;\n                this.ldeviceExtX = 1.0;\n                this.ldeviceExtY = 1.0;\n            }\n            Transform.prototype.getWorldOrgX = function() {\n                return this.lworldOrgX;\n            };\n            Transform.prototype.setWorldOrgX = function(wox) {\n                this.lworldOrgX = wox;\n            };\n            Transform.prototype.getWorldOrgY = function() {\n                return this.lworldOrgY;\n            };\n            Transform.prototype.setWorldOrgY = function(woy) {\n                this.lworldOrgY = woy;\n            };\n            Transform.prototype.getWorldExtX = function() {\n                return this.lworldExtX;\n            };\n            Transform.prototype.setWorldExtX = function(wex) {\n                this.lworldExtX = wex;\n            };\n            Transform.prototype.getWorldExtY = function() {\n                return this.lworldExtY;\n            };\n            Transform.prototype.setWorldExtY = function(wey) {\n                this.lworldExtY = wey;\n            };\n            /* Device related */ Transform.prototype.getDeviceOrgX = function() {\n                return this.ldeviceOrgX;\n            };\n            Transform.prototype.setDeviceOrgX = function(dox) {\n                this.ldeviceOrgX = dox;\n            };\n            Transform.prototype.getDeviceOrgY = function() {\n                return this.ldeviceOrgY;\n            };\n            Transform.prototype.setDeviceOrgY = function(doy) {\n                this.ldeviceOrgY = doy;\n            };\n            Transform.prototype.getDeviceExtX = function() {\n                return this.ldeviceExtX;\n            };\n            Transform.prototype.setDeviceExtX = function(dex) {\n                this.ldeviceExtX = dex;\n            };\n            Transform.prototype.getDeviceExtY = function() {\n                return this.ldeviceExtY;\n            };\n            Transform.prototype.setDeviceExtY = function(dey) {\n                this.ldeviceExtY = dey;\n            };\n            Transform.prototype.transformX = function(x) {\n                var xDevice = 0.0;\n                var worldExtX = this.lworldExtX;\n                if (worldExtX != 0.0) {\n                    xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;\n                }\n                return xDevice;\n            };\n            Transform.prototype.transformY = function(y) {\n                var yDevice = 0.0;\n                var worldExtY = this.lworldExtY;\n                if (worldExtY != 0.0) {\n                    yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;\n                }\n                return yDevice;\n            };\n            Transform.prototype.inverseTransformX = function(x) {\n                var xWorld = 0.0;\n                var deviceExtX = this.ldeviceExtX;\n                if (deviceExtX != 0.0) {\n                    xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;\n                }\n                return xWorld;\n            };\n            Transform.prototype.inverseTransformY = function(y) {\n                var yWorld = 0.0;\n                var deviceExtY = this.ldeviceExtY;\n                if (deviceExtY != 0.0) {\n                    yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;\n                }\n                return yWorld;\n            };\n            Transform.prototype.inverseTransformPoint = function(inPoint) {\n                var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));\n                return outPoint;\n            };\n            module1.exports = Transform;\n        /***/ },\n        /* 18 */ /***/ function(module1, exports1, __nested_webpack_require_123688__) {\n            \"use strict\";\n            function _toConsumableArray(arr) {\n                if (Array.isArray(arr)) {\n                    for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++){\n                        arr2[i] = arr[i];\n                    }\n                    return arr2;\n                } else {\n                    return Array.from(arr);\n                }\n            }\n            var Layout1 = __nested_webpack_require_123688__(15);\n            var FDLayoutConstants = __nested_webpack_require_123688__(4);\n            var LayoutConstants = __nested_webpack_require_123688__(0);\n            var IGeometry = __nested_webpack_require_123688__(8);\n            var IMath = __nested_webpack_require_123688__(9);\n            function FDLayout() {\n                Layout1.call(this);\n                this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n                this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n                this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n                this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n                this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n                this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;\n                this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n                this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n                this.totalDisplacement = 0.0;\n                this.oldTotalDisplacement = 0.0;\n                this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;\n            }\n            FDLayout.prototype = Object.create(Layout1.prototype);\n            for(var prop in Layout1){\n                FDLayout[prop] = Layout1[prop];\n            }\n            FDLayout.prototype.initParameters = function() {\n                Layout1.prototype.initParameters.call(this, arguments);\n                this.totalIterations = 0;\n                this.notAnimatedIterations = 0;\n                this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;\n                this.grid = [];\n            };\n            FDLayout.prototype.calcIdealEdgeLengths = function() {\n                var edge;\n                var originalIdealLength;\n                var lcaDepth;\n                var source;\n                var target;\n                var sizeOfSourceInLca;\n                var sizeOfTargetInLca;\n                var allEdges = this.getGraphManager().getAllEdges();\n                for(var i = 0; i < allEdges.length; i++){\n                    edge = allEdges[i];\n                    originalIdealLength = edge.idealLength;\n                    if (edge.isInterGraph) {\n                        source = edge.getSource();\n                        target = edge.getTarget();\n                        sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();\n                        sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();\n                        if (this.useSmartIdealEdgeLengthCalculation) {\n                            edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;\n                        }\n                        lcaDepth = edge.getLca().getInclusionTreeDepth();\n                        edge.idealLength += originalIdealLength * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);\n                    }\n                }\n            };\n            FDLayout.prototype.initSpringEmbedder = function() {\n                var s = this.getAllNodes().length;\n                if (this.incremental) {\n                    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n                        this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n                    }\n                    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;\n                } else {\n                    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n                        this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1.0 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n                    } else {\n                        this.coolingFactor = 1.0;\n                    }\n                    this.initialCoolingFactor = this.coolingFactor;\n                    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;\n                }\n                this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);\n                // Reassign this attribute by using new constant value\n                this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;\n                this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;\n                this.repulsionRange = this.calcRepulsionRange();\n            };\n            FDLayout.prototype.calcSpringForces = function() {\n                var lEdges = this.getAllEdges();\n                var edge;\n                for(var i = 0; i < lEdges.length; i++){\n                    edge = lEdges[i];\n                    this.calcSpringForce(edge, edge.idealLength);\n                }\n            };\n            FDLayout.prototype.calcRepulsionForces = function() {\n                var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n                var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var i, j;\n                var nodeA, nodeB;\n                var lNodes = this.getAllNodes();\n                var processedNodeSet;\n                if (this.useFRGridVariant) {\n                    if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {\n                        this.updateGrid();\n                    }\n                    processedNodeSet = new Set();\n                    // calculate repulsion forces between each nodes and its surrounding\n                    for(i = 0; i < lNodes.length; i++){\n                        nodeA = lNodes[i];\n                        this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);\n                        processedNodeSet.add(nodeA);\n                    }\n                } else {\n                    for(i = 0; i < lNodes.length; i++){\n                        nodeA = lNodes[i];\n                        for(j = i + 1; j < lNodes.length; j++){\n                            nodeB = lNodes[j];\n                            // If both nodes are not members of the same graph, skip.\n                            if (nodeA.getOwner() != nodeB.getOwner()) {\n                                continue;\n                            }\n                            this.calcRepulsionForce(nodeA, nodeB);\n                        }\n                    }\n                }\n            };\n            FDLayout.prototype.calcGravitationalForces = function() {\n                var node;\n                var lNodes = this.getAllNodesToApplyGravitation();\n                for(var i = 0; i < lNodes.length; i++){\n                    node = lNodes[i];\n                    this.calcGravitationalForce(node);\n                }\n            };\n            FDLayout.prototype.moveNodes = function() {\n                var lNodes = this.getAllNodes();\n                var node;\n                for(var i = 0; i < lNodes.length; i++){\n                    node = lNodes[i];\n                    node.move();\n                }\n            };\n            FDLayout.prototype.calcSpringForce = function(edge, idealLength) {\n                var sourceNode = edge.getSource();\n                var targetNode = edge.getTarget();\n                var length;\n                var springForce;\n                var springForceX;\n                var springForceY;\n                // Update edge length\n                if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {\n                    edge.updateLengthSimple();\n                } else {\n                    edge.updateLength();\n                    if (edge.isOverlapingSourceAndTarget) {\n                        return;\n                    }\n                }\n                length = edge.getLength();\n                if (length == 0) return;\n                // Calculate spring forces\n                springForce = edge.edgeElasticity * (length - idealLength);\n                // Project force onto x and y axes\n                springForceX = springForce * (edge.lengthX / length);\n                springForceY = springForce * (edge.lengthY / length);\n                // Apply forces on the end nodes\n                sourceNode.springForceX += springForceX;\n                sourceNode.springForceY += springForceY;\n                targetNode.springForceX -= springForceX;\n                targetNode.springForceY -= springForceY;\n            };\n            FDLayout.prototype.calcRepulsionForce = function(nodeA, nodeB) {\n                var rectA = nodeA.getRect();\n                var rectB = nodeB.getRect();\n                var overlapAmount = new Array(2);\n                var clipPoints = new Array(4);\n                var distanceX;\n                var distanceY;\n                var distanceSquared;\n                var distance;\n                var repulsionForce;\n                var repulsionForceX;\n                var repulsionForceY;\n                if (rectA.intersects(rectB)) {\n                    // calculate separation amount in x and y directions\n                    IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);\n                    repulsionForceX = 2 * overlapAmount[0];\n                    repulsionForceY = 2 * overlapAmount[1];\n                    var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);\n                    // Apply forces on the two nodes\n                    nodeA.repulsionForceX -= childrenConstant * repulsionForceX;\n                    nodeA.repulsionForceY -= childrenConstant * repulsionForceY;\n                    nodeB.repulsionForceX += childrenConstant * repulsionForceX;\n                    nodeB.repulsionForceY += childrenConstant * repulsionForceY;\n                } else {\n                    // calculate distance\n                    if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) {\n                        distanceX = rectB.getCenterX() - rectA.getCenterX();\n                        distanceY = rectB.getCenterY() - rectA.getCenterY();\n                    } else {\n                        IGeometry.getIntersection(rectA, rectB, clipPoints);\n                        distanceX = clipPoints[2] - clipPoints[0];\n                        distanceY = clipPoints[3] - clipPoints[1];\n                    }\n                    // No repulsion range. FR grid variant should take care of this.\n                    if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {\n                        distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;\n                    }\n                    if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {\n                        distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;\n                    }\n                    distanceSquared = distanceX * distanceX + distanceY * distanceY;\n                    distance = Math.sqrt(distanceSquared);\n                    // Here we use half of the nodes' repulsion values for backward compatibility\n                    repulsionForce = (nodeA.nodeRepulsion / 2 + nodeB.nodeRepulsion / 2) * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;\n                    // Project force onto x and y axes\n                    repulsionForceX = repulsionForce * distanceX / distance;\n                    repulsionForceY = repulsionForce * distanceY / distance;\n                    // Apply forces on the two nodes    \n                    nodeA.repulsionForceX -= repulsionForceX;\n                    nodeA.repulsionForceY -= repulsionForceY;\n                    nodeB.repulsionForceX += repulsionForceX;\n                    nodeB.repulsionForceY += repulsionForceY;\n                }\n            };\n            FDLayout.prototype.calcGravitationalForce = function(node) {\n                var ownerGraph;\n                var ownerCenterX;\n                var ownerCenterY;\n                var distanceX;\n                var distanceY;\n                var absDistanceX;\n                var absDistanceY;\n                var estimatedSize;\n                ownerGraph = node.getOwner();\n                ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;\n                ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;\n                distanceX = node.getCenterX() - ownerCenterX;\n                distanceY = node.getCenterY() - ownerCenterY;\n                absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;\n                absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;\n                if (node.getOwner() == this.graphManager.getRoot()) {\n                    estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;\n                    if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n                        node.gravitationForceX = -this.gravityConstant * distanceX;\n                        node.gravitationForceY = -this.gravityConstant * distanceY;\n                    }\n                } else {\n                    estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;\n                    if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n                        node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;\n                        node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;\n                    }\n                }\n            };\n            FDLayout.prototype.isConverged = function() {\n                var converged;\n                var oscilating = false;\n                if (this.totalIterations > this.maxIterations / 3) {\n                    oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;\n                }\n                converged = this.totalDisplacement < this.totalDisplacementThreshold;\n                this.oldTotalDisplacement = this.totalDisplacement;\n                return converged || oscilating;\n            };\n            FDLayout.prototype.animate = function() {\n                if (this.animationDuringLayout && !this.isSubLayout) {\n                    if (this.notAnimatedIterations == this.animationPeriod) {\n                        this.update();\n                        this.notAnimatedIterations = 0;\n                    } else {\n                        this.notAnimatedIterations++;\n                    }\n                }\n            };\n            //This method calculates the number of children (weight) for all nodes\n            FDLayout.prototype.calcNoOfChildrenForAllNodes = function() {\n                var node;\n                var allNodes = this.graphManager.getAllNodes();\n                for(var i = 0; i < allNodes.length; i++){\n                    node = allNodes[i];\n                    node.noOfChildren = node.getNoOfChildren();\n                }\n            };\n            // -----------------------------------------------------------------------------\n            // Section: FR-Grid Variant Repulsion Force Calculation\n            // -----------------------------------------------------------------------------\n            FDLayout.prototype.calcGrid = function(graph) {\n                var sizeX = 0;\n                var sizeY = 0;\n                sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));\n                sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));\n                var grid = new Array(sizeX);\n                for(var i = 0; i < sizeX; i++){\n                    grid[i] = new Array(sizeY);\n                }\n                for(var i = 0; i < sizeX; i++){\n                    for(var j = 0; j < sizeY; j++){\n                        grid[i][j] = new Array();\n                    }\n                }\n                return grid;\n            };\n            FDLayout.prototype.addNodeToGrid = function(v, left, top) {\n                var startX = 0;\n                var finishX = 0;\n                var startY = 0;\n                var finishY = 0;\n                startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));\n                finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));\n                startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));\n                finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));\n                for(var i = startX; i <= finishX; i++){\n                    for(var j = startY; j <= finishY; j++){\n                        this.grid[i][j].push(v);\n                        v.setGridCoordinates(startX, finishX, startY, finishY);\n                    }\n                }\n            };\n            FDLayout.prototype.updateGrid = function() {\n                var i;\n                var nodeA;\n                var lNodes = this.getAllNodes();\n                this.grid = this.calcGrid(this.graphManager.getRoot());\n                // put all nodes to proper grid cells\n                for(i = 0; i < lNodes.length; i++){\n                    nodeA = lNodes[i];\n                    this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());\n                }\n            };\n            FDLayout.prototype.calculateRepulsionForceOfANode = function(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {\n                if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {\n                    var surrounding = new Set();\n                    nodeA.surrounding = new Array();\n                    var nodeB;\n                    var grid = this.grid;\n                    for(var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++){\n                        for(var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++){\n                            if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {\n                                for(var k = 0; k < grid[i][j].length; k++){\n                                    nodeB = grid[i][j][k];\n                                    // If both nodes are not members of the same graph, \n                                    // or both nodes are the same, skip.\n                                    if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {\n                                        continue;\n                                    }\n                                    // check if the repulsion force between\n                                    // nodeA and nodeB has already been calculated\n                                    if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {\n                                        var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);\n                                        var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);\n                                        // if the distance between nodeA and nodeB \n                                        // is less then calculation range\n                                        if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {\n                                            //then add nodeB to surrounding of nodeA\n                                            surrounding.add(nodeB);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    nodeA.surrounding = [].concat(_toConsumableArray(surrounding));\n                }\n                for(i = 0; i < nodeA.surrounding.length; i++){\n                    this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);\n                }\n            };\n            FDLayout.prototype.calcRepulsionRange = function() {\n                return 0.0;\n            };\n            module1.exports = FDLayout;\n        /***/ },\n        /* 19 */ /***/ function(module1, exports1, __nested_webpack_require_145238__) {\n            \"use strict\";\n            var LEdge = __nested_webpack_require_145238__(1);\n            var FDLayoutConstants = __nested_webpack_require_145238__(4);\n            function FDLayoutEdge(source, target, vEdge) {\n                LEdge.call(this, source, target, vEdge);\n                // Ideal length and elasticity value for this edge\n                this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n                this.edgeElasticity = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n            }\n            FDLayoutEdge.prototype = Object.create(LEdge.prototype);\n            for(var prop in LEdge){\n                FDLayoutEdge[prop] = LEdge[prop];\n            }\n            module1.exports = FDLayoutEdge;\n        /***/ },\n        /* 20 */ /***/ function(module1, exports1, __nested_webpack_require_146028__) {\n            \"use strict\";\n            var LNode = __nested_webpack_require_146028__(3);\n            var FDLayoutConstants = __nested_webpack_require_146028__(4);\n            function FDLayoutNode(gm, loc, size, vNode) {\n                // alternative constructor is handled inside LNode\n                LNode.call(this, gm, loc, size, vNode);\n                // Repulsion value of this node\n                this.nodeRepulsion = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n                //Spring, repulsion and gravitational forces acting on this node\n                this.springForceX = 0;\n                this.springForceY = 0;\n                this.repulsionForceX = 0;\n                this.repulsionForceY = 0;\n                this.gravitationForceX = 0;\n                this.gravitationForceY = 0;\n                //Amount by which this node is to be moved in this iteration\n                this.displacementX = 0;\n                this.displacementY = 0;\n                //Start and finish grid coordinates that this node is fallen into\n                this.startX = 0;\n                this.finishX = 0;\n                this.startY = 0;\n                this.finishY = 0;\n                //Geometric neighbors of this node\n                this.surrounding = [];\n            }\n            FDLayoutNode.prototype = Object.create(LNode.prototype);\n            for(var prop in LNode){\n                FDLayoutNode[prop] = LNode[prop];\n            }\n            FDLayoutNode.prototype.setGridCoordinates = function(_startX, _finishX, _startY, _finishY) {\n                this.startX = _startX;\n                this.finishX = _finishX;\n                this.startY = _startY;\n                this.finishY = _finishY;\n            };\n            module1.exports = FDLayoutNode;\n        /***/ },\n        /* 21 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function DimensionD1(width, height) {\n                this.width = 0;\n                this.height = 0;\n                if (width !== null && height !== null) {\n                    this.height = height;\n                    this.width = width;\n                }\n            }\n            DimensionD1.prototype.getWidth = function() {\n                return this.width;\n            };\n            DimensionD1.prototype.setWidth = function(width) {\n                this.width = width;\n            };\n            DimensionD1.prototype.getHeight = function() {\n                return this.height;\n            };\n            DimensionD1.prototype.setHeight = function(height) {\n                this.height = height;\n            };\n            module1.exports = DimensionD1;\n        /***/ },\n        /* 22 */ /***/ function(module1, exports1, __nested_webpack_require_148762__) {\n            \"use strict\";\n            var UniqueIDGeneretor = __nested_webpack_require_148762__(14);\n            function HashMap() {\n                this.map = {};\n                this.keys = [];\n            }\n            HashMap.prototype.put = function(key, value) {\n                var theId = UniqueIDGeneretor.createID(key);\n                if (!this.contains(theId)) {\n                    this.map[theId] = value;\n                    this.keys.push(key);\n                }\n            };\n            HashMap.prototype.contains = function(key) {\n                var theId = UniqueIDGeneretor.createID(key);\n                return this.map[key] != null;\n            };\n            HashMap.prototype.get = function(key) {\n                var theId = UniqueIDGeneretor.createID(key);\n                return this.map[theId];\n            };\n            HashMap.prototype.keySet = function() {\n                return this.keys;\n            };\n            module1.exports = HashMap;\n        /***/ },\n        /* 23 */ /***/ function(module1, exports1, __nested_webpack_require_149821__) {\n            \"use strict\";\n            var UniqueIDGeneretor = __nested_webpack_require_149821__(14);\n            function HashSet() {\n                this.set = {};\n            }\n            ;\n            HashSet.prototype.add = function(obj) {\n                var theId = UniqueIDGeneretor.createID(obj);\n                if (!this.contains(theId)) this.set[theId] = obj;\n            };\n            HashSet.prototype.remove = function(obj) {\n                delete this.set[UniqueIDGeneretor.createID(obj)];\n            };\n            HashSet.prototype.clear = function() {\n                this.set = {};\n            };\n            HashSet.prototype.contains = function(obj) {\n                return this.set[UniqueIDGeneretor.createID(obj)] == obj;\n            };\n            HashSet.prototype.isEmpty = function() {\n                return this.size() === 0;\n            };\n            HashSet.prototype.size = function() {\n                return Object.keys(this.set).length;\n            };\n            //concats this.set to the given list\n            HashSet.prototype.addAllTo = function(list) {\n                var keys = Object.keys(this.set);\n                var length = keys.length;\n                for(var i = 0; i < length; i++){\n                    list.push(this.set[keys[i]]);\n                }\n            };\n            HashSet.prototype.size = function() {\n                return Object.keys(this.set).length;\n            };\n            HashSet.prototype.addAll = function(list) {\n                var s = list.length;\n                for(var i = 0; i < s; i++){\n                    var v = list[i];\n                    this.add(v);\n                }\n            };\n            module1.exports = HashSet;\n        /***/ },\n        /* 24 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            // Some matrix (1d and 2d array) operations\n            function Matrix() {}\n            /**\n * matrix multiplication\n * array1, array2 and result are 2d arrays\n */ Matrix.multMat = function(array1, array2) {\n                var result = [];\n                for(var i = 0; i < array1.length; i++){\n                    result[i] = [];\n                    for(var j = 0; j < array2[0].length; j++){\n                        result[i][j] = 0;\n                        for(var k = 0; k < array1[0].length; k++){\n                            result[i][j] += array1[i][k] * array2[k][j];\n                        }\n                    }\n                }\n                return result;\n            };\n            /**\n * matrix transpose\n * array and result are 2d arrays\n */ Matrix.transpose = function(array) {\n                var result = [];\n                for(var i = 0; i < array[0].length; i++){\n                    result[i] = [];\n                    for(var j = 0; j < array.length; j++){\n                        result[i][j] = array[j][i];\n                    }\n                }\n                return result;\n            };\n            /**\n * multiply array with constant\n * array and result are 1d arrays\n */ Matrix.multCons = function(array, constant) {\n                var result = [];\n                for(var i = 0; i < array.length; i++){\n                    result[i] = array[i] * constant;\n                }\n                return result;\n            };\n            /**\n * substract two arrays\n * array1, array2 and result are 1d arrays\n */ Matrix.minusOp = function(array1, array2) {\n                var result = [];\n                for(var i = 0; i < array1.length; i++){\n                    result[i] = array1[i] - array2[i];\n                }\n                return result;\n            };\n            /**\n * dot product of two arrays with same size\n * array1 and array2 are 1d arrays\n */ Matrix.dotProduct = function(array1, array2) {\n                var product = 0;\n                for(var i = 0; i < array1.length; i++){\n                    product += array1[i] * array2[i];\n                }\n                return product;\n            };\n            /**\n * magnitude of an array\n * array is 1d array\n */ Matrix.mag = function(array) {\n                return Math.sqrt(this.dotProduct(array, array));\n            };\n            /**\n * normalization of an array\n * array and result are 1d array\n */ Matrix.normalize = function(array) {\n                var result = [];\n                var magnitude = this.mag(array);\n                for(var i = 0; i < array.length; i++){\n                    result[i] = array[i] / magnitude;\n                }\n                return result;\n            };\n            /**\n * multiply an array with centering matrix\n * array and result are 1d array\n */ Matrix.multGamma = function(array) {\n                var result = [];\n                var sum = 0;\n                for(var i = 0; i < array.length; i++){\n                    sum += array[i];\n                }\n                sum *= -1 / array.length;\n                for(var _i = 0; _i < array.length; _i++){\n                    result[_i] = sum + array[_i];\n                }\n                return result;\n            };\n            /**\n * a special matrix multiplication\n * result = 0.5 * C * INV * C^T * array\n * array and result are 1d, C and INV are 2d arrays\n */ Matrix.multL = function(array, C, INV) {\n                var result = [];\n                var temp1 = [];\n                var temp2 = [];\n                // multiply by C^T\n                for(var i = 0; i < C[0].length; i++){\n                    var sum = 0;\n                    for(var j = 0; j < C.length; j++){\n                        sum += -0.5 * C[j][i] * array[j];\n                    }\n                    temp1[i] = sum;\n                }\n                // multiply the result by INV\n                for(var _i2 = 0; _i2 < INV.length; _i2++){\n                    var _sum = 0;\n                    for(var _j = 0; _j < INV.length; _j++){\n                        _sum += INV[_i2][_j] * temp1[_j];\n                    }\n                    temp2[_i2] = _sum;\n                }\n                // multiply the result by C\n                for(var _i3 = 0; _i3 < C.length; _i3++){\n                    var _sum2 = 0;\n                    for(var _j2 = 0; _j2 < C[0].length; _j2++){\n                        _sum2 += C[_i3][_j2] * temp2[_j2];\n                    }\n                    result[_i3] = _sum2;\n                }\n                return result;\n            };\n            module1.exports = Matrix;\n        /***/ },\n        /* 25 */ /***/ function(module1, exports1, __nested_webpack_require_156330__) {\n            \"use strict\";\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            /**\n * A classic Quicksort algorithm with Hoare's partition\n * - Works also on LinkedList objects\n *\n * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\n */ var LinkedList = __nested_webpack_require_156330__(11);\n            var Quicksort = function() {\n                function Quicksort(A, compareFunction) {\n                    _classCallCheck(this, Quicksort);\n                    if (compareFunction !== null || compareFunction !== undefined) this.compareFunction = this._defaultCompareFunction;\n                    var length = void 0;\n                    if (A instanceof LinkedList) length = A.size();\n                    else length = A.length;\n                    this._quicksort(A, 0, length - 1);\n                }\n                _createClass(Quicksort, [\n                    {\n                        key: \"_quicksort\",\n                        value: function _quicksort(A, p, r) {\n                            if (p < r) {\n                                var q = this._partition(A, p, r);\n                                this._quicksort(A, p, q);\n                                this._quicksort(A, q + 1, r);\n                            }\n                        }\n                    },\n                    {\n                        key: \"_partition\",\n                        value: function _partition(A, p, r) {\n                            var x = this._get(A, p);\n                            var i = p;\n                            var j = r;\n                            while(true){\n                                while(this.compareFunction(x, this._get(A, j))){\n                                    j--;\n                                }\n                                while(this.compareFunction(this._get(A, i), x)){\n                                    i++;\n                                }\n                                if (i < j) {\n                                    this._swap(A, i, j);\n                                    i++;\n                                    j--;\n                                } else return j;\n                            }\n                        }\n                    },\n                    {\n                        key: \"_get\",\n                        value: function _get(object, index) {\n                            if (object instanceof LinkedList) return object.get_object_at(index);\n                            else return object[index];\n                        }\n                    },\n                    {\n                        key: \"_set\",\n                        value: function _set(object, index, value) {\n                            if (object instanceof LinkedList) object.set_object_at(index, value);\n                            else object[index] = value;\n                        }\n                    },\n                    {\n                        key: \"_swap\",\n                        value: function _swap(A, i, j) {\n                            var temp = this._get(A, i);\n                            this._set(A, i, this._get(A, j));\n                            this._set(A, j, temp);\n                        }\n                    },\n                    {\n                        key: \"_defaultCompareFunction\",\n                        value: function _defaultCompareFunction(a, b) {\n                            return b > a;\n                        }\n                    }\n                ]);\n                return Quicksort;\n            }();\n            module1.exports = Quicksort;\n        /***/ },\n        /* 26 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            // Singular Value Decomposition implementation\n            function SVD() {}\n            ;\n            /* Below singular value decomposition (svd) code including hypot function is adopted from https://github.com/dragonfly-ai/JamaJS\n   Some changes are applied to make the code compatible with the fcose code and to make it independent from Jama.\n   Input matrix is changed to a 2D array instead of Jama matrix. Matrix dimensions are taken according to 2D array instead of using Jama functions.\n   An object that includes singular value components is created for return. \n   The types of input parameters of the hypot function are removed. \n   let is used instead of var for the variable initialization.\n*/ /*\n                               Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/ SVD.svd = function(A) {\n                this.U = null;\n                this.V = null;\n                this.s = null;\n                this.m = 0;\n                this.n = 0;\n                this.m = A.length;\n                this.n = A[0].length;\n                var nu = Math.min(this.m, this.n);\n                this.s = function(s) {\n                    var a = [];\n                    while(s-- > 0){\n                        a.push(0);\n                    }\n                    return a;\n                }(Math.min(this.m + 1, this.n));\n                this.U = function(dims) {\n                    var allocate = function allocate(dims) {\n                        if (dims.length == 0) {\n                            return 0;\n                        } else {\n                            var array = [];\n                            for(var i = 0; i < dims[0]; i++){\n                                array.push(allocate(dims.slice(1)));\n                            }\n                            return array;\n                        }\n                    };\n                    return allocate(dims);\n                }([\n                    this.m,\n                    nu\n                ]);\n                this.V = function(dims) {\n                    var allocate = function allocate(dims) {\n                        if (dims.length == 0) {\n                            return 0;\n                        } else {\n                            var array = [];\n                            for(var i = 0; i < dims[0]; i++){\n                                array.push(allocate(dims.slice(1)));\n                            }\n                            return array;\n                        }\n                    };\n                    return allocate(dims);\n                }([\n                    this.n,\n                    this.n\n                ]);\n                var e = function(s) {\n                    var a = [];\n                    while(s-- > 0){\n                        a.push(0);\n                    }\n                    return a;\n                }(this.n);\n                var work = function(s) {\n                    var a = [];\n                    while(s-- > 0){\n                        a.push(0);\n                    }\n                    return a;\n                }(this.m);\n                var wantu = true;\n                var wantv = true;\n                var nct = Math.min(this.m - 1, this.n);\n                var nrt = Math.max(0, Math.min(this.n - 2, this.m));\n                for(var k = 0; k < Math.max(nct, nrt); k++){\n                    if (k < nct) {\n                        this.s[k] = 0;\n                        for(var i = k; i < this.m; i++){\n                            this.s[k] = SVD.hypot(this.s[k], A[i][k]);\n                        }\n                        ;\n                        if (this.s[k] !== 0.0) {\n                            if (A[k][k] < 0.0) {\n                                this.s[k] = -this.s[k];\n                            }\n                            for(var _i = k; _i < this.m; _i++){\n                                A[_i][k] /= this.s[k];\n                            }\n                            ;\n                            A[k][k] += 1.0;\n                        }\n                        this.s[k] = -this.s[k];\n                    }\n                    for(var j = k + 1; j < this.n; j++){\n                        if (function(lhs, rhs) {\n                            return lhs && rhs;\n                        }(k < nct, this.s[k] !== 0.0)) {\n                            var t = 0;\n                            for(var _i2 = k; _i2 < this.m; _i2++){\n                                t += A[_i2][k] * A[_i2][j];\n                            }\n                            ;\n                            t = -t / A[k][k];\n                            for(var _i3 = k; _i3 < this.m; _i3++){\n                                A[_i3][j] += t * A[_i3][k];\n                            }\n                            ;\n                        }\n                        e[j] = A[k][j];\n                    }\n                    ;\n                    if (function(lhs, rhs) {\n                        return lhs && rhs;\n                    }(wantu, k < nct)) {\n                        for(var _i4 = k; _i4 < this.m; _i4++){\n                            this.U[_i4][k] = A[_i4][k];\n                        }\n                        ;\n                    }\n                    if (k < nrt) {\n                        e[k] = 0;\n                        for(var _i5 = k + 1; _i5 < this.n; _i5++){\n                            e[k] = SVD.hypot(e[k], e[_i5]);\n                        }\n                        ;\n                        if (e[k] !== 0.0) {\n                            if (e[k + 1] < 0.0) {\n                                e[k] = -e[k];\n                            }\n                            for(var _i6 = k + 1; _i6 < this.n; _i6++){\n                                e[_i6] /= e[k];\n                            }\n                            ;\n                            e[k + 1] += 1.0;\n                        }\n                        e[k] = -e[k];\n                        if (function(lhs, rhs) {\n                            return lhs && rhs;\n                        }(k + 1 < this.m, e[k] !== 0.0)) {\n                            for(var _i7 = k + 1; _i7 < this.m; _i7++){\n                                work[_i7] = 0.0;\n                            }\n                            ;\n                            for(var _j = k + 1; _j < this.n; _j++){\n                                for(var _i8 = k + 1; _i8 < this.m; _i8++){\n                                    work[_i8] += e[_j] * A[_i8][_j];\n                                }\n                                ;\n                            }\n                            ;\n                            for(var _j2 = k + 1; _j2 < this.n; _j2++){\n                                var _t = -e[_j2] / e[k + 1];\n                                for(var _i9 = k + 1; _i9 < this.m; _i9++){\n                                    A[_i9][_j2] += _t * work[_i9];\n                                }\n                                ;\n                            }\n                            ;\n                        }\n                        if (wantv) {\n                            for(var _i10 = k + 1; _i10 < this.n; _i10++){\n                                this.V[_i10][k] = e[_i10];\n                            }\n                            ;\n                        }\n                    }\n                }\n                ;\n                var p = Math.min(this.n, this.m + 1);\n                if (nct < this.n) {\n                    this.s[nct] = A[nct][nct];\n                }\n                if (this.m < p) {\n                    this.s[p - 1] = 0.0;\n                }\n                if (nrt + 1 < p) {\n                    e[nrt] = A[nrt][p - 1];\n                }\n                e[p - 1] = 0.0;\n                if (wantu) {\n                    for(var _j3 = nct; _j3 < nu; _j3++){\n                        for(var _i11 = 0; _i11 < this.m; _i11++){\n                            this.U[_i11][_j3] = 0.0;\n                        }\n                        ;\n                        this.U[_j3][_j3] = 1.0;\n                    }\n                    ;\n                    for(var _k = nct - 1; _k >= 0; _k--){\n                        if (this.s[_k] !== 0.0) {\n                            for(var _j4 = _k + 1; _j4 < nu; _j4++){\n                                var _t2 = 0;\n                                for(var _i12 = _k; _i12 < this.m; _i12++){\n                                    _t2 += this.U[_i12][_k] * this.U[_i12][_j4];\n                                }\n                                ;\n                                _t2 = -_t2 / this.U[_k][_k];\n                                for(var _i13 = _k; _i13 < this.m; _i13++){\n                                    this.U[_i13][_j4] += _t2 * this.U[_i13][_k];\n                                }\n                                ;\n                            }\n                            ;\n                            for(var _i14 = _k; _i14 < this.m; _i14++){\n                                this.U[_i14][_k] = -this.U[_i14][_k];\n                            }\n                            ;\n                            this.U[_k][_k] = 1.0 + this.U[_k][_k];\n                            for(var _i15 = 0; _i15 < _k - 1; _i15++){\n                                this.U[_i15][_k] = 0.0;\n                            }\n                            ;\n                        } else {\n                            for(var _i16 = 0; _i16 < this.m; _i16++){\n                                this.U[_i16][_k] = 0.0;\n                            }\n                            ;\n                            this.U[_k][_k] = 1.0;\n                        }\n                    }\n                    ;\n                }\n                if (wantv) {\n                    for(var _k2 = this.n - 1; _k2 >= 0; _k2--){\n                        if (function(lhs, rhs) {\n                            return lhs && rhs;\n                        }(_k2 < nrt, e[_k2] !== 0.0)) {\n                            for(var _j5 = _k2 + 1; _j5 < nu; _j5++){\n                                var _t3 = 0;\n                                for(var _i17 = _k2 + 1; _i17 < this.n; _i17++){\n                                    _t3 += this.V[_i17][_k2] * this.V[_i17][_j5];\n                                }\n                                ;\n                                _t3 = -_t3 / this.V[_k2 + 1][_k2];\n                                for(var _i18 = _k2 + 1; _i18 < this.n; _i18++){\n                                    this.V[_i18][_j5] += _t3 * this.V[_i18][_k2];\n                                }\n                                ;\n                            }\n                            ;\n                        }\n                        for(var _i19 = 0; _i19 < this.n; _i19++){\n                            this.V[_i19][_k2] = 0.0;\n                        }\n                        ;\n                        this.V[_k2][_k2] = 1.0;\n                    }\n                    ;\n                }\n                var pp = p - 1;\n                var iter = 0;\n                var eps = Math.pow(2.0, -52.0);\n                var tiny = Math.pow(2.0, -966.0);\n                while(p > 0){\n                    var _k3 = void 0;\n                    var kase = void 0;\n                    for(_k3 = p - 2; _k3 >= -1; _k3--){\n                        if (_k3 === -1) {\n                            break;\n                        }\n                        if (Math.abs(e[_k3]) <= tiny + eps * (Math.abs(this.s[_k3]) + Math.abs(this.s[_k3 + 1]))) {\n                            e[_k3] = 0.0;\n                            break;\n                        }\n                    }\n                    ;\n                    if (_k3 === p - 2) {\n                        kase = 4;\n                    } else {\n                        var ks = void 0;\n                        for(ks = p - 1; ks >= _k3; ks--){\n                            if (ks === _k3) {\n                                break;\n                            }\n                            var _t4 = (ks !== p ? Math.abs(e[ks]) : 0.0) + (ks !== _k3 + 1 ? Math.abs(e[ks - 1]) : 0.0);\n                            if (Math.abs(this.s[ks]) <= tiny + eps * _t4) {\n                                this.s[ks] = 0.0;\n                                break;\n                            }\n                        }\n                        ;\n                        if (ks === _k3) {\n                            kase = 3;\n                        } else if (ks === p - 1) {\n                            kase = 1;\n                        } else {\n                            kase = 2;\n                            _k3 = ks;\n                        }\n                    }\n                    _k3++;\n                    switch(kase){\n                        case 1:\n                            {\n                                var f = e[p - 2];\n                                e[p - 2] = 0.0;\n                                for(var _j6 = p - 2; _j6 >= _k3; _j6--){\n                                    var _t5 = SVD.hypot(this.s[_j6], f);\n                                    var cs = this.s[_j6] / _t5;\n                                    var sn = f / _t5;\n                                    this.s[_j6] = _t5;\n                                    if (_j6 !== _k3) {\n                                        f = -sn * e[_j6 - 1];\n                                        e[_j6 - 1] = cs * e[_j6 - 1];\n                                    }\n                                    if (wantv) {\n                                        for(var _i20 = 0; _i20 < this.n; _i20++){\n                                            _t5 = cs * this.V[_i20][_j6] + sn * this.V[_i20][p - 1];\n                                            this.V[_i20][p - 1] = -sn * this.V[_i20][_j6] + cs * this.V[_i20][p - 1];\n                                            this.V[_i20][_j6] = _t5;\n                                        }\n                                        ;\n                                    }\n                                }\n                                ;\n                            }\n                            ;\n                            break;\n                        case 2:\n                            {\n                                var _f = e[_k3 - 1];\n                                e[_k3 - 1] = 0.0;\n                                for(var _j7 = _k3; _j7 < p; _j7++){\n                                    var _t6 = SVD.hypot(this.s[_j7], _f);\n                                    var _cs = this.s[_j7] / _t6;\n                                    var _sn = _f / _t6;\n                                    this.s[_j7] = _t6;\n                                    _f = -_sn * e[_j7];\n                                    e[_j7] = _cs * e[_j7];\n                                    if (wantu) {\n                                        for(var _i21 = 0; _i21 < this.m; _i21++){\n                                            _t6 = _cs * this.U[_i21][_j7] + _sn * this.U[_i21][_k3 - 1];\n                                            this.U[_i21][_k3 - 1] = -_sn * this.U[_i21][_j7] + _cs * this.U[_i21][_k3 - 1];\n                                            this.U[_i21][_j7] = _t6;\n                                        }\n                                        ;\n                                    }\n                                }\n                                ;\n                            }\n                            ;\n                            break;\n                        case 3:\n                            {\n                                var scale = Math.max(Math.max(Math.max(Math.max(Math.abs(this.s[p - 1]), Math.abs(this.s[p - 2])), Math.abs(e[p - 2])), Math.abs(this.s[_k3])), Math.abs(e[_k3]));\n                                var sp = this.s[p - 1] / scale;\n                                var spm1 = this.s[p - 2] / scale;\n                                var epm1 = e[p - 2] / scale;\n                                var sk = this.s[_k3] / scale;\n                                var ek = e[_k3] / scale;\n                                var b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;\n                                var c = sp * epm1 * (sp * epm1);\n                                var shift = 0.0;\n                                if (function(lhs, rhs) {\n                                    return lhs || rhs;\n                                }(b !== 0.0, c !== 0.0)) {\n                                    shift = Math.sqrt(b * b + c);\n                                    if (b < 0.0) {\n                                        shift = -shift;\n                                    }\n                                    shift = c / (b + shift);\n                                }\n                                var _f2 = (sk + sp) * (sk - sp) + shift;\n                                var g = sk * ek;\n                                for(var _j8 = _k3; _j8 < p - 1; _j8++){\n                                    var _t7 = SVD.hypot(_f2, g);\n                                    var _cs2 = _f2 / _t7;\n                                    var _sn2 = g / _t7;\n                                    if (_j8 !== _k3) {\n                                        e[_j8 - 1] = _t7;\n                                    }\n                                    _f2 = _cs2 * this.s[_j8] + _sn2 * e[_j8];\n                                    e[_j8] = _cs2 * e[_j8] - _sn2 * this.s[_j8];\n                                    g = _sn2 * this.s[_j8 + 1];\n                                    this.s[_j8 + 1] = _cs2 * this.s[_j8 + 1];\n                                    if (wantv) {\n                                        for(var _i22 = 0; _i22 < this.n; _i22++){\n                                            _t7 = _cs2 * this.V[_i22][_j8] + _sn2 * this.V[_i22][_j8 + 1];\n                                            this.V[_i22][_j8 + 1] = -_sn2 * this.V[_i22][_j8] + _cs2 * this.V[_i22][_j8 + 1];\n                                            this.V[_i22][_j8] = _t7;\n                                        }\n                                        ;\n                                    }\n                                    _t7 = SVD.hypot(_f2, g);\n                                    _cs2 = _f2 / _t7;\n                                    _sn2 = g / _t7;\n                                    this.s[_j8] = _t7;\n                                    _f2 = _cs2 * e[_j8] + _sn2 * this.s[_j8 + 1];\n                                    this.s[_j8 + 1] = -_sn2 * e[_j8] + _cs2 * this.s[_j8 + 1];\n                                    g = _sn2 * e[_j8 + 1];\n                                    e[_j8 + 1] = _cs2 * e[_j8 + 1];\n                                    if (wantu && _j8 < this.m - 1) {\n                                        for(var _i23 = 0; _i23 < this.m; _i23++){\n                                            _t7 = _cs2 * this.U[_i23][_j8] + _sn2 * this.U[_i23][_j8 + 1];\n                                            this.U[_i23][_j8 + 1] = -_sn2 * this.U[_i23][_j8] + _cs2 * this.U[_i23][_j8 + 1];\n                                            this.U[_i23][_j8] = _t7;\n                                        }\n                                        ;\n                                    }\n                                }\n                                ;\n                                e[p - 2] = _f2;\n                                iter = iter + 1;\n                            }\n                            ;\n                            break;\n                        case 4:\n                            {\n                                if (this.s[_k3] <= 0.0) {\n                                    this.s[_k3] = this.s[_k3] < 0.0 ? -this.s[_k3] : 0.0;\n                                    if (wantv) {\n                                        for(var _i24 = 0; _i24 <= pp; _i24++){\n                                            this.V[_i24][_k3] = -this.V[_i24][_k3];\n                                        }\n                                        ;\n                                    }\n                                }\n                                while(_k3 < pp){\n                                    if (this.s[_k3] >= this.s[_k3 + 1]) {\n                                        break;\n                                    }\n                                    var _t8 = this.s[_k3];\n                                    this.s[_k3] = this.s[_k3 + 1];\n                                    this.s[_k3 + 1] = _t8;\n                                    if (wantv && _k3 < this.n - 1) {\n                                        for(var _i25 = 0; _i25 < this.n; _i25++){\n                                            _t8 = this.V[_i25][_k3 + 1];\n                                            this.V[_i25][_k3 + 1] = this.V[_i25][_k3];\n                                            this.V[_i25][_k3] = _t8;\n                                        }\n                                        ;\n                                    }\n                                    if (wantu && _k3 < this.m - 1) {\n                                        for(var _i26 = 0; _i26 < this.m; _i26++){\n                                            _t8 = this.U[_i26][_k3 + 1];\n                                            this.U[_i26][_k3 + 1] = this.U[_i26][_k3];\n                                            this.U[_i26][_k3] = _t8;\n                                        }\n                                        ;\n                                    }\n                                    _k3++;\n                                }\n                                ;\n                                iter = 0;\n                                p--;\n                            }\n                            ;\n                            break;\n                    }\n                }\n                ;\n                var result = {\n                    U: this.U,\n                    V: this.V,\n                    S: this.s\n                };\n                return result;\n            };\n            // sqrt(a^2 + b^2) without under/overflow.\n            SVD.hypot = function(a, b) {\n                var r = void 0;\n                if (Math.abs(a) > Math.abs(b)) {\n                    r = b / a;\n                    r = Math.abs(a) * Math.sqrt(1 + r * r);\n                } else if (b != 0) {\n                    r = a / b;\n                    r = Math.abs(b) * Math.sqrt(1 + r * r);\n                } else {\n                    r = 0.0;\n                }\n                return r;\n            };\n            module1.exports = SVD;\n        /***/ },\n        /* 27 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            var _createClass = function() {\n                function defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                return function(Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            }();\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            /**\n *   Needleman-Wunsch algorithm is an procedure to compute the optimal global alignment of two string\n *   sequences by S.B.Needleman and C.D.Wunsch (1970).\n *\n *   Aside from the inputs, you can assign the scores for,\n *   - Match: The two characters at the current index are same.\n *   - Mismatch: The two characters at the current index are different.\n *   - Insertion/Deletion(gaps): The best alignment involves one letter aligning to a gap in the other string.\n */ var NeedlemanWunsch = function() {\n                function NeedlemanWunsch(sequence1, sequence2) {\n                    var match_score = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n                    var mismatch_penalty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n                    var gap_penalty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n                    _classCallCheck(this, NeedlemanWunsch);\n                    this.sequence1 = sequence1;\n                    this.sequence2 = sequence2;\n                    this.match_score = match_score;\n                    this.mismatch_penalty = mismatch_penalty;\n                    this.gap_penalty = gap_penalty;\n                    // Just the remove redundancy\n                    this.iMax = sequence1.length + 1;\n                    this.jMax = sequence2.length + 1;\n                    // Grid matrix of scores\n                    this.grid = new Array(this.iMax);\n                    for(var i = 0; i < this.iMax; i++){\n                        this.grid[i] = new Array(this.jMax);\n                        for(var j = 0; j < this.jMax; j++){\n                            this.grid[i][j] = 0;\n                        }\n                    }\n                    // Traceback matrix (2D array, each cell is an array of boolean values for [`Diag`, `Up`, `Left`] positions)\n                    this.tracebackGrid = new Array(this.iMax);\n                    for(var _i = 0; _i < this.iMax; _i++){\n                        this.tracebackGrid[_i] = new Array(this.jMax);\n                        for(var _j = 0; _j < this.jMax; _j++){\n                            this.tracebackGrid[_i][_j] = [\n                                null,\n                                null,\n                                null\n                            ];\n                        }\n                    }\n                    // The aligned sequences (return multiple possibilities)\n                    this.alignments = [];\n                    // Final alignment score\n                    this.score = -1;\n                    // Calculate scores and tracebacks\n                    this.computeGrids();\n                }\n                _createClass(NeedlemanWunsch, [\n                    {\n                        key: \"getScore\",\n                        value: function getScore() {\n                            return this.score;\n                        }\n                    },\n                    {\n                        key: \"getAlignments\",\n                        value: function getAlignments() {\n                            return this.alignments;\n                        }\n                    },\n                    {\n                        key: \"computeGrids\",\n                        value: function computeGrids() {\n                            // Fill in the first row\n                            for(var j = 1; j < this.jMax; j++){\n                                this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;\n                                this.tracebackGrid[0][j] = [\n                                    false,\n                                    false,\n                                    true\n                                ];\n                            }\n                            // Fill in the first column\n                            for(var i = 1; i < this.iMax; i++){\n                                this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;\n                                this.tracebackGrid[i][0] = [\n                                    false,\n                                    true,\n                                    false\n                                ];\n                            }\n                            // Fill the rest of the grid\n                            for(var _i2 = 1; _i2 < this.iMax; _i2++){\n                                for(var _j2 = 1; _j2 < this.jMax; _j2++){\n                                    // Find the max score(s) among [`Diag`, `Up`, `Left`]\n                                    var diag = void 0;\n                                    if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;\n                                    else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;\n                                    var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;\n                                    var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;\n                                    // If there exists multiple max values, capture them for multiple paths\n                                    var maxOf = [\n                                        diag,\n                                        up,\n                                        left\n                                    ];\n                                    var indices = this.arrayAllMaxIndexes(maxOf);\n                                    // Update Grids\n                                    this.grid[_i2][_j2] = maxOf[indices[0]];\n                                    this.tracebackGrid[_i2][_j2] = [\n                                        indices.includes(0),\n                                        indices.includes(1),\n                                        indices.includes(2)\n                                    ];\n                                }\n                            }\n                            // Update alignment score\n                            this.score = this.grid[this.iMax - 1][this.jMax - 1];\n                        }\n                    },\n                    {\n                        key: \"alignmentTraceback\",\n                        value: function alignmentTraceback() {\n                            var inProcessAlignments = [];\n                            inProcessAlignments.push({\n                                pos: [\n                                    this.sequence1.length,\n                                    this.sequence2.length\n                                ],\n                                seq1: \"\",\n                                seq2: \"\"\n                            });\n                            while(inProcessAlignments[0]){\n                                var current = inProcessAlignments[0];\n                                var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];\n                                if (directions[0]) {\n                                    inProcessAlignments.push({\n                                        pos: [\n                                            current.pos[0] - 1,\n                                            current.pos[1] - 1\n                                        ],\n                                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                                    });\n                                }\n                                if (directions[1]) {\n                                    inProcessAlignments.push({\n                                        pos: [\n                                            current.pos[0] - 1,\n                                            current.pos[1]\n                                        ],\n                                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                                        seq2: \"-\" + current.seq2\n                                    });\n                                }\n                                if (directions[2]) {\n                                    inProcessAlignments.push({\n                                        pos: [\n                                            current.pos[0],\n                                            current.pos[1] - 1\n                                        ],\n                                        seq1: \"-\" + current.seq1,\n                                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                                    });\n                                }\n                                if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({\n                                    sequence1: current.seq1,\n                                    sequence2: current.seq2\n                                });\n                                inProcessAlignments.shift();\n                            }\n                            return this.alignments;\n                        }\n                    },\n                    {\n                        key: \"getAllIndexes\",\n                        value: function getAllIndexes(arr, val) {\n                            var indexes = [], i = -1;\n                            while((i = arr.indexOf(val, i + 1)) !== -1){\n                                indexes.push(i);\n                            }\n                            return indexes;\n                        }\n                    },\n                    {\n                        key: \"arrayAllMaxIndexes\",\n                        value: function arrayAllMaxIndexes(array) {\n                            return this.getAllIndexes(array, Math.max.apply(null, array));\n                        }\n                    }\n                ]);\n                return NeedlemanWunsch;\n            }();\n            module1.exports = NeedlemanWunsch;\n        /***/ },\n        /* 28 */ /***/ function(module1, exports1, __nested_webpack_require_205988__) {\n            \"use strict\";\n            var layoutBase = function layoutBase() {\n                return;\n            };\n            layoutBase.FDLayout = __nested_webpack_require_205988__(18);\n            layoutBase.FDLayoutConstants = __nested_webpack_require_205988__(4);\n            layoutBase.FDLayoutEdge = __nested_webpack_require_205988__(19);\n            layoutBase.FDLayoutNode = __nested_webpack_require_205988__(20);\n            layoutBase.DimensionD = __nested_webpack_require_205988__(21);\n            layoutBase.HashMap = __nested_webpack_require_205988__(22);\n            layoutBase.HashSet = __nested_webpack_require_205988__(23);\n            layoutBase.IGeometry = __nested_webpack_require_205988__(8);\n            layoutBase.IMath = __nested_webpack_require_205988__(9);\n            layoutBase.Integer = __nested_webpack_require_205988__(10);\n            layoutBase.Point = __nested_webpack_require_205988__(12);\n            layoutBase.PointD = __nested_webpack_require_205988__(5);\n            layoutBase.RandomSeed = __nested_webpack_require_205988__(16);\n            layoutBase.RectangleD = __nested_webpack_require_205988__(13);\n            layoutBase.Transform = __nested_webpack_require_205988__(17);\n            layoutBase.UniqueIDGeneretor = __nested_webpack_require_205988__(14);\n            layoutBase.Quicksort = __nested_webpack_require_205988__(25);\n            layoutBase.LinkedList = __nested_webpack_require_205988__(11);\n            layoutBase.LGraphObject = __nested_webpack_require_205988__(2);\n            layoutBase.LGraph = __nested_webpack_require_205988__(6);\n            layoutBase.LEdge = __nested_webpack_require_205988__(1);\n            layoutBase.LGraphManager = __nested_webpack_require_205988__(7);\n            layoutBase.LNode = __nested_webpack_require_205988__(3);\n            layoutBase.Layout = __nested_webpack_require_205988__(15);\n            layoutBase.LayoutConstants = __nested_webpack_require_205988__(0);\n            layoutBase.NeedlemanWunsch = __nested_webpack_require_205988__(27);\n            layoutBase.Matrix = __nested_webpack_require_205988__(24);\n            layoutBase.SVD = __nested_webpack_require_205988__(26);\n            module1.exports = layoutBase;\n        /***/ },\n        /* 29 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            function Emitter() {\n                this.listeners = [];\n            }\n            var p = Emitter.prototype;\n            p.addListener = function(event, callback) {\n                this.listeners.push({\n                    event: event,\n                    callback: callback\n                });\n            };\n            p.removeListener = function(event, callback) {\n                for(var i = this.listeners.length; i >= 0; i--){\n                    var l = this.listeners[i];\n                    if (l.event === event && l.callback === callback) {\n                        this.listeners.splice(i, 1);\n                    }\n                }\n            };\n            p.emit = function(event, data) {\n                for(var i = 0; i < this.listeners.length; i++){\n                    var l = this.listeners[i];\n                    if (event === l.event) {\n                        l.callback(data);\n                    }\n                }\n            };\n            module1.exports = Emitter;\n        /***/ }\n    ]);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cytoscape-fcose/node_modules/layout-base/layout-base.js\n");

/***/ })

};
;