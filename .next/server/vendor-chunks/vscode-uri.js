"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vscode-uri";
exports.ids = ["vendor-chunks/vscode-uri"];
exports.modules = {

/***/ "(ssr)/./node_modules/vscode-uri/lib/esm/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/vscode-uri/lib/esm/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URI: () => (/* binding */ URI),\n/* harmony export */   Utils: () => (/* binding */ Utils)\n/* harmony export */ });\nvar LIB;\n(()=>{\n    \"use strict\";\n    var t = {\n        470: (t)=>{\n            function e(t) {\n                if (\"string\" != typeof t) throw new TypeError(\"Path must be a string. Received \" + JSON.stringify(t));\n            }\n            function r(t, e) {\n                for(var r, n = \"\", i = 0, o = -1, s = 0, h = 0; h <= t.length; ++h){\n                    if (h < t.length) r = t.charCodeAt(h);\n                    else {\n                        if (47 === r) break;\n                        r = 47;\n                    }\n                    if (47 === r) {\n                        if (o === h - 1 || 1 === s) ;\n                        else if (o !== h - 1 && 2 === s) {\n                            if (n.length < 2 || 2 !== i || 46 !== n.charCodeAt(n.length - 1) || 46 !== n.charCodeAt(n.length - 2)) {\n                                if (n.length > 2) {\n                                    var a = n.lastIndexOf(\"/\");\n                                    if (a !== n.length - 1) {\n                                        -1 === a ? (n = \"\", i = 0) : i = (n = n.slice(0, a)).length - 1 - n.lastIndexOf(\"/\"), o = h, s = 0;\n                                        continue;\n                                    }\n                                } else if (2 === n.length || 1 === n.length) {\n                                    n = \"\", i = 0, o = h, s = 0;\n                                    continue;\n                                }\n                            }\n                            e && (n.length > 0 ? n += \"/..\" : n = \"..\", i = 2);\n                        } else n.length > 0 ? n += \"/\" + t.slice(o + 1, h) : n = t.slice(o + 1, h), i = h - o - 1;\n                        o = h, s = 0;\n                    } else 46 === r && -1 !== s ? ++s : s = -1;\n                }\n                return n;\n            }\n            var n = {\n                resolve: function() {\n                    for(var t, n = \"\", i = !1, o = arguments.length - 1; o >= -1 && !i; o--){\n                        var s;\n                        o >= 0 ? s = arguments[o] : (void 0 === t && (t = process.cwd()), s = t), e(s), 0 !== s.length && (n = s + \"/\" + n, i = 47 === s.charCodeAt(0));\n                    }\n                    return n = r(n, !i), i ? n.length > 0 ? \"/\" + n : \"/\" : n.length > 0 ? n : \".\";\n                },\n                normalize: function(t) {\n                    if (e(t), 0 === t.length) return \".\";\n                    var n = 47 === t.charCodeAt(0), i = 47 === t.charCodeAt(t.length - 1);\n                    return 0 !== (t = r(t, !n)).length || n || (t = \".\"), t.length > 0 && i && (t += \"/\"), n ? \"/\" + t : t;\n                },\n                isAbsolute: function(t) {\n                    return e(t), t.length > 0 && 47 === t.charCodeAt(0);\n                },\n                join: function() {\n                    if (0 === arguments.length) return \".\";\n                    for(var t, r = 0; r < arguments.length; ++r){\n                        var i = arguments[r];\n                        e(i), i.length > 0 && (void 0 === t ? t = i : t += \"/\" + i);\n                    }\n                    return void 0 === t ? \".\" : n.normalize(t);\n                },\n                relative: function(t, r) {\n                    if (e(t), e(r), t === r) return \"\";\n                    if ((t = n.resolve(t)) === (r = n.resolve(r))) return \"\";\n                    for(var i = 1; i < t.length && 47 === t.charCodeAt(i); ++i);\n                    for(var o = t.length, s = o - i, h = 1; h < r.length && 47 === r.charCodeAt(h); ++h);\n                    for(var a = r.length - h, c = s < a ? s : a, f = -1, u = 0; u <= c; ++u){\n                        if (u === c) {\n                            if (a > c) {\n                                if (47 === r.charCodeAt(h + u)) return r.slice(h + u + 1);\n                                if (0 === u) return r.slice(h + u);\n                            } else s > c && (47 === t.charCodeAt(i + u) ? f = u : 0 === u && (f = 0));\n                            break;\n                        }\n                        var l = t.charCodeAt(i + u);\n                        if (l !== r.charCodeAt(h + u)) break;\n                        47 === l && (f = u);\n                    }\n                    var g = \"\";\n                    for(u = i + f + 1; u <= o; ++u)u !== o && 47 !== t.charCodeAt(u) || (0 === g.length ? g += \"..\" : g += \"/..\");\n                    return g.length > 0 ? g + r.slice(h + f) : (h += f, 47 === r.charCodeAt(h) && ++h, r.slice(h));\n                },\n                _makeLong: function(t) {\n                    return t;\n                },\n                dirname: function(t) {\n                    if (e(t), 0 === t.length) return \".\";\n                    for(var r = t.charCodeAt(0), n = 47 === r, i = -1, o = !0, s = t.length - 1; s >= 1; --s)if (47 === (r = t.charCodeAt(s))) {\n                        if (!o) {\n                            i = s;\n                            break;\n                        }\n                    } else o = !1;\n                    return -1 === i ? n ? \"/\" : \".\" : n && 1 === i ? \"//\" : t.slice(0, i);\n                },\n                basename: function(t, r) {\n                    if (void 0 !== r && \"string\" != typeof r) throw new TypeError('\"ext\" argument must be a string');\n                    e(t);\n                    var n, i = 0, o = -1, s = !0;\n                    if (void 0 !== r && r.length > 0 && r.length <= t.length) {\n                        if (r.length === t.length && r === t) return \"\";\n                        var h = r.length - 1, a = -1;\n                        for(n = t.length - 1; n >= 0; --n){\n                            var c = t.charCodeAt(n);\n                            if (47 === c) {\n                                if (!s) {\n                                    i = n + 1;\n                                    break;\n                                }\n                            } else -1 === a && (s = !1, a = n + 1), h >= 0 && (c === r.charCodeAt(h) ? -1 == --h && (o = n) : (h = -1, o = a));\n                        }\n                        return i === o ? o = a : -1 === o && (o = t.length), t.slice(i, o);\n                    }\n                    for(n = t.length - 1; n >= 0; --n)if (47 === t.charCodeAt(n)) {\n                        if (!s) {\n                            i = n + 1;\n                            break;\n                        }\n                    } else -1 === o && (s = !1, o = n + 1);\n                    return -1 === o ? \"\" : t.slice(i, o);\n                },\n                extname: function(t) {\n                    e(t);\n                    for(var r = -1, n = 0, i = -1, o = !0, s = 0, h = t.length - 1; h >= 0; --h){\n                        var a = t.charCodeAt(h);\n                        if (47 !== a) -1 === i && (o = !1, i = h + 1), 46 === a ? -1 === r ? r = h : 1 !== s && (s = 1) : -1 !== r && (s = -1);\n                        else if (!o) {\n                            n = h + 1;\n                            break;\n                        }\n                    }\n                    return -1 === r || -1 === i || 0 === s || 1 === s && r === i - 1 && r === n + 1 ? \"\" : t.slice(r, i);\n                },\n                format: function(t) {\n                    if (null === t || \"object\" != typeof t) throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof t);\n                    return function(t, e) {\n                        var r = e.dir || e.root, n = e.base || (e.name || \"\") + (e.ext || \"\");\n                        return r ? r === e.root ? r + n : r + \"/\" + n : n;\n                    }(0, t);\n                },\n                parse: function(t) {\n                    e(t);\n                    var r = {\n                        root: \"\",\n                        dir: \"\",\n                        base: \"\",\n                        ext: \"\",\n                        name: \"\"\n                    };\n                    if (0 === t.length) return r;\n                    var n, i = t.charCodeAt(0), o = 47 === i;\n                    o ? (r.root = \"/\", n = 1) : n = 0;\n                    for(var s = -1, h = 0, a = -1, c = !0, f = t.length - 1, u = 0; f >= n; --f)if (47 !== (i = t.charCodeAt(f))) -1 === a && (c = !1, a = f + 1), 46 === i ? -1 === s ? s = f : 1 !== u && (u = 1) : -1 !== s && (u = -1);\n                    else if (!c) {\n                        h = f + 1;\n                        break;\n                    }\n                    return -1 === s || -1 === a || 0 === u || 1 === u && s === a - 1 && s === h + 1 ? -1 !== a && (r.base = r.name = 0 === h && o ? t.slice(1, a) : t.slice(h, a)) : (0 === h && o ? (r.name = t.slice(1, s), r.base = t.slice(1, a)) : (r.name = t.slice(h, s), r.base = t.slice(h, a)), r.ext = t.slice(s, a)), h > 0 ? r.dir = t.slice(0, h - 1) : o && (r.dir = \"/\"), r;\n                },\n                sep: \"/\",\n                delimiter: \":\",\n                win32: null,\n                posix: null\n            };\n            n.posix = n, t.exports = n;\n        }\n    }, e = {};\n    function r(n) {\n        var i = e[n];\n        if (void 0 !== i) return i.exports;\n        var o = e[n] = {\n            exports: {}\n        };\n        return t[n](o, o.exports, r), o.exports;\n    }\n    r.d = (t, e)=>{\n        for(var n in e)r.o(e, n) && !r.o(t, n) && Object.defineProperty(t, n, {\n            enumerable: !0,\n            get: e[n]\n        });\n    }, r.o = (t, e)=>Object.prototype.hasOwnProperty.call(t, e), r.r = (t)=>{\n        \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n            value: \"Module\"\n        }), Object.defineProperty(t, \"__esModule\", {\n            value: !0\n        });\n    };\n    var n = {};\n    (()=>{\n        let t;\n        if (r.r(n), r.d(n, {\n            URI: ()=>f,\n            Utils: ()=>P\n        }), \"object\" == typeof process) t = \"win32\" === process.platform;\n        else if (\"object\" == typeof navigator) {\n            let e = navigator.userAgent;\n            t = e.indexOf(\"Windows\") >= 0;\n        }\n        const e = /^\\w[\\w\\d+.-]*$/, i = /^\\//, o = /^\\/\\//;\n        function s(t, r) {\n            if (!t.scheme && r) throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${t.authority}\", path: \"${t.path}\", query: \"${t.query}\", fragment: \"${t.fragment}\"}`);\n            if (t.scheme && !e.test(t.scheme)) throw new Error(\"[UriError]: Scheme contains illegal characters.\");\n            if (t.path) {\n                if (t.authority) {\n                    if (!i.test(t.path)) throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n                } else if (o.test(t.path)) throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n            }\n        }\n        const h = \"\", a = \"/\", c = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n        class f {\n            static isUri(t) {\n                return t instanceof f || !!t && \"string\" == typeof t.authority && \"string\" == typeof t.fragment && \"string\" == typeof t.path && \"string\" == typeof t.query && \"string\" == typeof t.scheme && \"string\" == typeof t.fsPath && \"function\" == typeof t.with && \"function\" == typeof t.toString;\n            }\n            constructor(t, e, r, n, i, o = !1){\n                \"object\" == typeof t ? (this.scheme = t.scheme || h, this.authority = t.authority || h, this.path = t.path || h, this.query = t.query || h, this.fragment = t.fragment || h) : (this.scheme = function(t, e) {\n                    return t || e ? t : \"file\";\n                }(t, o), this.authority = e || h, this.path = function(t, e) {\n                    switch(t){\n                        case \"https\":\n                        case \"http\":\n                        case \"file\":\n                            e ? e[0] !== a && (e = a + e) : e = a;\n                    }\n                    return e;\n                }(this.scheme, r || h), this.query = n || h, this.fragment = i || h, s(this, o));\n            }\n            get fsPath() {\n                return m(this, !1);\n            }\n            with(t) {\n                if (!t) return this;\n                let { scheme: e, authority: r, path: n, query: i, fragment: o } = t;\n                return void 0 === e ? e = this.scheme : null === e && (e = h), void 0 === r ? r = this.authority : null === r && (r = h), void 0 === n ? n = this.path : null === n && (n = h), void 0 === i ? i = this.query : null === i && (i = h), void 0 === o ? o = this.fragment : null === o && (o = h), e === this.scheme && r === this.authority && n === this.path && i === this.query && o === this.fragment ? this : new l(e, r, n, i, o);\n            }\n            static parse(t, e = !1) {\n                const r = c.exec(t);\n                return r ? new l(r[2] || h, C(r[4] || h), C(r[5] || h), C(r[7] || h), C(r[9] || h), e) : new l(h, h, h, h, h);\n            }\n            static file(e) {\n                let r = h;\n                if (t && (e = e.replace(/\\\\/g, a)), e[0] === a && e[1] === a) {\n                    const t = e.indexOf(a, 2);\n                    -1 === t ? (r = e.substring(2), e = a) : (r = e.substring(2, t), e = e.substring(t) || a);\n                }\n                return new l(\"file\", r, e, h, h);\n            }\n            static from(t) {\n                const e = new l(t.scheme, t.authority, t.path, t.query, t.fragment);\n                return s(e, !0), e;\n            }\n            toString(t = !1) {\n                return y(this, t);\n            }\n            toJSON() {\n                return this;\n            }\n            static revive(t) {\n                if (t) {\n                    if (t instanceof f) return t;\n                    {\n                        const e = new l(t);\n                        return e._formatted = t.external, e._fsPath = t._sep === u ? t.fsPath : null, e;\n                    }\n                }\n                return t;\n            }\n        }\n        const u = t ? 1 : void 0;\n        class l extends f {\n            get fsPath() {\n                return this._fsPath || (this._fsPath = m(this, !1)), this._fsPath;\n            }\n            toString(t = !1) {\n                return t ? y(this, !0) : (this._formatted || (this._formatted = y(this, !1)), this._formatted);\n            }\n            toJSON() {\n                const t = {\n                    $mid: 1\n                };\n                return this._fsPath && (t.fsPath = this._fsPath, t._sep = u), this._formatted && (t.external = this._formatted), this.path && (t.path = this.path), this.scheme && (t.scheme = this.scheme), this.authority && (t.authority = this.authority), this.query && (t.query = this.query), this.fragment && (t.fragment = this.fragment), t;\n            }\n            constructor(...args){\n                super(...args);\n                this._formatted = null;\n                this._fsPath = null;\n            }\n        }\n        const g = {\n            58: \"%3A\",\n            47: \"%2F\",\n            63: \"%3F\",\n            35: \"%23\",\n            91: \"%5B\",\n            93: \"%5D\",\n            64: \"%40\",\n            33: \"%21\",\n            36: \"%24\",\n            38: \"%26\",\n            39: \"%27\",\n            40: \"%28\",\n            41: \"%29\",\n            42: \"%2A\",\n            43: \"%2B\",\n            44: \"%2C\",\n            59: \"%3B\",\n            61: \"%3D\",\n            32: \"%20\"\n        };\n        function d(t, e, r) {\n            let n, i = -1;\n            for(let o = 0; o < t.length; o++){\n                const s = t.charCodeAt(o);\n                if (s >= 97 && s <= 122 || s >= 65 && s <= 90 || s >= 48 && s <= 57 || 45 === s || 46 === s || 95 === s || 126 === s || e && 47 === s || r && 91 === s || r && 93 === s || r && 58 === s) -1 !== i && (n += encodeURIComponent(t.substring(i, o)), i = -1), void 0 !== n && (n += t.charAt(o));\n                else {\n                    void 0 === n && (n = t.substr(0, o));\n                    const e = g[s];\n                    void 0 !== e ? (-1 !== i && (n += encodeURIComponent(t.substring(i, o)), i = -1), n += e) : -1 === i && (i = o);\n                }\n            }\n            return -1 !== i && (n += encodeURIComponent(t.substring(i))), void 0 !== n ? n : t;\n        }\n        function p(t) {\n            let e;\n            for(let r = 0; r < t.length; r++){\n                const n = t.charCodeAt(r);\n                35 === n || 63 === n ? (void 0 === e && (e = t.substr(0, r)), e += g[n]) : void 0 !== e && (e += t[r]);\n            }\n            return void 0 !== e ? e : t;\n        }\n        function m(e, r) {\n            let n;\n            return n = e.authority && e.path.length > 1 && \"file\" === e.scheme ? `//${e.authority}${e.path}` : 47 === e.path.charCodeAt(0) && (e.path.charCodeAt(1) >= 65 && e.path.charCodeAt(1) <= 90 || e.path.charCodeAt(1) >= 97 && e.path.charCodeAt(1) <= 122) && 58 === e.path.charCodeAt(2) ? r ? e.path.substr(1) : e.path[1].toLowerCase() + e.path.substr(2) : e.path, t && (n = n.replace(/\\//g, \"\\\\\")), n;\n        }\n        function y(t, e) {\n            const r = e ? p : d;\n            let n = \"\", { scheme: i, authority: o, path: s, query: h, fragment: c } = t;\n            if (i && (n += i, n += \":\"), (o || \"file\" === i) && (n += a, n += a), o) {\n                let t = o.indexOf(\"@\");\n                if (-1 !== t) {\n                    const e = o.substr(0, t);\n                    o = o.substr(t + 1), t = e.lastIndexOf(\":\"), -1 === t ? n += r(e, !1, !1) : (n += r(e.substr(0, t), !1, !1), n += \":\", n += r(e.substr(t + 1), !1, !0)), n += \"@\";\n                }\n                o = o.toLowerCase(), t = o.lastIndexOf(\":\"), -1 === t ? n += r(o, !1, !0) : (n += r(o.substr(0, t), !1, !0), n += o.substr(t));\n            }\n            if (s) {\n                if (s.length >= 3 && 47 === s.charCodeAt(0) && 58 === s.charCodeAt(2)) {\n                    const t = s.charCodeAt(1);\n                    t >= 65 && t <= 90 && (s = `/${String.fromCharCode(t + 32)}:${s.substr(3)}`);\n                } else if (s.length >= 2 && 58 === s.charCodeAt(1)) {\n                    const t = s.charCodeAt(0);\n                    t >= 65 && t <= 90 && (s = `${String.fromCharCode(t + 32)}:${s.substr(2)}`);\n                }\n                n += r(s, !0, !1);\n            }\n            return h && (n += \"?\", n += r(h, !1, !1)), c && (n += \"#\", n += e ? c : d(c, !1, !1)), n;\n        }\n        function v(t) {\n            try {\n                return decodeURIComponent(t);\n            } catch  {\n                return t.length > 3 ? t.substr(0, 3) + v(t.substr(3)) : t;\n            }\n        }\n        const b = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n        function C(t) {\n            return t.match(b) ? t.replace(b, (t)=>v(t)) : t;\n        }\n        var A = r(470);\n        const w = A.posix || A, x = \"/\";\n        var P;\n        !function(t) {\n            t.joinPath = function(t, ...e) {\n                return t.with({\n                    path: w.join(t.path, ...e)\n                });\n            }, t.resolvePath = function(t, ...e) {\n                let r = t.path, n = !1;\n                r[0] !== x && (r = x + r, n = !0);\n                let i = w.resolve(r, ...e);\n                return n && i[0] === x && !t.authority && (i = i.substring(1)), t.with({\n                    path: i\n                });\n            }, t.dirname = function(t) {\n                if (0 === t.path.length || t.path === x) return t;\n                let e = w.dirname(t.path);\n                return 1 === e.length && 46 === e.charCodeAt(0) && (e = \"\"), t.with({\n                    path: e\n                });\n            }, t.basename = function(t) {\n                return w.basename(t.path);\n            }, t.extname = function(t) {\n                return w.extname(t.path);\n            };\n        }(P || (P = {}));\n    })(), LIB = n;\n})();\nconst { URI, Utils } = LIB; //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/vscode-uri/lib/esm/index.mjs\n");

/***/ })

};
;