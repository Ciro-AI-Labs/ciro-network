"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langium";
exports.ids = ["vendor-chunks/langium"];
exports.modules = {

/***/ "(ssr)/./node_modules/langium/lib/default-module.js":
/*!****************************************************!*\
  !*** ./node_modules/langium/lib/default-module.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultCoreModule: () => (/* binding */ createDefaultCoreModule),\n/* harmony export */   createDefaultSharedCoreModule: () => (/* binding */ createDefaultSharedCoreModule)\n/* harmony export */ });\n/* harmony import */ var _languages_grammar_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languages/grammar-config.js */ \"(ssr)/./node_modules/langium/lib/languages/grammar-config.js\");\n/* harmony import */ var _parser_completion_parser_builder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parser/completion-parser-builder.js */ \"(ssr)/./node_modules/langium/lib/parser/completion-parser-builder.js\");\n/* harmony import */ var _parser_langium_parser_builder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser/langium-parser-builder.js */ \"(ssr)/./node_modules/langium/lib/parser/langium-parser-builder.js\");\n/* harmony import */ var _parser_token_builder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parser/token-builder.js */ \"(ssr)/./node_modules/langium/lib/parser/token-builder.js\");\n/* harmony import */ var _parser_value_converter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parser/value-converter.js */ \"(ssr)/./node_modules/langium/lib/parser/value-converter.js\");\n/* harmony import */ var _references_linker_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./references/linker.js */ \"(ssr)/./node_modules/langium/lib/references/linker.js\");\n/* harmony import */ var _references_name_provider_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./references/name-provider.js */ \"(ssr)/./node_modules/langium/lib/references/name-provider.js\");\n/* harmony import */ var _references_references_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./references/references.js */ \"(ssr)/./node_modules/langium/lib/references/references.js\");\n/* harmony import */ var _references_scope_computation_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./references/scope-computation.js */ \"(ssr)/./node_modules/langium/lib/references/scope-computation.js\");\n/* harmony import */ var _references_scope_provider_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./references/scope-provider.js */ \"(ssr)/./node_modules/langium/lib/references/scope-provider.js\");\n/* harmony import */ var _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./serializer/json-serializer.js */ \"(ssr)/./node_modules/langium/lib/serializer/json-serializer.js\");\n/* harmony import */ var _service_registry_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./service-registry.js */ \"(ssr)/./node_modules/langium/lib/service-registry.js\");\n/* harmony import */ var _validation_document_validator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./validation/document-validator.js */ \"(ssr)/./node_modules/langium/lib/validation/document-validator.js\");\n/* harmony import */ var _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./validation/validation-registry.js */ \"(ssr)/./node_modules/langium/lib/validation/validation-registry.js\");\n/* harmony import */ var _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./workspace/ast-descriptions.js */ \"(ssr)/./node_modules/langium/lib/workspace/ast-descriptions.js\");\n/* harmony import */ var _workspace_ast_node_locator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./workspace/ast-node-locator.js */ \"(ssr)/./node_modules/langium/lib/workspace/ast-node-locator.js\");\n/* harmony import */ var _workspace_configuration_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./workspace/configuration.js */ \"(ssr)/./node_modules/langium/lib/workspace/configuration.js\");\n/* harmony import */ var _workspace_document_builder_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./workspace/document-builder.js */ \"(ssr)/./node_modules/langium/lib/workspace/document-builder.js\");\n/* harmony import */ var _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./workspace/documents.js */ \"(ssr)/./node_modules/langium/lib/workspace/documents.js\");\n/* harmony import */ var _workspace_index_manager_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./workspace/index-manager.js */ \"(ssr)/./node_modules/langium/lib/workspace/index-manager.js\");\n/* harmony import */ var _workspace_workspace_manager_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./workspace/workspace-manager.js */ \"(ssr)/./node_modules/langium/lib/workspace/workspace-manager.js\");\n/* harmony import */ var _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parser/lexer.js */ \"(ssr)/./node_modules/langium/lib/parser/lexer.js\");\n/* harmony import */ var _documentation_documentation_provider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./documentation/documentation-provider.js */ \"(ssr)/./node_modules/langium/lib/documentation/documentation-provider.js\");\n/* harmony import */ var _documentation_comment_provider_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./documentation/comment-provider.js */ \"(ssr)/./node_modules/langium/lib/documentation/comment-provider.js\");\n/* harmony import */ var _parser_langium_parser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parser/langium-parser.js */ \"(ssr)/./node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_async_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser/async-parser.js */ \"(ssr)/./node_modules/langium/lib/parser/async-parser.js\");\n/* harmony import */ var _workspace_workspace_lock_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./workspace/workspace-lock.js */ \"(ssr)/./node_modules/langium/lib/workspace/workspace-lock.js\");\n/* harmony import */ var _serializer_hydrator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./serializer/hydrator.js */ \"(ssr)/./node_modules/langium/lib/serializer/hydrator.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */ function createDefaultCoreModule(context) {\n    return {\n        documentation: {\n            CommentProvider: (services)=>new _documentation_comment_provider_js__WEBPACK_IMPORTED_MODULE_0__.DefaultCommentProvider(services),\n            DocumentationProvider: (services)=>new _documentation_documentation_provider_js__WEBPACK_IMPORTED_MODULE_1__.JSDocDocumentationProvider(services)\n        },\n        parser: {\n            AsyncParser: (services)=>new _parser_async_parser_js__WEBPACK_IMPORTED_MODULE_2__.DefaultAsyncParser(services),\n            GrammarConfig: (services)=>(0,_languages_grammar_config_js__WEBPACK_IMPORTED_MODULE_3__.createGrammarConfig)(services),\n            LangiumParser: (services)=>(0,_parser_langium_parser_builder_js__WEBPACK_IMPORTED_MODULE_4__.createLangiumParser)(services),\n            CompletionParser: (services)=>(0,_parser_completion_parser_builder_js__WEBPACK_IMPORTED_MODULE_5__.createCompletionParser)(services),\n            ValueConverter: ()=>new _parser_value_converter_js__WEBPACK_IMPORTED_MODULE_6__.DefaultValueConverter(),\n            TokenBuilder: ()=>new _parser_token_builder_js__WEBPACK_IMPORTED_MODULE_7__.DefaultTokenBuilder(),\n            Lexer: (services)=>new _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__.DefaultLexer(services),\n            ParserErrorMessageProvider: ()=>new _parser_langium_parser_js__WEBPACK_IMPORTED_MODULE_9__.LangiumParserErrorMessageProvider(),\n            LexerErrorMessageProvider: ()=>new _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__.DefaultLexerErrorMessageProvider()\n        },\n        workspace: {\n            AstNodeLocator: ()=>new _workspace_ast_node_locator_js__WEBPACK_IMPORTED_MODULE_10__.DefaultAstNodeLocator(),\n            AstNodeDescriptionProvider: (services)=>new _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__.DefaultAstNodeDescriptionProvider(services),\n            ReferenceDescriptionProvider: (services)=>new _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__.DefaultReferenceDescriptionProvider(services)\n        },\n        references: {\n            Linker: (services)=>new _references_linker_js__WEBPACK_IMPORTED_MODULE_12__.DefaultLinker(services),\n            NameProvider: ()=>new _references_name_provider_js__WEBPACK_IMPORTED_MODULE_13__.DefaultNameProvider(),\n            ScopeProvider: (services)=>new _references_scope_provider_js__WEBPACK_IMPORTED_MODULE_14__.DefaultScopeProvider(services),\n            ScopeComputation: (services)=>new _references_scope_computation_js__WEBPACK_IMPORTED_MODULE_15__.DefaultScopeComputation(services),\n            References: (services)=>new _references_references_js__WEBPACK_IMPORTED_MODULE_16__.DefaultReferences(services)\n        },\n        serializer: {\n            Hydrator: (services)=>new _serializer_hydrator_js__WEBPACK_IMPORTED_MODULE_17__.DefaultHydrator(services),\n            JsonSerializer: (services)=>new _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_18__.DefaultJsonSerializer(services)\n        },\n        validation: {\n            DocumentValidator: (services)=>new _validation_document_validator_js__WEBPACK_IMPORTED_MODULE_19__.DefaultDocumentValidator(services),\n            ValidationRegistry: (services)=>new _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_20__.ValidationRegistry(services)\n        },\n        shared: ()=>context.shared\n    };\n}\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */ function createDefaultSharedCoreModule(context) {\n    return {\n        ServiceRegistry: (services)=>new _service_registry_js__WEBPACK_IMPORTED_MODULE_21__.DefaultServiceRegistry(services),\n        workspace: {\n            LangiumDocuments: (services)=>new _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__.DefaultLangiumDocuments(services),\n            LangiumDocumentFactory: (services)=>new _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__.DefaultLangiumDocumentFactory(services),\n            DocumentBuilder: (services)=>new _workspace_document_builder_js__WEBPACK_IMPORTED_MODULE_23__.DefaultDocumentBuilder(services),\n            IndexManager: (services)=>new _workspace_index_manager_js__WEBPACK_IMPORTED_MODULE_24__.DefaultIndexManager(services),\n            WorkspaceManager: (services)=>new _workspace_workspace_manager_js__WEBPACK_IMPORTED_MODULE_25__.DefaultWorkspaceManager(services),\n            FileSystemProvider: (services)=>context.fileSystemProvider(services),\n            WorkspaceLock: ()=>new _workspace_workspace_lock_js__WEBPACK_IMPORTED_MODULE_26__.DefaultWorkspaceLock(),\n            ConfigurationProvider: (services)=>new _workspace_configuration_js__WEBPACK_IMPORTED_MODULE_27__.DefaultConfigurationProvider(services)\n        }\n    };\n} //# sourceMappingURL=default-module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/default-module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/dependency-injection.js":
/*!**********************************************************!*\
  !*** ./node_modules/langium/lib/dependency-injection.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Module: () => (/* binding */ Module),\n/* harmony export */   eagerLoad: () => (/* binding */ eagerLoad),\n/* harmony export */   inject: () => (/* binding */ inject)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ var Module;\n(function(Module) {\n    Module.merge = (m1, m2)=>_merge(_merge({}, m1), m2);\n})(Module || (Module = {}));\n/**\n * Given a set of modules, the inject function returns a lazily evaluated injector\n * that injects dependencies into the requested service when it is requested the\n * first time. Subsequent requests will return the same service.\n *\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\n * by injecting a provider `() => T` instead of a `T`.\n *\n * Please note that the arguments may be objects or arrays. However, the result will\n * be an object. Using it with for..of will have no effect.\n *\n * @param module1 first Module\n * @param module2 (optional) second Module\n * @param module3 (optional) third Module\n * @param module4 (optional) fourth Module\n * @param module5 (optional) fifth Module\n * @param module6 (optional) sixth Module\n * @param module7 (optional) seventh Module\n * @param module8 (optional) eighth Module\n * @param module9 (optional) ninth Module\n * @returns a new object of type I\n */ function inject(module1, module2, module3, module4, module5, module6, module7, module8, module9) {\n    const module = [\n        module1,\n        module2,\n        module3,\n        module4,\n        module5,\n        module6,\n        module7,\n        module8,\n        module9\n    ].reduce(_merge, {});\n    return _inject(module);\n}\nconst isProxy = Symbol(\"isProxy\");\n/**\n * Eagerly load all services in the given dependency injection container. This is sometimes\n * necessary because services can register event listeners in their constructors.\n */ function eagerLoad(item) {\n    if (item && item[isProxy]) {\n        for (const value of Object.values(item)){\n            eagerLoad(value);\n        }\n    }\n    return item;\n}\n/**\n * Helper function that returns an injector by creating a proxy.\n * Invariant: injector is of type I. If injector is undefined, then T = I.\n */ function _inject(module, injector) {\n    const proxy = new Proxy({}, {\n        deleteProperty: ()=>false,\n        set: ()=>{\n            throw new Error(\"Cannot set property on injected service container\");\n        },\n        get: (obj, prop)=>{\n            if (prop === isProxy) {\n                return true;\n            } else {\n                return _resolve(obj, prop, module, injector || proxy);\n            }\n        },\n        getOwnPropertyDescriptor: (obj, prop)=>(_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)),\n        has: (_, prop)=>prop in module,\n        ownKeys: ()=>[\n                ...Object.getOwnPropertyNames(module)\n            ] // used by for..in\n    });\n    return proxy;\n}\n/**\n * Internally used to tag a requested dependency, directly before calling the factory.\n * This allows us to find cycles during instance creation.\n */ const __requested__ = Symbol();\n/**\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\n * the module description. The result of service factories is cached. Groups are\n * recursively proxied.\n *\n * @param obj an object holding all group proxies and services\n * @param prop the key of a value within obj\n * @param module an object containing groups and service factories\n * @param injector the first level proxy that provides access to all values\n * @returns the requested value `obj[prop]`\n * @throws Error if a dependency cycle is detected\n */ function _resolve(obj, prop, module, injector) {\n    if (prop in obj) {\n        if (obj[prop] instanceof Error) {\n            throw new Error(\"Construction failure. Please make sure that your dependencies are constructable.\", {\n                cause: obj[prop]\n            });\n        }\n        if (obj[prop] === __requested__) {\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\n        }\n        return obj[prop];\n    } else if (prop in module) {\n        const value = module[prop];\n        obj[prop] = __requested__;\n        try {\n            obj[prop] = typeof value === \"function\" ? value(injector) : _inject(value, injector);\n        } catch (error) {\n            obj[prop] = error instanceof Error ? error : undefined;\n            throw error;\n        }\n        return obj[prop];\n    } else {\n        return undefined;\n    }\n}\n/**\n * Performs a deep-merge of two modules by writing source entries into the target module.\n *\n * @param target the module which is written\n * @param source the module which is read\n * @returns the target module\n */ function _merge(target, source) {\n    if (source) {\n        for (const [key, value2] of Object.entries(source)){\n            if (value2 !== undefined) {\n                const value1 = target[key];\n                if (value1 !== null && value2 !== null && typeof value1 === \"object\" && typeof value2 === \"object\") {\n                    target[key] = _merge(value1, value2);\n                } else {\n                    target[key] = value2;\n                }\n            }\n        }\n    }\n    return target;\n} //# sourceMappingURL=dependency-injection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/dependency-injection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/documentation/comment-provider.js":
/*!********************************************************************!*\
  !*** ./node_modules/langium/lib/documentation/comment-provider.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultCommentProvider: () => (/* binding */ DefaultCommentProvider)\n/* harmony export */ });\n/* harmony import */ var _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serializer/json-serializer.js */ \"(ssr)/./node_modules/langium/lib/serializer/json-serializer.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\nclass DefaultCommentProvider {\n    constructor(services){\n        this.grammarConfig = ()=>services.parser.GrammarConfig;\n    }\n    getComment(node) {\n        var _a;\n        if ((0,_serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_0__.isAstNodeWithComment)(node)) {\n            return node.$comment;\n        }\n        return (_a = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.findCommentNode)(node.$cstNode, this.grammarConfig().multilineCommentRules)) === null || _a === void 0 ? void 0 : _a.text;\n    }\n} //# sourceMappingURL=comment-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvZG9jdW1lbnRhdGlvbi9jb21tZW50LXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUNOO0FBQ2hCO0FBQ2pELE1BQU1FO0lBQ1RDLFlBQVlDLFFBQVEsQ0FBRTtRQUNsQixJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFNRCxTQUFTRSxNQUFNLENBQUNDLGFBQWE7SUFDNUQ7SUFDQUMsV0FBV0MsSUFBSSxFQUFFO1FBQ2IsSUFBSUM7UUFDSixJQUFJVixvRkFBb0JBLENBQUNTLE9BQU87WUFDNUIsT0FBT0EsS0FBS0UsUUFBUTtRQUN4QjtRQUNBLE9BQU8sQ0FBQ0QsS0FBS1Qsb0VBQWVBLENBQUNRLEtBQUtHLFFBQVEsRUFBRSxJQUFJLENBQUNQLGFBQWEsR0FBR1EscUJBQXFCLE9BQU8sUUFBUUgsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHSSxJQUFJO0lBQ3pJO0FBQ0osRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9kb2N1bWVudGF0aW9uL2NvbW1lbnQtcHJvdmlkZXIuanM/ZjQzMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMyBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBpc0FzdE5vZGVXaXRoQ29tbWVudCB9IGZyb20gJy4uL3NlcmlhbGl6ZXIvanNvbi1zZXJpYWxpemVyLmpzJztcbmltcG9ydCB7IGZpbmRDb21tZW50Tm9kZSB9IGZyb20gJy4uL3V0aWxzL2NzdC11dGlscy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdENvbW1lbnRQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgdGhpcy5ncmFtbWFyQ29uZmlnID0gKCkgPT4gc2VydmljZXMucGFyc2VyLkdyYW1tYXJDb25maWc7XG4gICAgfVxuICAgIGdldENvbW1lbnQobm9kZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChpc0FzdE5vZGVXaXRoQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuJGNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChfYSA9IGZpbmRDb21tZW50Tm9kZShub2RlLiRjc3ROb2RlLCB0aGlzLmdyYW1tYXJDb25maWcoKS5tdWx0aWxpbmVDb21tZW50UnVsZXMpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGV4dDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tZW50LXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJpc0FzdE5vZGVXaXRoQ29tbWVudCIsImZpbmRDb21tZW50Tm9kZSIsIkRlZmF1bHRDb21tZW50UHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsInNlcnZpY2VzIiwiZ3JhbW1hckNvbmZpZyIsInBhcnNlciIsIkdyYW1tYXJDb25maWciLCJnZXRDb21tZW50Iiwibm9kZSIsIl9hIiwiJGNvbW1lbnQiLCIkY3N0Tm9kZSIsIm11bHRpbGluZUNvbW1lbnRSdWxlcyIsInRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/documentation/comment-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/documentation/documentation-provider.js":
/*!**************************************************************************!*\
  !*** ./node_modules/langium/lib/documentation/documentation-provider.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSDocDocumentationProvider: () => (/* binding */ JSDocDocumentationProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _jsdoc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsdoc.js */ \"(ssr)/./node_modules/langium/lib/documentation/jsdoc.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\nclass JSDocDocumentationProvider {\n    constructor(services){\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    getDocumentation(node) {\n        const comment = this.commentProvider.getComment(node);\n        if (comment && (0,_jsdoc_js__WEBPACK_IMPORTED_MODULE_0__.isJSDoc)(comment)) {\n            const parsedJSDoc = (0,_jsdoc_js__WEBPACK_IMPORTED_MODULE_0__.parseJSDoc)(comment);\n            return parsedJSDoc.toMarkdown({\n                renderLink: (link, display)=>{\n                    return this.documentationLinkRenderer(node, link, display);\n                },\n                renderTag: (tag)=>{\n                    return this.documentationTagRenderer(node, tag);\n                }\n            });\n        }\n        return undefined;\n    }\n    documentationLinkRenderer(node, name, display) {\n        var _a;\n        const description = (_a = this.findNameInPrecomputedScopes(node, name)) !== null && _a !== void 0 ? _a : this.findNameInGlobalScope(node, name);\n        if (description && description.nameSegment) {\n            const line = description.nameSegment.range.start.line + 1;\n            const character = description.nameSegment.range.start.character + 1;\n            const uri = description.documentUri.with({\n                fragment: `L${line},${character}`\n            });\n            return `[${display}](${uri.toString()})`;\n        } else {\n            return undefined;\n        }\n    }\n    documentationTagRenderer(_node, _tag) {\n        // Fall back to the default tag rendering\n        return undefined;\n    }\n    findNameInPrecomputedScopes(node, name) {\n        const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(node);\n        const precomputed = document.precomputedScopes;\n        if (!precomputed) {\n            return undefined;\n        }\n        let currentNode = node;\n        do {\n            const allDescriptions = precomputed.get(currentNode);\n            const description = allDescriptions.find((e)=>e.name === name);\n            if (description) {\n                return description;\n            }\n            currentNode = currentNode.$container;\n        }while (currentNode);\n        return undefined;\n    }\n    findNameInGlobalScope(node, name) {\n        const description = this.indexManager.allElements().find((e)=>e.name === name);\n        return description;\n    }\n} //# sourceMappingURL=documentation-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvZG9jdW1lbnRhdGlvbi9kb2N1bWVudGF0aW9uLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUMxQjtBQUNIO0FBQzFDLE1BQU1HO0lBQ1RDLFlBQVlDLFFBQVEsQ0FBRTtRQUNsQixJQUFJLENBQUNDLFlBQVksR0FBR0QsU0FBU0UsTUFBTSxDQUFDQyxTQUFTLENBQUNDLFlBQVk7UUFDMUQsSUFBSSxDQUFDQyxlQUFlLEdBQUdMLFNBQVNNLGFBQWEsQ0FBQ0MsZUFBZTtJQUNqRTtJQUNBQyxpQkFBaUJDLElBQUksRUFBRTtRQUNuQixNQUFNQyxVQUFVLElBQUksQ0FBQ0wsZUFBZSxDQUFDTSxVQUFVLENBQUNGO1FBQ2hELElBQUlDLFdBQVdkLGtEQUFPQSxDQUFDYyxVQUFVO1lBQzdCLE1BQU1FLGNBQWNmLHFEQUFVQSxDQUFDYTtZQUMvQixPQUFPRSxZQUFZQyxVQUFVLENBQUM7Z0JBQzFCQyxZQUFZLENBQUNDLE1BQU1DO29CQUNmLE9BQU8sSUFBSSxDQUFDQyx5QkFBeUIsQ0FBQ1IsTUFBTU0sTUFBTUM7Z0JBQ3REO2dCQUNBRSxXQUFXLENBQUNDO29CQUNSLE9BQU8sSUFBSSxDQUFDQyx3QkFBd0IsQ0FBQ1gsTUFBTVU7Z0JBQy9DO1lBQ0o7UUFDSjtRQUNBLE9BQU9FO0lBQ1g7SUFDQUosMEJBQTBCUixJQUFJLEVBQUVhLElBQUksRUFBRU4sT0FBTyxFQUFFO1FBQzNDLElBQUlPO1FBQ0osTUFBTUMsY0FBYyxDQUFDRCxLQUFLLElBQUksQ0FBQ0UsMkJBQTJCLENBQUNoQixNQUFNYSxLQUFJLE1BQU8sUUFBUUMsT0FBTyxLQUFLLElBQUlBLEtBQUssSUFBSSxDQUFDRyxxQkFBcUIsQ0FBQ2pCLE1BQU1hO1FBQzFJLElBQUlFLGVBQWVBLFlBQVlHLFdBQVcsRUFBRTtZQUN4QyxNQUFNQyxPQUFPSixZQUFZRyxXQUFXLENBQUNFLEtBQUssQ0FBQ0MsS0FBSyxDQUFDRixJQUFJLEdBQUc7WUFDeEQsTUFBTUcsWUFBWVAsWUFBWUcsV0FBVyxDQUFDRSxLQUFLLENBQUNDLEtBQUssQ0FBQ0MsU0FBUyxHQUFHO1lBQ2xFLE1BQU1DLE1BQU1SLFlBQVlTLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDO2dCQUFFQyxVQUFVLENBQUMsQ0FBQyxFQUFFUCxLQUFLLENBQUMsRUFBRUcsVUFBVSxDQUFDO1lBQUM7WUFDN0UsT0FBTyxDQUFDLENBQUMsRUFBRWYsUUFBUSxFQUFFLEVBQUVnQixJQUFJSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE9BQ0s7WUFDRCxPQUFPZjtRQUNYO0lBQ0o7SUFDQUQseUJBQXlCaUIsS0FBSyxFQUFFQyxJQUFJLEVBQUU7UUFDbEMseUNBQXlDO1FBQ3pDLE9BQU9qQjtJQUNYO0lBQ0FJLDRCQUE0QmhCLElBQUksRUFBRWEsSUFBSSxFQUFFO1FBQ3BDLE1BQU1pQixXQUFXNUMsZ0VBQVdBLENBQUNjO1FBQzdCLE1BQU0rQixjQUFjRCxTQUFTRSxpQkFBaUI7UUFDOUMsSUFBSSxDQUFDRCxhQUFhO1lBQ2QsT0FBT25CO1FBQ1g7UUFDQSxJQUFJcUIsY0FBY2pDO1FBQ2xCLEdBQUc7WUFDQyxNQUFNa0Msa0JBQWtCSCxZQUFZSSxHQUFHLENBQUNGO1lBQ3hDLE1BQU1sQixjQUFjbUIsZ0JBQWdCRSxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUV4QixJQUFJLEtBQUtBO1lBQ3pELElBQUlFLGFBQWE7Z0JBQ2IsT0FBT0E7WUFDWDtZQUNBa0IsY0FBY0EsWUFBWUssVUFBVTtRQUN4QyxRQUFTTCxhQUFhO1FBQ3RCLE9BQU9yQjtJQUNYO0lBQ0FLLHNCQUFzQmpCLElBQUksRUFBRWEsSUFBSSxFQUFFO1FBQzlCLE1BQU1FLGNBQWMsSUFBSSxDQUFDdkIsWUFBWSxDQUFDK0MsV0FBVyxHQUFHSCxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUV4QixJQUFJLEtBQUtBO1FBQ3pFLE9BQU9FO0lBQ1g7QUFDSixFQUNBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2RvY3VtZW50YXRpb24vZG9jdW1lbnRhdGlvbi1wcm92aWRlci5qcz9kOTNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIzIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi4vdXRpbHMvYXN0LXV0aWxzLmpzJztcbmltcG9ydCB7IGlzSlNEb2MsIHBhcnNlSlNEb2MgfSBmcm9tICcuL2pzZG9jLmpzJztcbmV4cG9ydCBjbGFzcyBKU0RvY0RvY3VtZW50YXRpb25Qcm92aWRlciB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgdGhpcy5pbmRleE1hbmFnZXIgPSBzZXJ2aWNlcy5zaGFyZWQud29ya3NwYWNlLkluZGV4TWFuYWdlcjtcbiAgICAgICAgdGhpcy5jb21tZW50UHJvdmlkZXIgPSBzZXJ2aWNlcy5kb2N1bWVudGF0aW9uLkNvbW1lbnRQcm92aWRlcjtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRhdGlvbihub2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbW1lbnQgPSB0aGlzLmNvbW1lbnRQcm92aWRlci5nZXRDb21tZW50KG5vZGUpO1xuICAgICAgICBpZiAoY29tbWVudCAmJiBpc0pTRG9jKGNvbW1lbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRKU0RvYyA9IHBhcnNlSlNEb2MoY29tbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkSlNEb2MudG9NYXJrZG93bih7XG4gICAgICAgICAgICAgICAgcmVuZGVyTGluazogKGxpbmssIGRpc3BsYXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRhdGlvbkxpbmtSZW5kZXJlcihub2RlLCBsaW5rLCBkaXNwbGF5KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbmRlclRhZzogKHRhZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudGF0aW9uVGFnUmVuZGVyZXIobm9kZSwgdGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBkb2N1bWVudGF0aW9uTGlua1JlbmRlcmVyKG5vZGUsIG5hbWUsIGRpc3BsYXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IChfYSA9IHRoaXMuZmluZE5hbWVJblByZWNvbXB1dGVkU2NvcGVzKG5vZGUsIG5hbWUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmZpbmROYW1lSW5HbG9iYWxTY29wZShub2RlLCBuYW1lKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0aW9uICYmIGRlc2NyaXB0aW9uLm5hbWVTZWdtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gZGVzY3JpcHRpb24ubmFtZVNlZ21lbnQucmFuZ2Uuc3RhcnQubGluZSArIDE7XG4gICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSBkZXNjcmlwdGlvbi5uYW1lU2VnbWVudC5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgKyAxO1xuICAgICAgICAgICAgY29uc3QgdXJpID0gZGVzY3JpcHRpb24uZG9jdW1lbnRVcmkud2l0aCh7IGZyYWdtZW50OiBgTCR7bGluZX0sJHtjaGFyYWN0ZXJ9YCB9KTtcbiAgICAgICAgICAgIHJldHVybiBgWyR7ZGlzcGxheX1dKCR7dXJpLnRvU3RyaW5nKCl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRvY3VtZW50YXRpb25UYWdSZW5kZXJlcihfbm9kZSwgX3RhZykge1xuICAgICAgICAvLyBGYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgdGFnIHJlbmRlcmluZ1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmaW5kTmFtZUluUHJlY29tcHV0ZWRTY29wZXMobm9kZSwgbmFtZSkge1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KG5vZGUpO1xuICAgICAgICBjb25zdCBwcmVjb21wdXRlZCA9IGRvY3VtZW50LnByZWNvbXB1dGVkU2NvcGVzO1xuICAgICAgICBpZiAoIXByZWNvbXB1dGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGNvbnN0IGFsbERlc2NyaXB0aW9ucyA9IHByZWNvbXB1dGVkLmdldChjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGFsbERlc2NyaXB0aW9ucy5maW5kKGUgPT4gZS5uYW1lID09PSBuYW1lKTtcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuJGNvbnRhaW5lcjtcbiAgICAgICAgfSB3aGlsZSAoY3VycmVudE5vZGUpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmaW5kTmFtZUluR2xvYmFsU2NvcGUobm9kZSwgbmFtZSkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuaW5kZXhNYW5hZ2VyLmFsbEVsZW1lbnRzKCkuZmluZChlID0+IGUubmFtZSA9PT0gbmFtZSk7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb2N1bWVudGF0aW9uLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXREb2N1bWVudCIsImlzSlNEb2MiLCJwYXJzZUpTRG9jIiwiSlNEb2NEb2N1bWVudGF0aW9uUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsInNlcnZpY2VzIiwiaW5kZXhNYW5hZ2VyIiwic2hhcmVkIiwid29ya3NwYWNlIiwiSW5kZXhNYW5hZ2VyIiwiY29tbWVudFByb3ZpZGVyIiwiZG9jdW1lbnRhdGlvbiIsIkNvbW1lbnRQcm92aWRlciIsImdldERvY3VtZW50YXRpb24iLCJub2RlIiwiY29tbWVudCIsImdldENvbW1lbnQiLCJwYXJzZWRKU0RvYyIsInRvTWFya2Rvd24iLCJyZW5kZXJMaW5rIiwibGluayIsImRpc3BsYXkiLCJkb2N1bWVudGF0aW9uTGlua1JlbmRlcmVyIiwicmVuZGVyVGFnIiwidGFnIiwiZG9jdW1lbnRhdGlvblRhZ1JlbmRlcmVyIiwidW5kZWZpbmVkIiwibmFtZSIsIl9hIiwiZGVzY3JpcHRpb24iLCJmaW5kTmFtZUluUHJlY29tcHV0ZWRTY29wZXMiLCJmaW5kTmFtZUluR2xvYmFsU2NvcGUiLCJuYW1lU2VnbWVudCIsImxpbmUiLCJyYW5nZSIsInN0YXJ0IiwiY2hhcmFjdGVyIiwidXJpIiwiZG9jdW1lbnRVcmkiLCJ3aXRoIiwiZnJhZ21lbnQiLCJ0b1N0cmluZyIsIl9ub2RlIiwiX3RhZyIsImRvY3VtZW50IiwicHJlY29tcHV0ZWQiLCJwcmVjb21wdXRlZFNjb3BlcyIsImN1cnJlbnROb2RlIiwiYWxsRGVzY3JpcHRpb25zIiwiZ2V0IiwiZmluZCIsImUiLCIkY29udGFpbmVyIiwiYWxsRWxlbWVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/documentation/documentation-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/documentation/jsdoc.js":
/*!*********************************************************!*\
  !*** ./node_modules/langium/lib/documentation/jsdoc.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isJSDoc: () => (/* binding */ isJSDoc),\n/* harmony export */   parseJSDoc: () => (/* binding */ parseJSDoc)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ \"(ssr)/./node_modules/vscode-languageserver-types/lib/esm/main.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/./node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\nfunction parseJSDoc(node, start, options) {\n    let opts;\n    let position;\n    if (typeof node === \"string\") {\n        position = start;\n        opts = options;\n    } else {\n        position = node.range.start;\n        opts = start;\n    }\n    if (!position) {\n        position = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0);\n    }\n    const lines = getLines(node);\n    const normalizedOptions = normalizeOptions(opts);\n    const tokens = tokenize({\n        lines,\n        position,\n        options: normalizedOptions\n    });\n    return parseJSDocComment({\n        index: 0,\n        tokens,\n        position\n    });\n}\nfunction isJSDoc(node, options) {\n    const normalizedOptions = normalizeOptions(options);\n    const lines = getLines(node);\n    if (lines.length === 0) {\n        return false;\n    }\n    const first = lines[0];\n    const last = lines[lines.length - 1];\n    const firstRegex = normalizedOptions.start;\n    const lastRegex = normalizedOptions.end;\n    return Boolean(firstRegex === null || firstRegex === void 0 ? void 0 : firstRegex.exec(first)) && Boolean(lastRegex === null || lastRegex === void 0 ? void 0 : lastRegex.exec(last));\n}\nfunction getLines(node) {\n    let content = \"\";\n    if (typeof node === \"string\") {\n        content = node;\n    } else {\n        content = node.text;\n    }\n    const lines = content.split(_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__.NEWLINE_REGEXP);\n    return lines;\n}\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\nfunction tokenize(context) {\n    var _a, _b, _c;\n    const tokens = [];\n    let currentLine = context.position.line;\n    let currentCharacter = context.position.character;\n    for(let i = 0; i < context.lines.length; i++){\n        const first = i === 0;\n        const last = i === context.lines.length - 1;\n        let line = context.lines[i];\n        let index = 0;\n        if (first && context.options.start) {\n            const match = (_a = context.options.start) === null || _a === void 0 ? void 0 : _a.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        } else {\n            const match = (_b = context.options.line) === null || _b === void 0 ? void 0 : _b.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        if (last) {\n            const match = (_c = context.options.end) === null || _c === void 0 ? void 0 : _c.exec(line);\n            if (match) {\n                line = line.substring(0, match.index);\n            }\n        }\n        line = line.substring(0, lastCharacter(line));\n        const whitespaceEnd = skipWhitespace(line, index);\n        if (whitespaceEnd >= line.length) {\n            // Only create a break token when we already have previous tokens\n            if (tokens.length > 0) {\n                const position = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter);\n                tokens.push({\n                    type: \"break\",\n                    content: \"\",\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(position, position)\n                });\n            }\n        } else {\n            tagRegex.lastIndex = index;\n            const tagMatch = tagRegex.exec(line);\n            if (tagMatch) {\n                const fullMatch = tagMatch[0];\n                const value = tagMatch[1];\n                const start = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter + index);\n                const end = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter + index + fullMatch.length);\n                tokens.push({\n                    type: \"tag\",\n                    content: value,\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end)\n                });\n                index += fullMatch.length;\n                index = skipWhitespace(line, index);\n            }\n            if (index < line.length) {\n                const rest = line.substring(index);\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\n            }\n        }\n        currentLine++;\n        currentCharacter = 0;\n    }\n    // Remove last break token if there is one\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === \"break\") {\n        return tokens.slice(0, -1);\n    }\n    return tokens;\n}\nfunction buildInlineTokens(tags, line, lineIndex, characterIndex) {\n    const tokens = [];\n    if (tags.length === 0) {\n        const start = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, characterIndex);\n        const end = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, characterIndex + line.length);\n        tokens.push({\n            type: \"text\",\n            content: line,\n            range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end)\n        });\n    } else {\n        let lastIndex = 0;\n        for (const match of tags){\n            const matchIndex = match.index;\n            const startContent = line.substring(lastIndex, matchIndex);\n            if (startContent.length > 0) {\n                tokens.push({\n                    type: \"text\",\n                    content: line.substring(lastIndex, matchIndex),\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, matchIndex + characterIndex))\n                });\n            }\n            let offset = startContent.length + 1;\n            const tagName = match[1];\n            tokens.push({\n                type: \"inline-tag\",\n                content: tagName,\n                range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex))\n            });\n            offset += tagName.length;\n            if (match.length === 4) {\n                offset += match[2].length;\n                const value = match[3];\n                tokens.push({\n                    type: \"text\",\n                    content: value,\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + value.length + characterIndex))\n                });\n            } else {\n                tokens.push({\n                    type: \"text\",\n                    content: \"\",\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex))\n                });\n            }\n            lastIndex = matchIndex + match[0].length;\n        }\n        const endContent = line.substring(lastIndex);\n        if (endContent.length > 0) {\n            tokens.push({\n                type: \"text\",\n                content: endContent,\n                range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex + endContent.length))\n            });\n        }\n    }\n    return tokens;\n}\nconst nonWhitespaceRegex = /\\S/;\nconst whitespaceEndRegex = /\\s*$/;\nfunction skipWhitespace(line, index) {\n    const match = line.substring(index).match(nonWhitespaceRegex);\n    if (match) {\n        return index + match.index;\n    } else {\n        return line.length;\n    }\n}\nfunction lastCharacter(line) {\n    const match = line.match(whitespaceEndRegex);\n    if (match && typeof match.index === \"number\") {\n        return match.index;\n    }\n    return undefined;\n}\n// Parsing\nfunction parseJSDocComment(context) {\n    var _a, _b, _c, _d;\n    const startPosition = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(context.position.line, context.position.character);\n    if (context.tokens.length === 0) {\n        return new JSDocCommentImpl([], vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(startPosition, startPosition));\n    }\n    const elements = [];\n    while(context.index < context.tokens.length){\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\n        if (element) {\n            elements.push(element);\n        }\n    }\n    const start = (_b = (_a = elements[0]) === null || _a === void 0 ? void 0 : _a.range.start) !== null && _b !== void 0 ? _b : startPosition;\n    const end = (_d = (_c = elements[elements.length - 1]) === null || _c === void 0 ? void 0 : _c.range.end) !== null && _d !== void 0 ? _d : startPosition;\n    return new JSDocCommentImpl(elements, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end));\n}\nfunction parseJSDocElement(context, last) {\n    const next = context.tokens[context.index];\n    if (next.type === \"tag\") {\n        return parseJSDocTag(context, false);\n    } else if (next.type === \"text\" || next.type === \"inline-tag\") {\n        return parseJSDocText(context);\n    } else {\n        appendEmptyLine(next, last);\n        context.index++;\n        return undefined;\n    }\n}\nfunction appendEmptyLine(token, element) {\n    if (element) {\n        const line = new JSDocLineImpl(\"\", token.range);\n        if (\"inlines\" in element) {\n            element.inlines.push(line);\n        } else {\n            element.content.inlines.push(line);\n        }\n    }\n}\nfunction parseJSDocText(context) {\n    let token = context.tokens[context.index];\n    const firstToken = token;\n    let lastToken = token;\n    const lines = [];\n    while(token && token.type !== \"break\" && token.type !== \"tag\"){\n        lines.push(parseJSDocInline(context));\n        lastToken = token;\n        token = context.tokens[context.index];\n    }\n    return new JSDocTextImpl(lines, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(firstToken.range.start, lastToken.range.end));\n}\nfunction parseJSDocInline(context) {\n    const token = context.tokens[context.index];\n    if (token.type === \"inline-tag\") {\n        return parseJSDocTag(context, true);\n    } else {\n        return parseJSDocLine(context);\n    }\n}\nfunction parseJSDocTag(context, inline) {\n    const tagToken = context.tokens[context.index++];\n    const name = tagToken.content.substring(1);\n    const nextToken = context.tokens[context.index];\n    if ((nextToken === null || nextToken === void 0 ? void 0 : nextToken.type) === \"text\") {\n        if (inline) {\n            const docLine = parseJSDocLine(context);\n            return new JSDocTagImpl(name, new JSDocTextImpl([\n                docLine\n            ], docLine.range), inline, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(tagToken.range.start, docLine.range.end));\n        } else {\n            const textDoc = parseJSDocText(context);\n            return new JSDocTagImpl(name, textDoc, inline, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(tagToken.range.start, textDoc.range.end));\n        }\n    } else {\n        const range = tagToken.range;\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\n    }\n}\nfunction parseJSDocLine(context) {\n    const token = context.tokens[context.index++];\n    return new JSDocLineImpl(token.content, token.range);\n}\nfunction normalizeOptions(options) {\n    if (!options) {\n        return normalizeOptions({\n            start: \"/**\",\n            end: \"*/\",\n            line: \"*\"\n        });\n    }\n    const { start, end, line } = options;\n    return {\n        start: normalizeOption(start, true),\n        end: normalizeOption(end, false),\n        line: normalizeOption(line, true)\n    };\n}\nfunction normalizeOption(option, start) {\n    if (typeof option === \"string\" || typeof option === \"object\") {\n        const escaped = typeof option === \"string\" ? (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(option) : option.source;\n        if (start) {\n            return new RegExp(`^\\\\s*${escaped}`);\n        } else {\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\n        }\n    } else {\n        return option;\n    }\n}\nclass JSDocCommentImpl {\n    constructor(elements, range){\n        this.elements = elements;\n        this.range = range;\n    }\n    getTag(name) {\n        return this.getAllTags().find((e)=>e.name === name);\n    }\n    getTags(name) {\n        return this.getAllTags().filter((e)=>e.name === name);\n    }\n    getAllTags() {\n        return this.elements.filter((e)=>\"name\" in e);\n    }\n    toString() {\n        let value = \"\";\n        for (const element of this.elements){\n            if (value.length === 0) {\n                value = element.toString();\n            } else {\n                const text = element.toString();\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n    toMarkdown(options) {\n        let value = \"\";\n        for (const element of this.elements){\n            if (value.length === 0) {\n                value = element.toMarkdown(options);\n            } else {\n                const text = element.toMarkdown(options);\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n}\nclass JSDocTagImpl {\n    constructor(name, content, inline, range){\n        this.name = name;\n        this.content = content;\n        this.inline = inline;\n        this.range = range;\n    }\n    toString() {\n        let text = `@${this.name}`;\n        const content = this.content.toString();\n        if (this.content.inlines.length === 1) {\n            text = `${text} ${content}`;\n        } else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        } else {\n            return text;\n        }\n    }\n    toMarkdown(options) {\n        var _a, _b;\n        return (_b = (_a = options === null || options === void 0 ? void 0 : options.renderTag) === null || _a === void 0 ? void 0 : _a.call(options, this)) !== null && _b !== void 0 ? _b : this.toMarkdownDefault(options);\n    }\n    toMarkdownDefault(options) {\n        const content = this.content.toMarkdown(options);\n        if (this.inline) {\n            const rendered = renderInlineTag(this.name, content, options !== null && options !== void 0 ? options : {});\n            if (typeof rendered === \"string\") {\n                return rendered;\n            }\n        }\n        let marker = \"\";\n        if ((options === null || options === void 0 ? void 0 : options.tag) === \"italic\" || (options === null || options === void 0 ? void 0 : options.tag) === undefined) {\n            marker = \"*\";\n        } else if ((options === null || options === void 0 ? void 0 : options.tag) === \"bold\") {\n            marker = \"**\";\n        } else if ((options === null || options === void 0 ? void 0 : options.tag) === \"bold-italic\") {\n            marker = \"***\";\n        }\n        let text = `${marker}@${this.name}${marker}`;\n        if (this.content.inlines.length === 1) {\n            text = `${text} — ${content}`;\n        } else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        } else {\n            return text;\n        }\n    }\n}\nfunction renderInlineTag(tag, content, options) {\n    var _a, _b;\n    if (tag === \"linkplain\" || tag === \"linkcode\" || tag === \"link\") {\n        const index = content.indexOf(\" \");\n        let display = content;\n        if (index > 0) {\n            const displayStart = skipWhitespace(content, index);\n            display = content.substring(displayStart);\n            content = content.substring(0, index);\n        }\n        if (tag === \"linkcode\" || tag === \"link\" && options.link === \"code\") {\n            // Surround the display value in a markdown inline code block\n            display = `\\`${display}\\``;\n        }\n        const renderedLink = (_b = (_a = options.renderLink) === null || _a === void 0 ? void 0 : _a.call(options, content, display)) !== null && _b !== void 0 ? _b : renderLinkDefault(content, display);\n        return renderedLink;\n    }\n    return undefined;\n}\nfunction renderLinkDefault(content, display) {\n    try {\n        _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(content, true);\n        return `[${display}](${content})`;\n    } catch (_a) {\n        return content;\n    }\n}\nclass JSDocTextImpl {\n    constructor(lines, range){\n        this.inlines = lines;\n        this.range = range;\n    }\n    toString() {\n        let text = \"\";\n        for(let i = 0; i < this.inlines.length; i++){\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toString();\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += \"\\n\";\n            }\n        }\n        return text;\n    }\n    toMarkdown(options) {\n        let text = \"\";\n        for(let i = 0; i < this.inlines.length; i++){\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toMarkdown(options);\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += \"\\n\";\n            }\n        }\n        return text;\n    }\n}\nclass JSDocLineImpl {\n    constructor(text, range){\n        this.text = text;\n        this.range = range;\n    }\n    toString() {\n        return this.text;\n    }\n    toMarkdown() {\n        return this.text;\n    }\n}\nfunction fillNewlines(text) {\n    if (text.endsWith(\"\\n\")) {\n        return \"\\n\";\n    } else {\n        return \"\\n\\n\";\n    }\n} //# sourceMappingURL=jsdoc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/documentation/jsdoc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/languages/generated/ast.js":
/*!*************************************************************!*\
  !*** ./node_modules/langium/lib/languages/generated/ast.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractElement: () => (/* binding */ AbstractElement),\n/* harmony export */   AbstractRule: () => (/* binding */ AbstractRule),\n/* harmony export */   AbstractType: () => (/* binding */ AbstractType),\n/* harmony export */   Action: () => (/* binding */ Action),\n/* harmony export */   Alternatives: () => (/* binding */ Alternatives),\n/* harmony export */   ArrayLiteral: () => (/* binding */ ArrayLiteral),\n/* harmony export */   ArrayType: () => (/* binding */ ArrayType),\n/* harmony export */   Assignment: () => (/* binding */ Assignment),\n/* harmony export */   BooleanLiteral: () => (/* binding */ BooleanLiteral),\n/* harmony export */   CharacterRange: () => (/* binding */ CharacterRange),\n/* harmony export */   Condition: () => (/* binding */ Condition),\n/* harmony export */   Conjunction: () => (/* binding */ Conjunction),\n/* harmony export */   CrossReference: () => (/* binding */ CrossReference),\n/* harmony export */   Disjunction: () => (/* binding */ Disjunction),\n/* harmony export */   EndOfFile: () => (/* binding */ EndOfFile),\n/* harmony export */   Grammar: () => (/* binding */ Grammar),\n/* harmony export */   GrammarImport: () => (/* binding */ GrammarImport),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   InferredType: () => (/* binding */ InferredType),\n/* harmony export */   Interface: () => (/* binding */ Interface),\n/* harmony export */   Keyword: () => (/* binding */ Keyword),\n/* harmony export */   LangiumGrammarAstReflection: () => (/* binding */ LangiumGrammarAstReflection),\n/* harmony export */   LangiumGrammarTerminals: () => (/* binding */ LangiumGrammarTerminals),\n/* harmony export */   NamedArgument: () => (/* binding */ NamedArgument),\n/* harmony export */   NegatedToken: () => (/* binding */ NegatedToken),\n/* harmony export */   Negation: () => (/* binding */ Negation),\n/* harmony export */   NumberLiteral: () => (/* binding */ NumberLiteral),\n/* harmony export */   Parameter: () => (/* binding */ Parameter),\n/* harmony export */   ParameterReference: () => (/* binding */ ParameterReference),\n/* harmony export */   ParserRule: () => (/* binding */ ParserRule),\n/* harmony export */   ReferenceType: () => (/* binding */ ReferenceType),\n/* harmony export */   RegexToken: () => (/* binding */ RegexToken),\n/* harmony export */   ReturnType: () => (/* binding */ ReturnType),\n/* harmony export */   RuleCall: () => (/* binding */ RuleCall),\n/* harmony export */   SimpleType: () => (/* binding */ SimpleType),\n/* harmony export */   StringLiteral: () => (/* binding */ StringLiteral),\n/* harmony export */   TerminalAlternatives: () => (/* binding */ TerminalAlternatives),\n/* harmony export */   TerminalGroup: () => (/* binding */ TerminalGroup),\n/* harmony export */   TerminalRule: () => (/* binding */ TerminalRule),\n/* harmony export */   TerminalRuleCall: () => (/* binding */ TerminalRuleCall),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   TypeAttribute: () => (/* binding */ TypeAttribute),\n/* harmony export */   TypeDefinition: () => (/* binding */ TypeDefinition),\n/* harmony export */   UnionType: () => (/* binding */ UnionType),\n/* harmony export */   UnorderedGroup: () => (/* binding */ UnorderedGroup),\n/* harmony export */   UntilToken: () => (/* binding */ UntilToken),\n/* harmony export */   ValueLiteral: () => (/* binding */ ValueLiteral),\n/* harmony export */   Wildcard: () => (/* binding */ Wildcard),\n/* harmony export */   isAbstractElement: () => (/* binding */ isAbstractElement),\n/* harmony export */   isAbstractRule: () => (/* binding */ isAbstractRule),\n/* harmony export */   isAbstractType: () => (/* binding */ isAbstractType),\n/* harmony export */   isAction: () => (/* binding */ isAction),\n/* harmony export */   isAlternatives: () => (/* binding */ isAlternatives),\n/* harmony export */   isArrayLiteral: () => (/* binding */ isArrayLiteral),\n/* harmony export */   isArrayType: () => (/* binding */ isArrayType),\n/* harmony export */   isAssignment: () => (/* binding */ isAssignment),\n/* harmony export */   isBooleanLiteral: () => (/* binding */ isBooleanLiteral),\n/* harmony export */   isCharacterRange: () => (/* binding */ isCharacterRange),\n/* harmony export */   isCondition: () => (/* binding */ isCondition),\n/* harmony export */   isConjunction: () => (/* binding */ isConjunction),\n/* harmony export */   isCrossReference: () => (/* binding */ isCrossReference),\n/* harmony export */   isDisjunction: () => (/* binding */ isDisjunction),\n/* harmony export */   isEndOfFile: () => (/* binding */ isEndOfFile),\n/* harmony export */   isFeatureName: () => (/* binding */ isFeatureName),\n/* harmony export */   isGrammar: () => (/* binding */ isGrammar),\n/* harmony export */   isGrammarImport: () => (/* binding */ isGrammarImport),\n/* harmony export */   isGroup: () => (/* binding */ isGroup),\n/* harmony export */   isInferredType: () => (/* binding */ isInferredType),\n/* harmony export */   isInterface: () => (/* binding */ isInterface),\n/* harmony export */   isKeyword: () => (/* binding */ isKeyword),\n/* harmony export */   isNamedArgument: () => (/* binding */ isNamedArgument),\n/* harmony export */   isNegatedToken: () => (/* binding */ isNegatedToken),\n/* harmony export */   isNegation: () => (/* binding */ isNegation),\n/* harmony export */   isNumberLiteral: () => (/* binding */ isNumberLiteral),\n/* harmony export */   isParameter: () => (/* binding */ isParameter),\n/* harmony export */   isParameterReference: () => (/* binding */ isParameterReference),\n/* harmony export */   isParserRule: () => (/* binding */ isParserRule),\n/* harmony export */   isPrimitiveType: () => (/* binding */ isPrimitiveType),\n/* harmony export */   isReferenceType: () => (/* binding */ isReferenceType),\n/* harmony export */   isRegexToken: () => (/* binding */ isRegexToken),\n/* harmony export */   isReturnType: () => (/* binding */ isReturnType),\n/* harmony export */   isRuleCall: () => (/* binding */ isRuleCall),\n/* harmony export */   isSimpleType: () => (/* binding */ isSimpleType),\n/* harmony export */   isStringLiteral: () => (/* binding */ isStringLiteral),\n/* harmony export */   isTerminalAlternatives: () => (/* binding */ isTerminalAlternatives),\n/* harmony export */   isTerminalGroup: () => (/* binding */ isTerminalGroup),\n/* harmony export */   isTerminalRule: () => (/* binding */ isTerminalRule),\n/* harmony export */   isTerminalRuleCall: () => (/* binding */ isTerminalRuleCall),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isTypeAttribute: () => (/* binding */ isTypeAttribute),\n/* harmony export */   isTypeDefinition: () => (/* binding */ isTypeDefinition),\n/* harmony export */   isUnionType: () => (/* binding */ isUnionType),\n/* harmony export */   isUnorderedGroup: () => (/* binding */ isUnorderedGroup),\n/* harmony export */   isUntilToken: () => (/* binding */ isUntilToken),\n/* harmony export */   isValueLiteral: () => (/* binding */ isValueLiteral),\n/* harmony export */   isWildcard: () => (/* binding */ isWildcard),\n/* harmony export */   reflection: () => (/* binding */ reflection)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/******************************************************************************\n * This file was generated by langium-cli 3.3.0.\n * DO NOT EDIT MANUALLY!\n ******************************************************************************/ \nconst LangiumGrammarTerminals = {\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\n    WS: /\\s+/,\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/\n};\nconst AbstractRule = \"AbstractRule\";\nfunction isAbstractRule(item) {\n    return reflection.isInstance(item, AbstractRule);\n}\nconst AbstractType = \"AbstractType\";\nfunction isAbstractType(item) {\n    return reflection.isInstance(item, AbstractType);\n}\nconst Condition = \"Condition\";\nfunction isCondition(item) {\n    return reflection.isInstance(item, Condition);\n}\nfunction isFeatureName(item) {\n    return isPrimitiveType(item) || item === \"current\" || item === \"entry\" || item === \"extends\" || item === \"false\" || item === \"fragment\" || item === \"grammar\" || item === \"hidden\" || item === \"import\" || item === \"interface\" || item === \"returns\" || item === \"terminal\" || item === \"true\" || item === \"type\" || item === \"infer\" || item === \"infers\" || item === \"with\" || typeof item === \"string\" && /\\^?[_a-zA-Z][\\w_]*/.test(item);\n}\nfunction isPrimitiveType(item) {\n    return item === \"string\" || item === \"number\" || item === \"boolean\" || item === \"Date\" || item === \"bigint\";\n}\nconst TypeDefinition = \"TypeDefinition\";\nfunction isTypeDefinition(item) {\n    return reflection.isInstance(item, TypeDefinition);\n}\nconst ValueLiteral = \"ValueLiteral\";\nfunction isValueLiteral(item) {\n    return reflection.isInstance(item, ValueLiteral);\n}\nconst AbstractElement = \"AbstractElement\";\nfunction isAbstractElement(item) {\n    return reflection.isInstance(item, AbstractElement);\n}\nconst ArrayLiteral = \"ArrayLiteral\";\nfunction isArrayLiteral(item) {\n    return reflection.isInstance(item, ArrayLiteral);\n}\nconst ArrayType = \"ArrayType\";\nfunction isArrayType(item) {\n    return reflection.isInstance(item, ArrayType);\n}\nconst BooleanLiteral = \"BooleanLiteral\";\nfunction isBooleanLiteral(item) {\n    return reflection.isInstance(item, BooleanLiteral);\n}\nconst Conjunction = \"Conjunction\";\nfunction isConjunction(item) {\n    return reflection.isInstance(item, Conjunction);\n}\nconst Disjunction = \"Disjunction\";\nfunction isDisjunction(item) {\n    return reflection.isInstance(item, Disjunction);\n}\nconst Grammar = \"Grammar\";\nfunction isGrammar(item) {\n    return reflection.isInstance(item, Grammar);\n}\nconst GrammarImport = \"GrammarImport\";\nfunction isGrammarImport(item) {\n    return reflection.isInstance(item, GrammarImport);\n}\nconst InferredType = \"InferredType\";\nfunction isInferredType(item) {\n    return reflection.isInstance(item, InferredType);\n}\nconst Interface = \"Interface\";\nfunction isInterface(item) {\n    return reflection.isInstance(item, Interface);\n}\nconst NamedArgument = \"NamedArgument\";\nfunction isNamedArgument(item) {\n    return reflection.isInstance(item, NamedArgument);\n}\nconst Negation = \"Negation\";\nfunction isNegation(item) {\n    return reflection.isInstance(item, Negation);\n}\nconst NumberLiteral = \"NumberLiteral\";\nfunction isNumberLiteral(item) {\n    return reflection.isInstance(item, NumberLiteral);\n}\nconst Parameter = \"Parameter\";\nfunction isParameter(item) {\n    return reflection.isInstance(item, Parameter);\n}\nconst ParameterReference = \"ParameterReference\";\nfunction isParameterReference(item) {\n    return reflection.isInstance(item, ParameterReference);\n}\nconst ParserRule = \"ParserRule\";\nfunction isParserRule(item) {\n    return reflection.isInstance(item, ParserRule);\n}\nconst ReferenceType = \"ReferenceType\";\nfunction isReferenceType(item) {\n    return reflection.isInstance(item, ReferenceType);\n}\nconst ReturnType = \"ReturnType\";\nfunction isReturnType(item) {\n    return reflection.isInstance(item, ReturnType);\n}\nconst SimpleType = \"SimpleType\";\nfunction isSimpleType(item) {\n    return reflection.isInstance(item, SimpleType);\n}\nconst StringLiteral = \"StringLiteral\";\nfunction isStringLiteral(item) {\n    return reflection.isInstance(item, StringLiteral);\n}\nconst TerminalRule = \"TerminalRule\";\nfunction isTerminalRule(item) {\n    return reflection.isInstance(item, TerminalRule);\n}\nconst Type = \"Type\";\nfunction isType(item) {\n    return reflection.isInstance(item, Type);\n}\nconst TypeAttribute = \"TypeAttribute\";\nfunction isTypeAttribute(item) {\n    return reflection.isInstance(item, TypeAttribute);\n}\nconst UnionType = \"UnionType\";\nfunction isUnionType(item) {\n    return reflection.isInstance(item, UnionType);\n}\nconst Action = \"Action\";\nfunction isAction(item) {\n    return reflection.isInstance(item, Action);\n}\nconst Alternatives = \"Alternatives\";\nfunction isAlternatives(item) {\n    return reflection.isInstance(item, Alternatives);\n}\nconst Assignment = \"Assignment\";\nfunction isAssignment(item) {\n    return reflection.isInstance(item, Assignment);\n}\nconst CharacterRange = \"CharacterRange\";\nfunction isCharacterRange(item) {\n    return reflection.isInstance(item, CharacterRange);\n}\nconst CrossReference = \"CrossReference\";\nfunction isCrossReference(item) {\n    return reflection.isInstance(item, CrossReference);\n}\nconst EndOfFile = \"EndOfFile\";\nfunction isEndOfFile(item) {\n    return reflection.isInstance(item, EndOfFile);\n}\nconst Group = \"Group\";\nfunction isGroup(item) {\n    return reflection.isInstance(item, Group);\n}\nconst Keyword = \"Keyword\";\nfunction isKeyword(item) {\n    return reflection.isInstance(item, Keyword);\n}\nconst NegatedToken = \"NegatedToken\";\nfunction isNegatedToken(item) {\n    return reflection.isInstance(item, NegatedToken);\n}\nconst RegexToken = \"RegexToken\";\nfunction isRegexToken(item) {\n    return reflection.isInstance(item, RegexToken);\n}\nconst RuleCall = \"RuleCall\";\nfunction isRuleCall(item) {\n    return reflection.isInstance(item, RuleCall);\n}\nconst TerminalAlternatives = \"TerminalAlternatives\";\nfunction isTerminalAlternatives(item) {\n    return reflection.isInstance(item, TerminalAlternatives);\n}\nconst TerminalGroup = \"TerminalGroup\";\nfunction isTerminalGroup(item) {\n    return reflection.isInstance(item, TerminalGroup);\n}\nconst TerminalRuleCall = \"TerminalRuleCall\";\nfunction isTerminalRuleCall(item) {\n    return reflection.isInstance(item, TerminalRuleCall);\n}\nconst UnorderedGroup = \"UnorderedGroup\";\nfunction isUnorderedGroup(item) {\n    return reflection.isInstance(item, UnorderedGroup);\n}\nconst UntilToken = \"UntilToken\";\nfunction isUntilToken(item) {\n    return reflection.isInstance(item, UntilToken);\n}\nconst Wildcard = \"Wildcard\";\nfunction isWildcard(item) {\n    return reflection.isInstance(item, Wildcard);\n}\nclass LangiumGrammarAstReflection extends _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.AbstractAstReflection {\n    getAllTypes() {\n        return [\n            AbstractElement,\n            AbstractRule,\n            AbstractType,\n            Action,\n            Alternatives,\n            ArrayLiteral,\n            ArrayType,\n            Assignment,\n            BooleanLiteral,\n            CharacterRange,\n            Condition,\n            Conjunction,\n            CrossReference,\n            Disjunction,\n            EndOfFile,\n            Grammar,\n            GrammarImport,\n            Group,\n            InferredType,\n            Interface,\n            Keyword,\n            NamedArgument,\n            NegatedToken,\n            Negation,\n            NumberLiteral,\n            Parameter,\n            ParameterReference,\n            ParserRule,\n            ReferenceType,\n            RegexToken,\n            ReturnType,\n            RuleCall,\n            SimpleType,\n            StringLiteral,\n            TerminalAlternatives,\n            TerminalGroup,\n            TerminalRule,\n            TerminalRuleCall,\n            Type,\n            TypeAttribute,\n            TypeDefinition,\n            UnionType,\n            UnorderedGroup,\n            UntilToken,\n            ValueLiteral,\n            Wildcard\n        ];\n    }\n    computeIsSubtype(subtype, supertype) {\n        switch(subtype){\n            case Action:\n            case Alternatives:\n            case Assignment:\n            case CharacterRange:\n            case CrossReference:\n            case EndOfFile:\n            case Group:\n            case Keyword:\n            case NegatedToken:\n            case RegexToken:\n            case RuleCall:\n            case TerminalAlternatives:\n            case TerminalGroup:\n            case TerminalRuleCall:\n            case UnorderedGroup:\n            case UntilToken:\n            case Wildcard:\n                {\n                    return this.isSubtype(AbstractElement, supertype);\n                }\n            case ArrayLiteral:\n            case NumberLiteral:\n            case StringLiteral:\n                {\n                    return this.isSubtype(ValueLiteral, supertype);\n                }\n            case ArrayType:\n            case ReferenceType:\n            case SimpleType:\n            case UnionType:\n                {\n                    return this.isSubtype(TypeDefinition, supertype);\n                }\n            case BooleanLiteral:\n                {\n                    return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\n                }\n            case Conjunction:\n            case Disjunction:\n            case Negation:\n            case ParameterReference:\n                {\n                    return this.isSubtype(Condition, supertype);\n                }\n            case InferredType:\n            case Interface:\n            case Type:\n                {\n                    return this.isSubtype(AbstractType, supertype);\n                }\n            case ParserRule:\n                {\n                    return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\n                }\n            case TerminalRule:\n                {\n                    return this.isSubtype(AbstractRule, supertype);\n                }\n            default:\n                {\n                    return false;\n                }\n        }\n    }\n    getReferenceType(refInfo) {\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n        switch(referenceId){\n            case \"Action:type\":\n            case \"CrossReference:type\":\n            case \"Interface:superTypes\":\n            case \"ParserRule:returnType\":\n            case \"SimpleType:typeRef\":\n                {\n                    return AbstractType;\n                }\n            case \"Grammar:hiddenTokens\":\n            case \"ParserRule:hiddenTokens\":\n            case \"RuleCall:rule\":\n                {\n                    return AbstractRule;\n                }\n            case \"Grammar:usedGrammars\":\n                {\n                    return Grammar;\n                }\n            case \"NamedArgument:parameter\":\n            case \"ParameterReference:parameter\":\n                {\n                    return Parameter;\n                }\n            case \"TerminalRuleCall:rule\":\n                {\n                    return TerminalRule;\n                }\n            default:\n                {\n                    throw new Error(`${referenceId} is not a valid reference id.`);\n                }\n        }\n    }\n    getTypeMetaData(type) {\n        switch(type){\n            case AbstractElement:\n                {\n                    return {\n                        name: AbstractElement,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            }\n                        ]\n                    };\n                }\n            case ArrayLiteral:\n                {\n                    return {\n                        name: ArrayLiteral,\n                        properties: [\n                            {\n                                name: \"elements\",\n                                defaultValue: []\n                            }\n                        ]\n                    };\n                }\n            case ArrayType:\n                {\n                    return {\n                        name: ArrayType,\n                        properties: [\n                            {\n                                name: \"elementType\"\n                            }\n                        ]\n                    };\n                }\n            case BooleanLiteral:\n                {\n                    return {\n                        name: BooleanLiteral,\n                        properties: [\n                            {\n                                name: \"true\",\n                                defaultValue: false\n                            }\n                        ]\n                    };\n                }\n            case Conjunction:\n                {\n                    return {\n                        name: Conjunction,\n                        properties: [\n                            {\n                                name: \"left\"\n                            },\n                            {\n                                name: \"right\"\n                            }\n                        ]\n                    };\n                }\n            case Disjunction:\n                {\n                    return {\n                        name: Disjunction,\n                        properties: [\n                            {\n                                name: \"left\"\n                            },\n                            {\n                                name: \"right\"\n                            }\n                        ]\n                    };\n                }\n            case Grammar:\n                {\n                    return {\n                        name: Grammar,\n                        properties: [\n                            {\n                                name: \"definesHiddenTokens\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"hiddenTokens\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"imports\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"interfaces\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"isDeclared\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"name\"\n                            },\n                            {\n                                name: \"rules\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"types\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"usedGrammars\",\n                                defaultValue: []\n                            }\n                        ]\n                    };\n                }\n            case GrammarImport:\n                {\n                    return {\n                        name: GrammarImport,\n                        properties: [\n                            {\n                                name: \"path\"\n                            }\n                        ]\n                    };\n                }\n            case InferredType:\n                {\n                    return {\n                        name: InferredType,\n                        properties: [\n                            {\n                                name: \"name\"\n                            }\n                        ]\n                    };\n                }\n            case Interface:\n                {\n                    return {\n                        name: Interface,\n                        properties: [\n                            {\n                                name: \"attributes\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"name\"\n                            },\n                            {\n                                name: \"superTypes\",\n                                defaultValue: []\n                            }\n                        ]\n                    };\n                }\n            case NamedArgument:\n                {\n                    return {\n                        name: NamedArgument,\n                        properties: [\n                            {\n                                name: \"calledByName\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"parameter\"\n                            },\n                            {\n                                name: \"value\"\n                            }\n                        ]\n                    };\n                }\n            case Negation:\n                {\n                    return {\n                        name: Negation,\n                        properties: [\n                            {\n                                name: \"value\"\n                            }\n                        ]\n                    };\n                }\n            case NumberLiteral:\n                {\n                    return {\n                        name: NumberLiteral,\n                        properties: [\n                            {\n                                name: \"value\"\n                            }\n                        ]\n                    };\n                }\n            case Parameter:\n                {\n                    return {\n                        name: Parameter,\n                        properties: [\n                            {\n                                name: \"name\"\n                            }\n                        ]\n                    };\n                }\n            case ParameterReference:\n                {\n                    return {\n                        name: ParameterReference,\n                        properties: [\n                            {\n                                name: \"parameter\"\n                            }\n                        ]\n                    };\n                }\n            case ParserRule:\n                {\n                    return {\n                        name: ParserRule,\n                        properties: [\n                            {\n                                name: \"dataType\"\n                            },\n                            {\n                                name: \"definesHiddenTokens\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"definition\"\n                            },\n                            {\n                                name: \"entry\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"fragment\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"hiddenTokens\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"inferredType\"\n                            },\n                            {\n                                name: \"name\"\n                            },\n                            {\n                                name: \"parameters\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"returnType\"\n                            },\n                            {\n                                name: \"wildcard\",\n                                defaultValue: false\n                            }\n                        ]\n                    };\n                }\n            case ReferenceType:\n                {\n                    return {\n                        name: ReferenceType,\n                        properties: [\n                            {\n                                name: \"referenceType\"\n                            }\n                        ]\n                    };\n                }\n            case ReturnType:\n                {\n                    return {\n                        name: ReturnType,\n                        properties: [\n                            {\n                                name: \"name\"\n                            }\n                        ]\n                    };\n                }\n            case SimpleType:\n                {\n                    return {\n                        name: SimpleType,\n                        properties: [\n                            {\n                                name: \"primitiveType\"\n                            },\n                            {\n                                name: \"stringType\"\n                            },\n                            {\n                                name: \"typeRef\"\n                            }\n                        ]\n                    };\n                }\n            case StringLiteral:\n                {\n                    return {\n                        name: StringLiteral,\n                        properties: [\n                            {\n                                name: \"value\"\n                            }\n                        ]\n                    };\n                }\n            case TerminalRule:\n                {\n                    return {\n                        name: TerminalRule,\n                        properties: [\n                            {\n                                name: \"definition\"\n                            },\n                            {\n                                name: \"fragment\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"hidden\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"name\"\n                            },\n                            {\n                                name: \"type\"\n                            }\n                        ]\n                    };\n                }\n            case Type:\n                {\n                    return {\n                        name: Type,\n                        properties: [\n                            {\n                                name: \"name\"\n                            },\n                            {\n                                name: \"type\"\n                            }\n                        ]\n                    };\n                }\n            case TypeAttribute:\n                {\n                    return {\n                        name: TypeAttribute,\n                        properties: [\n                            {\n                                name: \"defaultValue\"\n                            },\n                            {\n                                name: \"isOptional\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"name\"\n                            },\n                            {\n                                name: \"type\"\n                            }\n                        ]\n                    };\n                }\n            case UnionType:\n                {\n                    return {\n                        name: UnionType,\n                        properties: [\n                            {\n                                name: \"types\",\n                                defaultValue: []\n                            }\n                        ]\n                    };\n                }\n            case Action:\n                {\n                    return {\n                        name: Action,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"feature\"\n                            },\n                            {\n                                name: \"inferredType\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"operator\"\n                            },\n                            {\n                                name: \"type\"\n                            }\n                        ]\n                    };\n                }\n            case Alternatives:\n                {\n                    return {\n                        name: Alternatives,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"elements\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"lookahead\"\n                            }\n                        ]\n                    };\n                }\n            case Assignment:\n                {\n                    return {\n                        name: Assignment,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"feature\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"operator\"\n                            },\n                            {\n                                name: \"terminal\"\n                            }\n                        ]\n                    };\n                }\n            case CharacterRange:\n                {\n                    return {\n                        name: CharacterRange,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"left\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"right\"\n                            }\n                        ]\n                    };\n                }\n            case CrossReference:\n                {\n                    return {\n                        name: CrossReference,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"deprecatedSyntax\",\n                                defaultValue: false\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"terminal\"\n                            },\n                            {\n                                name: \"type\"\n                            }\n                        ]\n                    };\n                }\n            case EndOfFile:\n                {\n                    return {\n                        name: EndOfFile,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            }\n                        ]\n                    };\n                }\n            case Group:\n                {\n                    return {\n                        name: Group,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"elements\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"guardCondition\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            }\n                        ]\n                    };\n                }\n            case Keyword:\n                {\n                    return {\n                        name: Keyword,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"value\"\n                            }\n                        ]\n                    };\n                }\n            case NegatedToken:\n                {\n                    return {\n                        name: NegatedToken,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"terminal\"\n                            }\n                        ]\n                    };\n                }\n            case RegexToken:\n                {\n                    return {\n                        name: RegexToken,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"regex\"\n                            }\n                        ]\n                    };\n                }\n            case RuleCall:\n                {\n                    return {\n                        name: RuleCall,\n                        properties: [\n                            {\n                                name: \"arguments\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"rule\"\n                            }\n                        ]\n                    };\n                }\n            case TerminalAlternatives:\n                {\n                    return {\n                        name: TerminalAlternatives,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"elements\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"lookahead\"\n                            }\n                        ]\n                    };\n                }\n            case TerminalGroup:\n                {\n                    return {\n                        name: TerminalGroup,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"elements\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"lookahead\"\n                            }\n                        ]\n                    };\n                }\n            case TerminalRuleCall:\n                {\n                    return {\n                        name: TerminalRuleCall,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"rule\"\n                            }\n                        ]\n                    };\n                }\n            case UnorderedGroup:\n                {\n                    return {\n                        name: UnorderedGroup,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"elements\",\n                                defaultValue: []\n                            },\n                            {\n                                name: \"lookahead\"\n                            }\n                        ]\n                    };\n                }\n            case UntilToken:\n                {\n                    return {\n                        name: UntilToken,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            },\n                            {\n                                name: \"terminal\"\n                            }\n                        ]\n                    };\n                }\n            case Wildcard:\n                {\n                    return {\n                        name: Wildcard,\n                        properties: [\n                            {\n                                name: \"cardinality\"\n                            },\n                            {\n                                name: \"lookahead\"\n                            }\n                        ]\n                    };\n                }\n            default:\n                {\n                    return {\n                        name: type,\n                        properties: []\n                    };\n                }\n        }\n    }\n}\nconst reflection = new LangiumGrammarAstReflection(); //# sourceMappingURL=ast.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/languages/generated/ast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/languages/grammar-config.js":
/*!**************************************************************!*\
  !*** ./node_modules/langium/lib/languages/grammar-config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGrammarConfig: () => (/* binding */ createGrammarConfig)\n/* harmony export */ });\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/ast.js */ \"(ssr)/./node_modules/langium/lib/languages/generated/ast.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n/**\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\n * language-specific module.\n */ function createGrammarConfig(services) {\n    const rules = [];\n    const grammar = services.Grammar;\n    for (const rule of grammar.rules){\n        if ((0,_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule)(rule) && (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.isCommentTerminal)(rule) && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.isMultilineComment)((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.terminalRegex)(rule))) {\n            rules.push(rule.name);\n        }\n    }\n    return {\n        multilineCommentRules: rules,\n        nameRegexp: _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_3__.DefaultNameRegexp\n    };\n} //# sourceMappingURL=grammar-config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvbGFuZ3VhZ2VzL2dyYW1tYXItY29uZmlnLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7OEVBSThFLEdBQ3BCO0FBQ21CO0FBQ2Y7QUFDVjtBQUNwRDs7O0NBR0MsR0FDTSxTQUFTSyxvQkFBb0JDLFFBQVE7SUFDeEMsTUFBTUMsUUFBUSxFQUFFO0lBQ2hCLE1BQU1DLFVBQVVGLFNBQVNHLE9BQU87SUFDaEMsS0FBSyxNQUFNQyxRQUFRRixRQUFRRCxLQUFLLENBQUU7UUFDOUIsSUFBSUgsaUVBQWNBLENBQUNNLFNBQVNULDBFQUFpQkEsQ0FBQ1MsU0FBU1AsMEVBQWtCQSxDQUFDRCxzRUFBYUEsQ0FBQ1EsUUFBUTtZQUM1RkgsTUFBTUksSUFBSSxDQUFDRCxLQUFLRSxJQUFJO1FBQ3hCO0lBQ0o7SUFDQSxPQUFPO1FBQ0hDLHVCQUF1Qk47UUFDdkJPLFlBQVlkLGtFQUFpQkE7SUFDakM7QUFDSixFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2xhbmd1YWdlcy9ncmFtbWFyLWNvbmZpZy5qcz9jMjZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IERlZmF1bHROYW1lUmVnZXhwIH0gZnJvbSAnLi4vdXRpbHMvY3N0LXV0aWxzLmpzJztcbmltcG9ydCB7IGlzQ29tbWVudFRlcm1pbmFsLCB0ZXJtaW5hbFJlZ2V4IH0gZnJvbSAnLi4vdXRpbHMvZ3JhbW1hci11dGlscy5qcyc7XG5pbXBvcnQgeyBpc011bHRpbGluZUNvbW1lbnQgfSBmcm9tICcuLi91dGlscy9yZWdleHAtdXRpbHMuanMnO1xuaW1wb3J0IHsgaXNUZXJtaW5hbFJ1bGUgfSBmcm9tICcuL2dlbmVyYXRlZC9hc3QuanMnO1xuLyoqXG4gKiBDcmVhdGUgdGhlIGRlZmF1bHQgZ3JhbW1hciBjb25maWd1cmF0aW9uICh1c2VkIGJ5IGBjcmVhdGVEZWZhdWx0TW9kdWxlYCkuIFRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gaW4gYVxuICogbGFuZ3VhZ2Utc3BlY2lmaWMgbW9kdWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlR3JhbW1hckNvbmZpZyhzZXJ2aWNlcykge1xuICAgIGNvbnN0IHJ1bGVzID0gW107XG4gICAgY29uc3QgZ3JhbW1hciA9IHNlcnZpY2VzLkdyYW1tYXI7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIGdyYW1tYXIucnVsZXMpIHtcbiAgICAgICAgaWYgKGlzVGVybWluYWxSdWxlKHJ1bGUpICYmIGlzQ29tbWVudFRlcm1pbmFsKHJ1bGUpICYmIGlzTXVsdGlsaW5lQ29tbWVudCh0ZXJtaW5hbFJlZ2V4KHJ1bGUpKSkge1xuICAgICAgICAgICAgcnVsZXMucHVzaChydWxlLm5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG11bHRpbGluZUNvbW1lbnRSdWxlczogcnVsZXMsXG4gICAgICAgIG5hbWVSZWdleHA6IERlZmF1bHROYW1lUmVnZXhwXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYW1tYXItY29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6WyJEZWZhdWx0TmFtZVJlZ2V4cCIsImlzQ29tbWVudFRlcm1pbmFsIiwidGVybWluYWxSZWdleCIsImlzTXVsdGlsaW5lQ29tbWVudCIsImlzVGVybWluYWxSdWxlIiwiY3JlYXRlR3JhbW1hckNvbmZpZyIsInNlcnZpY2VzIiwicnVsZXMiLCJncmFtbWFyIiwiR3JhbW1hciIsInJ1bGUiLCJwdXNoIiwibmFtZSIsIm11bHRpbGluZUNvbW1lbnRSdWxlcyIsIm5hbWVSZWdleHAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/languages/grammar-config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/async-parser.js":
/*!*********************************************************!*\
  !*** ./node_modules/langium/lib/parser/async-parser.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractThreadedAsyncParser: () => (/* binding */ AbstractThreadedAsyncParser),\n/* harmony export */   DefaultAsyncParser: () => (/* binding */ DefaultAsyncParser),\n/* harmony export */   ParserWorker: () => (/* binding */ ParserWorker)\n/* harmony export */ });\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/event.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/events.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n/**\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\n *\n * @remarks\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */ class DefaultAsyncParser {\n    constructor(services){\n        this.syncParser = services.parser.LangiumParser;\n    }\n    parse(text, _cancelToken) {\n        return Promise.resolve(this.syncParser.parse(text));\n    }\n}\nclass AbstractThreadedAsyncParser {\n    constructor(services){\n        /**\n         * The thread count determines how many threads are used to parse files in parallel.\n         * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\n         */ this.threadCount = 8;\n        /**\n         * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\n         * The default value is 200(ms).\n         */ this.terminationDelay = 200;\n        this.workerPool = [];\n        this.queue = [];\n        this.hydrator = services.serializer.Hydrator;\n    }\n    initializeWorkers() {\n        while(this.workerPool.length < this.threadCount){\n            const worker = this.createWorker();\n            worker.onReady(()=>{\n                if (this.queue.length > 0) {\n                    const deferred = this.queue.shift();\n                    if (deferred) {\n                        worker.lock();\n                        deferred.resolve(worker);\n                    }\n                }\n            });\n            this.workerPool.push(worker);\n        }\n    }\n    async parse(text, cancelToken) {\n        const worker = await this.acquireParserWorker(cancelToken);\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        let timeout;\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\n        const cancellation = cancelToken.onCancellationRequested(()=>{\n            timeout = setTimeout(()=>{\n                this.terminateWorker(worker);\n            }, this.terminationDelay);\n        });\n        worker.parse(text).then((result)=>{\n            const hydrated = this.hydrator.hydrate(result);\n            deferred.resolve(hydrated);\n        }).catch((err)=>{\n            deferred.reject(err);\n        }).finally(()=>{\n            cancellation.dispose();\n            clearTimeout(timeout);\n        });\n        return deferred.promise;\n    }\n    terminateWorker(worker) {\n        worker.terminate();\n        const index = this.workerPool.indexOf(worker);\n        if (index >= 0) {\n            this.workerPool.splice(index, 1);\n        }\n    }\n    async acquireParserWorker(cancelToken) {\n        this.initializeWorkers();\n        for (const worker of this.workerPool){\n            if (worker.ready) {\n                worker.lock();\n                return worker;\n            }\n        }\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        cancelToken.onCancellationRequested(()=>{\n            const index = this.queue.indexOf(deferred);\n            if (index >= 0) {\n                this.queue.splice(index, 1);\n            }\n            deferred.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.OperationCancelled);\n        });\n        this.queue.push(deferred);\n        return deferred.promise;\n    }\n}\nclass ParserWorker {\n    get ready() {\n        return this._ready;\n    }\n    get onReady() {\n        return this.onReadyEmitter.event;\n    }\n    constructor(sendMessage, onMessage, onError, terminate){\n        this.onReadyEmitter = new _utils_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n        this.deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this._ready = true;\n        this._parsing = false;\n        this.sendMessage = sendMessage;\n        this._terminate = terminate;\n        onMessage((result)=>{\n            const parseResult = result;\n            this.deferred.resolve(parseResult);\n            this.unlock();\n        });\n        onError((error)=>{\n            this.deferred.reject(error);\n            this.unlock();\n        });\n    }\n    terminate() {\n        this.deferred.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.OperationCancelled);\n        this._terminate();\n    }\n    lock() {\n        this._ready = false;\n    }\n    unlock() {\n        this._parsing = false;\n        this._ready = true;\n        this.onReadyEmitter.fire();\n    }\n    parse(text) {\n        if (this._parsing) {\n            throw new Error(\"Parser worker is busy\");\n        }\n        this._parsing = true;\n        this.deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.sendMessage(text);\n        return this.deferred.promise;\n    }\n} //# sourceMappingURL=async-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcGFyc2VyL2FzeW5jLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUNMO0FBQzdCO0FBQzVDOzs7OztDQUtDLEdBQ00sTUFBTUc7SUFDVEMsWUFBWUMsUUFBUSxDQUFFO1FBQ2xCLElBQUksQ0FBQ0MsVUFBVSxHQUFHRCxTQUFTRSxNQUFNLENBQUNDLGFBQWE7SUFDbkQ7SUFDQUMsTUFBTUMsSUFBSSxFQUFFQyxZQUFZLEVBQUU7UUFDdEIsT0FBT0MsUUFBUUMsT0FBTyxDQUFDLElBQUksQ0FBQ1AsVUFBVSxDQUFDRyxLQUFLLENBQUNDO0lBQ2pEO0FBQ0o7QUFDTyxNQUFNSTtJQUNUVixZQUFZQyxRQUFRLENBQUU7UUFDbEI7OztTQUdDLEdBQ0QsSUFBSSxDQUFDVSxXQUFXLEdBQUc7UUFDbkI7OztTQUdDLEdBQ0QsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNDLFVBQVUsR0FBRyxFQUFFO1FBQ3BCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLEVBQUU7UUFDZixJQUFJLENBQUNDLFFBQVEsR0FBR2QsU0FBU2UsVUFBVSxDQUFDQyxRQUFRO0lBQ2hEO0lBQ0FDLG9CQUFvQjtRQUNoQixNQUFPLElBQUksQ0FBQ0wsVUFBVSxDQUFDTSxNQUFNLEdBQUcsSUFBSSxDQUFDUixXQUFXLENBQUU7WUFDOUMsTUFBTVMsU0FBUyxJQUFJLENBQUNDLFlBQVk7WUFDaENELE9BQU9FLE9BQU8sQ0FBQztnQkFDWCxJQUFJLElBQUksQ0FBQ1IsS0FBSyxDQUFDSyxNQUFNLEdBQUcsR0FBRztvQkFDdkIsTUFBTUksV0FBVyxJQUFJLENBQUNULEtBQUssQ0FBQ1UsS0FBSztvQkFDakMsSUFBSUQsVUFBVTt3QkFDVkgsT0FBT0ssSUFBSTt3QkFDWEYsU0FBU2QsT0FBTyxDQUFDVztvQkFDckI7Z0JBQ0o7WUFDSjtZQUNBLElBQUksQ0FBQ1AsVUFBVSxDQUFDYSxJQUFJLENBQUNOO1FBQ3pCO0lBQ0o7SUFDQSxNQUFNZixNQUFNQyxJQUFJLEVBQUVxQixXQUFXLEVBQUU7UUFDM0IsTUFBTVAsU0FBUyxNQUFNLElBQUksQ0FBQ1EsbUJBQW1CLENBQUNEO1FBQzlDLE1BQU1KLFdBQVcsSUFBSTNCLDZEQUFRQTtRQUM3QixJQUFJaUM7UUFDSixvR0FBb0c7UUFDcEcsNkdBQTZHO1FBQzdHLGdHQUFnRztRQUNoRyxNQUFNQyxlQUFlSCxZQUFZSSx1QkFBdUIsQ0FBQztZQUNyREYsVUFBVUcsV0FBVztnQkFDakIsSUFBSSxDQUFDQyxlQUFlLENBQUNiO1lBQ3pCLEdBQUcsSUFBSSxDQUFDUixnQkFBZ0I7UUFDNUI7UUFDQVEsT0FBT2YsS0FBSyxDQUFDQyxNQUFNNEIsSUFBSSxDQUFDQyxDQUFBQTtZQUNwQixNQUFNQyxXQUFXLElBQUksQ0FBQ3JCLFFBQVEsQ0FBQ3NCLE9BQU8sQ0FBQ0Y7WUFDdkNaLFNBQVNkLE9BQU8sQ0FBQzJCO1FBQ3JCLEdBQUdFLEtBQUssQ0FBQ0MsQ0FBQUE7WUFDTGhCLFNBQVNpQixNQUFNLENBQUNEO1FBQ3BCLEdBQUdFLE9BQU8sQ0FBQztZQUNQWCxhQUFhWSxPQUFPO1lBQ3BCQyxhQUFhZDtRQUNqQjtRQUNBLE9BQU9OLFNBQVNxQixPQUFPO0lBQzNCO0lBQ0FYLGdCQUFnQmIsTUFBTSxFQUFFO1FBQ3BCQSxPQUFPeUIsU0FBUztRQUNoQixNQUFNQyxRQUFRLElBQUksQ0FBQ2pDLFVBQVUsQ0FBQ2tDLE9BQU8sQ0FBQzNCO1FBQ3RDLElBQUkwQixTQUFTLEdBQUc7WUFDWixJQUFJLENBQUNqQyxVQUFVLENBQUNtQyxNQUFNLENBQUNGLE9BQU87UUFDbEM7SUFDSjtJQUNBLE1BQU1sQixvQkFBb0JELFdBQVcsRUFBRTtRQUNuQyxJQUFJLENBQUNULGlCQUFpQjtRQUN0QixLQUFLLE1BQU1FLFVBQVUsSUFBSSxDQUFDUCxVQUFVLENBQUU7WUFDbEMsSUFBSU8sT0FBTzZCLEtBQUssRUFBRTtnQkFDZDdCLE9BQU9LLElBQUk7Z0JBQ1gsT0FBT0w7WUFDWDtRQUNKO1FBQ0EsTUFBTUcsV0FBVyxJQUFJM0IsNkRBQVFBO1FBQzdCK0IsWUFBWUksdUJBQXVCLENBQUM7WUFDaEMsTUFBTWUsUUFBUSxJQUFJLENBQUNoQyxLQUFLLENBQUNpQyxPQUFPLENBQUN4QjtZQUNqQyxJQUFJdUIsU0FBUyxHQUFHO2dCQUNaLElBQUksQ0FBQ2hDLEtBQUssQ0FBQ2tDLE1BQU0sQ0FBQ0YsT0FBTztZQUM3QjtZQUNBdkIsU0FBU2lCLE1BQU0sQ0FBQzNDLHVFQUFrQkE7UUFDdEM7UUFDQSxJQUFJLENBQUNpQixLQUFLLENBQUNZLElBQUksQ0FBQ0g7UUFDaEIsT0FBT0EsU0FBU3FCLE9BQU87SUFDM0I7QUFDSjtBQUNPLE1BQU1NO0lBQ1QsSUFBSUQsUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDRSxNQUFNO0lBQ3RCO0lBQ0EsSUFBSTdCLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQzhCLGNBQWMsQ0FBQ0MsS0FBSztJQUNwQztJQUNBckQsWUFBWXNELFdBQVcsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVYLFNBQVMsQ0FBRTtRQUNwRCxJQUFJLENBQUNPLGNBQWMsR0FBRyxJQUFJdEQsb0RBQU9BO1FBQ2pDLElBQUksQ0FBQ3lCLFFBQVEsR0FBRyxJQUFJM0IsNkRBQVFBO1FBQzVCLElBQUksQ0FBQ3VELE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ00sUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0gsV0FBVyxHQUFHQTtRQUNuQixJQUFJLENBQUNJLFVBQVUsR0FBR2I7UUFDbEJVLFVBQVVwQixDQUFBQTtZQUNOLE1BQU13QixjQUFjeEI7WUFDcEIsSUFBSSxDQUFDWixRQUFRLENBQUNkLE9BQU8sQ0FBQ2tEO1lBQ3RCLElBQUksQ0FBQ0MsTUFBTTtRQUNmO1FBQ0FKLFFBQVFLLENBQUFBO1lBQ0osSUFBSSxDQUFDdEMsUUFBUSxDQUFDaUIsTUFBTSxDQUFDcUI7WUFDckIsSUFBSSxDQUFDRCxNQUFNO1FBQ2Y7SUFDSjtJQUNBZixZQUFZO1FBQ1IsSUFBSSxDQUFDdEIsUUFBUSxDQUFDaUIsTUFBTSxDQUFDM0MsdUVBQWtCQTtRQUN2QyxJQUFJLENBQUM2RCxVQUFVO0lBQ25CO0lBQ0FqQyxPQUFPO1FBQ0gsSUFBSSxDQUFDMEIsTUFBTSxHQUFHO0lBQ2xCO0lBQ0FTLFNBQVM7UUFDTCxJQUFJLENBQUNILFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNOLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsY0FBYyxDQUFDVSxJQUFJO0lBQzVCO0lBQ0F6RCxNQUFNQyxJQUFJLEVBQUU7UUFDUixJQUFJLElBQUksQ0FBQ21ELFFBQVEsRUFBRTtZQUNmLE1BQU0sSUFBSU0sTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ04sUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ2xDLFFBQVEsR0FBRyxJQUFJM0IsNkRBQVFBO1FBQzVCLElBQUksQ0FBQzBELFdBQVcsQ0FBQ2hEO1FBQ2pCLE9BQU8sSUFBSSxDQUFDaUIsUUFBUSxDQUFDcUIsT0FBTztJQUNoQztBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcGFyc2VyL2FzeW5jLXBhcnNlci5qcz9mZDliIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIzIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IERlZmVycmVkLCBPcGVyYXRpb25DYW5jZWxsZWQgfSBmcm9tICcuLi91dGlscy9wcm9taXNlLXV0aWxzLmpzJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi91dGlscy9ldmVudC5qcyc7XG4vKipcbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIGFzeW5jIHBhcnNlciB3aGljaCBzaW1wbHkgd3JhcHMgdGhlIHN5bmMgcGFyc2VyIGluIGEgcHJvbWlzZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogQSByZWFsIGltcGxlbWVudGF0aW9uIHdvdWxkIGNyZWF0ZSB3b3JrZXIgdGhyZWFkcyBvciB3ZWIgd29ya2VycyB0byBvZmZsb2FkIHRoZSBwYXJzaW5nIHdvcmsuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0QXN5bmNQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuc3luY1BhcnNlciA9IHNlcnZpY2VzLnBhcnNlci5MYW5naXVtUGFyc2VyO1xuICAgIH1cbiAgICBwYXJzZSh0ZXh0LCBfY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnN5bmNQYXJzZXIucGFyc2UodGV4dCkpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBYnN0cmFjdFRocmVhZGVkQXN5bmNQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdGhyZWFkIGNvdW50IGRldGVybWluZXMgaG93IG1hbnkgdGhyZWFkcyBhcmUgdXNlZCB0byBwYXJzZSBmaWxlcyBpbiBwYXJhbGxlbC5cbiAgICAgICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgOC4gRGVjcmVhc2luZyB0aGlzIHZhbHVlIGluY3JlYXNlcyBzdGFydHVwIHBlcmZvcm1hbmNlLCBidXQgZGVjcmVhc2VzIHBhcmFsbGVsIHBhcnNpbmcgcGVyZm9ybWFuY2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRocmVhZENvdW50ID0gODtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0ZXJtaW5hdGlvbiBkZWxheSBkZXRlcm1pbmVzIGhvdyBsb25nIHRoZSBwYXJzZXIgd2FpdHMgZm9yIGEgdGhyZWFkIHRvIGZpbmlzaCBhZnRlciBhIGNhbmNlbGxhdGlvbiByZXF1ZXN0LlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAyMDAobXMpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50ZXJtaW5hdGlvbkRlbGF5ID0gMjAwO1xuICAgICAgICB0aGlzLndvcmtlclBvb2wgPSBbXTtcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLmh5ZHJhdG9yID0gc2VydmljZXMuc2VyaWFsaXplci5IeWRyYXRvcjtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZVdvcmtlcnMoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLndvcmtlclBvb2wubGVuZ3RoIDwgdGhpcy50aHJlYWRDb3VudCkge1xuICAgICAgICAgICAgY29uc3Qgd29ya2VyID0gdGhpcy5jcmVhdGVXb3JrZXIoKTtcbiAgICAgICAgICAgIHdvcmtlci5vblJlYWR5KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmZXJyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlci5sb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHdvcmtlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMud29ya2VyUG9vbC5wdXNoKHdvcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcGFyc2UodGV4dCwgY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uc3Qgd29ya2VyID0gYXdhaXQgdGhpcy5hY3F1aXJlUGFyc2VyV29ya2VyKGNhbmNlbFRva2VuKTtcbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgbGV0IHRpbWVvdXQ7XG4gICAgICAgIC8vIElmIHRoZSBjYW5jZWxsYXRpb24gdG9rZW4gaXMgcmVxdWVzdGVkLCB3ZSB3YWl0IGZvciBhIGNlcnRhaW4gdGltZSBiZWZvcmUgdGVybWluYXRpbmcgdGhlIHdvcmtlci5cbiAgICAgICAgLy8gU2luY2UgdGhlIGNhbmNlbGxhdGlvbiB0b2tlbiBsaXZlcyBsb25nZXIgdGhhbiB0aGUgcGFyc2luZyBwcm9jZXNzLCB3ZSBuZWVkIHRvIGRpc3Bvc2UgdGhlIGV2ZW50IGxpc3RlbmVyLlxuICAgICAgICAvLyBPdGhlcndpc2UsIHdlIG1pZ2h0IGFjY2lkZW50YWxseSB0ZXJtaW5hdGUgdGhlIHdvcmtlciBhZnRlciB0aGUgcGFyc2luZyBwcm9jZXNzIGhhcyBmaW5pc2hlZC5cbiAgICAgICAgY29uc3QgY2FuY2VsbGF0aW9uID0gY2FuY2VsVG9rZW4ub25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKCkgPT4ge1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGVybWluYXRlV29ya2VyKHdvcmtlcik7XG4gICAgICAgICAgICB9LCB0aGlzLnRlcm1pbmF0aW9uRGVsYXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgd29ya2VyLnBhcnNlKHRleHQpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVkID0gdGhpcy5oeWRyYXRvci5oeWRyYXRlKHJlc3VsdCk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGh5ZHJhdGVkKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgIGNhbmNlbGxhdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgdGVybWluYXRlV29ya2VyKHdvcmtlcikge1xuICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy53b3JrZXJQb29sLmluZGV4T2Yod29ya2VyKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMud29ya2VyUG9vbC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGFjcXVpcmVQYXJzZXJXb3JrZXIoY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplV29ya2VycygpO1xuICAgICAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiB0aGlzLndvcmtlclBvb2wpIHtcbiAgICAgICAgICAgIGlmICh3b3JrZXIucmVhZHkpIHtcbiAgICAgICAgICAgICAgICB3b3JrZXIubG9jaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3b3JrZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgY2FuY2VsVG9rZW4ub25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnF1ZXVlLmluZGV4T2YoZGVmZXJyZWQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoT3BlcmF0aW9uQ2FuY2VsbGVkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucXVldWUucHVzaChkZWZlcnJlZCk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQYXJzZXJXb3JrZXIge1xuICAgIGdldCByZWFkeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWR5O1xuICAgIH1cbiAgICBnZXQgb25SZWFkeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub25SZWFkeUVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNlbmRNZXNzYWdlLCBvbk1lc3NhZ2UsIG9uRXJyb3IsIHRlcm1pbmF0ZSkge1xuICAgICAgICB0aGlzLm9uUmVhZHlFbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICB0aGlzLl9yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BhcnNpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xuICAgICAgICB0aGlzLl90ZXJtaW5hdGUgPSB0ZXJtaW5hdGU7XG4gICAgICAgIG9uTWVzc2FnZShyZXN1bHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VSZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkLnJlc29sdmUocGFyc2VSZXN1bHQpO1xuICAgICAgICAgICAgdGhpcy51bmxvY2soKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG9uRXJyb3IoZXJyb3IgPT4ge1xuICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy51bmxvY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRlcm1pbmF0ZSgpIHtcbiAgICAgICAgdGhpcy5kZWZlcnJlZC5yZWplY3QoT3BlcmF0aW9uQ2FuY2VsbGVkKTtcbiAgICAgICAgdGhpcy5fdGVybWluYXRlKCk7XG4gICAgfVxuICAgIGxvY2soKSB7XG4gICAgICAgIHRoaXMuX3JlYWR5ID0gZmFsc2U7XG4gICAgfVxuICAgIHVubG9jaygpIHtcbiAgICAgICAgdGhpcy5fcGFyc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMub25SZWFkeUVtaXR0ZXIuZmlyZSgpO1xuICAgIH1cbiAgICBwYXJzZSh0ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcnNlciB3b3JrZXIgaXMgYnVzeScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BhcnNpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UodGV4dCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmVycmVkLnByb21pc2U7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMtcGFyc2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJEZWZlcnJlZCIsIk9wZXJhdGlvbkNhbmNlbGxlZCIsIkVtaXR0ZXIiLCJEZWZhdWx0QXN5bmNQYXJzZXIiLCJjb25zdHJ1Y3RvciIsInNlcnZpY2VzIiwic3luY1BhcnNlciIsInBhcnNlciIsIkxhbmdpdW1QYXJzZXIiLCJwYXJzZSIsInRleHQiLCJfY2FuY2VsVG9rZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsIkFic3RyYWN0VGhyZWFkZWRBc3luY1BhcnNlciIsInRocmVhZENvdW50IiwidGVybWluYXRpb25EZWxheSIsIndvcmtlclBvb2wiLCJxdWV1ZSIsImh5ZHJhdG9yIiwic2VyaWFsaXplciIsIkh5ZHJhdG9yIiwiaW5pdGlhbGl6ZVdvcmtlcnMiLCJsZW5ndGgiLCJ3b3JrZXIiLCJjcmVhdGVXb3JrZXIiLCJvblJlYWR5IiwiZGVmZXJyZWQiLCJzaGlmdCIsImxvY2siLCJwdXNoIiwiY2FuY2VsVG9rZW4iLCJhY3F1aXJlUGFyc2VyV29ya2VyIiwidGltZW91dCIsImNhbmNlbGxhdGlvbiIsIm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwic2V0VGltZW91dCIsInRlcm1pbmF0ZVdvcmtlciIsInRoZW4iLCJyZXN1bHQiLCJoeWRyYXRlZCIsImh5ZHJhdGUiLCJjYXRjaCIsImVyciIsInJlamVjdCIsImZpbmFsbHkiLCJkaXNwb3NlIiwiY2xlYXJUaW1lb3V0IiwicHJvbWlzZSIsInRlcm1pbmF0ZSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInJlYWR5IiwiUGFyc2VyV29ya2VyIiwiX3JlYWR5Iiwib25SZWFkeUVtaXR0ZXIiLCJldmVudCIsInNlbmRNZXNzYWdlIiwib25NZXNzYWdlIiwib25FcnJvciIsIl9wYXJzaW5nIiwiX3Rlcm1pbmF0ZSIsInBhcnNlUmVzdWx0IiwidW5sb2NrIiwiZXJyb3IiLCJmaXJlIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/async-parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/completion-parser-builder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/langium/lib/parser/completion-parser-builder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCompletionParser: () => (/* binding */ createCompletionParser)\n/* harmony export */ });\n/* harmony import */ var _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langium-parser.js */ \"(ssr)/./node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser-builder-base.js */ \"(ssr)/./node_modules/langium/lib/parser/parser-builder-base.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\nfunction createCompletionParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__.LangiumCompletionParser(services);\n    (0,_parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__.createParser)(grammar, parser, lexer.definition);\n    parser.finalize();\n    return parser;\n} //# sourceMappingURL=completion-parser-builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcGFyc2VyL2NvbXBsZXRpb24tcGFyc2VyLWJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7OEVBSThFLEdBQ2hCO0FBQ047QUFDakQsU0FBU0UsdUJBQXVCQyxRQUFRO0lBQzNDLE1BQU1DLFVBQVVELFNBQVNFLE9BQU87SUFDaEMsTUFBTUMsUUFBUUgsU0FBU0ksTUFBTSxDQUFDQyxLQUFLO0lBQ25DLE1BQU1ELFNBQVMsSUFBSVAsdUVBQXVCQSxDQUFDRztJQUMzQ0YscUVBQVlBLENBQUNHLFNBQVNHLFFBQVFELE1BQU1HLFVBQVU7SUFDOUNGLE9BQU9HLFFBQVE7SUFDZixPQUFPSDtBQUNYLEVBQ0EscURBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcGFyc2VyL2NvbXBsZXRpb24tcGFyc2VyLWJ1aWxkZXIuanM/ZDZkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMiBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBMYW5naXVtQ29tcGxldGlvblBhcnNlciB9IGZyb20gJy4vbGFuZ2l1bS1wYXJzZXIuanMnO1xuaW1wb3J0IHsgY3JlYXRlUGFyc2VyIH0gZnJvbSAnLi9wYXJzZXItYnVpbGRlci1iYXNlLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wbGV0aW9uUGFyc2VyKHNlcnZpY2VzKSB7XG4gICAgY29uc3QgZ3JhbW1hciA9IHNlcnZpY2VzLkdyYW1tYXI7XG4gICAgY29uc3QgbGV4ZXIgPSBzZXJ2aWNlcy5wYXJzZXIuTGV4ZXI7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IExhbmdpdW1Db21wbGV0aW9uUGFyc2VyKHNlcnZpY2VzKTtcbiAgICBjcmVhdGVQYXJzZXIoZ3JhbW1hciwgcGFyc2VyLCBsZXhlci5kZWZpbml0aW9uKTtcbiAgICBwYXJzZXIuZmluYWxpemUoKTtcbiAgICByZXR1cm4gcGFyc2VyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGxldGlvbi1wYXJzZXItYnVpbGRlci5qcy5tYXAiXSwibmFtZXMiOlsiTGFuZ2l1bUNvbXBsZXRpb25QYXJzZXIiLCJjcmVhdGVQYXJzZXIiLCJjcmVhdGVDb21wbGV0aW9uUGFyc2VyIiwic2VydmljZXMiLCJncmFtbWFyIiwiR3JhbW1hciIsImxleGVyIiwicGFyc2VyIiwiTGV4ZXIiLCJkZWZpbml0aW9uIiwiZmluYWxpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/completion-parser-builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/cst-node-builder.js":
/*!*************************************************************!*\
  !*** ./node_modules/langium/lib/parser/cst-node-builder.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractCstNode: () => (/* binding */ AbstractCstNode),\n/* harmony export */   CompositeCstNodeImpl: () => (/* binding */ CompositeCstNodeImpl),\n/* harmony export */   CstNodeBuilder: () => (/* binding */ CstNodeBuilder),\n/* harmony export */   LeafCstNodeImpl: () => (/* binding */ LeafCstNodeImpl),\n/* harmony export */   RootCstNodeImpl: () => (/* binding */ RootCstNodeImpl)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ \"(ssr)/./node_modules/vscode-languageserver-types/lib/esm/main.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\nclass CstNodeBuilder {\n    constructor(){\n        this.nodeStack = [];\n    }\n    get current() {\n        var _a;\n        return (_a = this.nodeStack[this.nodeStack.length - 1]) !== null && _a !== void 0 ? _a : this.rootNode;\n    }\n    buildRootNode(input) {\n        this.rootNode = new RootCstNodeImpl(input);\n        this.rootNode.root = this.rootNode;\n        this.nodeStack = [\n            this.rootNode\n        ];\n        return this.rootNode;\n    }\n    buildCompositeNode(feature) {\n        const compositeNode = new CompositeCstNodeImpl();\n        compositeNode.grammarSource = feature;\n        compositeNode.root = this.rootNode;\n        this.current.content.push(compositeNode);\n        this.nodeStack.push(compositeNode);\n        return compositeNode;\n    }\n    buildLeafNode(token, feature) {\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.tokenToRange)(token), token.tokenType, !feature);\n        leafNode.grammarSource = feature;\n        leafNode.root = this.rootNode;\n        this.current.content.push(leafNode);\n        return leafNode;\n    }\n    removeNode(node) {\n        const parent = node.container;\n        if (parent) {\n            const index = parent.content.indexOf(node);\n            if (index >= 0) {\n                parent.content.splice(index, 1);\n            }\n        }\n    }\n    addHiddenNodes(tokens) {\n        const nodes = [];\n        for (const token of tokens){\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.tokenToRange)(token), token.tokenType, true);\n            leafNode.root = this.rootNode;\n            nodes.push(leafNode);\n        }\n        let current = this.current;\n        let added = false;\n        // If we are within a composite node, we add the hidden nodes to the content\n        if (current.content.length > 0) {\n            current.content.push(...nodes);\n            return;\n        }\n        // Otherwise we are at a newly created node\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\n        while(current.container){\n            const index = current.container.content.indexOf(current);\n            if (index > 0) {\n                // Add the hidden nodes before the current node\n                current.container.content.splice(index, 0, ...nodes);\n                added = true;\n                break;\n            }\n            current = current.container;\n        }\n        // If we arrive at the root node, we add the hidden nodes at the beginning\n        // This is the case if the hidden nodes are the first nodes in the tree\n        if (!added) {\n            this.rootNode.content.unshift(...nodes);\n        }\n    }\n    construct(item) {\n        const current = this.current;\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\n        // Only if the $type is a string, we actually assign the element\n        if (typeof item.$type === \"string\") {\n            this.current.astNode = item;\n        }\n        item.$cstNode = current;\n        const node = this.nodeStack.pop();\n        // Empty composite nodes are not valid\n        // Simply remove the node from the tree\n        if ((node === null || node === void 0 ? void 0 : node.content.length) === 0) {\n            this.removeNode(node);\n        }\n    }\n}\nclass AbstractCstNode {\n    /** @deprecated use `container` instead. */ get parent() {\n        return this.container;\n    }\n    /** @deprecated use `grammarSource` instead. */ get feature() {\n        return this.grammarSource;\n    }\n    get hidden() {\n        return false;\n    }\n    get astNode() {\n        var _a, _b;\n        const node = typeof ((_a = this._astNode) === null || _a === void 0 ? void 0 : _a.$type) === \"string\" ? this._astNode : (_b = this.container) === null || _b === void 0 ? void 0 : _b.astNode;\n        if (!node) {\n            throw new Error(\"This node has no associated AST element\");\n        }\n        return node;\n    }\n    set astNode(value) {\n        this._astNode = value;\n    }\n    /** @deprecated use `astNode` instead. */ get element() {\n        return this.astNode;\n    }\n    get text() {\n        return this.root.fullText.substring(this.offset, this.end);\n    }\n}\nclass LeafCstNodeImpl extends AbstractCstNode {\n    get offset() {\n        return this._offset;\n    }\n    get length() {\n        return this._length;\n    }\n    get end() {\n        return this._offset + this._length;\n    }\n    get hidden() {\n        return this._hidden;\n    }\n    get tokenType() {\n        return this._tokenType;\n    }\n    get range() {\n        return this._range;\n    }\n    constructor(offset, length, range, tokenType, hidden = false){\n        super();\n        this._hidden = hidden;\n        this._offset = offset;\n        this._tokenType = tokenType;\n        this._length = length;\n        this._range = range;\n    }\n}\nclass CompositeCstNodeImpl extends AbstractCstNode {\n    constructor(){\n        super(...arguments);\n        this.content = new CstNodeContainer(this);\n    }\n    /** @deprecated use `content` instead. */ get children() {\n        return this.content;\n    }\n    get offset() {\n        var _a, _b;\n        return (_b = (_a = this.firstNonHiddenNode) === null || _a === void 0 ? void 0 : _a.offset) !== null && _b !== void 0 ? _b : 0;\n    }\n    get length() {\n        return this.end - this.offset;\n    }\n    get end() {\n        var _a, _b;\n        return (_b = (_a = this.lastNonHiddenNode) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : 0;\n    }\n    get range() {\n        const firstNode = this.firstNonHiddenNode;\n        const lastNode = this.lastNonHiddenNode;\n        if (firstNode && lastNode) {\n            if (this._rangeCache === undefined) {\n                const { range: firstRange } = firstNode;\n                const { range: lastRange } = lastNode;\n                this._rangeCache = {\n                    start: firstRange.start,\n                    end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end\n                };\n            }\n            return this._rangeCache;\n        } else {\n            return {\n                start: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0),\n                end: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0)\n            };\n        }\n    }\n    get firstNonHiddenNode() {\n        for (const child of this.content){\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[0];\n    }\n    get lastNonHiddenNode() {\n        for(let i = this.content.length - 1; i >= 0; i--){\n            const child = this.content[i];\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[this.content.length - 1];\n    }\n}\nclass CstNodeContainer extends Array {\n    constructor(parent){\n        super();\n        this.parent = parent;\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\n    }\n    push(...items) {\n        this.addParents(items);\n        return super.push(...items);\n    }\n    unshift(...items) {\n        this.addParents(items);\n        return super.unshift(...items);\n    }\n    splice(start, count, ...items) {\n        this.addParents(items);\n        return super.splice(start, count, ...items);\n    }\n    addParents(items) {\n        for (const item of items){\n            item.container = this.parent;\n        }\n    }\n}\nclass RootCstNodeImpl extends CompositeCstNodeImpl {\n    get text() {\n        return this._text.substring(this.offset, this.end);\n    }\n    get fullText() {\n        return this._text;\n    }\n    constructor(input){\n        super();\n        this._text = \"\";\n        this._text = input !== null && input !== void 0 ? input : \"\";\n    }\n} //# sourceMappingURL=cst-node-builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/cst-node-builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/langium-parser-builder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langium/lib/parser/langium-parser-builder.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLangiumParser: () => (/* binding */ createLangiumParser),\n/* harmony export */   prepareLangiumParser: () => (/* binding */ prepareLangiumParser)\n/* harmony export */ });\n/* harmony import */ var _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langium-parser.js */ \"(ssr)/./node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser-builder-base.js */ \"(ssr)/./node_modules/langium/lib/parser/parser-builder-base.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n/**\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\n * available at `services.Grammar`.\n */ function createLangiumParser(services) {\n    const parser = prepareLangiumParser(services);\n    parser.finalize();\n    return parser;\n}\n/**\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\n * information when the parser is initially validated.\n */ function prepareLangiumParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__.LangiumParser(services);\n    return (0,_parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__.createParser)(grammar, parser, lexer.definition);\n} //# sourceMappingURL=langium-parser-builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcGFyc2VyL2xhbmdpdW0tcGFyc2VyLWJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUMxQjtBQUNJO0FBQ3hEOzs7Q0FHQyxHQUNNLFNBQVNFLG9CQUFvQkMsUUFBUTtJQUN4QyxNQUFNQyxTQUFTQyxxQkFBcUJGO0lBQ3BDQyxPQUFPRSxRQUFRO0lBQ2YsT0FBT0Y7QUFDWDtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNDLHFCQUFxQkYsUUFBUTtJQUN6QyxNQUFNSSxVQUFVSixTQUFTSyxPQUFPO0lBQ2hDLE1BQU1DLFFBQVFOLFNBQVNDLE1BQU0sQ0FBQ00sS0FBSztJQUNuQyxNQUFNTixTQUFTLElBQUlKLDZEQUFhQSxDQUFDRztJQUNqQyxPQUFPRixxRUFBWUEsQ0FBQ00sU0FBU0gsUUFBUUssTUFBTUUsVUFBVTtBQUN6RCxFQUNBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9sYW5naXVtLXBhcnNlci1idWlsZGVyLmpzP2FjZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgTGFuZ2l1bVBhcnNlciB9IGZyb20gJy4vbGFuZ2l1bS1wYXJzZXIuanMnO1xuaW1wb3J0IHsgY3JlYXRlUGFyc2VyIH0gZnJvbSAnLi9wYXJzZXItYnVpbGRlci1iYXNlLmpzJztcbi8qKlxuICogQ3JlYXRlIGFuZCBmaW5hbGl6ZSBhIExhbmdpdW0gcGFyc2VyLiBUaGUgcGFyc2VyIHJ1bGVzIGFyZSBkZXJpdmVkIGZyb20gdGhlIGdyYW1tYXIsIHdoaWNoIGlzXG4gKiBhdmFpbGFibGUgYXQgYHNlcnZpY2VzLkdyYW1tYXJgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGFuZ2l1bVBhcnNlcihzZXJ2aWNlcykge1xuICAgIGNvbnN0IHBhcnNlciA9IHByZXBhcmVMYW5naXVtUGFyc2VyKHNlcnZpY2VzKTtcbiAgICBwYXJzZXIuZmluYWxpemUoKTtcbiAgICByZXR1cm4gcGFyc2VyO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBMYW5naXVtIHBhcnNlciB3aXRob3V0IGZpbmFsaXppbmcgaXQuIFRoaXMgaXMgdXNlZCB0byBleHRyYWN0IG1vcmUgZGV0YWlsZWQgZXJyb3JcbiAqIGluZm9ybWF0aW9uIHdoZW4gdGhlIHBhcnNlciBpcyBpbml0aWFsbHkgdmFsaWRhdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZUxhbmdpdW1QYXJzZXIoc2VydmljZXMpIHtcbiAgICBjb25zdCBncmFtbWFyID0gc2VydmljZXMuR3JhbW1hcjtcbiAgICBjb25zdCBsZXhlciA9IHNlcnZpY2VzLnBhcnNlci5MZXhlcjtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgTGFuZ2l1bVBhcnNlcihzZXJ2aWNlcyk7XG4gICAgcmV0dXJuIGNyZWF0ZVBhcnNlcihncmFtbWFyLCBwYXJzZXIsIGxleGVyLmRlZmluaXRpb24pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFuZ2l1bS1wYXJzZXItYnVpbGRlci5qcy5tYXAiXSwibmFtZXMiOlsiTGFuZ2l1bVBhcnNlciIsImNyZWF0ZVBhcnNlciIsImNyZWF0ZUxhbmdpdW1QYXJzZXIiLCJzZXJ2aWNlcyIsInBhcnNlciIsInByZXBhcmVMYW5naXVtUGFyc2VyIiwiZmluYWxpemUiLCJncmFtbWFyIiwiR3JhbW1hciIsImxleGVyIiwiTGV4ZXIiLCJkZWZpbml0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/langium-parser-builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/langium-parser.js":
/*!***********************************************************!*\
  !*** ./node_modules/langium/lib/parser/langium-parser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractLangiumParser: () => (/* binding */ AbstractLangiumParser),\n/* harmony export */   AbstractParserErrorMessageProvider: () => (/* binding */ AbstractParserErrorMessageProvider),\n/* harmony export */   DatatypeSymbol: () => (/* binding */ DatatypeSymbol),\n/* harmony export */   LangiumCompletionParser: () => (/* binding */ LangiumCompletionParser),\n/* harmony export */   LangiumParser: () => (/* binding */ LangiumParser),\n/* harmony export */   LangiumParserErrorMessageProvider: () => (/* binding */ LangiumParserErrorMessageProvider)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/./node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var chevrotain_allstar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chevrotain-allstar */ \"(ssr)/./node_modules/chevrotain-allstar/lib/index.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/./node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _cst_node_builder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cst-node-builder.js */ \"(ssr)/./node_modules/langium/lib/parser/cst-node-builder.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\n\nconst DatatypeSymbol = Symbol(\"Datatype\");\nfunction isDataTypeNode(node) {\n    return node.$type === DatatypeSymbol;\n}\nconst ruleSuffix = \"​\";\nconst withRuleSuffix = (name)=>name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\nclass AbstractLangiumParser {\n    constructor(services){\n        this._unorderedGroups = new Map();\n        this.allRules = new Map();\n        this.lexer = services.parser.Lexer;\n        const tokens = this.lexer.definition;\n        const production = services.LanguageMetaData.mode === \"production\";\n        this.wrapper = new ChevrotainWrapper(tokens, Object.assign(Object.assign({}, services.parser.ParserConfig), {\n            skipValidations: production,\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\n        }));\n    }\n    alternatives(idx, choices) {\n        this.wrapper.wrapOr(idx, choices);\n    }\n    optional(idx, callback) {\n        this.wrapper.wrapOption(idx, callback);\n    }\n    many(idx, callback) {\n        this.wrapper.wrapMany(idx, callback);\n    }\n    atLeastOne(idx, callback) {\n        this.wrapper.wrapAtLeastOne(idx, callback);\n    }\n    getRule(name) {\n        return this.allRules.get(name);\n    }\n    isRecording() {\n        return this.wrapper.IS_RECORDING;\n    }\n    get unorderedGroups() {\n        return this._unorderedGroups;\n    }\n    getRuleStack() {\n        return this.wrapper.RULE_STACK;\n    }\n    finalize() {\n        this.wrapper.wrapSelfAnalysis();\n    }\n}\nclass LangiumParser extends AbstractLangiumParser {\n    get current() {\n        return this.stack[this.stack.length - 1];\n    }\n    constructor(services){\n        super(services);\n        this.nodeBuilder = new _cst_node_builder_js__WEBPACK_IMPORTED_MODULE_2__.CstNodeBuilder();\n        this.stack = [];\n        this.assignmentMap = new Map();\n        this.linker = services.references.Linker;\n        this.converter = services.parser.ValueConverter;\n        this.astReflection = services.shared.AstReflection;\n    }\n    rule(rule, impl) {\n        const type = this.computeRuleType(rule);\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\n        this.allRules.set(rule.name, ruleMethod);\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    computeRuleType(rule) {\n        if (rule.fragment) {\n            return undefined;\n        } else if ((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__.isDataTypeRule)(rule)) {\n            return DatatypeSymbol;\n        } else {\n            const explicit = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__.getExplicitRuleType)(rule);\n            return explicit !== null && explicit !== void 0 ? explicit : rule.name;\n        }\n    }\n    parse(input, options = {}) {\n        this.nodeBuilder.buildRootNode(input);\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\n        this.wrapper.input = lexerResult.tokens;\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\n        if (!ruleMethod) {\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : \"No main rule available.\");\n        }\n        const result = ruleMethod.call(this.wrapper, {});\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\n        this.unorderedGroups.clear();\n        this.lexerResult = undefined;\n        return {\n            value: result,\n            lexerErrors: lexerResult.errors,\n            lexerReport: lexerResult.report,\n            parserErrors: this.wrapper.errors\n        };\n    }\n    startImplementation($type, implementation) {\n        return (args)=>{\n            // Only create a new AST node in case the calling rule is not a fragment rule\n            const createNode = !this.isRecording() && $type !== undefined;\n            if (createNode) {\n                const node = {\n                    $type\n                };\n                this.stack.push(node);\n                if ($type === DatatypeSymbol) {\n                    node.value = \"\";\n                }\n            }\n            let result;\n            try {\n                result = implementation(args);\n            } catch (err) {\n                result = undefined;\n            }\n            if (result === undefined && createNode) {\n                result = this.construct();\n            }\n            return result;\n        };\n    }\n    extractHiddenTokens(token) {\n        const hiddenTokens = this.lexerResult.hidden;\n        if (!hiddenTokens.length) {\n            return [];\n        }\n        const offset = token.startOffset;\n        for(let i = 0; i < hiddenTokens.length; i++){\n            const token = hiddenTokens[i];\n            if (token.startOffset > offset) {\n                return hiddenTokens.splice(0, i);\n            }\n        }\n        return hiddenTokens.splice(0, hiddenTokens.length);\n    }\n    consume(idx, tokenType, feature) {\n        const token = this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording() && this.isValidToken(token)) {\n            const hiddenTokens = this.extractHiddenTokens(token);\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\n            const { assignment, isCrossRef } = this.getAssignment(feature);\n            const current = this.current;\n            if (assignment) {\n                const convertedValue = (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword)(feature) ? token.image : this.converter.convert(token.image, leafNode);\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\n            } else if (isDataTypeNode(current)) {\n                let text = token.image;\n                if (!(0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword)(feature)) {\n                    text = this.converter.convert(text, leafNode).toString();\n                }\n                current.value += text;\n            }\n        }\n    }\n    /**\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\n     *\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\n     */ isValidToken(token) {\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === \"number\" && !isNaN(token.endOffset);\n    }\n    subrule(idx, rule, fragment, feature, args) {\n        let cstNode;\n        if (!this.isRecording() && !fragment) {\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\n            // This is intended, as fragment rules only enrich the current AST node\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\n        }\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args);\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\n        }\n    }\n    performSubruleAssignment(result, feature, cstNode) {\n        const { assignment, isCrossRef } = this.getAssignment(feature);\n        if (assignment) {\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\n        } else if (!assignment) {\n            // If we call a subrule without an assignment we either:\n            // 1. append the result of the subrule (data type rule)\n            // 2. override the current object with the newly parsed object\n            // If the current element is an AST node and the result of the subrule\n            // is a data type rule, we can safely discard the results.\n            const current = this.current;\n            if (isDataTypeNode(current)) {\n                current.value += result.toString();\n            } else if (typeof result === \"object\" && result) {\n                const object = this.assignWithoutOverride(result, current);\n                const newItem = object;\n                this.stack.pop();\n                this.stack.push(newItem);\n            }\n        }\n    }\n    action($type, action) {\n        if (!this.isRecording()) {\n            let last = this.current;\n            if (action.feature && action.operator) {\n                last = this.construct();\n                this.nodeBuilder.removeNode(last.$cstNode);\n                const node = this.nodeBuilder.buildCompositeNode(action);\n                node.content.push(last.$cstNode);\n                const newItem = {\n                    $type\n                };\n                this.stack.push(newItem);\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\n            } else {\n                last.$type = $type;\n            }\n        }\n    }\n    construct() {\n        if (this.isRecording()) {\n            return undefined;\n        }\n        const obj = this.current;\n        (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.linkContentToContainer)(obj);\n        this.nodeBuilder.construct(obj);\n        this.stack.pop();\n        if (isDataTypeNode(obj)) {\n            return this.converter.convert(obj.value, obj.$cstNode);\n        } else {\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.assignMandatoryProperties)(this.astReflection, obj);\n        }\n        return obj;\n    }\n    getAssignment(feature) {\n        if (!this.assignmentMap.has(feature)) {\n            const assignment = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.getContainerOfType)(feature, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isAssignment);\n            this.assignmentMap.set(feature, {\n                assignment: assignment,\n                isCrossRef: assignment ? (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isCrossReference)(assignment.terminal) : false\n            });\n        }\n        return this.assignmentMap.get(feature);\n    }\n    assign(operator, feature, value, cstNode, isCrossRef) {\n        const obj = this.current;\n        let item;\n        if (isCrossRef && typeof value === \"string\") {\n            item = this.linker.buildReference(obj, feature, cstNode, value);\n        } else {\n            item = value;\n        }\n        switch(operator){\n            case \"=\":\n                {\n                    obj[feature] = item;\n                    break;\n                }\n            case \"?=\":\n                {\n                    obj[feature] = true;\n                    break;\n                }\n            case \"+=\":\n                {\n                    if (!Array.isArray(obj[feature])) {\n                        obj[feature] = [];\n                    }\n                    obj[feature].push(item);\n                }\n        }\n    }\n    assignWithoutOverride(target, source) {\n        for (const [name, existingValue] of Object.entries(source)){\n            const newValue = target[name];\n            if (newValue === undefined) {\n                target[name] = existingValue;\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\n                existingValue.push(...newValue);\n                target[name] = existingValue;\n            }\n        }\n        // The target was parsed from a unassigned subrule\n        // After the subrule construction, it received a cst node\n        // This CST node will later be overriden by the cst node builder\n        // To prevent references to stale AST nodes in the CST,\n        // we need to remove the reference here\n        const targetCstNode = target.$cstNode;\n        if (targetCstNode) {\n            targetCstNode.astNode = undefined;\n            target.$cstNode = undefined;\n        }\n        return target;\n    }\n    get definitionErrors() {\n        return this.wrapper.definitionErrors;\n    }\n}\nclass AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildMismatchTokenMessage(options);\n    }\n    buildNotAllInputParsedMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\n    }\n    buildNoViableAltMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildNoViableAltMessage(options);\n    }\n    buildEarlyExitMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildEarlyExitMessage(options);\n    }\n}\nclass LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage({ expected, actual }) {\n        const expectedMsg = expected.LABEL ? \"`\" + expected.LABEL + \"`\" : expected.name.endsWith(\":KW\") ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'` : `token of type '${expected.name}'`;\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\n    }\n    buildNotAllInputParsedMessage({ firstRedundant }) {\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\n    }\n}\nclass LangiumCompletionParser extends AbstractLangiumParser {\n    constructor(){\n        super(...arguments);\n        this.tokens = [];\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    action() {\n    // NOOP\n    }\n    construct() {\n        // NOOP\n        return undefined;\n    }\n    parse(input) {\n        this.resetState();\n        const tokens = this.lexer.tokenize(input, {\n            mode: \"partial\"\n        });\n        this.tokens = tokens.tokens;\n        this.wrapper.input = [\n            ...this.tokens\n        ];\n        this.mainRule.call(this.wrapper, {});\n        this.unorderedGroups.clear();\n        return {\n            tokens: this.tokens,\n            elementStack: [\n                ...this.lastElementStack\n            ],\n            tokenIndex: this.nextTokenIndex\n        };\n    }\n    rule(rule, impl) {\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\n        this.allRules.set(rule.name, ruleMethod);\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    resetState() {\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    startImplementation(implementation) {\n        return (args)=>{\n            const size = this.keepStackSize();\n            try {\n                implementation(args);\n            } finally{\n                this.resetStackSize(size);\n            }\n        };\n    }\n    removeUnexpectedElements() {\n        this.elementStack.splice(this.stackSize);\n    }\n    keepStackSize() {\n        const size = this.elementStack.length;\n        this.stackSize = size;\n        return size;\n    }\n    resetStackSize(size) {\n        this.removeUnexpectedElements();\n        this.stackSize = size;\n    }\n    consume(idx, tokenType, feature) {\n        this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording()) {\n            this.lastElementStack = [\n                ...this.elementStack,\n                feature\n            ];\n            this.nextTokenIndex = this.currIdx + 1;\n        }\n    }\n    subrule(idx, rule, fragment, feature, args) {\n        this.before(feature);\n        this.wrapper.wrapSubrule(idx, rule, args);\n        this.after(feature);\n    }\n    before(element) {\n        if (!this.isRecording()) {\n            this.elementStack.push(element);\n        }\n    }\n    after(element) {\n        if (!this.isRecording()) {\n            const index = this.elementStack.lastIndexOf(element);\n            if (index >= 0) {\n                this.elementStack.splice(index);\n            }\n        }\n    }\n    get currIdx() {\n        return this.wrapper.currIdx;\n    }\n}\nconst defaultConfig = {\n    recoveryEnabled: true,\n    nodeLocationTracking: \"full\",\n    skipValidations: true,\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\n};\n/**\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\n * This way, we can build the `LangiumParser` as a composition.\n */ class ChevrotainWrapper extends chevrotain__WEBPACK_IMPORTED_MODULE_0__.EmbeddedActionsParser {\n    constructor(tokens, config){\n        const useDefaultLookahead = config && \"maxLookahead\" in config;\n        super(tokens, Object.assign(Object.assign(Object.assign({}, defaultConfig), {\n            lookaheadStrategy: useDefaultLookahead ? new chevrotain__WEBPACK_IMPORTED_MODULE_0__.LLkLookaheadStrategy({\n                maxLookahead: config.maxLookahead\n            }) : new chevrotain_allstar__WEBPACK_IMPORTED_MODULE_1__.LLStarLookaheadStrategy({\n                // If validations are skipped, don't log the lookahead warnings\n                logging: config.skipValidations ? ()=>{} : undefined\n            })\n        }), config));\n    }\n    get IS_RECORDING() {\n        return this.RECORDING_PHASE;\n    }\n    DEFINE_RULE(name, impl) {\n        return this.RULE(name, impl);\n    }\n    wrapSelfAnalysis() {\n        this.performSelfAnalysis();\n    }\n    wrapConsume(idx, tokenType) {\n        return this.consume(idx, tokenType);\n    }\n    wrapSubrule(idx, rule, args) {\n        return this.subrule(idx, rule, {\n            ARGS: [\n                args\n            ]\n        });\n    }\n    wrapOr(idx, choices) {\n        this.or(idx, choices);\n    }\n    wrapOption(idx, callback) {\n        this.option(idx, callback);\n    }\n    wrapMany(idx, callback) {\n        this.many(idx, callback);\n    }\n    wrapAtLeastOne(idx, callback) {\n        this.atLeastOne(idx, callback);\n    }\n} //# sourceMappingURL=langium-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcGFyc2VyL2xhbmdpdW0tcGFyc2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUN1QjtBQUN4QztBQUM2QjtBQUNWO0FBQzhCO0FBQ3ZEO0FBQ2hELE1BQU1hLGlCQUFpQkMsT0FBTyxZQUFZO0FBQ2pELFNBQVNDLGVBQWVDLElBQUk7SUFDeEIsT0FBT0EsS0FBS0MsS0FBSyxLQUFLSjtBQUMxQjtBQUNBLE1BQU1LLGFBQWE7QUFDbkIsTUFBTUMsaUJBQWlCLENBQUNDLE9BQVNBLEtBQUtDLFFBQVEsQ0FBQ0gsY0FBY0UsT0FBT0EsT0FBT0Y7QUFDcEUsTUFBTUk7SUFDVEMsWUFBWUMsUUFBUSxDQUFFO1FBQ2xCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsSUFBSUM7UUFDNUIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSUQ7UUFDcEIsSUFBSSxDQUFDRSxLQUFLLEdBQUdKLFNBQVNLLE1BQU0sQ0FBQ0MsS0FBSztRQUNsQyxNQUFNQyxTQUFTLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxVQUFVO1FBQ3BDLE1BQU1DLGFBQWFULFNBQVNVLGdCQUFnQixDQUFDQyxJQUFJLEtBQUs7UUFDdEQsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSUMsa0JBQWtCTixRQUFRTyxPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdmLFNBQVNLLE1BQU0sQ0FBQ1csWUFBWSxHQUFHO1lBQUVDLGlCQUFpQlI7WUFBWVMsc0JBQXNCbEIsU0FBU0ssTUFBTSxDQUFDYywwQkFBMEI7UUFBQztJQUNoTjtJQUNBQyxhQUFhQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUN2QixJQUFJLENBQUNWLE9BQU8sQ0FBQ1csTUFBTSxDQUFDRixLQUFLQztJQUM3QjtJQUNBRSxTQUFTSCxHQUFHLEVBQUVJLFFBQVEsRUFBRTtRQUNwQixJQUFJLENBQUNiLE9BQU8sQ0FBQ2MsVUFBVSxDQUFDTCxLQUFLSTtJQUNqQztJQUNBRSxLQUFLTixHQUFHLEVBQUVJLFFBQVEsRUFBRTtRQUNoQixJQUFJLENBQUNiLE9BQU8sQ0FBQ2dCLFFBQVEsQ0FBQ1AsS0FBS0k7SUFDL0I7SUFDQUksV0FBV1IsR0FBRyxFQUFFSSxRQUFRLEVBQUU7UUFDdEIsSUFBSSxDQUFDYixPQUFPLENBQUNrQixjQUFjLENBQUNULEtBQUtJO0lBQ3JDO0lBQ0FNLFFBQVFuQyxJQUFJLEVBQUU7UUFDVixPQUFPLElBQUksQ0FBQ08sUUFBUSxDQUFDNkIsR0FBRyxDQUFDcEM7SUFDN0I7SUFDQXFDLGNBQWM7UUFDVixPQUFPLElBQUksQ0FBQ3JCLE9BQU8sQ0FBQ3NCLFlBQVk7SUFDcEM7SUFDQSxJQUFJQyxrQkFBa0I7UUFDbEIsT0FBTyxJQUFJLENBQUNsQyxnQkFBZ0I7SUFDaEM7SUFDQW1DLGVBQWU7UUFDWCxPQUFPLElBQUksQ0FBQ3hCLE9BQU8sQ0FBQ3lCLFVBQVU7SUFDbEM7SUFDQUMsV0FBVztRQUNQLElBQUksQ0FBQzFCLE9BQU8sQ0FBQzJCLGdCQUFnQjtJQUNqQztBQUNKO0FBQ08sTUFBTUMsc0JBQXNCMUM7SUFDL0IsSUFBSTJDLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDQyxNQUFNLEdBQUcsRUFBRTtJQUM1QztJQUNBNUMsWUFBWUMsUUFBUSxDQUFFO1FBQ2xCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUM0QyxXQUFXLEdBQUcsSUFBSXhELGdFQUFjQTtRQUNyQyxJQUFJLENBQUNzRCxLQUFLLEdBQUcsRUFBRTtRQUNmLElBQUksQ0FBQ0csYUFBYSxHQUFHLElBQUkzQztRQUN6QixJQUFJLENBQUM0QyxNQUFNLEdBQUc5QyxTQUFTK0MsVUFBVSxDQUFDQyxNQUFNO1FBQ3hDLElBQUksQ0FBQ0MsU0FBUyxHQUFHakQsU0FBU0ssTUFBTSxDQUFDNkMsY0FBYztRQUMvQyxJQUFJLENBQUNDLGFBQWEsR0FBR25ELFNBQVNvRCxNQUFNLENBQUNDLGFBQWE7SUFDdEQ7SUFDQUMsS0FBS0EsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDYixNQUFNQyxPQUFPLElBQUksQ0FBQ0MsZUFBZSxDQUFDSDtRQUNsQyxNQUFNSSxhQUFhLElBQUksQ0FBQzlDLE9BQU8sQ0FBQytDLFdBQVcsQ0FBQ2hFLGVBQWUyRCxLQUFLMUQsSUFBSSxHQUFHLElBQUksQ0FBQ2dFLG1CQUFtQixDQUFDSixNQUFNRCxNQUFNTSxJQUFJLENBQUMsSUFBSTtRQUNySCxJQUFJLENBQUMxRCxRQUFRLENBQUMyRCxHQUFHLENBQUNSLEtBQUsxRCxJQUFJLEVBQUU4RDtRQUM3QixJQUFJSixLQUFLUyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUNDLFFBQVEsR0FBR047UUFDcEI7UUFDQSxPQUFPQTtJQUNYO0lBQ0FELGdCQUFnQkgsSUFBSSxFQUFFO1FBQ2xCLElBQUlBLEtBQUtXLFFBQVEsRUFBRTtZQUNmLE9BQU9DO1FBQ1gsT0FDSyxJQUFJbEYsdUVBQWNBLENBQUNzRSxPQUFPO1lBQzNCLE9BQU9qRTtRQUNYLE9BQ0s7WUFDRCxNQUFNOEUsV0FBV3BGLDRFQUFtQkEsQ0FBQ3VFO1lBQ3JDLE9BQU9hLGFBQWEsUUFBUUEsYUFBYSxLQUFLLElBQUlBLFdBQVdiLEtBQUsxRCxJQUFJO1FBQzFFO0lBQ0o7SUFDQXdFLE1BQU1DLEtBQUssRUFBRUMsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUN2QixJQUFJLENBQUMxQixXQUFXLENBQUMyQixhQUFhLENBQUNGO1FBQy9CLE1BQU1HLGNBQWMsSUFBSSxDQUFDQSxXQUFXLEdBQUcsSUFBSSxDQUFDcEUsS0FBSyxDQUFDcUUsUUFBUSxDQUFDSjtRQUMzRCxJQUFJLENBQUN6RCxPQUFPLENBQUN5RCxLQUFLLEdBQUdHLFlBQVlqRSxNQUFNO1FBQ3ZDLE1BQU1tRCxhQUFhWSxRQUFRaEIsSUFBSSxHQUFHLElBQUksQ0FBQ25ELFFBQVEsQ0FBQzZCLEdBQUcsQ0FBQ3NDLFFBQVFoQixJQUFJLElBQUksSUFBSSxDQUFDVSxRQUFRO1FBQ2pGLElBQUksQ0FBQ04sWUFBWTtZQUNiLE1BQU0sSUFBSWdCLE1BQU1KLFFBQVFoQixJQUFJLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRWdCLFFBQVFoQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUc7UUFDakY7UUFDQSxNQUFNcUIsU0FBU2pCLFdBQVdrQixJQUFJLENBQUMsSUFBSSxDQUFDaEUsT0FBTyxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDZ0MsV0FBVyxDQUFDaUMsY0FBYyxDQUFDTCxZQUFZTSxNQUFNO1FBQ2xELElBQUksQ0FBQzNDLGVBQWUsQ0FBQzRDLEtBQUs7UUFDMUIsSUFBSSxDQUFDUCxXQUFXLEdBQUdOO1FBQ25CLE9BQU87WUFDSGMsT0FBT0w7WUFDUE0sYUFBYVQsWUFBWVUsTUFBTTtZQUMvQkMsYUFBYVgsWUFBWVksTUFBTTtZQUMvQkMsY0FBYyxJQUFJLENBQUN6RSxPQUFPLENBQUNzRSxNQUFNO1FBQ3JDO0lBQ0o7SUFDQXRCLG9CQUFvQm5FLEtBQUssRUFBRTZGLGNBQWMsRUFBRTtRQUN2QyxPQUFPLENBQUNDO1lBQ0osNkVBQTZFO1lBQzdFLE1BQU1DLGFBQWEsQ0FBQyxJQUFJLENBQUN2RCxXQUFXLE1BQU14QyxVQUFVeUU7WUFDcEQsSUFBSXNCLFlBQVk7Z0JBQ1osTUFBTWhHLE9BQU87b0JBQUVDO2dCQUFNO2dCQUNyQixJQUFJLENBQUNpRCxLQUFLLENBQUMrQyxJQUFJLENBQUNqRztnQkFDaEIsSUFBSUMsVUFBVUosZ0JBQWdCO29CQUMxQkcsS0FBS3dGLEtBQUssR0FBRztnQkFDakI7WUFDSjtZQUNBLElBQUlMO1lBQ0osSUFBSTtnQkFDQUEsU0FBU1csZUFBZUM7WUFDNUIsRUFDQSxPQUFPRyxLQUFLO2dCQUNSZixTQUFTVDtZQUNiO1lBQ0EsSUFBSVMsV0FBV1QsYUFBYXNCLFlBQVk7Z0JBQ3BDYixTQUFTLElBQUksQ0FBQ2dCLFNBQVM7WUFDM0I7WUFDQSxPQUFPaEI7UUFDWDtJQUNKO0lBQ0FpQixvQkFBb0JDLEtBQUssRUFBRTtRQUN2QixNQUFNQyxlQUFlLElBQUksQ0FBQ3RCLFdBQVcsQ0FBQ00sTUFBTTtRQUM1QyxJQUFJLENBQUNnQixhQUFhbkQsTUFBTSxFQUFFO1lBQ3RCLE9BQU8sRUFBRTtRQUNiO1FBQ0EsTUFBTW9ELFNBQVNGLE1BQU1HLFdBQVc7UUFDaEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILGFBQWFuRCxNQUFNLEVBQUVzRCxJQUFLO1lBQzFDLE1BQU1KLFFBQVFDLFlBQVksQ0FBQ0csRUFBRTtZQUM3QixJQUFJSixNQUFNRyxXQUFXLEdBQUdELFFBQVE7Z0JBQzVCLE9BQU9ELGFBQWFJLE1BQU0sQ0FBQyxHQUFHRDtZQUNsQztRQUNKO1FBQ0EsT0FBT0gsYUFBYUksTUFBTSxDQUFDLEdBQUdKLGFBQWFuRCxNQUFNO0lBQ3JEO0lBQ0F3RCxRQUFROUUsR0FBRyxFQUFFK0UsU0FBUyxFQUFFQyxPQUFPLEVBQUU7UUFDN0IsTUFBTVIsUUFBUSxJQUFJLENBQUNqRixPQUFPLENBQUMwRixXQUFXLENBQUNqRixLQUFLK0U7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQ25FLFdBQVcsTUFBTSxJQUFJLENBQUNzRSxZQUFZLENBQUNWLFFBQVE7WUFDakQsTUFBTUMsZUFBZSxJQUFJLENBQUNGLG1CQUFtQixDQUFDQztZQUM5QyxJQUFJLENBQUNqRCxXQUFXLENBQUNpQyxjQUFjLENBQUNpQjtZQUNoQyxNQUFNVSxXQUFXLElBQUksQ0FBQzVELFdBQVcsQ0FBQzZELGFBQWEsQ0FBQ1osT0FBT1E7WUFDdkQsTUFBTSxFQUFFSyxVQUFVLEVBQUVDLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQ0MsYUFBYSxDQUFDUDtZQUN0RCxNQUFNNUQsVUFBVSxJQUFJLENBQUNBLE9BQU87WUFDNUIsSUFBSWlFLFlBQVk7Z0JBQ1osTUFBTUcsaUJBQWlCL0gsc0VBQVNBLENBQUN1SCxXQUFXUixNQUFNaUIsS0FBSyxHQUFHLElBQUksQ0FBQzdELFNBQVMsQ0FBQzhELE9BQU8sQ0FBQ2xCLE1BQU1pQixLQUFLLEVBQUVOO2dCQUM5RixJQUFJLENBQUN6RixNQUFNLENBQUMyRixXQUFXTSxRQUFRLEVBQUVOLFdBQVdMLE9BQU8sRUFBRVEsZ0JBQWdCTCxVQUFVRztZQUNuRixPQUNLLElBQUlwSCxlQUFla0QsVUFBVTtnQkFDOUIsSUFBSXdFLE9BQU9wQixNQUFNaUIsS0FBSztnQkFDdEIsSUFBSSxDQUFDaEksc0VBQVNBLENBQUN1SCxVQUFVO29CQUNyQlksT0FBTyxJQUFJLENBQUNoRSxTQUFTLENBQUM4RCxPQUFPLENBQUNFLE1BQU1ULFVBQVVVLFFBQVE7Z0JBQzFEO2dCQUNBekUsUUFBUXVDLEtBQUssSUFBSWlDO1lBQ3JCO1FBQ0o7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0RWLGFBQWFWLEtBQUssRUFBRTtRQUNoQixPQUFPLENBQUNBLE1BQU1zQixvQkFBb0IsSUFBSSxDQUFDQyxNQUFNdkIsTUFBTUcsV0FBVyxLQUFLLE9BQU9ILE1BQU13QixTQUFTLEtBQUssWUFBWSxDQUFDRCxNQUFNdkIsTUFBTXdCLFNBQVM7SUFDcEk7SUFDQUMsUUFBUWpHLEdBQUcsRUFBRWlDLElBQUksRUFBRVcsUUFBUSxFQUFFb0MsT0FBTyxFQUFFZCxJQUFJLEVBQUU7UUFDeEMsSUFBSWdDO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQ3RGLFdBQVcsTUFBTSxDQUFDZ0MsVUFBVTtZQUNsQyx3RkFBd0Y7WUFDeEYsd0ZBQXdGO1lBQ3hGLG9IQUFvSDtZQUNwSCx1RUFBdUU7WUFDdkVzRCxVQUFVLElBQUksQ0FBQzNFLFdBQVcsQ0FBQzRFLGtCQUFrQixDQUFDbkI7UUFDbEQ7UUFDQSxNQUFNb0IsZ0JBQWdCLElBQUksQ0FBQzdHLE9BQU8sQ0FBQzhHLFdBQVcsQ0FBQ3JHLEtBQUtpQyxNQUFNaUM7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQ3RELFdBQVcsTUFBTXNGLFdBQVdBLFFBQVE1RSxNQUFNLEdBQUcsR0FBRztZQUN0RCxJQUFJLENBQUNnRix3QkFBd0IsQ0FBQ0YsZUFBZXBCLFNBQVNrQjtRQUMxRDtJQUNKO0lBQ0FJLHlCQUF5QmhELE1BQU0sRUFBRTBCLE9BQU8sRUFBRWtCLE9BQU8sRUFBRTtRQUMvQyxNQUFNLEVBQUViLFVBQVUsRUFBRUMsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDQyxhQUFhLENBQUNQO1FBQ3RELElBQUlLLFlBQVk7WUFDWixJQUFJLENBQUMzRixNQUFNLENBQUMyRixXQUFXTSxRQUFRLEVBQUVOLFdBQVdMLE9BQU8sRUFBRTFCLFFBQVE0QyxTQUFTWjtRQUMxRSxPQUNLLElBQUksQ0FBQ0QsWUFBWTtZQUNsQix3REFBd0Q7WUFDeEQsdURBQXVEO1lBQ3ZELDhEQUE4RDtZQUM5RCxzRUFBc0U7WUFDdEUsMERBQTBEO1lBQzFELE1BQU1qRSxVQUFVLElBQUksQ0FBQ0EsT0FBTztZQUM1QixJQUFJbEQsZUFBZWtELFVBQVU7Z0JBQ3pCQSxRQUFRdUMsS0FBSyxJQUFJTCxPQUFPdUMsUUFBUTtZQUNwQyxPQUNLLElBQUksT0FBT3ZDLFdBQVcsWUFBWUEsUUFBUTtnQkFDM0MsTUFBTWlELFNBQVMsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQ2xELFFBQVFsQztnQkFDbEQsTUFBTXFGLFVBQVVGO2dCQUNoQixJQUFJLENBQUNsRixLQUFLLENBQUNxRixHQUFHO2dCQUNkLElBQUksQ0FBQ3JGLEtBQUssQ0FBQytDLElBQUksQ0FBQ3FDO1lBQ3BCO1FBQ0o7SUFDSjtJQUNBRSxPQUFPdkksS0FBSyxFQUFFdUksTUFBTSxFQUFFO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMvRixXQUFXLElBQUk7WUFDckIsSUFBSWdHLE9BQU8sSUFBSSxDQUFDeEYsT0FBTztZQUN2QixJQUFJdUYsT0FBTzNCLE9BQU8sSUFBSTJCLE9BQU9oQixRQUFRLEVBQUU7Z0JBQ25DaUIsT0FBTyxJQUFJLENBQUN0QyxTQUFTO2dCQUNyQixJQUFJLENBQUMvQyxXQUFXLENBQUNzRixVQUFVLENBQUNELEtBQUtFLFFBQVE7Z0JBQ3pDLE1BQU0zSSxPQUFPLElBQUksQ0FBQ29ELFdBQVcsQ0FBQzRFLGtCQUFrQixDQUFDUTtnQkFDakR4SSxLQUFLNEksT0FBTyxDQUFDM0MsSUFBSSxDQUFDd0MsS0FBS0UsUUFBUTtnQkFDL0IsTUFBTUwsVUFBVTtvQkFBRXJJO2dCQUFNO2dCQUN4QixJQUFJLENBQUNpRCxLQUFLLENBQUMrQyxJQUFJLENBQUNxQztnQkFDaEIsSUFBSSxDQUFDL0csTUFBTSxDQUFDaUgsT0FBT2hCLFFBQVEsRUFBRWdCLE9BQU8zQixPQUFPLEVBQUU0QixNQUFNQSxLQUFLRSxRQUFRLEVBQUU7WUFDdEUsT0FDSztnQkFDREYsS0FBS3hJLEtBQUssR0FBR0E7WUFDakI7UUFDSjtJQUNKO0lBQ0FrRyxZQUFZO1FBQ1IsSUFBSSxJQUFJLENBQUMxRCxXQUFXLElBQUk7WUFDcEIsT0FBT2lDO1FBQ1g7UUFDQSxNQUFNbUUsTUFBTSxJQUFJLENBQUM1RixPQUFPO1FBQ3hCdEQsMkVBQXNCQSxDQUFDa0o7UUFDdkIsSUFBSSxDQUFDekYsV0FBVyxDQUFDK0MsU0FBUyxDQUFDMEM7UUFDM0IsSUFBSSxDQUFDM0YsS0FBSyxDQUFDcUYsR0FBRztRQUNkLElBQUl4SSxlQUFlOEksTUFBTTtZQUNyQixPQUFPLElBQUksQ0FBQ3BGLFNBQVMsQ0FBQzhELE9BQU8sQ0FBQ3NCLElBQUlyRCxLQUFLLEVBQUVxRCxJQUFJRixRQUFRO1FBQ3pELE9BQ0s7WUFDRGxKLDhFQUF5QkEsQ0FBQyxJQUFJLENBQUNrRSxhQUFhLEVBQUVrRjtRQUNsRDtRQUNBLE9BQU9BO0lBQ1g7SUFDQXpCLGNBQWNQLE9BQU8sRUFBRTtRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDeEQsYUFBYSxDQUFDeUYsR0FBRyxDQUFDakMsVUFBVTtZQUNsQyxNQUFNSyxhQUFheEgsdUVBQWtCQSxDQUFDbUgsU0FBU3pILHFFQUFZQTtZQUMzRCxJQUFJLENBQUNpRSxhQUFhLENBQUNpQixHQUFHLENBQUN1QyxTQUFTO2dCQUM1QkssWUFBWUE7Z0JBQ1pDLFlBQVlELGFBQWE3SCw2RUFBZ0JBLENBQUM2SCxXQUFXNkIsUUFBUSxJQUFJO1lBQ3JFO1FBQ0o7UUFDQSxPQUFPLElBQUksQ0FBQzFGLGFBQWEsQ0FBQ2IsR0FBRyxDQUFDcUU7SUFDbEM7SUFDQXRGLE9BQU9pRyxRQUFRLEVBQUVYLE9BQU8sRUFBRXJCLEtBQUssRUFBRXVDLE9BQU8sRUFBRVosVUFBVSxFQUFFO1FBQ2xELE1BQU0wQixNQUFNLElBQUksQ0FBQzVGLE9BQU87UUFDeEIsSUFBSStGO1FBQ0osSUFBSTdCLGNBQWMsT0FBTzNCLFVBQVUsVUFBVTtZQUN6Q3dELE9BQU8sSUFBSSxDQUFDMUYsTUFBTSxDQUFDMkYsY0FBYyxDQUFDSixLQUFLaEMsU0FBU2tCLFNBQVN2QztRQUM3RCxPQUNLO1lBQ0R3RCxPQUFPeEQ7UUFDWDtRQUNBLE9BQVFnQztZQUNKLEtBQUs7Z0JBQUs7b0JBQ05xQixHQUFHLENBQUNoQyxRQUFRLEdBQUdtQztvQkFDZjtnQkFDSjtZQUNBLEtBQUs7Z0JBQU07b0JBQ1BILEdBQUcsQ0FBQ2hDLFFBQVEsR0FBRztvQkFDZjtnQkFDSjtZQUNBLEtBQUs7Z0JBQU07b0JBQ1AsSUFBSSxDQUFDcUMsTUFBTUMsT0FBTyxDQUFDTixHQUFHLENBQUNoQyxRQUFRLEdBQUc7d0JBQzlCZ0MsR0FBRyxDQUFDaEMsUUFBUSxHQUFHLEVBQUU7b0JBQ3JCO29CQUNBZ0MsR0FBRyxDQUFDaEMsUUFBUSxDQUFDWixJQUFJLENBQUMrQztnQkFDdEI7UUFDSjtJQUNKO0lBQ0FYLHNCQUFzQmUsTUFBTSxFQUFFQyxNQUFNLEVBQUU7UUFDbEMsS0FBSyxNQUFNLENBQUNqSixNQUFNa0osY0FBYyxJQUFJaEksT0FBT2lJLE9BQU8sQ0FBQ0YsUUFBUztZQUN4RCxNQUFNRyxXQUFXSixNQUFNLENBQUNoSixLQUFLO1lBQzdCLElBQUlvSixhQUFhOUUsV0FBVztnQkFDeEIwRSxNQUFNLENBQUNoSixLQUFLLEdBQUdrSjtZQUNuQixPQUNLLElBQUlKLE1BQU1DLE9BQU8sQ0FBQ0ssYUFBYU4sTUFBTUMsT0FBTyxDQUFDRyxnQkFBZ0I7Z0JBQzlEQSxjQUFjckQsSUFBSSxJQUFJdUQ7Z0JBQ3RCSixNQUFNLENBQUNoSixLQUFLLEdBQUdrSjtZQUNuQjtRQUNKO1FBQ0Esa0RBQWtEO1FBQ2xELHlEQUF5RDtRQUN6RCxnRUFBZ0U7UUFDaEUsdURBQXVEO1FBQ3ZELHVDQUF1QztRQUN2QyxNQUFNRyxnQkFBZ0JMLE9BQU9ULFFBQVE7UUFDckMsSUFBSWMsZUFBZTtZQUNmQSxjQUFjQyxPQUFPLEdBQUdoRjtZQUN4QjBFLE9BQU9ULFFBQVEsR0FBR2pFO1FBQ3RCO1FBQ0EsT0FBTzBFO0lBQ1g7SUFDQSxJQUFJTyxtQkFBbUI7UUFDbkIsT0FBTyxJQUFJLENBQUN2SSxPQUFPLENBQUN1SSxnQkFBZ0I7SUFDeEM7QUFDSjtBQUNPLE1BQU1DO0lBQ1RDLDBCQUEwQi9FLE9BQU8sRUFBRTtRQUMvQixPQUFPOUYsa0VBQTBCQSxDQUFDNksseUJBQXlCLENBQUMvRTtJQUNoRTtJQUNBZ0YsOEJBQThCaEYsT0FBTyxFQUFFO1FBQ25DLE9BQU85RixrRUFBMEJBLENBQUM4Syw2QkFBNkIsQ0FBQ2hGO0lBQ3BFO0lBQ0FpRix3QkFBd0JqRixPQUFPLEVBQUU7UUFDN0IsT0FBTzlGLGtFQUEwQkEsQ0FBQytLLHVCQUF1QixDQUFDakY7SUFDOUQ7SUFDQWtGLHNCQUFzQmxGLE9BQU8sRUFBRTtRQUMzQixPQUFPOUYsa0VBQTBCQSxDQUFDZ0wscUJBQXFCLENBQUNsRjtJQUM1RDtBQUNKO0FBQ08sTUFBTW1GLDBDQUEwQ0w7SUFDbkRDLDBCQUEwQixFQUFFSyxRQUFRLEVBQUVDLE1BQU0sRUFBRSxFQUFFO1FBQzVDLE1BQU1DLGNBQWNGLFNBQVNHLEtBQUssR0FDNUIsTUFBTUgsU0FBU0csS0FBSyxHQUFHLE1BQ3ZCSCxTQUFTOUosSUFBSSxDQUFDQyxRQUFRLENBQUMsU0FDbkIsQ0FBQyxTQUFTLEVBQUU2SixTQUFTOUosSUFBSSxDQUFDa0ssU0FBUyxDQUFDLEdBQUdKLFNBQVM5SixJQUFJLENBQUMrQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FDbkUsQ0FBQyxlQUFlLEVBQUUrRyxTQUFTOUosSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM1QyxPQUFPLENBQUMsVUFBVSxFQUFFZ0ssWUFBWSxhQUFhLEVBQUVELE9BQU83QyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3BFO0lBQ0F3Qyw4QkFBOEIsRUFBRVMsY0FBYyxFQUFFLEVBQUU7UUFDOUMsT0FBTyxDQUFDLGtDQUFrQyxFQUFFQSxlQUFlakQsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUN6RTtBQUNKO0FBQ08sTUFBTWtELGdDQUFnQ2xLO0lBQ3pDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJa0s7UUFDVCxJQUFJLENBQUMxSixNQUFNLEdBQUcsRUFBRTtRQUNoQixJQUFJLENBQUMySixZQUFZLEdBQUcsRUFBRTtRQUN0QixJQUFJLENBQUNDLGdCQUFnQixHQUFHLEVBQUU7UUFDMUIsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7SUFDckI7SUFDQXJDLFNBQVM7SUFDTCxPQUFPO0lBQ1g7SUFDQXJDLFlBQVk7UUFDUixPQUFPO1FBQ1AsT0FBT3pCO0lBQ1g7SUFDQUUsTUFBTUMsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDaUcsVUFBVTtRQUNmLE1BQU0vSixTQUFTLElBQUksQ0FBQ0gsS0FBSyxDQUFDcUUsUUFBUSxDQUFDSixPQUFPO1lBQUUxRCxNQUFNO1FBQVU7UUFDNUQsSUFBSSxDQUFDSixNQUFNLEdBQUdBLE9BQU9BLE1BQU07UUFDM0IsSUFBSSxDQUFDSyxPQUFPLENBQUN5RCxLQUFLLEdBQUc7ZUFBSSxJQUFJLENBQUM5RCxNQUFNO1NBQUM7UUFDckMsSUFBSSxDQUFDeUQsUUFBUSxDQUFDWSxJQUFJLENBQUMsSUFBSSxDQUFDaEUsT0FBTyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDdUIsZUFBZSxDQUFDNEMsS0FBSztRQUMxQixPQUFPO1lBQ0h4RSxRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUNuQjJKLGNBQWM7bUJBQUksSUFBSSxDQUFDQyxnQkFBZ0I7YUFBQztZQUN4Q0ksWUFBWSxJQUFJLENBQUNILGNBQWM7UUFDbkM7SUFDSjtJQUNBOUcsS0FBS0EsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDYixNQUFNRyxhQUFhLElBQUksQ0FBQzlDLE9BQU8sQ0FBQytDLFdBQVcsQ0FBQ2hFLGVBQWUyRCxLQUFLMUQsSUFBSSxHQUFHLElBQUksQ0FBQ2dFLG1CQUFtQixDQUFDTCxNQUFNTSxJQUFJLENBQUMsSUFBSTtRQUMvRyxJQUFJLENBQUMxRCxRQUFRLENBQUMyRCxHQUFHLENBQUNSLEtBQUsxRCxJQUFJLEVBQUU4RDtRQUM3QixJQUFJSixLQUFLUyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUNDLFFBQVEsR0FBR047UUFDcEI7UUFDQSxPQUFPQTtJQUNYO0lBQ0E0RyxhQUFhO1FBQ1QsSUFBSSxDQUFDSixZQUFZLEdBQUcsRUFBRTtRQUN0QixJQUFJLENBQUNDLGdCQUFnQixHQUFHLEVBQUU7UUFDMUIsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7SUFDckI7SUFDQXpHLG9CQUFvQjBCLGNBQWMsRUFBRTtRQUNoQyxPQUFPLENBQUNDO1lBQ0osTUFBTWlGLE9BQU8sSUFBSSxDQUFDQyxhQUFhO1lBQy9CLElBQUk7Z0JBQ0FuRixlQUFlQztZQUNuQixTQUNRO2dCQUNKLElBQUksQ0FBQ21GLGNBQWMsQ0FBQ0Y7WUFDeEI7UUFDSjtJQUNKO0lBQ0FHLDJCQUEyQjtRQUN2QixJQUFJLENBQUNULFlBQVksQ0FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUNtRSxTQUFTO0lBQzNDO0lBQ0FJLGdCQUFnQjtRQUNaLE1BQU1ELE9BQU8sSUFBSSxDQUFDTixZQUFZLENBQUN2SCxNQUFNO1FBQ3JDLElBQUksQ0FBQzBILFNBQVMsR0FBR0c7UUFDakIsT0FBT0E7SUFDWDtJQUNBRSxlQUFlRixJQUFJLEVBQUU7UUFDakIsSUFBSSxDQUFDRyx3QkFBd0I7UUFDN0IsSUFBSSxDQUFDTixTQUFTLEdBQUdHO0lBQ3JCO0lBQ0FyRSxRQUFROUUsR0FBRyxFQUFFK0UsU0FBUyxFQUFFQyxPQUFPLEVBQUU7UUFDN0IsSUFBSSxDQUFDekYsT0FBTyxDQUFDMEYsV0FBVyxDQUFDakYsS0FBSytFO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUNuRSxXQUFXLElBQUk7WUFDckIsSUFBSSxDQUFDa0ksZ0JBQWdCLEdBQUc7bUJBQUksSUFBSSxDQUFDRCxZQUFZO2dCQUFFN0Q7YUFBUTtZQUN2RCxJQUFJLENBQUMrRCxjQUFjLEdBQUcsSUFBSSxDQUFDUSxPQUFPLEdBQUc7UUFDekM7SUFDSjtJQUNBdEQsUUFBUWpHLEdBQUcsRUFBRWlDLElBQUksRUFBRVcsUUFBUSxFQUFFb0MsT0FBTyxFQUFFZCxJQUFJLEVBQUU7UUFDeEMsSUFBSSxDQUFDc0YsTUFBTSxDQUFDeEU7UUFDWixJQUFJLENBQUN6RixPQUFPLENBQUM4RyxXQUFXLENBQUNyRyxLQUFLaUMsTUFBTWlDO1FBQ3BDLElBQUksQ0FBQ3VGLEtBQUssQ0FBQ3pFO0lBQ2Y7SUFDQXdFLE9BQU9FLE9BQU8sRUFBRTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUM5SSxXQUFXLElBQUk7WUFDckIsSUFBSSxDQUFDaUksWUFBWSxDQUFDekUsSUFBSSxDQUFDc0Y7UUFDM0I7SUFDSjtJQUNBRCxNQUFNQyxPQUFPLEVBQUU7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDOUksV0FBVyxJQUFJO1lBQ3JCLE1BQU0rSSxRQUFRLElBQUksQ0FBQ2QsWUFBWSxDQUFDZSxXQUFXLENBQUNGO1lBQzVDLElBQUlDLFNBQVMsR0FBRztnQkFDWixJQUFJLENBQUNkLFlBQVksQ0FBQ2hFLE1BQU0sQ0FBQzhFO1lBQzdCO1FBQ0o7SUFDSjtJQUNBLElBQUlKLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQ2hLLE9BQU8sQ0FBQ2dLLE9BQU87SUFDL0I7QUFDSjtBQUNBLE1BQU1NLGdCQUFnQjtJQUNsQkMsaUJBQWlCO0lBQ2pCQyxzQkFBc0I7SUFDdEJuSyxpQkFBaUI7SUFDakJDLHNCQUFzQixJQUFJdUk7QUFDOUI7QUFDQTs7O0NBR0MsR0FDRCxNQUFNNUksMEJBQTBCcEMsNkRBQXFCQTtJQUNqRHNCLFlBQVlRLE1BQU0sRUFBRThLLE1BQU0sQ0FBRTtRQUN4QixNQUFNQyxzQkFBc0JELFVBQVUsa0JBQWtCQTtRQUN4RCxLQUFLLENBQUM5SyxRQUFRTyxPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR21LLGdCQUFnQjtZQUFFSyxtQkFBbUJELHNCQUN2RixJQUFJNU0sNERBQW9CQSxDQUFDO2dCQUFFOE0sY0FBY0gsT0FBT0csWUFBWTtZQUFDLEtBQzdELElBQUk3TSx1RUFBdUJBLENBQUM7Z0JBQzFCLCtEQUErRDtnQkFDL0Q4TSxTQUFTSixPQUFPcEssZUFBZSxHQUFHLEtBQVEsSUFBSWlEO1lBQ2xEO1FBQUcsSUFBSW1IO0lBQ25CO0lBQ0EsSUFBSW5KLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQ3dKLGVBQWU7SUFDL0I7SUFDQS9ILFlBQVkvRCxJQUFJLEVBQUUyRCxJQUFJLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNvSSxJQUFJLENBQUMvTCxNQUFNMkQ7SUFDM0I7SUFDQWhCLG1CQUFtQjtRQUNmLElBQUksQ0FBQ3FKLG1CQUFtQjtJQUM1QjtJQUNBdEYsWUFBWWpGLEdBQUcsRUFBRStFLFNBQVMsRUFBRTtRQUN4QixPQUFPLElBQUksQ0FBQ0QsT0FBTyxDQUFDOUUsS0FBSytFO0lBQzdCO0lBQ0FzQixZQUFZckcsR0FBRyxFQUFFaUMsSUFBSSxFQUFFaUMsSUFBSSxFQUFFO1FBQ3pCLE9BQU8sSUFBSSxDQUFDK0IsT0FBTyxDQUFDakcsS0FBS2lDLE1BQU07WUFDM0J1SSxNQUFNO2dCQUFDdEc7YUFBSztRQUNoQjtJQUNKO0lBQ0FoRSxPQUFPRixHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUNqQixJQUFJLENBQUN3SyxFQUFFLENBQUN6SyxLQUFLQztJQUNqQjtJQUNBSSxXQUFXTCxHQUFHLEVBQUVJLFFBQVEsRUFBRTtRQUN0QixJQUFJLENBQUNzSyxNQUFNLENBQUMxSyxLQUFLSTtJQUNyQjtJQUNBRyxTQUFTUCxHQUFHLEVBQUVJLFFBQVEsRUFBRTtRQUNwQixJQUFJLENBQUNFLElBQUksQ0FBQ04sS0FBS0k7SUFDbkI7SUFDQUssZUFBZVQsR0FBRyxFQUFFSSxRQUFRLEVBQUU7UUFDMUIsSUFBSSxDQUFDSSxVQUFVLENBQUNSLEtBQUtJO0lBQ3pCO0FBQ0osRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9wYXJzZXIvbGFuZ2l1bS1wYXJzZXIuanM/YjM2YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBkZWZhdWx0UGFyc2VyRXJyb3JQcm92aWRlciwgRW1iZWRkZWRBY3Rpb25zUGFyc2VyLCBMTGtMb29rYWhlYWRTdHJhdGVneSB9IGZyb20gJ2NoZXZyb3RhaW4nO1xuaW1wb3J0IHsgTExTdGFyTG9va2FoZWFkU3RyYXRlZ3kgfSBmcm9tICdjaGV2cm90YWluLWFsbHN0YXInO1xuaW1wb3J0IHsgaXNBc3NpZ25tZW50LCBpc0Nyb3NzUmVmZXJlbmNlLCBpc0tleXdvcmQgfSBmcm9tICcuLi9sYW5ndWFnZXMvZ2VuZXJhdGVkL2FzdC5qcyc7XG5pbXBvcnQgeyBnZXRFeHBsaWNpdFJ1bGVUeXBlLCBpc0RhdGFUeXBlUnVsZSB9IGZyb20gJy4uL3V0aWxzL2dyYW1tYXItdXRpbHMuanMnO1xuaW1wb3J0IHsgYXNzaWduTWFuZGF0b3J5UHJvcGVydGllcywgZ2V0Q29udGFpbmVyT2ZUeXBlLCBsaW5rQ29udGVudFRvQ29udGFpbmVyIH0gZnJvbSAnLi4vdXRpbHMvYXN0LXV0aWxzLmpzJztcbmltcG9ydCB7IENzdE5vZGVCdWlsZGVyIH0gZnJvbSAnLi9jc3Qtbm9kZS1idWlsZGVyLmpzJztcbmV4cG9ydCBjb25zdCBEYXRhdHlwZVN5bWJvbCA9IFN5bWJvbCgnRGF0YXR5cGUnKTtcbmZ1bmN0aW9uIGlzRGF0YVR5cGVOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS4kdHlwZSA9PT0gRGF0YXR5cGVTeW1ib2w7XG59XG5jb25zdCBydWxlU3VmZml4ID0gJ1xcdTIwMEInO1xuY29uc3Qgd2l0aFJ1bGVTdWZmaXggPSAobmFtZSkgPT4gbmFtZS5lbmRzV2l0aChydWxlU3VmZml4KSA/IG5hbWUgOiBuYW1lICsgcnVsZVN1ZmZpeDtcbmV4cG9ydCBjbGFzcyBBYnN0cmFjdExhbmdpdW1QYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuX3Vub3JkZXJlZEdyb3VwcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5hbGxSdWxlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5sZXhlciA9IHNlcnZpY2VzLnBhcnNlci5MZXhlcjtcbiAgICAgICAgY29uc3QgdG9rZW5zID0gdGhpcy5sZXhlci5kZWZpbml0aW9uO1xuICAgICAgICBjb25zdCBwcm9kdWN0aW9uID0gc2VydmljZXMuTGFuZ3VhZ2VNZXRhRGF0YS5tb2RlID09PSAncHJvZHVjdGlvbic7XG4gICAgICAgIHRoaXMud3JhcHBlciA9IG5ldyBDaGV2cm90YWluV3JhcHBlcih0b2tlbnMsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc2VydmljZXMucGFyc2VyLlBhcnNlckNvbmZpZyksIHsgc2tpcFZhbGlkYXRpb25zOiBwcm9kdWN0aW9uLCBlcnJvck1lc3NhZ2VQcm92aWRlcjogc2VydmljZXMucGFyc2VyLlBhcnNlckVycm9yTWVzc2FnZVByb3ZpZGVyIH0pKTtcbiAgICB9XG4gICAgYWx0ZXJuYXRpdmVzKGlkeCwgY2hvaWNlcykge1xuICAgICAgICB0aGlzLndyYXBwZXIud3JhcE9yKGlkeCwgY2hvaWNlcyk7XG4gICAgfVxuICAgIG9wdGlvbmFsKGlkeCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy53cmFwcGVyLndyYXBPcHRpb24oaWR4LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIG1hbnkoaWR4LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLndyYXBwZXIud3JhcE1hbnkoaWR4LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGF0TGVhc3RPbmUoaWR4LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLndyYXBwZXIud3JhcEF0TGVhc3RPbmUoaWR4LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGdldFJ1bGUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGxSdWxlcy5nZXQobmFtZSk7XG4gICAgfVxuICAgIGlzUmVjb3JkaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLklTX1JFQ09SRElORztcbiAgICB9XG4gICAgZ2V0IHVub3JkZXJlZEdyb3VwcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Vub3JkZXJlZEdyb3VwcztcbiAgICB9XG4gICAgZ2V0UnVsZVN0YWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLlJVTEVfU1RBQ0s7XG4gICAgfVxuICAgIGZpbmFsaXplKCkge1xuICAgICAgICB0aGlzLndyYXBwZXIud3JhcFNlbGZBbmFseXNpcygpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBMYW5naXVtUGFyc2VyIGV4dGVuZHMgQWJzdHJhY3RMYW5naXVtUGFyc2VyIHtcbiAgICBnZXQgY3VycmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgc3VwZXIoc2VydmljZXMpO1xuICAgICAgICB0aGlzLm5vZGVCdWlsZGVyID0gbmV3IENzdE5vZGVCdWlsZGVyKCk7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5hc3NpZ25tZW50TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmxpbmtlciA9IHNlcnZpY2VzLnJlZmVyZW5jZXMuTGlua2VyO1xuICAgICAgICB0aGlzLmNvbnZlcnRlciA9IHNlcnZpY2VzLnBhcnNlci5WYWx1ZUNvbnZlcnRlcjtcbiAgICAgICAgdGhpcy5hc3RSZWZsZWN0aW9uID0gc2VydmljZXMuc2hhcmVkLkFzdFJlZmxlY3Rpb247XG4gICAgfVxuICAgIHJ1bGUocnVsZSwgaW1wbCkge1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5jb21wdXRlUnVsZVR5cGUocnVsZSk7XG4gICAgICAgIGNvbnN0IHJ1bGVNZXRob2QgPSB0aGlzLndyYXBwZXIuREVGSU5FX1JVTEUod2l0aFJ1bGVTdWZmaXgocnVsZS5uYW1lKSwgdGhpcy5zdGFydEltcGxlbWVudGF0aW9uKHR5cGUsIGltcGwpLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmFsbFJ1bGVzLnNldChydWxlLm5hbWUsIHJ1bGVNZXRob2QpO1xuICAgICAgICBpZiAocnVsZS5lbnRyeSkge1xuICAgICAgICAgICAgdGhpcy5tYWluUnVsZSA9IHJ1bGVNZXRob2Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bGVNZXRob2Q7XG4gICAgfVxuICAgIGNvbXB1dGVSdWxlVHlwZShydWxlKSB7XG4gICAgICAgIGlmIChydWxlLmZyYWdtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRGF0YVR5cGVSdWxlKHJ1bGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0YXR5cGVTeW1ib2w7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBleHBsaWNpdCA9IGdldEV4cGxpY2l0UnVsZVR5cGUocnVsZSk7XG4gICAgICAgICAgICByZXR1cm4gZXhwbGljaXQgIT09IG51bGwgJiYgZXhwbGljaXQgIT09IHZvaWQgMCA/IGV4cGxpY2l0IDogcnVsZS5uYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhcnNlKGlucHV0LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5ub2RlQnVpbGRlci5idWlsZFJvb3ROb2RlKGlucHV0KTtcbiAgICAgICAgY29uc3QgbGV4ZXJSZXN1bHQgPSB0aGlzLmxleGVyUmVzdWx0ID0gdGhpcy5sZXhlci50b2tlbml6ZShpbnB1dCk7XG4gICAgICAgIHRoaXMud3JhcHBlci5pbnB1dCA9IGxleGVyUmVzdWx0LnRva2VucztcbiAgICAgICAgY29uc3QgcnVsZU1ldGhvZCA9IG9wdGlvbnMucnVsZSA/IHRoaXMuYWxsUnVsZXMuZ2V0KG9wdGlvbnMucnVsZSkgOiB0aGlzLm1haW5SdWxlO1xuICAgICAgICBpZiAoIXJ1bGVNZXRob2QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvcHRpb25zLnJ1bGUgPyBgTm8gcnVsZSBmb3VuZCB3aXRoIG5hbWUgJyR7b3B0aW9ucy5ydWxlfSdgIDogJ05vIG1haW4gcnVsZSBhdmFpbGFibGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcnVsZU1ldGhvZC5jYWxsKHRoaXMud3JhcHBlciwge30pO1xuICAgICAgICB0aGlzLm5vZGVCdWlsZGVyLmFkZEhpZGRlbk5vZGVzKGxleGVyUmVzdWx0LmhpZGRlbik7XG4gICAgICAgIHRoaXMudW5vcmRlcmVkR3JvdXBzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMubGV4ZXJSZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVzdWx0LFxuICAgICAgICAgICAgbGV4ZXJFcnJvcnM6IGxleGVyUmVzdWx0LmVycm9ycyxcbiAgICAgICAgICAgIGxleGVyUmVwb3J0OiBsZXhlclJlc3VsdC5yZXBvcnQsXG4gICAgICAgICAgICBwYXJzZXJFcnJvcnM6IHRoaXMud3JhcHBlci5lcnJvcnNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhcnRJbXBsZW1lbnRhdGlvbigkdHlwZSwgaW1wbGVtZW50YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIChhcmdzKSA9PiB7XG4gICAgICAgICAgICAvLyBPbmx5IGNyZWF0ZSBhIG5ldyBBU1Qgbm9kZSBpbiBjYXNlIHRoZSBjYWxsaW5nIHJ1bGUgaXMgbm90IGEgZnJhZ21lbnQgcnVsZVxuICAgICAgICAgICAgY29uc3QgY3JlYXRlTm9kZSA9ICF0aGlzLmlzUmVjb3JkaW5nKCkgJiYgJHR5cGUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChjcmVhdGVOb2RlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHsgJHR5cGUgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKCR0eXBlID09PSBEYXRhdHlwZVN5bWJvbCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaW1wbGVtZW50YXRpb24oYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkICYmIGNyZWF0ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmNvbnN0cnVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZXh0cmFjdEhpZGRlblRva2Vucyh0b2tlbikge1xuICAgICAgICBjb25zdCBoaWRkZW5Ub2tlbnMgPSB0aGlzLmxleGVyUmVzdWx0LmhpZGRlbjtcbiAgICAgICAgaWYgKCFoaWRkZW5Ub2tlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdG9rZW4uc3RhcnRPZmZzZXQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGlkZGVuVG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGhpZGRlblRva2Vuc1tpXTtcbiAgICAgICAgICAgIGlmICh0b2tlbi5zdGFydE9mZnNldCA+IG9mZnNldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoaWRkZW5Ub2tlbnMuc3BsaWNlKDAsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWRkZW5Ub2tlbnMuc3BsaWNlKDAsIGhpZGRlblRva2Vucy5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdW1lKGlkeCwgdG9rZW5UeXBlLCBmZWF0dXJlKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy53cmFwcGVyLndyYXBDb25zdW1lKGlkeCwgdG9rZW5UeXBlKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVjb3JkaW5nKCkgJiYgdGhpcy5pc1ZhbGlkVG9rZW4odG9rZW4pKSB7XG4gICAgICAgICAgICBjb25zdCBoaWRkZW5Ub2tlbnMgPSB0aGlzLmV4dHJhY3RIaWRkZW5Ub2tlbnModG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5ub2RlQnVpbGRlci5hZGRIaWRkZW5Ob2RlcyhoaWRkZW5Ub2tlbnMpO1xuICAgICAgICAgICAgY29uc3QgbGVhZk5vZGUgPSB0aGlzLm5vZGVCdWlsZGVyLmJ1aWxkTGVhZk5vZGUodG9rZW4sIGZlYXR1cmUpO1xuICAgICAgICAgICAgY29uc3QgeyBhc3NpZ25tZW50LCBpc0Nyb3NzUmVmIH0gPSB0aGlzLmdldEFzc2lnbm1lbnQoZmVhdHVyZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgaWYgKGFzc2lnbm1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb252ZXJ0ZWRWYWx1ZSA9IGlzS2V5d29yZChmZWF0dXJlKSA/IHRva2VuLmltYWdlIDogdGhpcy5jb252ZXJ0ZXIuY29udmVydCh0b2tlbi5pbWFnZSwgbGVhZk5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzaWduKGFzc2lnbm1lbnQub3BlcmF0b3IsIGFzc2lnbm1lbnQuZmVhdHVyZSwgY29udmVydGVkVmFsdWUsIGxlYWZOb2RlLCBpc0Nyb3NzUmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRGF0YVR5cGVOb2RlKGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHQgPSB0b2tlbi5pbWFnZTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzS2V5d29yZChmZWF0dXJlKSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGhpcy5jb252ZXJ0ZXIuY29udmVydCh0ZXh0LCBsZWFmTm9kZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudC52YWx1ZSArPSB0ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vc3QgY29uc3VtZWQgcGFyc2VyIHRva2VucyBhcmUgdmFsaWQuIEhvd2V2ZXIgdGhlcmUgYXJlIHR3byBjYXNlcyBpbiB3aGljaCB0aGV5IGFyZSBub3QgdmFsaWQ6XG4gICAgICpcbiAgICAgKiAxLiBUaGV5IHdlcmUgaW5zZXJ0ZWQgZHVyaW5nIGVycm9yIHJlY292ZXJ5IGJ5IHRoZSBwYXJzZXIuIFRoZXNlIHRva2VucyBkb24ndCByZWFsbHkgZXhpc3QgYW5kIHNob3VsZCBub3QgYmUgZnVydGhlciBwcm9jZXNzZWRcbiAgICAgKiAyLiBUaGV5IGNvbnRhaW4gaW52YWxpZCB0b2tlbiByYW5nZXMuIFRoaXMgbWlnaHQgaW5jbHVkZSB0aGUgc3BlY2lhbCBFT0YgdG9rZW4sIG9yIG90aGVyIHRva2VucyBwcm9kdWNlZCBieSBpbnZhbGlkIHRva2VuIGJ1aWxkZXJzLlxuICAgICAqL1xuICAgIGlzVmFsaWRUb2tlbih0b2tlbikge1xuICAgICAgICByZXR1cm4gIXRva2VuLmlzSW5zZXJ0ZWRJblJlY292ZXJ5ICYmICFpc05hTih0b2tlbi5zdGFydE9mZnNldCkgJiYgdHlwZW9mIHRva2VuLmVuZE9mZnNldCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHRva2VuLmVuZE9mZnNldCk7XG4gICAgfVxuICAgIHN1YnJ1bGUoaWR4LCBydWxlLCBmcmFnbWVudCwgZmVhdHVyZSwgYXJncykge1xuICAgICAgICBsZXQgY3N0Tm9kZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVjb3JkaW5nKCkgJiYgIWZyYWdtZW50KSB7XG4gICAgICAgICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gY3JlYXRlIGEgbmV3IENTVCBub2RlIGlmIHRoZSBzdWJydWxlIGFjdHVhbGx5IGNyZWF0ZXMgYSBuZXcgQVNUIG5vZGUuXG4gICAgICAgICAgICAvLyBJbiBvdGhlciBjYXNlcyBsaWtlIGNhbGxzIG9mIGZyYWdtZW50IHJ1bGVzIHRoZSBjdXJyZW50IENTVC9BU1QgaXMgcG9wdWxhdGVkIGZ1cnRoZXIuXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgc2tpcHBpbmcgdGhpcyBpbml0aWFsaXphdGlvbiBhbmQgbGVhdmluZyBjc3ROb2RlIHVuYXNzaWduZWQgYWxzbyBza2lwcyB0aGUgc3VicnVsZSBhc3NpZ25tZW50IGxhdGVyIG9uLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbmRlZCwgYXMgZnJhZ21lbnQgcnVsZXMgb25seSBlbnJpY2ggdGhlIGN1cnJlbnQgQVNUIG5vZGVcbiAgICAgICAgICAgIGNzdE5vZGUgPSB0aGlzLm5vZGVCdWlsZGVyLmJ1aWxkQ29tcG9zaXRlTm9kZShmZWF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWJydWxlUmVzdWx0ID0gdGhpcy53cmFwcGVyLndyYXBTdWJydWxlKGlkeCwgcnVsZSwgYXJncyk7XG4gICAgICAgIGlmICghdGhpcy5pc1JlY29yZGluZygpICYmIGNzdE5vZGUgJiYgY3N0Tm9kZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnBlcmZvcm1TdWJydWxlQXNzaWdubWVudChzdWJydWxlUmVzdWx0LCBmZWF0dXJlLCBjc3ROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwZXJmb3JtU3VicnVsZUFzc2lnbm1lbnQocmVzdWx0LCBmZWF0dXJlLCBjc3ROb2RlKSB7XG4gICAgICAgIGNvbnN0IHsgYXNzaWdubWVudCwgaXNDcm9zc1JlZiB9ID0gdGhpcy5nZXRBc3NpZ25tZW50KGZlYXR1cmUpO1xuICAgICAgICBpZiAoYXNzaWdubWVudCkge1xuICAgICAgICAgICAgdGhpcy5hc3NpZ24oYXNzaWdubWVudC5vcGVyYXRvciwgYXNzaWdubWVudC5mZWF0dXJlLCByZXN1bHQsIGNzdE5vZGUsIGlzQ3Jvc3NSZWYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFhc3NpZ25tZW50KSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBjYWxsIGEgc3VicnVsZSB3aXRob3V0IGFuIGFzc2lnbm1lbnQgd2UgZWl0aGVyOlxuICAgICAgICAgICAgLy8gMS4gYXBwZW5kIHRoZSByZXN1bHQgb2YgdGhlIHN1YnJ1bGUgKGRhdGEgdHlwZSBydWxlKVxuICAgICAgICAgICAgLy8gMi4gb3ZlcnJpZGUgdGhlIGN1cnJlbnQgb2JqZWN0IHdpdGggdGhlIG5ld2x5IHBhcnNlZCBvYmplY3RcbiAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50IGVsZW1lbnQgaXMgYW4gQVNUIG5vZGUgYW5kIHRoZSByZXN1bHQgb2YgdGhlIHN1YnJ1bGVcbiAgICAgICAgICAgIC8vIGlzIGEgZGF0YSB0eXBlIHJ1bGUsIHdlIGNhbiBzYWZlbHkgZGlzY2FyZCB0aGUgcmVzdWx0cy5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICBpZiAoaXNEYXRhVHlwZU5vZGUoY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50LnZhbHVlICs9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5hc3NpZ25XaXRob3V0T3ZlcnJpZGUocmVzdWx0LCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdJdGVtID0gb2JqZWN0O1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKG5ld0l0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFjdGlvbigkdHlwZSwgYWN0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1JlY29yZGluZygpKSB7XG4gICAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgIGlmIChhY3Rpb24uZmVhdHVyZSAmJiBhY3Rpb24ub3BlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBsYXN0ID0gdGhpcy5jb25zdHJ1Y3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVCdWlsZGVyLnJlbW92ZU5vZGUobGFzdC4kY3N0Tm9kZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZUJ1aWxkZXIuYnVpbGRDb21wb3NpdGVOb2RlKGFjdGlvbik7XG4gICAgICAgICAgICAgICAgbm9kZS5jb250ZW50LnB1c2gobGFzdC4kY3N0Tm9kZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SXRlbSA9IHsgJHR5cGUgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2gobmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3NpZ24oYWN0aW9uLm9wZXJhdG9yLCBhY3Rpb24uZmVhdHVyZSwgbGFzdCwgbGFzdC4kY3N0Tm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFzdC4kdHlwZSA9ICR0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZWNvcmRpbmcoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvYmogPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGxpbmtDb250ZW50VG9Db250YWluZXIob2JqKTtcbiAgICAgICAgdGhpcy5ub2RlQnVpbGRlci5jb25zdHJ1Y3Qob2JqKTtcbiAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKGlzRGF0YVR5cGVOb2RlKG9iaikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRlci5jb252ZXJ0KG9iai52YWx1ZSwgb2JqLiRjc3ROb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFzc2lnbk1hbmRhdG9yeVByb3BlcnRpZXModGhpcy5hc3RSZWZsZWN0aW9uLCBvYmopO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGdldEFzc2lnbm1lbnQoZmVhdHVyZSkge1xuICAgICAgICBpZiAoIXRoaXMuYXNzaWdubWVudE1hcC5oYXMoZmVhdHVyZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFzc2lnbm1lbnQgPSBnZXRDb250YWluZXJPZlR5cGUoZmVhdHVyZSwgaXNBc3NpZ25tZW50KTtcbiAgICAgICAgICAgIHRoaXMuYXNzaWdubWVudE1hcC5zZXQoZmVhdHVyZSwge1xuICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQ6IGFzc2lnbm1lbnQsXG4gICAgICAgICAgICAgICAgaXNDcm9zc1JlZjogYXNzaWdubWVudCA/IGlzQ3Jvc3NSZWZlcmVuY2UoYXNzaWdubWVudC50ZXJtaW5hbCkgOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXNzaWdubWVudE1hcC5nZXQoZmVhdHVyZSk7XG4gICAgfVxuICAgIGFzc2lnbihvcGVyYXRvciwgZmVhdHVyZSwgdmFsdWUsIGNzdE5vZGUsIGlzQ3Jvc3NSZWYpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5jdXJyZW50O1xuICAgICAgICBsZXQgaXRlbTtcbiAgICAgICAgaWYgKGlzQ3Jvc3NSZWYgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaXRlbSA9IHRoaXMubGlua2VyLmJ1aWxkUmVmZXJlbmNlKG9iaiwgZmVhdHVyZSwgY3N0Tm9kZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlbSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgJz0nOiB7XG4gICAgICAgICAgICAgICAgb2JqW2ZlYXR1cmVdID0gaXRlbTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJz89Jzoge1xuICAgICAgICAgICAgICAgIG9ialtmZWF0dXJlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICcrPSc6IHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqW2ZlYXR1cmVdKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmpbZmVhdHVyZV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqW2ZlYXR1cmVdLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXNzaWduV2l0aG91dE92ZXJyaWRlKHRhcmdldCwgc291cmNlKSB7XG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIGV4aXN0aW5nVmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGFyZ2V0W25hbWVdO1xuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBleGlzdGluZ1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkgJiYgQXJyYXkuaXNBcnJheShleGlzdGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nVmFsdWUucHVzaCguLi5uZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gZXhpc3RpbmdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgdGFyZ2V0IHdhcyBwYXJzZWQgZnJvbSBhIHVuYXNzaWduZWQgc3VicnVsZVxuICAgICAgICAvLyBBZnRlciB0aGUgc3VicnVsZSBjb25zdHJ1Y3Rpb24sIGl0IHJlY2VpdmVkIGEgY3N0IG5vZGVcbiAgICAgICAgLy8gVGhpcyBDU1Qgbm9kZSB3aWxsIGxhdGVyIGJlIG92ZXJyaWRlbiBieSB0aGUgY3N0IG5vZGUgYnVpbGRlclxuICAgICAgICAvLyBUbyBwcmV2ZW50IHJlZmVyZW5jZXMgdG8gc3RhbGUgQVNUIG5vZGVzIGluIHRoZSBDU1QsXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSByZWZlcmVuY2UgaGVyZVxuICAgICAgICBjb25zdCB0YXJnZXRDc3ROb2RlID0gdGFyZ2V0LiRjc3ROb2RlO1xuICAgICAgICBpZiAodGFyZ2V0Q3N0Tm9kZSkge1xuICAgICAgICAgICAgdGFyZ2V0Q3N0Tm9kZS5hc3ROb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGFyZ2V0LiRjc3ROb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIGdldCBkZWZpbml0aW9uRXJyb3JzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmRlZmluaXRpb25FcnJvcnM7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFic3RyYWN0UGFyc2VyRXJyb3JNZXNzYWdlUHJvdmlkZXIge1xuICAgIGJ1aWxkTWlzbWF0Y2hUb2tlbk1lc3NhZ2Uob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFBhcnNlckVycm9yUHJvdmlkZXIuYnVpbGRNaXNtYXRjaFRva2VuTWVzc2FnZShvcHRpb25zKTtcbiAgICB9XG4gICAgYnVpbGROb3RBbGxJbnB1dFBhcnNlZE1lc3NhZ2Uob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFBhcnNlckVycm9yUHJvdmlkZXIuYnVpbGROb3RBbGxJbnB1dFBhcnNlZE1lc3NhZ2Uob3B0aW9ucyk7XG4gICAgfVxuICAgIGJ1aWxkTm9WaWFibGVBbHRNZXNzYWdlKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRQYXJzZXJFcnJvclByb3ZpZGVyLmJ1aWxkTm9WaWFibGVBbHRNZXNzYWdlKG9wdGlvbnMpO1xuICAgIH1cbiAgICBidWlsZEVhcmx5RXhpdE1lc3NhZ2Uob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFBhcnNlckVycm9yUHJvdmlkZXIuYnVpbGRFYXJseUV4aXRNZXNzYWdlKG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBMYW5naXVtUGFyc2VyRXJyb3JNZXNzYWdlUHJvdmlkZXIgZXh0ZW5kcyBBYnN0cmFjdFBhcnNlckVycm9yTWVzc2FnZVByb3ZpZGVyIHtcbiAgICBidWlsZE1pc21hdGNoVG9rZW5NZXNzYWdlKHsgZXhwZWN0ZWQsIGFjdHVhbCB9KSB7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkTXNnID0gZXhwZWN0ZWQuTEFCRUxcbiAgICAgICAgICAgID8gJ2AnICsgZXhwZWN0ZWQuTEFCRUwgKyAnYCdcbiAgICAgICAgICAgIDogZXhwZWN0ZWQubmFtZS5lbmRzV2l0aCgnOktXJylcbiAgICAgICAgICAgICAgICA/IGBrZXl3b3JkICcke2V4cGVjdGVkLm5hbWUuc3Vic3RyaW5nKDAsIGV4cGVjdGVkLm5hbWUubGVuZ3RoIC0gMyl9J2BcbiAgICAgICAgICAgICAgICA6IGB0b2tlbiBvZiB0eXBlICcke2V4cGVjdGVkLm5hbWV9J2A7XG4gICAgICAgIHJldHVybiBgRXhwZWN0aW5nICR7ZXhwZWN0ZWRNc2d9IGJ1dCBmb3VuZCBcXGAke2FjdHVhbC5pbWFnZX1cXGAuYDtcbiAgICB9XG4gICAgYnVpbGROb3RBbGxJbnB1dFBhcnNlZE1lc3NhZ2UoeyBmaXJzdFJlZHVuZGFudCB9KSB7XG4gICAgICAgIHJldHVybiBgRXhwZWN0aW5nIGVuZCBvZiBmaWxlIGJ1dCBmb3VuZCBcXGAke2ZpcnN0UmVkdW5kYW50LmltYWdlfVxcYC5gO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBMYW5naXVtQ29tcGxldGlvblBhcnNlciBleHRlbmRzIEFic3RyYWN0TGFuZ2l1bVBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudG9rZW5zID0gW107XG4gICAgICAgIHRoaXMuZWxlbWVudFN0YWNrID0gW107XG4gICAgICAgIHRoaXMubGFzdEVsZW1lbnRTdGFjayA9IFtdO1xuICAgICAgICB0aGlzLm5leHRUb2tlbkluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zdGFja1NpemUgPSAwO1xuICAgIH1cbiAgICBhY3Rpb24oKSB7XG4gICAgICAgIC8vIE5PT1BcbiAgICB9XG4gICAgY29uc3RydWN0KCkge1xuICAgICAgICAvLyBOT09QXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHBhcnNlKGlucHV0KSB7XG4gICAgICAgIHRoaXMucmVzZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCB0b2tlbnMgPSB0aGlzLmxleGVyLnRva2VuaXplKGlucHV0LCB7IG1vZGU6ICdwYXJ0aWFsJyB9KTtcbiAgICAgICAgdGhpcy50b2tlbnMgPSB0b2tlbnMudG9rZW5zO1xuICAgICAgICB0aGlzLndyYXBwZXIuaW5wdXQgPSBbLi4udGhpcy50b2tlbnNdO1xuICAgICAgICB0aGlzLm1haW5SdWxlLmNhbGwodGhpcy53cmFwcGVyLCB7fSk7XG4gICAgICAgIHRoaXMudW5vcmRlcmVkR3JvdXBzLmNsZWFyKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2tlbnM6IHRoaXMudG9rZW5zLFxuICAgICAgICAgICAgZWxlbWVudFN0YWNrOiBbLi4udGhpcy5sYXN0RWxlbWVudFN0YWNrXSxcbiAgICAgICAgICAgIHRva2VuSW5kZXg6IHRoaXMubmV4dFRva2VuSW5kZXhcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcnVsZShydWxlLCBpbXBsKSB7XG4gICAgICAgIGNvbnN0IHJ1bGVNZXRob2QgPSB0aGlzLndyYXBwZXIuREVGSU5FX1JVTEUod2l0aFJ1bGVTdWZmaXgocnVsZS5uYW1lKSwgdGhpcy5zdGFydEltcGxlbWVudGF0aW9uKGltcGwpLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmFsbFJ1bGVzLnNldChydWxlLm5hbWUsIHJ1bGVNZXRob2QpO1xuICAgICAgICBpZiAocnVsZS5lbnRyeSkge1xuICAgICAgICAgICAgdGhpcy5tYWluUnVsZSA9IHJ1bGVNZXRob2Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bGVNZXRob2Q7XG4gICAgfVxuICAgIHJlc2V0U3RhdGUoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFN0YWNrID0gW107XG4gICAgICAgIHRoaXMubGFzdEVsZW1lbnRTdGFjayA9IFtdO1xuICAgICAgICB0aGlzLm5leHRUb2tlbkluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zdGFja1NpemUgPSAwO1xuICAgIH1cbiAgICBzdGFydEltcGxlbWVudGF0aW9uKGltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgIHJldHVybiAoYXJncykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMua2VlcFN0YWNrU2l6ZSgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbihhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTdGFja1NpemUoc2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJlbW92ZVVuZXhwZWN0ZWRFbGVtZW50cygpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50U3RhY2suc3BsaWNlKHRoaXMuc3RhY2tTaXplKTtcbiAgICB9XG4gICAga2VlcFN0YWNrU2l6ZSgpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZWxlbWVudFN0YWNrLmxlbmd0aDtcbiAgICAgICAgdGhpcy5zdGFja1NpemUgPSBzaXplO1xuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG4gICAgcmVzZXRTdGFja1NpemUoc2l6ZSkge1xuICAgICAgICB0aGlzLnJlbW92ZVVuZXhwZWN0ZWRFbGVtZW50cygpO1xuICAgICAgICB0aGlzLnN0YWNrU2l6ZSA9IHNpemU7XG4gICAgfVxuICAgIGNvbnN1bWUoaWR4LCB0b2tlblR5cGUsIGZlYXR1cmUpIHtcbiAgICAgICAgdGhpcy53cmFwcGVyLndyYXBDb25zdW1lKGlkeCwgdG9rZW5UeXBlKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVjb3JkaW5nKCkpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdEVsZW1lbnRTdGFjayA9IFsuLi50aGlzLmVsZW1lbnRTdGFjaywgZmVhdHVyZV07XG4gICAgICAgICAgICB0aGlzLm5leHRUb2tlbkluZGV4ID0gdGhpcy5jdXJySWR4ICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdWJydWxlKGlkeCwgcnVsZSwgZnJhZ21lbnQsIGZlYXR1cmUsIGFyZ3MpIHtcbiAgICAgICAgdGhpcy5iZWZvcmUoZmVhdHVyZSk7XG4gICAgICAgIHRoaXMud3JhcHBlci53cmFwU3VicnVsZShpZHgsIHJ1bGUsIGFyZ3MpO1xuICAgICAgICB0aGlzLmFmdGVyKGZlYXR1cmUpO1xuICAgIH1cbiAgICBiZWZvcmUoZWxlbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNSZWNvcmRpbmcoKSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50U3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZnRlcihlbGVtZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1JlY29yZGluZygpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZWxlbWVudFN0YWNrLmxhc3RJbmRleE9mKGVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRTdGFjay5zcGxpY2UoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjdXJySWR4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmN1cnJJZHg7XG4gICAgfVxufVxuY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICByZWNvdmVyeUVuYWJsZWQ6IHRydWUsXG4gICAgbm9kZUxvY2F0aW9uVHJhY2tpbmc6ICdmdWxsJyxcbiAgICBza2lwVmFsaWRhdGlvbnM6IHRydWUsXG4gICAgZXJyb3JNZXNzYWdlUHJvdmlkZXI6IG5ldyBMYW5naXVtUGFyc2VyRXJyb3JNZXNzYWdlUHJvdmlkZXIoKVxufTtcbi8qKlxuICogVGhpcyBjbGFzcyB3cmFwcyB0aGUgZW1iZWRkZWQgYWN0aW9ucyBwYXJzZXIgb2YgY2hldnJvdGFpbiBhbmQgZXhwb3NlcyBwcm90ZWN0ZWQgbWV0aG9kcy5cbiAqIFRoaXMgd2F5LCB3ZSBjYW4gYnVpbGQgdGhlIGBMYW5naXVtUGFyc2VyYCBhcyBhIGNvbXBvc2l0aW9uLlxuICovXG5jbGFzcyBDaGV2cm90YWluV3JhcHBlciBleHRlbmRzIEVtYmVkZGVkQWN0aW9uc1BhcnNlciB7XG4gICAgY29uc3RydWN0b3IodG9rZW5zLCBjb25maWcpIHtcbiAgICAgICAgY29uc3QgdXNlRGVmYXVsdExvb2thaGVhZCA9IGNvbmZpZyAmJiAnbWF4TG9va2FoZWFkJyBpbiBjb25maWc7XG4gICAgICAgIHN1cGVyKHRva2VucywgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDb25maWcpLCB7IGxvb2thaGVhZFN0cmF0ZWd5OiB1c2VEZWZhdWx0TG9va2FoZWFkXG4gICAgICAgICAgICAgICAgPyBuZXcgTExrTG9va2FoZWFkU3RyYXRlZ3koeyBtYXhMb29rYWhlYWQ6IGNvbmZpZy5tYXhMb29rYWhlYWQgfSlcbiAgICAgICAgICAgICAgICA6IG5ldyBMTFN0YXJMb29rYWhlYWRTdHJhdGVneSh7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHZhbGlkYXRpb25zIGFyZSBza2lwcGVkLCBkb24ndCBsb2cgdGhlIGxvb2thaGVhZCB3YXJuaW5nc1xuICAgICAgICAgICAgICAgICAgICBsb2dnaW5nOiBjb25maWcuc2tpcFZhbGlkYXRpb25zID8gKCkgPT4geyB9IDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfSkgfSksIGNvbmZpZykpO1xuICAgIH1cbiAgICBnZXQgSVNfUkVDT1JESU5HKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5SRUNPUkRJTkdfUEhBU0U7XG4gICAgfVxuICAgIERFRklORV9SVUxFKG5hbWUsIGltcGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuUlVMRShuYW1lLCBpbXBsKTtcbiAgICB9XG4gICAgd3JhcFNlbGZBbmFseXNpcygpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtU2VsZkFuYWx5c2lzKCk7XG4gICAgfVxuICAgIHdyYXBDb25zdW1lKGlkeCwgdG9rZW5UeXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWUoaWR4LCB0b2tlblR5cGUpO1xuICAgIH1cbiAgICB3cmFwU3VicnVsZShpZHgsIHJ1bGUsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VicnVsZShpZHgsIHJ1bGUsIHtcbiAgICAgICAgICAgIEFSR1M6IFthcmdzXVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgd3JhcE9yKGlkeCwgY2hvaWNlcykge1xuICAgICAgICB0aGlzLm9yKGlkeCwgY2hvaWNlcyk7XG4gICAgfVxuICAgIHdyYXBPcHRpb24oaWR4LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm9wdGlvbihpZHgsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgd3JhcE1hbnkoaWR4LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm1hbnkoaWR4LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIHdyYXBBdExlYXN0T25lKGlkeCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5hdExlYXN0T25lKGlkeCwgY2FsbGJhY2spO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhbmdpdW0tcGFyc2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0UGFyc2VyRXJyb3JQcm92aWRlciIsIkVtYmVkZGVkQWN0aW9uc1BhcnNlciIsIkxMa0xvb2thaGVhZFN0cmF0ZWd5IiwiTExTdGFyTG9va2FoZWFkU3RyYXRlZ3kiLCJpc0Fzc2lnbm1lbnQiLCJpc0Nyb3NzUmVmZXJlbmNlIiwiaXNLZXl3b3JkIiwiZ2V0RXhwbGljaXRSdWxlVHlwZSIsImlzRGF0YVR5cGVSdWxlIiwiYXNzaWduTWFuZGF0b3J5UHJvcGVydGllcyIsImdldENvbnRhaW5lck9mVHlwZSIsImxpbmtDb250ZW50VG9Db250YWluZXIiLCJDc3ROb2RlQnVpbGRlciIsIkRhdGF0eXBlU3ltYm9sIiwiU3ltYm9sIiwiaXNEYXRhVHlwZU5vZGUiLCJub2RlIiwiJHR5cGUiLCJydWxlU3VmZml4Iiwid2l0aFJ1bGVTdWZmaXgiLCJuYW1lIiwiZW5kc1dpdGgiLCJBYnN0cmFjdExhbmdpdW1QYXJzZXIiLCJjb25zdHJ1Y3RvciIsInNlcnZpY2VzIiwiX3Vub3JkZXJlZEdyb3VwcyIsIk1hcCIsImFsbFJ1bGVzIiwibGV4ZXIiLCJwYXJzZXIiLCJMZXhlciIsInRva2VucyIsImRlZmluaXRpb24iLCJwcm9kdWN0aW9uIiwiTGFuZ3VhZ2VNZXRhRGF0YSIsIm1vZGUiLCJ3cmFwcGVyIiwiQ2hldnJvdGFpbldyYXBwZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJQYXJzZXJDb25maWciLCJza2lwVmFsaWRhdGlvbnMiLCJlcnJvck1lc3NhZ2VQcm92aWRlciIsIlBhcnNlckVycm9yTWVzc2FnZVByb3ZpZGVyIiwiYWx0ZXJuYXRpdmVzIiwiaWR4IiwiY2hvaWNlcyIsIndyYXBPciIsIm9wdGlvbmFsIiwiY2FsbGJhY2siLCJ3cmFwT3B0aW9uIiwibWFueSIsIndyYXBNYW55IiwiYXRMZWFzdE9uZSIsIndyYXBBdExlYXN0T25lIiwiZ2V0UnVsZSIsImdldCIsImlzUmVjb3JkaW5nIiwiSVNfUkVDT1JESU5HIiwidW5vcmRlcmVkR3JvdXBzIiwiZ2V0UnVsZVN0YWNrIiwiUlVMRV9TVEFDSyIsImZpbmFsaXplIiwid3JhcFNlbGZBbmFseXNpcyIsIkxhbmdpdW1QYXJzZXIiLCJjdXJyZW50Iiwic3RhY2siLCJsZW5ndGgiLCJub2RlQnVpbGRlciIsImFzc2lnbm1lbnRNYXAiLCJsaW5rZXIiLCJyZWZlcmVuY2VzIiwiTGlua2VyIiwiY29udmVydGVyIiwiVmFsdWVDb252ZXJ0ZXIiLCJhc3RSZWZsZWN0aW9uIiwic2hhcmVkIiwiQXN0UmVmbGVjdGlvbiIsInJ1bGUiLCJpbXBsIiwidHlwZSIsImNvbXB1dGVSdWxlVHlwZSIsInJ1bGVNZXRob2QiLCJERUZJTkVfUlVMRSIsInN0YXJ0SW1wbGVtZW50YXRpb24iLCJiaW5kIiwic2V0IiwiZW50cnkiLCJtYWluUnVsZSIsImZyYWdtZW50IiwidW5kZWZpbmVkIiwiZXhwbGljaXQiLCJwYXJzZSIsImlucHV0Iiwib3B0aW9ucyIsImJ1aWxkUm9vdE5vZGUiLCJsZXhlclJlc3VsdCIsInRva2VuaXplIiwiRXJyb3IiLCJyZXN1bHQiLCJjYWxsIiwiYWRkSGlkZGVuTm9kZXMiLCJoaWRkZW4iLCJjbGVhciIsInZhbHVlIiwibGV4ZXJFcnJvcnMiLCJlcnJvcnMiLCJsZXhlclJlcG9ydCIsInJlcG9ydCIsInBhcnNlckVycm9ycyIsImltcGxlbWVudGF0aW9uIiwiYXJncyIsImNyZWF0ZU5vZGUiLCJwdXNoIiwiZXJyIiwiY29uc3RydWN0IiwiZXh0cmFjdEhpZGRlblRva2VucyIsInRva2VuIiwiaGlkZGVuVG9rZW5zIiwib2Zmc2V0Iiwic3RhcnRPZmZzZXQiLCJpIiwic3BsaWNlIiwiY29uc3VtZSIsInRva2VuVHlwZSIsImZlYXR1cmUiLCJ3cmFwQ29uc3VtZSIsImlzVmFsaWRUb2tlbiIsImxlYWZOb2RlIiwiYnVpbGRMZWFmTm9kZSIsImFzc2lnbm1lbnQiLCJpc0Nyb3NzUmVmIiwiZ2V0QXNzaWdubWVudCIsImNvbnZlcnRlZFZhbHVlIiwiaW1hZ2UiLCJjb252ZXJ0Iiwib3BlcmF0b3IiLCJ0ZXh0IiwidG9TdHJpbmciLCJpc0luc2VydGVkSW5SZWNvdmVyeSIsImlzTmFOIiwiZW5kT2Zmc2V0Iiwic3VicnVsZSIsImNzdE5vZGUiLCJidWlsZENvbXBvc2l0ZU5vZGUiLCJzdWJydWxlUmVzdWx0Iiwid3JhcFN1YnJ1bGUiLCJwZXJmb3JtU3VicnVsZUFzc2lnbm1lbnQiLCJvYmplY3QiLCJhc3NpZ25XaXRob3V0T3ZlcnJpZGUiLCJuZXdJdGVtIiwicG9wIiwiYWN0aW9uIiwibGFzdCIsInJlbW92ZU5vZGUiLCIkY3N0Tm9kZSIsImNvbnRlbnQiLCJvYmoiLCJoYXMiLCJ0ZXJtaW5hbCIsIml0ZW0iLCJidWlsZFJlZmVyZW5jZSIsIkFycmF5IiwiaXNBcnJheSIsInRhcmdldCIsInNvdXJjZSIsImV4aXN0aW5nVmFsdWUiLCJlbnRyaWVzIiwibmV3VmFsdWUiLCJ0YXJnZXRDc3ROb2RlIiwiYXN0Tm9kZSIsImRlZmluaXRpb25FcnJvcnMiLCJBYnN0cmFjdFBhcnNlckVycm9yTWVzc2FnZVByb3ZpZGVyIiwiYnVpbGRNaXNtYXRjaFRva2VuTWVzc2FnZSIsImJ1aWxkTm90QWxsSW5wdXRQYXJzZWRNZXNzYWdlIiwiYnVpbGROb1ZpYWJsZUFsdE1lc3NhZ2UiLCJidWlsZEVhcmx5RXhpdE1lc3NhZ2UiLCJMYW5naXVtUGFyc2VyRXJyb3JNZXNzYWdlUHJvdmlkZXIiLCJleHBlY3RlZCIsImFjdHVhbCIsImV4cGVjdGVkTXNnIiwiTEFCRUwiLCJzdWJzdHJpbmciLCJmaXJzdFJlZHVuZGFudCIsIkxhbmdpdW1Db21wbGV0aW9uUGFyc2VyIiwiYXJndW1lbnRzIiwiZWxlbWVudFN0YWNrIiwibGFzdEVsZW1lbnRTdGFjayIsIm5leHRUb2tlbkluZGV4Iiwic3RhY2tTaXplIiwicmVzZXRTdGF0ZSIsInRva2VuSW5kZXgiLCJzaXplIiwia2VlcFN0YWNrU2l6ZSIsInJlc2V0U3RhY2tTaXplIiwicmVtb3ZlVW5leHBlY3RlZEVsZW1lbnRzIiwiY3VycklkeCIsImJlZm9yZSIsImFmdGVyIiwiZWxlbWVudCIsImluZGV4IiwibGFzdEluZGV4T2YiLCJkZWZhdWx0Q29uZmlnIiwicmVjb3ZlcnlFbmFibGVkIiwibm9kZUxvY2F0aW9uVHJhY2tpbmciLCJjb25maWciLCJ1c2VEZWZhdWx0TG9va2FoZWFkIiwibG9va2FoZWFkU3RyYXRlZ3kiLCJtYXhMb29rYWhlYWQiLCJsb2dnaW5nIiwiUkVDT1JESU5HX1BIQVNFIiwiUlVMRSIsInBlcmZvcm1TZWxmQW5hbHlzaXMiLCJBUkdTIiwib3IiLCJvcHRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/langium-parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/lexer.js":
/*!**************************************************!*\
  !*** ./node_modules/langium/lib/parser/lexer.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TOKENIZE_OPTIONS: () => (/* binding */ DEFAULT_TOKENIZE_OPTIONS),\n/* harmony export */   DefaultLexer: () => (/* binding */ DefaultLexer),\n/* harmony export */   DefaultLexerErrorMessageProvider: () => (/* binding */ DefaultLexerErrorMessageProvider),\n/* harmony export */   isIMultiModeLexerDefinition: () => (/* binding */ isIMultiModeLexerDefinition),\n/* harmony export */   isTokenTypeArray: () => (/* binding */ isTokenTypeArray),\n/* harmony export */   isTokenTypeDictionary: () => (/* binding */ isTokenTypeDictionary)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/./node_modules/chevrotain/lib/src/api.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \nclass DefaultLexerErrorMessageProvider {\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\n    }\n    buildUnableToPopLexerModeMessage(token) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\n    }\n}\nconst DEFAULT_TOKENIZE_OPTIONS = {\n    mode: \"full\"\n};\nclass DefaultLexer {\n    constructor(services){\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\n        this.tokenBuilder = services.parser.TokenBuilder;\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\n        });\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\n        const production = services.LanguageMetaData.mode === \"production\";\n        this.chevrotainLexer = new chevrotain__WEBPACK_IMPORTED_MODULE_0__.Lexer(lexerTokens, {\n            positionTracking: \"full\",\n            skipValidations: production,\n            errorMessageProvider: this.errorMessageProvider\n        });\n    }\n    get definition() {\n        return this.tokenTypes;\n    }\n    tokenize(text, _options = DEFAULT_TOKENIZE_OPTIONS) {\n        var _a, _b, _c;\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\n        return {\n            tokens: chevrotainResult.tokens,\n            errors: chevrotainResult.errors,\n            hidden: (_a = chevrotainResult.groups.hidden) !== null && _a !== void 0 ? _a : [],\n            report: (_c = (_b = this.tokenBuilder).flushLexingReport) === null || _c === void 0 ? void 0 : _c.call(_b, text)\n        };\n    }\n    toTokenTypeDictionary(buildTokens) {\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\n        const res = {};\n        tokens.forEach((token)=>res[token.name] = token);\n        return res;\n    }\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenType array\n */ function isTokenTypeArray(tokenVocabulary) {\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || \"name\" in tokenVocabulary[0]);\n}\n/**\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\n */ function isIMultiModeLexerDefinition(tokenVocabulary) {\n    return tokenVocabulary && \"modes\" in tokenVocabulary && \"defaultMode\" in tokenVocabulary;\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\n */ function isTokenTypeDictionary(tokenVocabulary) {\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\n} //# sourceMappingURL=lexer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/lexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/parser-builder-base.js":
/*!****************************************************************!*\
  !*** ./node_modules/langium/lib/parser/parser-builder-base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createParser: () => (/* binding */ createParser)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/./node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/./node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/errors.js */ \"(ssr)/./node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\nfunction createParser(grammar, parser, tokens) {\n    const parserContext = {\n        parser,\n        tokens,\n        ruleNames: new Map()\n    };\n    buildRules(parserContext, grammar);\n    return parser;\n}\nfunction buildRules(parserContext, grammar) {\n    const reachable = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAllReachableRules)(grammar, false);\n    const parserRules = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(grammar.rules).filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule).filter((rule)=>reachable.has(rule));\n    for (const rule of parserRules){\n        const ctx = Object.assign(Object.assign({}, parserContext), {\n            consume: 1,\n            optional: 1,\n            subrule: 1,\n            many: 1,\n            or: 1\n        });\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\n    }\n}\nfunction buildElement(ctx, element, ignoreGuard = false) {\n    let method;\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isKeyword)(element)) {\n        method = buildKeyword(ctx, element);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAction)(element)) {\n        method = buildAction(ctx, element);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAssignment)(element)) {\n        method = buildElement(ctx, element.terminal);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isCrossReference)(element)) {\n        method = buildCrossReference(ctx, element);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(element)) {\n        method = buildRuleCall(ctx, element);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAlternatives)(element)) {\n        method = buildAlternatives(ctx, element);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isUnorderedGroup)(element)) {\n        method = buildUnorderedGroup(ctx, element);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(element)) {\n        method = buildGroup(ctx, element);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isEndOfFile)(element)) {\n        const idx = ctx.consume++;\n        method = ()=>ctx.parser.consume(idx, chevrotain__WEBPACK_IMPORTED_MODULE_0__.EOF, element);\n    } else {\n        throw new _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\n    }\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\n}\nfunction buildAction(ctx, action) {\n    const actionType = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTypeName)(action);\n    return ()=>ctx.parser.action(actionType, action);\n}\nfunction buildRuleCall(ctx, ruleCall) {\n    const rule = ruleCall.rule.ref;\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(rule)) {\n        const idx = ctx.subrule++;\n        const fragment = rule.fragment;\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : ()=>({});\n        return (args)=>ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isTerminalRule)(rule)) {\n        const idx = ctx.consume++;\n        const method = getToken(ctx, rule.name);\n        return ()=>ctx.parser.consume(idx, method, ruleCall);\n    } else if (!rule) {\n        throw new _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\n    } else {\n        (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(rule);\n    }\n}\nfunction buildRuleCallPredicate(rule, namedArgs) {\n    const predicates = namedArgs.map((e)=>buildPredicate(e.value));\n    return (args)=>{\n        const ruleArgs = {};\n        for(let i = 0; i < predicates.length; i++){\n            const ruleTarget = rule.parameters[i];\n            const predicate = predicates[i];\n            ruleArgs[ruleTarget.name] = predicate(args);\n        }\n        return ruleArgs;\n    };\n}\nfunction buildPredicate(condition) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isDisjunction)(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args)=>left(args) || right(args);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isConjunction)(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args)=>left(args) && right(args);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isNegation)(condition)) {\n        const value = buildPredicate(condition.value);\n        return (args)=>!value(args);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParameterReference)(condition)) {\n        const name = condition.parameter.ref.name;\n        return (args)=>args !== undefined && args[name] === true;\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isBooleanLiteral)(condition)) {\n        const value = Boolean(condition.true);\n        return ()=>value;\n    }\n    (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(condition);\n}\nfunction buildAlternatives(ctx, alternatives) {\n    if (alternatives.elements.length === 1) {\n        return buildElement(ctx, alternatives.elements[0]);\n    } else {\n        const methods = [];\n        for (const element of alternatives.elements){\n            const predicatedMethod = {\n                // Since we handle the guard condition in the alternative already\n                // We can ignore the group guard condition inside\n                ALT: buildElement(ctx, element, true)\n            };\n            const guard = getGuardCondition(element);\n            if (guard) {\n                predicatedMethod.GATE = buildPredicate(guard);\n            }\n            methods.push(predicatedMethod);\n        }\n        const idx = ctx.or++;\n        return (args)=>ctx.parser.alternatives(idx, methods.map((method)=>{\n                const alt = {\n                    ALT: ()=>method.ALT(args)\n                };\n                const gate = method.GATE;\n                if (gate) {\n                    alt.GATE = ()=>gate(args);\n                }\n                return alt;\n            }));\n    }\n}\nfunction buildUnorderedGroup(ctx, group) {\n    if (group.elements.length === 1) {\n        return buildElement(ctx, group.elements[0]);\n    }\n    const methods = [];\n    for (const element of group.elements){\n        const predicatedMethod = {\n            // Since we handle the guard condition in the alternative already\n            // We can ignore the group guard condition inside\n            ALT: buildElement(ctx, element, true)\n        };\n        const guard = getGuardCondition(element);\n        if (guard) {\n            predicatedMethod.GATE = buildPredicate(guard);\n        }\n        methods.push(predicatedMethod);\n    }\n    const orIdx = ctx.or++;\n    const idFunc = (groupIdx, lParser)=>{\n        const stackId = lParser.getRuleStack().join(\"-\");\n        return `uGroup_${groupIdx}_${stackId}`;\n    };\n    const alternatives = (args)=>ctx.parser.alternatives(orIdx, methods.map((method, idx)=>{\n            const alt = {\n                ALT: ()=>true\n            };\n            const parser = ctx.parser;\n            alt.ALT = ()=>{\n                method.ALT(args);\n                if (!parser.isRecording()) {\n                    const key = idFunc(orIdx, parser);\n                    if (!parser.unorderedGroups.get(key)) {\n                        // init after clear state\n                        parser.unorderedGroups.set(key, []);\n                    }\n                    const groupState = parser.unorderedGroups.get(key);\n                    if (typeof (groupState === null || groupState === void 0 ? void 0 : groupState[idx]) === \"undefined\") {\n                        // Not accessed yet\n                        groupState[idx] = true;\n                    }\n                }\n            };\n            const gate = method.GATE;\n            if (gate) {\n                alt.GATE = ()=>gate(args);\n            } else {\n                alt.GATE = ()=>{\n                    const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\n                    const allow = !(trackedAlternatives === null || trackedAlternatives === void 0 ? void 0 : trackedAlternatives[idx]);\n                    return allow;\n                };\n            }\n            return alt;\n        }));\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, \"*\");\n    return (args)=>{\n        wrapped(args);\n        if (!ctx.parser.isRecording()) {\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\n        }\n    };\n}\nfunction buildGroup(ctx, group) {\n    const methods = group.elements.map((e)=>buildElement(ctx, e));\n    return (args)=>methods.forEach((method)=>method(args));\n}\nfunction getGuardCondition(element) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(element)) {\n        return element.guardCondition;\n    }\n    return undefined;\n}\nfunction buildCrossReference(ctx, crossRef, terminal = crossRef.terminal) {\n    if (!terminal) {\n        if (!crossRef.type.ref) {\n            throw new Error(\"Could not resolve reference to type: \" + crossRef.type.$refText);\n        }\n        const assignment = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.findNameAssignment)(crossRef.type.ref);\n        const assignTerminal = assignment === null || assignment === void 0 ? void 0 : assignment.terminal;\n        if (!assignTerminal) {\n            throw new Error(\"Could not find name assignment for type: \" + (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTypeName)(crossRef.type.ref));\n        }\n        return buildCrossReference(ctx, crossRef, assignTerminal);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(terminal) && (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(terminal.rule.ref)) {\n        // The terminal is a data type rule here. Everything else will result in a validation error.\n        const rule = terminal.rule.ref;\n        const idx = ctx.subrule++;\n        return (args)=>ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(terminal) && (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isTerminalRule)(terminal.rule.ref)) {\n        const idx = ctx.consume++;\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\n        return ()=>ctx.parser.consume(idx, terminalRule, crossRef);\n    } else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isKeyword)(terminal)) {\n        const idx = ctx.consume++;\n        const keyword = getToken(ctx, terminal.value);\n        return ()=>ctx.parser.consume(idx, keyword, crossRef);\n    } else {\n        throw new Error(\"Could not build cross reference parser\");\n    }\n}\nfunction buildKeyword(ctx, keyword) {\n    const idx = ctx.consume++;\n    const token = ctx.tokens[keyword.value];\n    if (!token) {\n        throw new Error(\"Could not find token for keyword: \" + keyword.value);\n    }\n    return ()=>ctx.parser.consume(idx, token, keyword);\n}\nfunction wrap(ctx, guard, method, cardinality) {\n    const gate = guard && buildPredicate(guard);\n    if (!cardinality) {\n        if (gate) {\n            const idx = ctx.or++;\n            return (args)=>ctx.parser.alternatives(idx, [\n                    {\n                        ALT: ()=>method(args),\n                        GATE: ()=>gate(args)\n                    },\n                    {\n                        ALT: (0,chevrotain__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ALT)(),\n                        GATE: ()=>!gate(args)\n                    }\n                ]);\n        } else {\n            return method;\n        }\n    }\n    if (cardinality === \"*\") {\n        const idx = ctx.many++;\n        return (args)=>ctx.parser.many(idx, {\n                DEF: ()=>method(args),\n                GATE: gate ? ()=>gate(args) : undefined\n            });\n    } else if (cardinality === \"+\") {\n        const idx = ctx.many++;\n        if (gate) {\n            const orIdx = ctx.or++;\n            // In the case of a guard condition for the `+` group\n            // We combine it with an empty alternative\n            // If the condition returns true, it needs to parse at least a single iteration\n            // If its false, it is not allowed to parse anything\n            return (args)=>ctx.parser.alternatives(orIdx, [\n                    {\n                        ALT: ()=>ctx.parser.atLeastOne(idx, {\n                                DEF: ()=>method(args)\n                            }),\n                        GATE: ()=>gate(args)\n                    },\n                    {\n                        ALT: (0,chevrotain__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ALT)(),\n                        GATE: ()=>!gate(args)\n                    }\n                ]);\n        } else {\n            return (args)=>ctx.parser.atLeastOne(idx, {\n                    DEF: ()=>method(args)\n                });\n        }\n    } else if (cardinality === \"?\") {\n        const idx = ctx.optional++;\n        return (args)=>ctx.parser.optional(idx, {\n                DEF: ()=>method(args),\n                GATE: gate ? ()=>gate(args) : undefined\n            });\n    } else {\n        (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(cardinality);\n    }\n}\nfunction getRule(ctx, element) {\n    const name = getRuleName(ctx, element);\n    const rule = ctx.parser.getRule(name);\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\n    return rule;\n}\nfunction getRuleName(ctx, element) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(element)) {\n        return element.name;\n    } else if (ctx.ruleNames.has(element)) {\n        return ctx.ruleNames.get(element);\n    } else {\n        let item = element;\n        let parent = item.$container;\n        let ruleName = element.$type;\n        while(!(0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(parent)){\n            if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(parent) || (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAlternatives)(parent) || (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isUnorderedGroup)(parent)) {\n                const index = parent.elements.indexOf(item);\n                ruleName = index.toString() + \":\" + ruleName;\n            }\n            item = parent;\n            parent = parent.$container;\n        }\n        const rule = parent;\n        ruleName = rule.name + \":\" + ruleName;\n        ctx.ruleNames.set(element, ruleName);\n        return ruleName;\n    }\n}\nfunction getToken(ctx, name) {\n    const token = ctx.tokens[name];\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\n    return token;\n} //# sourceMappingURL=parser-builder-base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/parser-builder-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/token-builder.js":
/*!**********************************************************!*\
  !*** ./node_modules/langium/lib/parser/token-builder.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTokenBuilder: () => (/* binding */ DefaultTokenBuilder)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/./node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/./node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\n\nclass DefaultTokenBuilder {\n    constructor(){\n        /**\n         * The list of diagnostics stored during the lexing process of a single text.\n         */ this.diagnostics = [];\n    }\n    buildTokens(grammar, options) {\n        const reachableRules = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_1__.stream)((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAllReachableRules)(grammar, false));\n        const terminalTokens = this.buildTerminalTokens(reachableRules);\n        const tokens = this.buildKeywordTokens(reachableRules, terminalTokens, options);\n        terminalTokens.forEach((terminalToken)=>{\n            const pattern = terminalToken.PATTERN;\n            if (typeof pattern === \"object\" && pattern && \"test\" in pattern && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.isWhitespace)(pattern)) {\n                tokens.unshift(terminalToken);\n            } else {\n                tokens.push(terminalToken);\n            }\n        });\n        // We don't need to add the EOF token explicitly.\n        // It is automatically available at the end of the token stream.\n        return tokens;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flushLexingReport(text) {\n        return {\n            diagnostics: this.popDiagnostics()\n        };\n    }\n    popDiagnostics() {\n        const diagnostics = [\n            ...this.diagnostics\n        ];\n        this.diagnostics = [];\n        return diagnostics;\n    }\n    buildTerminalTokens(rules) {\n        return rules.filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isTerminalRule).filter((e)=>!e.fragment).map((terminal)=>this.buildTerminalToken(terminal)).toArray();\n    }\n    buildTerminalToken(terminal) {\n        const regex = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.terminalRegex)(terminal);\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\n        const tokenType = {\n            name: terminal.name,\n            PATTERN: pattern\n        };\n        if (typeof pattern === \"function\") {\n            tokenType.LINE_BREAKS = true;\n        }\n        if (terminal.hidden) {\n            // Only skip tokens that are able to accept whitespace\n            tokenType.GROUP = (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.isWhitespace)(regex) ? chevrotain__WEBPACK_IMPORTED_MODULE_0__.Lexer.SKIPPED : \"hidden\";\n        }\n        return tokenType;\n    }\n    requiresCustomPattern(regex) {\n        if (regex.flags.includes(\"u\") || regex.flags.includes(\"s\")) {\n            // Unicode and dotall regexes are not supported by Chevrotain.\n            return true;\n        } else if (regex.source.includes(\"?<=\") || regex.source.includes(\"?<!\")) {\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\n            return true;\n        } else {\n            return false;\n        }\n    }\n    regexPatternFunction(regex) {\n        const stickyRegex = new RegExp(regex, regex.flags + \"y\");\n        return (text, offset)=>{\n            stickyRegex.lastIndex = offset;\n            const execResult = stickyRegex.exec(text);\n            return execResult;\n        };\n    }\n    buildKeywordTokens(rules, terminalTokens, options) {\n        return rules// We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\n        .filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isParserRule).flatMap((rule)=>(0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.streamAllContents)(rule).filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword)).distinct((e)=>e.value).toArray()// Sort keywords by descending length\n        .sort((a, b)=>b.value.length - a.value.length).map((keyword)=>this.buildKeywordToken(keyword, terminalTokens, Boolean(options === null || options === void 0 ? void 0 : options.caseInsensitive)));\n    }\n    buildKeywordToken(keyword, terminalTokens, caseInsensitive) {\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\n        const tokenType = {\n            name: keyword.value,\n            PATTERN: keywordPattern,\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\n        };\n        if (typeof keywordPattern === \"function\") {\n            tokenType.LINE_BREAKS = true;\n        }\n        return tokenType;\n    }\n    buildKeywordPattern(keyword, caseInsensitive) {\n        return caseInsensitive ? new RegExp((0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.getCaseInsensitivePattern)(keyword.value)) : keyword.value;\n    }\n    findLongerAlt(keyword, terminalTokens) {\n        return terminalTokens.reduce((longerAlts, token)=>{\n            const pattern = token === null || token === void 0 ? void 0 : token.PATTERN;\n            if ((pattern === null || pattern === void 0 ? void 0 : pattern.source) && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.partialMatches)(\"^\" + pattern.source + \"$\", keyword.value)) {\n                longerAlts.push(token);\n            }\n            return longerAlts;\n        }, []);\n    }\n} //# sourceMappingURL=token-builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/token-builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/parser/value-converter.js":
/*!************************************************************!*\
  !*** ./node_modules/langium/lib/parser/value-converter.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultValueConverter: () => (/* binding */ DefaultValueConverter),\n/* harmony export */   ValueConverter: () => (/* binding */ ValueConverter)\n/* harmony export */ });\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/./node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\nclass DefaultValueConverter {\n    convert(input, cstNode) {\n        let feature = cstNode.grammarSource;\n        if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isCrossReference)(feature)) {\n            feature = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getCrossReferenceTerminal)(feature);\n        }\n        if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall)(feature)) {\n            const rule = feature.rule.ref;\n            if (!rule) {\n                throw new Error(\"This cst node was not parsed by a rule.\");\n            }\n            return this.runConverter(rule, input, cstNode);\n        }\n        return input;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    runConverter(rule, input, cstNode) {\n        var _a;\n        switch(rule.name.toUpperCase()){\n            case \"INT\":\n                return ValueConverter.convertInt(input);\n            case \"STRING\":\n                return ValueConverter.convertString(input);\n            case \"ID\":\n                return ValueConverter.convertID(input);\n        }\n        switch((_a = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getRuleType)(rule)) === null || _a === void 0 ? void 0 : _a.toLowerCase()){\n            case \"number\":\n                return ValueConverter.convertNumber(input);\n            case \"boolean\":\n                return ValueConverter.convertBoolean(input);\n            case \"bigint\":\n                return ValueConverter.convertBigint(input);\n            case \"date\":\n                return ValueConverter.convertDate(input);\n            default:\n                return input;\n        }\n    }\n}\nvar ValueConverter;\n(function(ValueConverter) {\n    function convertString(input) {\n        let result = \"\";\n        for(let i = 1; i < input.length - 1; i++){\n            const c = input.charAt(i);\n            if (c === \"\\\\\") {\n                const c1 = input.charAt(++i);\n                result += convertEscapeCharacter(c1);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n    ValueConverter.convertString = convertString;\n    function convertEscapeCharacter(char) {\n        switch(char){\n            case \"b\":\n                return \"\\b\";\n            case \"f\":\n                return \"\\f\";\n            case \"n\":\n                return \"\\n\";\n            case \"r\":\n                return \"\\r\";\n            case \"t\":\n                return \"\t\";\n            case \"v\":\n                return \"\\v\";\n            case \"0\":\n                return \"\\x00\";\n            default:\n                return char;\n        }\n    }\n    function convertID(input) {\n        if (input.charAt(0) === \"^\") {\n            return input.substring(1);\n        } else {\n            return input;\n        }\n    }\n    ValueConverter.convertID = convertID;\n    function convertInt(input) {\n        return parseInt(input);\n    }\n    ValueConverter.convertInt = convertInt;\n    function convertBigint(input) {\n        return BigInt(input);\n    }\n    ValueConverter.convertBigint = convertBigint;\n    function convertDate(input) {\n        return new Date(input);\n    }\n    ValueConverter.convertDate = convertDate;\n    function convertNumber(input) {\n        return Number(input);\n    }\n    ValueConverter.convertNumber = convertNumber;\n    function convertBoolean(input) {\n        return input.toLowerCase() === \"true\";\n    }\n    ValueConverter.convertBoolean = convertBoolean;\n})(ValueConverter || (ValueConverter = {})); //# sourceMappingURL=value-converter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/parser/value-converter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/references/linker.js":
/*!*******************************************************!*\
  !*** ./node_modules/langium/lib/references/linker.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLinker: () => (/* binding */ DefaultLinker)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../workspace/documents.js */ \"(ssr)/./node_modules/langium/lib/workspace/documents.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\nconst ref_resolving = Symbol(\"ref_resolving\");\nclass DefaultLinker {\n    constructor(services){\n        this.reflection = services.shared.AstReflection;\n        this.langiumDocuments = ()=>services.shared.workspace.LangiumDocuments;\n        this.scopeProvider = services.references.ScopeProvider;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n    }\n    async link(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        for (const node of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(document.parseResult.value)){\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamReferences)(node).forEach((ref)=>this.doLink(ref, document));\n        }\n    }\n    doLink(refInfo, document) {\n        var _a;\n        const ref = refInfo.reference;\n        // The reference may already have been resolved lazily by accessing its `ref` property.\n        if (ref._ref === undefined) {\n            ref._ref = ref_resolving;\n            try {\n                const description = this.getCandidate(refInfo);\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(description)) {\n                    ref._ref = description;\n                } else {\n                    ref._nodeDescription = description;\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\n                        // The target document is already loaded\n                        const linkedNode = this.loadAstNode(description);\n                        ref._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : this.createLinkingError(refInfo, description);\n                    } else {\n                        // Try to load the target AST node later using the already provided description\n                        ref._ref = undefined;\n                    }\n                }\n            } catch (err) {\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\n                const errorMessage = (_a = err.message) !== null && _a !== void 0 ? _a : String(err);\n                ref._ref = Object.assign(Object.assign({}, refInfo), {\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}`\n                });\n            }\n            // Add the reference to the document's array of references\n            // Only add if the reference has been not been resolved earlier\n            // Otherwise we end up with duplicates\n            // See also implementation of `buildReference`\n            document.references.push(ref);\n        }\n    }\n    unlink(document) {\n        for (const ref of document.references){\n            delete ref._ref;\n            delete ref._nodeDescription;\n        }\n        document.references = [];\n    }\n    getCandidate(refInfo) {\n        const scope = this.scopeProvider.getScope(refInfo);\n        const description = scope.getElement(refInfo.reference.$refText);\n        return description !== null && description !== void 0 ? description : this.createLinkingError(refInfo);\n    }\n    buildReference(node, property, refNode, refText) {\n        // See behavior description in doc of Linker, update that on changes in here.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const linker = this;\n        const reference = {\n            $refNode: refNode,\n            $refText: refText,\n            get ref () {\n                var _a;\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(this._ref)) {\n                    // Most frequent case: the target is already resolved.\n                    return this._ref;\n                } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNodeDescription)(this._nodeDescription)) {\n                    // A candidate has been found before, but it is not loaded yet.\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\n                    this._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : linker.createLinkingError({\n                        reference,\n                        container: node,\n                        property\n                    }, this._nodeDescription);\n                } else if (this._ref === undefined) {\n                    // The reference has not been linked yet, so do that now.\n                    this._ref = ref_resolving;\n                    const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.findRootNode)(node).$document;\n                    const refData = linker.getLinkedNode({\n                        reference,\n                        container: node,\n                        property\n                    });\n                    if (refData.error && document && document.state < _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__.DocumentState.ComputedScopes) {\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\n                        return this._ref = undefined;\n                    }\n                    this._ref = (_a = refData.node) !== null && _a !== void 0 ? _a : refData.error;\n                    this._nodeDescription = refData.descr;\n                    document === null || document === void 0 ? void 0 : document.references.push(this);\n                } else if (this._ref === ref_resolving) {\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\n                }\n                return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(this._ref) ? this._ref : undefined;\n            },\n            get $nodeDescription () {\n                return this._nodeDescription;\n            },\n            get error () {\n                return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(this._ref) ? this._ref : undefined;\n            }\n        };\n        return reference;\n    }\n    getLinkedNode(refInfo) {\n        var _a;\n        try {\n            const description = this.getCandidate(refInfo);\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(description)) {\n                return {\n                    error: description\n                };\n            }\n            const linkedNode = this.loadAstNode(description);\n            if (linkedNode) {\n                return {\n                    node: linkedNode,\n                    descr: description\n                };\n            } else {\n                return {\n                    descr: description,\n                    error: this.createLinkingError(refInfo, description)\n                };\n            }\n        } catch (err) {\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\n            const errorMessage = (_a = err.message) !== null && _a !== void 0 ? _a : String(err);\n            return {\n                error: Object.assign(Object.assign({}, refInfo), {\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}`\n                })\n            };\n        }\n    }\n    loadAstNode(nodeDescription) {\n        if (nodeDescription.node) {\n            return nodeDescription.node;\n        }\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\n        if (!doc) {\n            return undefined;\n        }\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\n    }\n    createLinkingError(refInfo, targetDescription) {\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\n        // in the language implementation.\n        const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.findRootNode)(refInfo.container).$document;\n        if (document && document.state < _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__.DocumentState.ComputedScopes) {\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\n        }\n        const referenceType = this.reflection.getReferenceType(refInfo);\n        return Object.assign(Object.assign({}, refInfo), {\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\n            targetDescription\n        });\n    }\n} //# sourceMappingURL=linker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/references/linker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/references/name-provider.js":
/*!**************************************************************!*\
  !*** ./node_modules/langium/lib/references/name-provider.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultNameProvider: () => (/* binding */ DefaultNameProvider),\n/* harmony export */   isNamed: () => (/* binding */ isNamed)\n/* harmony export */ });\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \nfunction isNamed(node) {\n    return typeof node.name === \"string\";\n}\nclass DefaultNameProvider {\n    getName(node) {\n        if (isNamed(node)) {\n            return node.name;\n        }\n        return undefined;\n    }\n    getNameNode(node) {\n        return (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__.findNodeForProperty)(node.$cstNode, \"name\");\n    }\n} //# sourceMappingURL=name-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcmVmZXJlbmNlcy9uYW1lLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUNkO0FBQ3pELFNBQVNDLFFBQVFDLElBQUk7SUFDeEIsT0FBTyxPQUFPQSxLQUFLQyxJQUFJLEtBQUs7QUFDaEM7QUFDTyxNQUFNQztJQUNUQyxRQUFRSCxJQUFJLEVBQUU7UUFDVixJQUFJRCxRQUFRQyxPQUFPO1lBQ2YsT0FBT0EsS0FBS0MsSUFBSTtRQUNwQjtRQUNBLE9BQU9HO0lBQ1g7SUFDQUMsWUFBWUwsSUFBSSxFQUFFO1FBQ2QsT0FBT0YsNEVBQW1CQSxDQUFDRSxLQUFLTSxRQUFRLEVBQUU7SUFDOUM7QUFDSixFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvbmFtZS1wcm92aWRlci5qcz8xZTAyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IGZpbmROb2RlRm9yUHJvcGVydHkgfSBmcm9tICcuLi91dGlscy9ncmFtbWFyLXV0aWxzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc05hbWVkKG5vZGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnQgY2xhc3MgRGVmYXVsdE5hbWVQcm92aWRlciB7XG4gICAgZ2V0TmFtZShub2RlKSB7XG4gICAgICAgIGlmIChpc05hbWVkKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldE5hbWVOb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmROb2RlRm9yUHJvcGVydHkobm9kZS4kY3N0Tm9kZSwgJ25hbWUnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYW1lLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJmaW5kTm9kZUZvclByb3BlcnR5IiwiaXNOYW1lZCIsIm5vZGUiLCJuYW1lIiwiRGVmYXVsdE5hbWVQcm92aWRlciIsImdldE5hbWUiLCJ1bmRlZmluZWQiLCJnZXROYW1lTm9kZSIsIiRjc3ROb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/references/name-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/references/references.js":
/*!***********************************************************!*\
  !*** ./node_modules/langium/lib/references/references.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultReferences: () => (/* binding */ DefaultReferences)\n/* harmony export */ });\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\n\nclass DefaultReferences {\n    constructor(services){\n        this.nameProvider = services.references.NameProvider;\n        this.index = services.shared.workspace.IndexManager;\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    findDeclaration(sourceCstNode) {\n        if (sourceCstNode) {\n            const assignment = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__.findAssignment)(sourceCstNode);\n            const nodeElem = sourceCstNode.astNode;\n            if (assignment && nodeElem) {\n                const reference = nodeElem[assignment.feature];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(reference)) {\n                    return reference.ref;\n                } else if (Array.isArray(reference)) {\n                    for (const ref of reference){\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(ref) && ref.$refNode && ref.$refNode.offset <= sourceCstNode.offset && ref.$refNode.end >= sourceCstNode.end) {\n                            return ref.ref;\n                        }\n                    }\n                }\n            }\n            if (nodeElem) {\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\n                if (nameNode && (nameNode === sourceCstNode || (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.isChildNode)(sourceCstNode, nameNode))) {\n                    return nodeElem;\n                }\n            }\n        }\n        return undefined;\n    }\n    findDeclarationNode(sourceCstNode) {\n        const astNode = this.findDeclaration(sourceCstNode);\n        if (astNode === null || astNode === void 0 ? void 0 : astNode.$cstNode) {\n            const targetNode = this.nameProvider.getNameNode(astNode);\n            return targetNode !== null && targetNode !== void 0 ? targetNode : astNode.$cstNode;\n        }\n        return undefined;\n    }\n    findReferences(targetNode, options) {\n        const refs = [];\n        if (options.includeDeclaration) {\n            const ref = this.getReferenceToSelf(targetNode);\n            if (ref) {\n                refs.push(ref);\n            }\n        }\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\n        if (options.documentUri) {\n            indexReferences = indexReferences.filter((ref)=>_utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.equals(ref.sourceUri, options.documentUri));\n        }\n        refs.push(...indexReferences);\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.stream)(refs);\n    }\n    getReferenceToSelf(targetNode) {\n        const nameNode = this.nameProvider.getNameNode(targetNode);\n        if (nameNode) {\n            const doc = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.getDocument)(targetNode);\n            const path = this.nodeLocator.getAstNodePath(targetNode);\n            return {\n                sourceUri: doc.uri,\n                sourcePath: path,\n                targetUri: doc.uri,\n                targetPath: path,\n                segment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.toDocumentSegment)(nameNode),\n                local: true\n            };\n        }\n        return undefined;\n    }\n} //# sourceMappingURL=references.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/references/references.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/references/scope-computation.js":
/*!******************************************************************!*\
  !*** ./node_modules/langium/lib/references/scope-computation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultScopeComputation: () => (/* binding */ DefaultScopeComputation)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/./node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n/**\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\n * contained child nodes.\n *\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\n * are _invisible_ by default, but that can be changed by customizing this service.\n */ class DefaultScopeComputation {\n    constructor(services){\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n    }\n    async computeExports(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\n    }\n    /**\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\n     * The list of children to be considered is determined by the function parameter {@link children}.\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\n     *\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\n     * @param document The document containing the AST node to be exported.\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCancelled` if a user action occurs during execution.\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\n     */ async computeExportsForNode(parentNode, document, children = _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamContents, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const exports = [];\n        this.exportNode(parentNode, exports, document);\n        for (const node of children(parentNode)){\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            this.exportNode(node, exports, document);\n        }\n        return exports;\n    }\n    /**\n     * Add a single node to the list of exports if it has a name. Override this method to change how\n     * symbols are exported, e.g. by modifying their exported name.\n     */ exportNode(node, exports, document) {\n        const name = this.nameProvider.getName(node);\n        if (name) {\n            exports.push(this.descriptions.createDescription(node, name, document));\n        }\n    }\n    async computeLocalScopes(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const rootNode = document.parseResult.value;\n        const scopes = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_3__.MultiMap();\n        // Here we navigate the full AST - local scopes shall be available in the whole document\n        for (const node of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rootNode)){\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            this.processNode(node, document, scopes);\n        }\n        return scopes;\n    }\n    /**\n     * Process a single node during scopes computation. The default implementation makes the node visible\n     * in the subtree of its container (if the node has a name). Override this method to change this,\n     * e.g. by increasing the visibility to a higher level in the AST.\n     */ processNode(node, document, scopes) {\n        const container = node.$container;\n        if (container) {\n            const name = this.nameProvider.getName(node);\n            if (name) {\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\n            }\n        }\n    }\n} //# sourceMappingURL=scope-computation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/references/scope-computation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/references/scope-provider.js":
/*!***************************************************************!*\
  !*** ./node_modules/langium/lib/references/scope-provider.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultScopeProvider: () => (/* binding */ DefaultScopeProvider)\n/* harmony export */ });\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scope.js */ \"(ssr)/./node_modules/langium/lib/references/scope.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/caching.js */ \"(ssr)/./node_modules/langium/lib/utils/caching.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\nclass DefaultScopeProvider {\n    constructor(services){\n        this.reflection = services.shared.AstReflection;\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.globalScopeCache = new _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__.WorkspaceCache(services.shared);\n    }\n    getScope(context) {\n        const scopes = [];\n        const referenceType = this.reflection.getReferenceType(context);\n        const precomputed = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(context.container).precomputedScopes;\n        if (precomputed) {\n            let currentNode = context.container;\n            do {\n                const allDescriptions = precomputed.get(currentNode);\n                if (allDescriptions.length > 0) {\n                    scopes.push((0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(allDescriptions).filter((desc)=>this.reflection.isSubtype(desc.type, referenceType)));\n                }\n                currentNode = currentNode.$container;\n            }while (currentNode);\n        }\n        let result = this.getGlobalScope(referenceType, context);\n        for(let i = scopes.length - 1; i >= 0; i--){\n            result = this.createScope(scopes[i], result);\n        }\n        return result;\n    }\n    /**\n     * Create a scope for the given collection of AST node descriptions.\n     */ createScope(elements, outerScope, options) {\n        return new _scope_js__WEBPACK_IMPORTED_MODULE_3__.StreamScope((0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(elements), outerScope, options);\n    }\n    /**\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\n     */ createScopeForNodes(elements, outerScope, options) {\n        const s = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(elements).map((e)=>{\n            const name = this.nameProvider.getName(e);\n            if (name) {\n                return this.descriptions.createDescription(e, name);\n            }\n            return undefined;\n        }).nonNullable();\n        return new _scope_js__WEBPACK_IMPORTED_MODULE_3__.StreamScope(s, outerScope, options);\n    }\n    /**\n     * Create a global scope filtered for the given reference type.\n     */ getGlobalScope(referenceType, _context) {\n        return this.globalScopeCache.get(referenceType, ()=>new _scope_js__WEBPACK_IMPORTED_MODULE_3__.MapScope(this.indexManager.allElements(referenceType)));\n    }\n} //# sourceMappingURL=scope-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcmVmZXJlbmNlcy9zY29wZS1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUMzQjtBQUNDO0FBQ1I7QUFDUztBQUM5QyxNQUFNSztJQUNUQyxZQUFZQyxRQUFRLENBQUU7UUFDbEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdELFNBQVNFLE1BQU0sQ0FBQ0MsYUFBYTtRQUMvQyxJQUFJLENBQUNDLFlBQVksR0FBR0osU0FBU0ssVUFBVSxDQUFDQyxZQUFZO1FBQ3BELElBQUksQ0FBQ0MsWUFBWSxHQUFHUCxTQUFTUSxTQUFTLENBQUNDLDBCQUEwQjtRQUNqRSxJQUFJLENBQUNDLFlBQVksR0FBR1YsU0FBU0UsTUFBTSxDQUFDTSxTQUFTLENBQUNHLFlBQVk7UUFDMUQsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxJQUFJZiw2REFBY0EsQ0FBQ0csU0FBU0UsTUFBTTtJQUM5RDtJQUNBVyxTQUFTQyxPQUFPLEVBQUU7UUFDZCxNQUFNQyxTQUFTLEVBQUU7UUFDakIsTUFBTUMsZ0JBQWdCLElBQUksQ0FBQ2YsVUFBVSxDQUFDZ0IsZ0JBQWdCLENBQUNIO1FBQ3ZELE1BQU1JLGNBQWN2QixnRUFBV0EsQ0FBQ21CLFFBQVFLLFNBQVMsRUFBRUMsaUJBQWlCO1FBQ3BFLElBQUlGLGFBQWE7WUFDYixJQUFJRyxjQUFjUCxRQUFRSyxTQUFTO1lBQ25DLEdBQUc7Z0JBQ0MsTUFBTUcsa0JBQWtCSixZQUFZSyxHQUFHLENBQUNGO2dCQUN4QyxJQUFJQyxnQkFBZ0JFLE1BQU0sR0FBRyxHQUFHO29CQUM1QlQsT0FBT1UsSUFBSSxDQUFDN0Isd0RBQU1BLENBQUMwQixpQkFBaUJJLE1BQU0sQ0FBQ0MsQ0FBQUEsT0FBUSxJQUFJLENBQUMxQixVQUFVLENBQUMyQixTQUFTLENBQUNELEtBQUtFLElBQUksRUFBRWI7Z0JBQzVGO2dCQUNBSyxjQUFjQSxZQUFZUyxVQUFVO1lBQ3hDLFFBQVNULGFBQWE7UUFDMUI7UUFDQSxJQUFJVSxTQUFTLElBQUksQ0FBQ0MsY0FBYyxDQUFDaEIsZUFBZUY7UUFDaEQsSUFBSyxJQUFJbUIsSUFBSWxCLE9BQU9TLE1BQU0sR0FBRyxHQUFHUyxLQUFLLEdBQUdBLElBQUs7WUFDekNGLFNBQVMsSUFBSSxDQUFDRyxXQUFXLENBQUNuQixNQUFNLENBQUNrQixFQUFFLEVBQUVGO1FBQ3pDO1FBQ0EsT0FBT0E7SUFDWDtJQUNBOztLQUVDLEdBQ0RHLFlBQVlDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUU7UUFDdkMsT0FBTyxJQUFJM0Msa0RBQVdBLENBQUNFLHdEQUFNQSxDQUFDdUMsV0FBV0MsWUFBWUM7SUFDekQ7SUFDQTs7O0tBR0MsR0FDREMsb0JBQW9CSCxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxFQUFFO1FBQy9DLE1BQU1FLElBQUkzQyx3REFBTUEsQ0FBQ3VDLFVBQVVLLEdBQUcsQ0FBQ0MsQ0FBQUE7WUFDM0IsTUFBTUMsT0FBTyxJQUFJLENBQUN0QyxZQUFZLENBQUN1QyxPQUFPLENBQUNGO1lBQ3ZDLElBQUlDLE1BQU07Z0JBQ04sT0FBTyxJQUFJLENBQUNuQyxZQUFZLENBQUNxQyxpQkFBaUIsQ0FBQ0gsR0FBR0M7WUFDbEQ7WUFDQSxPQUFPRztRQUNYLEdBQUdDLFdBQVc7UUFDZCxPQUFPLElBQUlwRCxrREFBV0EsQ0FBQzZDLEdBQUdILFlBQVlDO0lBQzFDO0lBQ0E7O0tBRUMsR0FDREwsZUFBZWhCLGFBQWEsRUFBRStCLFFBQVEsRUFBRTtRQUNwQyxPQUFPLElBQUksQ0FBQ25DLGdCQUFnQixDQUFDVyxHQUFHLENBQUNQLGVBQWUsSUFBTSxJQUFJdkIsK0NBQVFBLENBQUMsSUFBSSxDQUFDaUIsWUFBWSxDQUFDc0MsV0FBVyxDQUFDaEM7SUFDckc7QUFDSixFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUtcHJvdmlkZXIuanM/ZmQ1OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMS0yMDIyIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IE1hcFNjb3BlLCBTdHJlYW1TY29wZSB9IGZyb20gJy4vc2NvcGUuanMnO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi91dGlscy9hc3QtdXRpbHMuanMnO1xuaW1wb3J0IHsgc3RyZWFtIH0gZnJvbSAnLi4vdXRpbHMvc3RyZWFtLmpzJztcbmltcG9ydCB7IFdvcmtzcGFjZUNhY2hlIH0gZnJvbSAnLi4vdXRpbHMvY2FjaGluZy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdFNjb3BlUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMucmVmbGVjdGlvbiA9IHNlcnZpY2VzLnNoYXJlZC5Bc3RSZWZsZWN0aW9uO1xuICAgICAgICB0aGlzLm5hbWVQcm92aWRlciA9IHNlcnZpY2VzLnJlZmVyZW5jZXMuTmFtZVByb3ZpZGVyO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9ucyA9IHNlcnZpY2VzLndvcmtzcGFjZS5Bc3ROb2RlRGVzY3JpcHRpb25Qcm92aWRlcjtcbiAgICAgICAgdGhpcy5pbmRleE1hbmFnZXIgPSBzZXJ2aWNlcy5zaGFyZWQud29ya3NwYWNlLkluZGV4TWFuYWdlcjtcbiAgICAgICAgdGhpcy5nbG9iYWxTY29wZUNhY2hlID0gbmV3IFdvcmtzcGFjZUNhY2hlKHNlcnZpY2VzLnNoYXJlZCk7XG4gICAgfVxuICAgIGdldFNjb3BlKGNvbnRleHQpIHtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gW107XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZVR5cGUgPSB0aGlzLnJlZmxlY3Rpb24uZ2V0UmVmZXJlbmNlVHlwZShjb250ZXh0KTtcbiAgICAgICAgY29uc3QgcHJlY29tcHV0ZWQgPSBnZXREb2N1bWVudChjb250ZXh0LmNvbnRhaW5lcikucHJlY29tcHV0ZWRTY29wZXM7XG4gICAgICAgIGlmIChwcmVjb21wdXRlZCkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gY29udGV4dC5jb250YWluZXI7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsRGVzY3JpcHRpb25zID0gcHJlY29tcHV0ZWQuZ2V0KGN1cnJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoYWxsRGVzY3JpcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVzLnB1c2goc3RyZWFtKGFsbERlc2NyaXB0aW9ucykuZmlsdGVyKGRlc2MgPT4gdGhpcy5yZWZsZWN0aW9uLmlzU3VidHlwZShkZXNjLnR5cGUsIHJlZmVyZW5jZVR5cGUpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuJGNvbnRhaW5lcjtcbiAgICAgICAgICAgIH0gd2hpbGUgKGN1cnJlbnROb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5nZXRHbG9iYWxTY29wZShyZWZlcmVuY2VUeXBlLCBjb250ZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNjb3Blcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5jcmVhdGVTY29wZShzY29wZXNbaV0sIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2NvcGUgZm9yIHRoZSBnaXZlbiBjb2xsZWN0aW9uIG9mIEFTVCBub2RlIGRlc2NyaXB0aW9ucy5cbiAgICAgKi9cbiAgICBjcmVhdGVTY29wZShlbGVtZW50cywgb3V0ZXJTY29wZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbVNjb3BlKHN0cmVhbShlbGVtZW50cyksIG91dGVyU2NvcGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzY29wZSBmb3IgdGhlIGdpdmVuIGNvbGxlY3Rpb24gb2YgQVNUIG5vZGVzLCB3aGljaCBuZWVkIHRvIGJlIHRyYW5zZm9ybWVkIGludG8gcmVzcGVjdGl2ZVxuICAgICAqIGRlc2NyaXB0aW9ucyBmaXJzdC4gVGhpcyBpcyBkb25lIHVzaW5nIHRoZSBgTmFtZVByb3ZpZGVyYCBhbmQgYEFzdE5vZGVEZXNjcmlwdGlvblByb3ZpZGVyYCBzZXJ2aWNlcy5cbiAgICAgKi9cbiAgICBjcmVhdGVTY29wZUZvck5vZGVzKGVsZW1lbnRzLCBvdXRlclNjb3BlLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHMgPSBzdHJlYW0oZWxlbWVudHMpLm1hcChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWVQcm92aWRlci5nZXROYW1lKGUpO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZXNjcmlwdGlvbnMuY3JlYXRlRGVzY3JpcHRpb24oZSwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KS5ub25OdWxsYWJsZSgpO1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbVNjb3BlKHMsIG91dGVyU2NvcGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBnbG9iYWwgc2NvcGUgZmlsdGVyZWQgZm9yIHRoZSBnaXZlbiByZWZlcmVuY2UgdHlwZS5cbiAgICAgKi9cbiAgICBnZXRHbG9iYWxTY29wZShyZWZlcmVuY2VUeXBlLCBfY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxTY29wZUNhY2hlLmdldChyZWZlcmVuY2VUeXBlLCAoKSA9PiBuZXcgTWFwU2NvcGUodGhpcy5pbmRleE1hbmFnZXIuYWxsRWxlbWVudHMocmVmZXJlbmNlVHlwZSkpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiTWFwU2NvcGUiLCJTdHJlYW1TY29wZSIsImdldERvY3VtZW50Iiwic3RyZWFtIiwiV29ya3NwYWNlQ2FjaGUiLCJEZWZhdWx0U2NvcGVQcm92aWRlciIsImNvbnN0cnVjdG9yIiwic2VydmljZXMiLCJyZWZsZWN0aW9uIiwic2hhcmVkIiwiQXN0UmVmbGVjdGlvbiIsIm5hbWVQcm92aWRlciIsInJlZmVyZW5jZXMiLCJOYW1lUHJvdmlkZXIiLCJkZXNjcmlwdGlvbnMiLCJ3b3Jrc3BhY2UiLCJBc3ROb2RlRGVzY3JpcHRpb25Qcm92aWRlciIsImluZGV4TWFuYWdlciIsIkluZGV4TWFuYWdlciIsImdsb2JhbFNjb3BlQ2FjaGUiLCJnZXRTY29wZSIsImNvbnRleHQiLCJzY29wZXMiLCJyZWZlcmVuY2VUeXBlIiwiZ2V0UmVmZXJlbmNlVHlwZSIsInByZWNvbXB1dGVkIiwiY29udGFpbmVyIiwicHJlY29tcHV0ZWRTY29wZXMiLCJjdXJyZW50Tm9kZSIsImFsbERlc2NyaXB0aW9ucyIsImdldCIsImxlbmd0aCIsInB1c2giLCJmaWx0ZXIiLCJkZXNjIiwiaXNTdWJ0eXBlIiwidHlwZSIsIiRjb250YWluZXIiLCJyZXN1bHQiLCJnZXRHbG9iYWxTY29wZSIsImkiLCJjcmVhdGVTY29wZSIsImVsZW1lbnRzIiwib3V0ZXJTY29wZSIsIm9wdGlvbnMiLCJjcmVhdGVTY29wZUZvck5vZGVzIiwicyIsIm1hcCIsImUiLCJuYW1lIiwiZ2V0TmFtZSIsImNyZWF0ZURlc2NyaXB0aW9uIiwidW5kZWZpbmVkIiwibm9uTnVsbGFibGUiLCJfY29udGV4dCIsImFsbEVsZW1lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/references/scope-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/references/scope.js":
/*!******************************************************!*\
  !*** ./node_modules/langium/lib/references/scope.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMPTY_SCOPE: () => (/* binding */ EMPTY_SCOPE),\n/* harmony export */   MapScope: () => (/* binding */ MapScope),\n/* harmony export */   StreamScope: () => (/* binding */ StreamScope)\n/* harmony export */ });\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n/**\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\n * the next level of elements, which are queried when a target element is not found in the stream provided\n * to this scope.\n */ class StreamScope {\n    constructor(elements, outerScope, options){\n        var _a;\n        this.elements = elements;\n        this.outerScope = outerScope;\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n    }\n    getAllElements() {\n        if (this.outerScope) {\n            return this.elements.concat(this.outerScope.getAllElements());\n        } else {\n            return this.elements;\n        }\n    }\n    getElement(name) {\n        const local = this.caseInsensitive ? this.elements.find((e)=>e.name.toLowerCase() === name.toLowerCase()) : this.elements.find((e)=>e.name === name);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n}\nclass MapScope {\n    constructor(elements, outerScope, options){\n        var _a;\n        this.elements = new Map();\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n        for (const element of elements){\n            const name = this.caseInsensitive ? element.name.toLowerCase() : element.name;\n            this.elements.set(name, element);\n        }\n        this.outerScope = outerScope;\n    }\n    getElement(name) {\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\n        const local = this.elements.get(localName);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n    getAllElements() {\n        let elementStream = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.elements.values());\n        if (this.outerScope) {\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\n        }\n        return elementStream;\n    }\n}\nconst EMPTY_SCOPE = {\n    getElement () {\n        return undefined;\n    },\n    getAllElements () {\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STREAM;\n    }\n}; //# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcmVmZXJlbmNlcy9zY29wZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OEVBSThFLEdBQ3BCO0FBQzFEOzs7O0NBSUMsR0FDTSxNQUFNRTtJQUNUQyxZQUFZQyxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxDQUFFO1FBQ3ZDLElBQUlDO1FBQ0osSUFBSSxDQUFDSCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNHLGVBQWUsR0FBRyxDQUFDRCxLQUFLRCxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUUUsZUFBZSxNQUFNLFFBQVFELE9BQU8sS0FBSyxJQUFJQSxLQUFLO0lBQzdJO0lBQ0FFLGlCQUFpQjtRQUNiLElBQUksSUFBSSxDQUFDSixVQUFVLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUNELFFBQVEsQ0FBQ00sTUFBTSxDQUFDLElBQUksQ0FBQ0wsVUFBVSxDQUFDSSxjQUFjO1FBQzlELE9BQ0s7WUFDRCxPQUFPLElBQUksQ0FBQ0wsUUFBUTtRQUN4QjtJQUNKO0lBQ0FPLFdBQVdDLElBQUksRUFBRTtRQUNiLE1BQU1DLFFBQVEsSUFBSSxDQUFDTCxlQUFlLEdBQzVCLElBQUksQ0FBQ0osUUFBUSxDQUFDVSxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUVILElBQUksQ0FBQ0ksV0FBVyxPQUFPSixLQUFLSSxXQUFXLE1BQ2pFLElBQUksQ0FBQ1osUUFBUSxDQUFDVSxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUVILElBQUksS0FBS0E7UUFDekMsSUFBSUMsT0FBTztZQUNQLE9BQU9BO1FBQ1g7UUFDQSxJQUFJLElBQUksQ0FBQ1IsVUFBVSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDQSxVQUFVLENBQUNNLFVBQVUsQ0FBQ0M7UUFDdEM7UUFDQSxPQUFPSztJQUNYO0FBQ0o7QUFDTyxNQUFNQztJQUNUZixZQUFZQyxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxDQUFFO1FBQ3ZDLElBQUlDO1FBQ0osSUFBSSxDQUFDSCxRQUFRLEdBQUcsSUFBSWU7UUFDcEIsSUFBSSxDQUFDWCxlQUFlLEdBQUcsQ0FBQ0QsS0FBS0QsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFFLGVBQWUsTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSUEsS0FBSztRQUN6SSxLQUFLLE1BQU1hLFdBQVdoQixTQUFVO1lBQzVCLE1BQU1RLE9BQU8sSUFBSSxDQUFDSixlQUFlLEdBQzNCWSxRQUFRUixJQUFJLENBQUNJLFdBQVcsS0FDeEJJLFFBQVFSLElBQUk7WUFDbEIsSUFBSSxDQUFDUixRQUFRLENBQUNpQixHQUFHLENBQUNULE1BQU1RO1FBQzVCO1FBQ0EsSUFBSSxDQUFDZixVQUFVLEdBQUdBO0lBQ3RCO0lBQ0FNLFdBQVdDLElBQUksRUFBRTtRQUNiLE1BQU1VLFlBQVksSUFBSSxDQUFDZCxlQUFlLEdBQUdJLEtBQUtJLFdBQVcsS0FBS0o7UUFDOUQsTUFBTUMsUUFBUSxJQUFJLENBQUNULFFBQVEsQ0FBQ21CLEdBQUcsQ0FBQ0Q7UUFDaEMsSUFBSVQsT0FBTztZQUNQLE9BQU9BO1FBQ1g7UUFDQSxJQUFJLElBQUksQ0FBQ1IsVUFBVSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDQSxVQUFVLENBQUNNLFVBQVUsQ0FBQ0M7UUFDdEM7UUFDQSxPQUFPSztJQUNYO0lBQ0FSLGlCQUFpQjtRQUNiLElBQUllLGdCQUFnQnZCLHdEQUFNQSxDQUFDLElBQUksQ0FBQ0csUUFBUSxDQUFDcUIsTUFBTTtRQUMvQyxJQUFJLElBQUksQ0FBQ3BCLFVBQVUsRUFBRTtZQUNqQm1CLGdCQUFnQkEsY0FBY2QsTUFBTSxDQUFDLElBQUksQ0FBQ0wsVUFBVSxDQUFDSSxjQUFjO1FBQ3ZFO1FBQ0EsT0FBT2U7SUFDWDtBQUNKO0FBQ08sTUFBTUUsY0FBYztJQUN2QmY7UUFDSSxPQUFPTTtJQUNYO0lBQ0FSO1FBQ0ksT0FBT1QsMERBQVlBO0lBQ3ZCO0FBQ0osRUFBRSxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUuanM/MTkwYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMyBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBFTVBUWV9TVFJFQU0sIHN0cmVhbSB9IGZyb20gJy4uL3V0aWxzL3N0cmVhbS5qcyc7XG4vKipcbiAqIFRoZSBkZWZhdWx0IHNjb3BlIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIGEgYFN0cmVhbWAuIEl0IGhhcyBhbiBvcHRpb25hbCBfb3V0ZXIgc2NvcGVfIGRlc2NyaWJpbmdcbiAqIHRoZSBuZXh0IGxldmVsIG9mIGVsZW1lbnRzLCB3aGljaCBhcmUgcXVlcmllZCB3aGVuIGEgdGFyZ2V0IGVsZW1lbnQgaXMgbm90IGZvdW5kIGluIHRoZSBzdHJlYW0gcHJvdmlkZWRcbiAqIHRvIHRoaXMgc2NvcGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJlYW1TY29wZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudHMsIG91dGVyU2NvcGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgICAgIHRoaXMub3V0ZXJTY29wZSA9IG91dGVyU2NvcGU7XG4gICAgICAgIHRoaXMuY2FzZUluc2Vuc2l0aXZlID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhc2VJbnNlbnNpdGl2ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgfVxuICAgIGdldEFsbEVsZW1lbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5vdXRlclNjb3BlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5jb25jYXQodGhpcy5vdXRlclNjb3BlLmdldEFsbEVsZW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0RWxlbWVudChuYW1lKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsID0gdGhpcy5jYXNlSW5zZW5zaXRpdmVcbiAgICAgICAgICAgID8gdGhpcy5lbGVtZW50cy5maW5kKGUgPT4gZS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgIDogdGhpcy5lbGVtZW50cy5maW5kKGUgPT4gZS5uYW1lID09PSBuYW1lKTtcbiAgICAgICAgaWYgKGxvY2FsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3V0ZXJTY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3V0ZXJTY29wZS5nZXRFbGVtZW50KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1hcFNjb3BlIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50cywgb3V0ZXJTY29wZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY2FzZUluc2Vuc2l0aXZlID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhc2VJbnNlbnNpdGl2ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuY2FzZUluc2Vuc2l0aXZlXG4gICAgICAgICAgICAgICAgPyBlbGVtZW50Lm5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIDogZWxlbWVudC5uYW1lO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5zZXQobmFtZSwgZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdXRlclNjb3BlID0gb3V0ZXJTY29wZTtcbiAgICB9XG4gICAgZ2V0RWxlbWVudChuYW1lKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsTmFtZSA9IHRoaXMuY2FzZUluc2Vuc2l0aXZlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDogbmFtZTtcbiAgICAgICAgY29uc3QgbG9jYWwgPSB0aGlzLmVsZW1lbnRzLmdldChsb2NhbE5hbWUpO1xuICAgICAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vdXRlclNjb3BlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vdXRlclNjb3BlLmdldEVsZW1lbnQobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0QWxsRWxlbWVudHMoKSB7XG4gICAgICAgIGxldCBlbGVtZW50U3RyZWFtID0gc3RyZWFtKHRoaXMuZWxlbWVudHMudmFsdWVzKCkpO1xuICAgICAgICBpZiAodGhpcy5vdXRlclNjb3BlKSB7XG4gICAgICAgICAgICBlbGVtZW50U3RyZWFtID0gZWxlbWVudFN0cmVhbS5jb25jYXQodGhpcy5vdXRlclNjb3BlLmdldEFsbEVsZW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50U3RyZWFtO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBFTVBUWV9TQ09QRSA9IHtcbiAgICBnZXRFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgZ2V0QWxsRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiBFTVBUWV9TVFJFQU07XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjb3BlLmpzLm1hcCJdLCJuYW1lcyI6WyJFTVBUWV9TVFJFQU0iLCJzdHJlYW0iLCJTdHJlYW1TY29wZSIsImNvbnN0cnVjdG9yIiwiZWxlbWVudHMiLCJvdXRlclNjb3BlIiwib3B0aW9ucyIsIl9hIiwiY2FzZUluc2Vuc2l0aXZlIiwiZ2V0QWxsRWxlbWVudHMiLCJjb25jYXQiLCJnZXRFbGVtZW50IiwibmFtZSIsImxvY2FsIiwiZmluZCIsImUiLCJ0b0xvd2VyQ2FzZSIsInVuZGVmaW5lZCIsIk1hcFNjb3BlIiwiTWFwIiwiZWxlbWVudCIsInNldCIsImxvY2FsTmFtZSIsImdldCIsImVsZW1lbnRTdHJlYW0iLCJ2YWx1ZXMiLCJFTVBUWV9TQ09QRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/references/scope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/serializer/hydrator.js":
/*!*********************************************************!*\
  !*** ./node_modules/langium/lib/serializer/hydrator.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultHydrator: () => (/* binding */ DefaultHydrator)\n/* harmony export */ });\n/* harmony import */ var _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser/cst-node-builder.js */ \"(ssr)/./node_modules/langium/lib/parser/cst-node-builder.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/./node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/./node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\n\nclass DefaultHydrator {\n    constructor(services){\n        this.grammarElementIdMap = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.BiMap();\n        this.tokenTypeIdMap = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.BiMap();\n        this.grammar = services.Grammar;\n        this.lexer = services.parser.Lexer;\n        this.linker = services.references.Linker;\n    }\n    dehydrate(result) {\n        return {\n            lexerErrors: result.lexerErrors,\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\n            // We need to create shallow copies of the errors\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\n            parserErrors: result.parserErrors.map((e)=>Object.assign(Object.assign({}, e), {\n                    message: e.message\n                })),\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\n        };\n    }\n    dehydrateLexerReport(lexerReport) {\n        // By default, lexer reports are serializable\n        return lexerReport;\n    }\n    createDehyrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(node)){\n            astNodes.set(astNode, {});\n        }\n        if (node.$cstNode) {\n            for (const cstNode of (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.streamCst)(node.$cstNode)){\n                cstNodes.set(cstNode, {});\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    dehydrateAstNode(node, context) {\n        const obj = context.astNodes.get(node);\n        obj.$type = node.$type;\n        obj.$containerIndex = node.$containerIndex;\n        obj.$containerProperty = node.$containerProperty;\n        if (node.$cstNode !== undefined) {\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\n        }\n        for (const [name, value] of Object.entries(node)){\n            if (name.startsWith(\"$\")) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                obj[name] = arr;\n                for (const item of value){\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(item)) {\n                        arr.push(this.dehydrateAstNode(item, context));\n                    } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(item)) {\n                        arr.push(this.dehydrateReference(item, context));\n                    } else {\n                        arr.push(item);\n                    }\n                }\n            } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(value)) {\n                obj[name] = this.dehydrateAstNode(value, context);\n            } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(value)) {\n                obj[name] = this.dehydrateReference(value, context);\n            } else if (value !== undefined) {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n    dehydrateReference(reference, context) {\n        const obj = {};\n        obj.$refText = reference.$refText;\n        if (reference.$refNode) {\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\n        }\n        return obj;\n    }\n    dehydrateCstNode(node, context) {\n        const cstNode = context.cstNodes.get(node);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isRootCstNode)(node)) {\n            cstNode.fullText = node.fullText;\n        } else {\n            // Note: This returns undefined for hidden nodes (i.e. comments)\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\n        }\n        cstNode.hidden = node.hidden;\n        cstNode.astNode = context.astNodes.get(node.astNode);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(node)) {\n            cstNode.content = node.content.map((child)=>this.dehydrateCstNode(child, context));\n        } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLeafCstNode)(node)) {\n            cstNode.tokenType = node.tokenType.name;\n            cstNode.offset = node.offset;\n            cstNode.length = node.length;\n            cstNode.startLine = node.range.start.line;\n            cstNode.startColumn = node.range.start.character;\n            cstNode.endLine = node.range.end.line;\n            cstNode.endColumn = node.range.end.character;\n        }\n        return cstNode;\n    }\n    hydrate(result) {\n        const node = result.value;\n        const context = this.createHydrationContext(node);\n        if (\"$cstNode\" in node) {\n            this.hydrateCstNode(node.$cstNode, context);\n        }\n        return {\n            lexerErrors: result.lexerErrors,\n            lexerReport: result.lexerReport,\n            parserErrors: result.parserErrors,\n            value: this.hydrateAstNode(node, context)\n        };\n    }\n    createHydrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(node)){\n            astNodes.set(astNode, {});\n        }\n        let root;\n        if (node.$cstNode) {\n            for (const cstNode of (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.streamCst)(node.$cstNode)){\n                let cst;\n                if (\"fullText\" in cstNode) {\n                    cst = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.RootCstNodeImpl(cstNode.fullText);\n                    root = cst;\n                } else if (\"content\" in cstNode) {\n                    cst = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.CompositeCstNodeImpl();\n                } else if (\"tokenType\" in cstNode) {\n                    cst = this.hydrateCstLeafNode(cstNode);\n                }\n                if (cst) {\n                    cstNodes.set(cstNode, cst);\n                    cst.root = root;\n                }\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    hydrateAstNode(node, context) {\n        const astNode = context.astNodes.get(node);\n        astNode.$type = node.$type;\n        astNode.$containerIndex = node.$containerIndex;\n        astNode.$containerProperty = node.$containerProperty;\n        if (node.$cstNode) {\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\n        }\n        for (const [name, value] of Object.entries(node)){\n            if (name.startsWith(\"$\")) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                astNode[name] = arr;\n                for (const item of value){\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(item)) {\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\n                    } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(item)) {\n                        arr.push(this.hydrateReference(item, astNode, name, context));\n                    } else {\n                        arr.push(item);\n                    }\n                }\n            } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(value)) {\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\n            } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(value)) {\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\n            } else if (value !== undefined) {\n                astNode[name] = value;\n            }\n        }\n        return astNode;\n    }\n    setParent(node, parent) {\n        node.$container = parent;\n        return node;\n    }\n    hydrateReference(reference, node, name, context) {\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode), reference.$refText);\n    }\n    hydrateCstNode(cstNode, context, num = 0) {\n        const cstNodeObj = context.cstNodes.get(cstNode);\n        if (typeof cstNode.grammarSource === \"number\") {\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\n        }\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(cstNodeObj)) {\n            for (const child of cstNode.content){\n                const hydrated = this.hydrateCstNode(child, context, num++);\n                cstNodeObj.content.push(hydrated);\n            }\n        }\n        return cstNodeObj;\n    }\n    hydrateCstLeafNode(cstNode) {\n        const tokenType = this.getTokenType(cstNode.tokenType);\n        const offset = cstNode.offset;\n        const length = cstNode.length;\n        const startLine = cstNode.startLine;\n        const startColumn = cstNode.startColumn;\n        const endLine = cstNode.endLine;\n        const endColumn = cstNode.endColumn;\n        const hidden = cstNode.hidden;\n        const node = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.LeafCstNodeImpl(offset, length, {\n            start: {\n                line: startLine,\n                character: startColumn\n            },\n            end: {\n                line: endLine,\n                character: endColumn\n            }\n        }, tokenType, hidden);\n        return node;\n    }\n    getTokenType(name) {\n        return this.lexer.definition[name];\n    }\n    getGrammarElementId(node) {\n        if (!node) {\n            return undefined;\n        }\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        return this.grammarElementIdMap.get(node);\n    }\n    getGrammarElement(id) {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        const element = this.grammarElementIdMap.getKey(id);\n        return element;\n    }\n    createGrammarElementIdMap() {\n        let id = 0;\n        for (const element of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(this.grammar)){\n            if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_5__.isAbstractElement)(element)) {\n                this.grammarElementIdMap.set(element, id++);\n            }\n        }\n    }\n} //# sourceMappingURL=hydrator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/serializer/hydrator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/serializer/json-serializer.js":
/*!****************************************************************!*\
  !*** ./node_modules/langium/lib/serializer/json-serializer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultJsonSerializer: () => (/* binding */ DefaultJsonSerializer),\n/* harmony export */   isAstNodeWithComment: () => (/* binding */ isAstNodeWithComment)\n/* harmony export */ });\n/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ \"(ssr)/./node_modules/vscode-uri/lib/esm/index.mjs\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\nfunction isAstNodeWithComment(node) {\n    return typeof node.$comment === \"string\";\n}\nfunction isIntermediateReference(obj) {\n    return typeof obj === \"object\" && !!obj && (\"$ref\" in obj || \"$error\" in obj);\n}\nclass DefaultJsonSerializer {\n    constructor(services){\n        /** The set of AstNode properties to be ignored by the serializer. */ this.ignoreProperties = new Set([\n            \"$container\",\n            \"$containerProperty\",\n            \"$containerIndex\",\n            \"$document\",\n            \"$cstNode\"\n        ]);\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    serialize(node, options) {\n        const serializeOptions = options !== null && options !== void 0 ? options : {};\n        const specificReplacer = options === null || options === void 0 ? void 0 : options.replacer;\n        const defaultReplacer = (key, value)=>this.replacer(key, value, serializeOptions);\n        const replacer = specificReplacer ? (key, value)=>specificReplacer(key, value, defaultReplacer) : defaultReplacer;\n        try {\n            this.currentDocument = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(node);\n            return JSON.stringify(node, replacer, options === null || options === void 0 ? void 0 : options.space);\n        } finally{\n            this.currentDocument = undefined;\n        }\n    }\n    deserialize(content, options) {\n        const deserializeOptions = options !== null && options !== void 0 ? options : {};\n        const root = JSON.parse(content);\n        this.linkNode(root, root, deserializeOptions);\n        return root;\n    }\n    replacer(key, value, { refText, sourceText, textRegions, comments, uriConverter }) {\n        var _a, _b, _c, _d;\n        if (this.ignoreProperties.has(key)) {\n            return undefined;\n        } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(value)) {\n            const refValue = value.ref;\n            const $refText = refText ? value.$refText : undefined;\n            if (refValue) {\n                const targetDocument = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(refValue);\n                let targetUri = \"\";\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\n                    if (uriConverter) {\n                        targetUri = uriConverter(targetDocument.uri, value);\n                    } else {\n                        targetUri = targetDocument.uri.toString();\n                    }\n                }\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\n                return {\n                    $ref: `${targetUri}#${targetPath}`,\n                    $refText\n                };\n            } else {\n                return {\n                    $error: (_b = (_a = value.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : \"Could not resolve reference\",\n                    $refText\n                };\n            }\n        } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(value)) {\n            let astNode = undefined;\n            if (textRegions) {\n                astNode = this.addAstNodeRegionWithAssignmentsTo(Object.assign({}, value));\n                if ((!key || value.$document) && (astNode === null || astNode === void 0 ? void 0 : astNode.$textRegion)) {\n                    // The document URI is added to the root node of the resulting JSON tree\n                    astNode.$textRegion.documentURI = (_c = this.currentDocument) === null || _c === void 0 ? void 0 : _c.uri.toString();\n                }\n            }\n            if (sourceText && !key) {\n                astNode !== null && astNode !== void 0 ? astNode : astNode = Object.assign({}, value);\n                astNode.$sourceText = (_d = value.$cstNode) === null || _d === void 0 ? void 0 : _d.text;\n            }\n            if (comments) {\n                astNode !== null && astNode !== void 0 ? astNode : astNode = Object.assign({}, value);\n                const comment = this.commentProvider.getComment(value);\n                if (comment) {\n                    astNode.$comment = comment.replace(/\\r/g, \"\");\n                }\n            }\n            return astNode !== null && astNode !== void 0 ? astNode : value;\n        } else {\n            return value;\n        }\n    }\n    addAstNodeRegionWithAssignmentsTo(node) {\n        const createDocumentSegment = (cstNode)=>({\n                offset: cstNode.offset,\n                end: cstNode.end,\n                length: cstNode.length,\n                range: cstNode.range\n            });\n        if (node.$cstNode) {\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\n            const assignments = textRegion.assignments = {};\n            Object.keys(node).filter((key)=>!key.startsWith(\"$\")).forEach((key)=>{\n                const propertyAssignments = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.findNodesForProperty)(node.$cstNode, key).map(createDocumentSegment);\n                if (propertyAssignments.length !== 0) {\n                    assignments[key] = propertyAssignments;\n                }\n            });\n            return node;\n        }\n        return undefined;\n    }\n    linkNode(node, root, options, container, containerProperty, containerIndex) {\n        for (const [propertyName, item] of Object.entries(node)){\n            if (Array.isArray(item)) {\n                for(let index = 0; index < item.length; index++){\n                    const element = item[index];\n                    if (isIntermediateReference(element)) {\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\n                    } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(element)) {\n                        this.linkNode(element, root, options, node, propertyName, index);\n                    }\n                }\n            } else if (isIntermediateReference(item)) {\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\n            } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(item)) {\n                this.linkNode(item, root, options, node, propertyName);\n            }\n        }\n        const mutable = node;\n        mutable.$container = container;\n        mutable.$containerProperty = containerProperty;\n        mutable.$containerIndex = containerIndex;\n    }\n    reviveReference(container, property, root, reference, options) {\n        let refText = reference.$refText;\n        let error = reference.$error;\n        if (reference.$ref) {\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(ref)) {\n                if (!refText) {\n                    refText = this.nameProvider.getName(ref);\n                }\n                return {\n                    $refText: refText !== null && refText !== void 0 ? refText : \"\",\n                    ref\n                };\n            } else {\n                error = ref;\n            }\n        }\n        if (error) {\n            const ref = {\n                $refText: refText !== null && refText !== void 0 ? refText : \"\"\n            };\n            ref.error = {\n                container,\n                property,\n                message: error,\n                reference: ref\n            };\n            return ref;\n        } else {\n            return undefined;\n        }\n    }\n    getRefNode(root, uri, uriConverter) {\n        try {\n            const fragmentIndex = uri.indexOf(\"#\");\n            if (fragmentIndex === 0) {\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\n                if (!node) {\n                    return \"Could not resolve path: \" + uri;\n                }\n                return node;\n            }\n            if (fragmentIndex < 0) {\n                const documentUri = uriConverter ? uriConverter(uri) : vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(uri);\n                const document = this.langiumDocuments.getDocument(documentUri);\n                if (!document) {\n                    return \"Could not find document for URI: \" + uri;\n                }\n                return document.parseResult.value;\n            }\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(uri.substring(0, fragmentIndex));\n            const document = this.langiumDocuments.getDocument(documentUri);\n            if (!document) {\n                return \"Could not find document for URI: \" + uri;\n            }\n            if (fragmentIndex === uri.length - 1) {\n                return document.parseResult.value;\n            }\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\n            if (!node) {\n                return \"Could not resolve URI: \" + uri;\n            }\n            return node;\n        } catch (err) {\n            return String(err);\n        }\n    }\n} //# sourceMappingURL=json-serializer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/serializer/json-serializer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/service-registry.js":
/*!******************************************************!*\
  !*** ./node_modules/langium/lib/service-registry.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultServiceRegistry: () => (/* binding */ DefaultServiceRegistry)\n/* harmony export */ });\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/uri-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n/**\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\n */ class DefaultServiceRegistry {\n    /**\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\n     */ get map() {\n        return this.fileExtensionMap;\n    }\n    constructor(services){\n        this.languageIdMap = new Map();\n        this.fileExtensionMap = new Map();\n        this.textDocuments = services === null || services === void 0 ? void 0 : services.workspace.TextDocuments;\n    }\n    register(language) {\n        const data = language.LanguageMetaData;\n        for (const ext of data.fileExtensions){\n            if (this.fileExtensionMap.has(ext)) {\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\n            }\n            this.fileExtensionMap.set(ext, language);\n        }\n        this.languageIdMap.set(data.languageId, language);\n        if (this.languageIdMap.size === 1) {\n            this.singleton = language;\n        } else {\n            this.singleton = undefined;\n        }\n    }\n    getServices(uri) {\n        var _a, _b;\n        if (this.singleton !== undefined) {\n            return this.singleton;\n        }\n        if (this.languageIdMap.size === 0) {\n            throw new Error(\"The service registry is empty. Use `register` to register the services of a language.\");\n        }\n        const languageId = (_b = (_a = this.textDocuments) === null || _a === void 0 ? void 0 : _a.get(uri)) === null || _b === void 0 ? void 0 : _b.languageId;\n        if (languageId !== undefined) {\n            const services = this.languageIdMap.get(languageId);\n            if (services) {\n                return services;\n            }\n        }\n        const ext = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_0__.UriUtils.extname(uri);\n        const services = this.fileExtensionMap.get(ext);\n        if (!services) {\n            if (languageId) {\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\n            } else {\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\n            }\n        }\n        return services;\n    }\n    hasServices(uri) {\n        try {\n            this.getServices(uri);\n            return true;\n        } catch (_a) {\n            return false;\n        }\n    }\n    get all() {\n        return Array.from(this.languageIdMap.values());\n    }\n} //# sourceMappingURL=service-registry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvc2VydmljZS1yZWdpc3RyeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OzhFQUk4RSxHQUM5QjtBQUNoRDs7Q0FFQyxHQUNNLE1BQU1DO0lBQ1Q7O0tBRUMsR0FDRCxJQUFJQyxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUNDLGdCQUFnQjtJQUNoQztJQUNBQyxZQUFZQyxRQUFRLENBQUU7UUFDbEIsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSUM7UUFDekIsSUFBSSxDQUFDSixnQkFBZ0IsR0FBRyxJQUFJSTtRQUM1QixJQUFJLENBQUNDLGFBQWEsR0FBR0gsYUFBYSxRQUFRQSxhQUFhLEtBQUssSUFBSSxLQUFLLElBQUlBLFNBQVNJLFNBQVMsQ0FBQ0MsYUFBYTtJQUM3RztJQUNBQyxTQUFTQyxRQUFRLEVBQUU7UUFDZixNQUFNQyxPQUFPRCxTQUFTRSxnQkFBZ0I7UUFDdEMsS0FBSyxNQUFNQyxPQUFPRixLQUFLRyxjQUFjLENBQUU7WUFDbkMsSUFBSSxJQUFJLENBQUNiLGdCQUFnQixDQUFDYyxHQUFHLENBQUNGLE1BQU07Z0JBQ2hDRyxRQUFRQyxJQUFJLENBQUMsQ0FBQyxtQkFBbUIsRUFBRUosSUFBSSx1REFBdUQsRUFBRUYsS0FBS08sVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUN2SDtZQUNBLElBQUksQ0FBQ2pCLGdCQUFnQixDQUFDa0IsR0FBRyxDQUFDTixLQUFLSDtRQUNuQztRQUNBLElBQUksQ0FBQ04sYUFBYSxDQUFDZSxHQUFHLENBQUNSLEtBQUtPLFVBQVUsRUFBRVI7UUFDeEMsSUFBSSxJQUFJLENBQUNOLGFBQWEsQ0FBQ2dCLElBQUksS0FBSyxHQUFHO1lBQy9CLElBQUksQ0FBQ0MsU0FBUyxHQUFHWDtRQUNyQixPQUNLO1lBQ0QsSUFBSSxDQUFDVyxTQUFTLEdBQUdDO1FBQ3JCO0lBQ0o7SUFDQUMsWUFBWUMsR0FBRyxFQUFFO1FBQ2IsSUFBSUMsSUFBSUM7UUFDUixJQUFJLElBQUksQ0FBQ0wsU0FBUyxLQUFLQyxXQUFXO1lBQzlCLE9BQU8sSUFBSSxDQUFDRCxTQUFTO1FBQ3pCO1FBQ0EsSUFBSSxJQUFJLENBQUNqQixhQUFhLENBQUNnQixJQUFJLEtBQUssR0FBRztZQUMvQixNQUFNLElBQUlPLE1BQU07UUFDcEI7UUFDQSxNQUFNVCxhQUFhLENBQUNRLEtBQUssQ0FBQ0QsS0FBSyxJQUFJLENBQUNuQixhQUFhLE1BQU0sUUFBUW1CLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0csR0FBRyxDQUFDSixJQUFHLE1BQU8sUUFBUUUsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHUixVQUFVO1FBQ3ZKLElBQUlBLGVBQWVJLFdBQVc7WUFDMUIsTUFBTW5CLFdBQVcsSUFBSSxDQUFDQyxhQUFhLENBQUN3QixHQUFHLENBQUNWO1lBQ3hDLElBQUlmLFVBQVU7Z0JBQ1YsT0FBT0E7WUFDWDtRQUNKO1FBQ0EsTUFBTVUsTUFBTWYseURBQVFBLENBQUMrQixPQUFPLENBQUNMO1FBQzdCLE1BQU1yQixXQUFXLElBQUksQ0FBQ0YsZ0JBQWdCLENBQUMyQixHQUFHLENBQUNmO1FBQzNDLElBQUksQ0FBQ1YsVUFBVTtZQUNYLElBQUllLFlBQVk7Z0JBQ1osTUFBTSxJQUFJUyxNQUFNLENBQUMsNkRBQTZELEVBQUVkLElBQUksZ0JBQWdCLEVBQUVLLFdBQVcsRUFBRSxDQUFDO1lBQ3hILE9BQ0s7Z0JBQ0QsTUFBTSxJQUFJUyxNQUFNLENBQUMsNkRBQTZELEVBQUVkLElBQUksRUFBRSxDQUFDO1lBQzNGO1FBQ0o7UUFDQSxPQUFPVjtJQUNYO0lBQ0EyQixZQUFZTixHQUFHLEVBQUU7UUFDYixJQUFJO1lBQ0EsSUFBSSxDQUFDRCxXQUFXLENBQUNDO1lBQ2pCLE9BQU87UUFDWCxFQUNBLE9BQU9DLElBQUk7WUFDUCxPQUFPO1FBQ1g7SUFDSjtJQUNBLElBQUlNLE1BQU07UUFDTixPQUFPQyxNQUFNQyxJQUFJLENBQUMsSUFBSSxDQUFDN0IsYUFBYSxDQUFDOEIsTUFBTTtJQUMvQztBQUNKLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvc2VydmljZS1yZWdpc3RyeS5qcz83Njk0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IFVyaVV0aWxzIH0gZnJvbSAnLi91dGlscy91cmktdXRpbHMuanMnO1xuLyoqXG4gKiBHZW5lcmljIHJlZ2lzdHJ5IGZvciBMYW5naXVtIHNlcnZpY2VzLCBidXQgY2FwYWJsZSBvZiBiZWluZyB1c2VkIHdpdGggZXh0ZW5kaW5nIHNlcnZpY2Ugc2V0cyBhcyB3ZWxsIChzdWNoIGFzIHRoZSBsc3AtY29tcGxldGUgTGFuZ2l1bUNvcmVTZXJ2aWNlcyBzZXQpXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0U2VydmljZVJlZ2lzdHJ5IHtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIG5ldyBgZmlsZUV4dGVuc2lvbk1hcGAgKG9yIGBsYW5ndWFnZUlkTWFwYCkgcHJvcGVydHkgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXQgbWFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWxlRXh0ZW5zaW9uTWFwO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlcykge1xuICAgICAgICB0aGlzLmxhbmd1YWdlSWRNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuZmlsZUV4dGVuc2lvbk1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy50ZXh0RG9jdW1lbnRzID0gc2VydmljZXMgPT09IG51bGwgfHwgc2VydmljZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlcnZpY2VzLndvcmtzcGFjZS5UZXh0RG9jdW1lbnRzO1xuICAgIH1cbiAgICByZWdpc3RlcihsYW5ndWFnZSkge1xuICAgICAgICBjb25zdCBkYXRhID0gbGFuZ3VhZ2UuTGFuZ3VhZ2VNZXRhRGF0YTtcbiAgICAgICAgZm9yIChjb25zdCBleHQgb2YgZGF0YS5maWxlRXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZmlsZUV4dGVuc2lvbk1hcC5oYXMoZXh0KSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVGhlIGZpbGUgZXh0ZW5zaW9uICR7ZXh0fSBpcyB1c2VkIGJ5IG11bHRpcGxlIGxhbmd1YWdlcy4gSXQgaXMgbm93IGFzc2lnbmVkIHRvICcke2RhdGEubGFuZ3VhZ2VJZH0nLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5maWxlRXh0ZW5zaW9uTWFwLnNldChleHQsIGxhbmd1YWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhbmd1YWdlSWRNYXAuc2V0KGRhdGEubGFuZ3VhZ2VJZCwgbGFuZ3VhZ2UpO1xuICAgICAgICBpZiAodGhpcy5sYW5ndWFnZUlkTWFwLnNpemUgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc2luZ2xldG9uID0gbGFuZ3VhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNpbmdsZXRvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTZXJ2aWNlcyh1cmkpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHRoaXMuc2luZ2xldG9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpbmdsZXRvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYW5ndWFnZUlkTWFwLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNlcnZpY2UgcmVnaXN0cnkgaXMgZW1wdHkuIFVzZSBgcmVnaXN0ZXJgIHRvIHJlZ2lzdGVyIHRoZSBzZXJ2aWNlcyBvZiBhIGxhbmd1YWdlLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhbmd1YWdlSWQgPSAoX2IgPSAoX2EgPSB0aGlzLnRleHREb2N1bWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXQodXJpKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxhbmd1YWdlSWQ7XG4gICAgICAgIGlmIChsYW5ndWFnZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VzID0gdGhpcy5sYW5ndWFnZUlkTWFwLmdldChsYW5ndWFnZUlkKTtcbiAgICAgICAgICAgIGlmIChzZXJ2aWNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleHQgPSBVcmlVdGlscy5leHRuYW1lKHVyaSk7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gdGhpcy5maWxlRXh0ZW5zaW9uTWFwLmdldChleHQpO1xuICAgICAgICBpZiAoIXNlcnZpY2VzKSB7XG4gICAgICAgICAgICBpZiAobGFuZ3VhZ2VJZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHNlcnZpY2UgcmVnaXN0cnkgY29udGFpbnMgbm8gc2VydmljZXMgZm9yIHRoZSBleHRlbnNpb24gJyR7ZXh0fScgZm9yIGxhbmd1YWdlICcke2xhbmd1YWdlSWR9Jy5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHNlcnZpY2UgcmVnaXN0cnkgY29udGFpbnMgbm8gc2VydmljZXMgZm9yIHRoZSBleHRlbnNpb24gJyR7ZXh0fScuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcnZpY2VzO1xuICAgIH1cbiAgICBoYXNTZXJ2aWNlcyh1cmkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZ2V0U2VydmljZXModXJpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhbGwoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubGFuZ3VhZ2VJZE1hcC52YWx1ZXMoKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmljZS1yZWdpc3RyeS5qcy5tYXAiXSwibmFtZXMiOlsiVXJpVXRpbHMiLCJEZWZhdWx0U2VydmljZVJlZ2lzdHJ5IiwibWFwIiwiZmlsZUV4dGVuc2lvbk1hcCIsImNvbnN0cnVjdG9yIiwic2VydmljZXMiLCJsYW5ndWFnZUlkTWFwIiwiTWFwIiwidGV4dERvY3VtZW50cyIsIndvcmtzcGFjZSIsIlRleHREb2N1bWVudHMiLCJyZWdpc3RlciIsImxhbmd1YWdlIiwiZGF0YSIsIkxhbmd1YWdlTWV0YURhdGEiLCJleHQiLCJmaWxlRXh0ZW5zaW9ucyIsImhhcyIsImNvbnNvbGUiLCJ3YXJuIiwibGFuZ3VhZ2VJZCIsInNldCIsInNpemUiLCJzaW5nbGV0b24iLCJ1bmRlZmluZWQiLCJnZXRTZXJ2aWNlcyIsInVyaSIsIl9hIiwiX2IiLCJFcnJvciIsImdldCIsImV4dG5hbWUiLCJoYXNTZXJ2aWNlcyIsImFsbCIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/service-registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/syntax-tree.js":
/*!*************************************************!*\
  !*** ./node_modules/langium/lib/syntax-tree.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractAstReflection: () => (/* binding */ AbstractAstReflection),\n/* harmony export */   isAstNode: () => (/* binding */ isAstNode),\n/* harmony export */   isAstNodeDescription: () => (/* binding */ isAstNodeDescription),\n/* harmony export */   isCompositeCstNode: () => (/* binding */ isCompositeCstNode),\n/* harmony export */   isLeafCstNode: () => (/* binding */ isLeafCstNode),\n/* harmony export */   isLinkingError: () => (/* binding */ isLinkingError),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   isRootCstNode: () => (/* binding */ isRootCstNode)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ function isAstNode(obj) {\n    return typeof obj === \"object\" && obj !== null && typeof obj.$type === \"string\";\n}\nfunction isReference(obj) {\n    return typeof obj === \"object\" && obj !== null && typeof obj.$refText === \"string\";\n}\nfunction isAstNodeDescription(obj) {\n    return typeof obj === \"object\" && obj !== null && typeof obj.name === \"string\" && typeof obj.type === \"string\" && typeof obj.path === \"string\";\n}\nfunction isLinkingError(obj) {\n    return typeof obj === \"object\" && obj !== null && isAstNode(obj.container) && isReference(obj.reference) && typeof obj.message === \"string\";\n}\n/**\n * An abstract implementation of the {@link AstReflection} interface.\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\n */ class AbstractAstReflection {\n    constructor(){\n        this.subtypes = {};\n        this.allSubtypes = {};\n    }\n    isInstance(node, type) {\n        return isAstNode(node) && this.isSubtype(node.$type, type);\n    }\n    isSubtype(subtype, supertype) {\n        if (subtype === supertype) {\n            return true;\n        }\n        let nested = this.subtypes[subtype];\n        if (!nested) {\n            nested = this.subtypes[subtype] = {};\n        }\n        const existing = nested[supertype];\n        if (existing !== undefined) {\n            return existing;\n        } else {\n            const result = this.computeIsSubtype(subtype, supertype);\n            nested[supertype] = result;\n            return result;\n        }\n    }\n    getAllSubTypes(type) {\n        const existing = this.allSubtypes[type];\n        if (existing) {\n            return existing;\n        } else {\n            const allTypes = this.getAllTypes();\n            const types = [];\n            for (const possibleSubType of allTypes){\n                if (this.isSubtype(possibleSubType, type)) {\n                    types.push(possibleSubType);\n                }\n            }\n            this.allSubtypes[type] = types;\n            return types;\n        }\n    }\n}\nfunction isCompositeCstNode(node) {\n    return typeof node === \"object\" && node !== null && Array.isArray(node.content);\n}\nfunction isLeafCstNode(node) {\n    return typeof node === \"object\" && node !== null && typeof node.tokenType === \"object\";\n}\nfunction isRootCstNode(node) {\n    return isCompositeCstNode(node) && typeof node.fullText === \"string\";\n} //# sourceMappingURL=syntax-tree.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvc3ludGF4LXRyZWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7Ozs4RUFJOEUsR0FDdkUsU0FBU0EsVUFBVUMsR0FBRztJQUN6QixPQUFPLE9BQU9BLFFBQVEsWUFBWUEsUUFBUSxRQUFRLE9BQU9BLElBQUlDLEtBQUssS0FBSztBQUMzRTtBQUNPLFNBQVNDLFlBQVlGLEdBQUc7SUFDM0IsT0FBTyxPQUFPQSxRQUFRLFlBQVlBLFFBQVEsUUFBUSxPQUFPQSxJQUFJRyxRQUFRLEtBQUs7QUFDOUU7QUFDTyxTQUFTQyxxQkFBcUJKLEdBQUc7SUFDcEMsT0FBTyxPQUFPQSxRQUFRLFlBQVlBLFFBQVEsUUFDbkMsT0FBT0EsSUFBSUssSUFBSSxLQUFLLFlBQ3BCLE9BQU9MLElBQUlNLElBQUksS0FBSyxZQUNwQixPQUFPTixJQUFJTyxJQUFJLEtBQUs7QUFDL0I7QUFDTyxTQUFTQyxlQUFlUixHQUFHO0lBQzlCLE9BQU8sT0FBT0EsUUFBUSxZQUFZQSxRQUFRLFFBQ25DRCxVQUFVQyxJQUFJUyxTQUFTLEtBQ3ZCUCxZQUFZRixJQUFJVSxTQUFTLEtBQ3pCLE9BQU9WLElBQUlXLE9BQU8sS0FBSztBQUNsQztBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DO0lBQ1RDLGFBQWM7UUFDVixJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLENBQUM7SUFDeEI7SUFDQUMsV0FBV0MsSUFBSSxFQUFFWCxJQUFJLEVBQUU7UUFDbkIsT0FBT1AsVUFBVWtCLFNBQVMsSUFBSSxDQUFDQyxTQUFTLENBQUNELEtBQUtoQixLQUFLLEVBQUVLO0lBQ3pEO0lBQ0FZLFVBQVVDLE9BQU8sRUFBRUMsU0FBUyxFQUFFO1FBQzFCLElBQUlELFlBQVlDLFdBQVc7WUFDdkIsT0FBTztRQUNYO1FBQ0EsSUFBSUMsU0FBUyxJQUFJLENBQUNQLFFBQVEsQ0FBQ0ssUUFBUTtRQUNuQyxJQUFJLENBQUNFLFFBQVE7WUFDVEEsU0FBUyxJQUFJLENBQUNQLFFBQVEsQ0FBQ0ssUUFBUSxHQUFHLENBQUM7UUFDdkM7UUFDQSxNQUFNRyxXQUFXRCxNQUFNLENBQUNELFVBQVU7UUFDbEMsSUFBSUUsYUFBYUMsV0FBVztZQUN4QixPQUFPRDtRQUNYLE9BQ0s7WUFDRCxNQUFNRSxTQUFTLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNOLFNBQVNDO1lBQzlDQyxNQUFNLENBQUNELFVBQVUsR0FBR0k7WUFDcEIsT0FBT0E7UUFDWDtJQUNKO0lBQ0FFLGVBQWVwQixJQUFJLEVBQUU7UUFDakIsTUFBTWdCLFdBQVcsSUFBSSxDQUFDUCxXQUFXLENBQUNULEtBQUs7UUFDdkMsSUFBSWdCLFVBQVU7WUFDVixPQUFPQTtRQUNYLE9BQ0s7WUFDRCxNQUFNSyxXQUFXLElBQUksQ0FBQ0MsV0FBVztZQUNqQyxNQUFNQyxRQUFRLEVBQUU7WUFDaEIsS0FBSyxNQUFNQyxtQkFBbUJILFNBQVU7Z0JBQ3BDLElBQUksSUFBSSxDQUFDVCxTQUFTLENBQUNZLGlCQUFpQnhCLE9BQU87b0JBQ3ZDdUIsTUFBTUUsSUFBSSxDQUFDRDtnQkFDZjtZQUNKO1lBQ0EsSUFBSSxDQUFDZixXQUFXLENBQUNULEtBQUssR0FBR3VCO1lBQ3pCLE9BQU9BO1FBQ1g7SUFDSjtBQUNKO0FBQ08sU0FBU0csbUJBQW1CZixJQUFJO0lBQ25DLE9BQU8sT0FBT0EsU0FBUyxZQUFZQSxTQUFTLFFBQVFnQixNQUFNQyxPQUFPLENBQUNqQixLQUFLa0IsT0FBTztBQUNsRjtBQUNPLFNBQVNDLGNBQWNuQixJQUFJO0lBQzlCLE9BQU8sT0FBT0EsU0FBUyxZQUFZQSxTQUFTLFFBQVEsT0FBT0EsS0FBS29CLFNBQVMsS0FBSztBQUNsRjtBQUNPLFNBQVNDLGNBQWNyQixJQUFJO0lBQzlCLE9BQU9lLG1CQUFtQmYsU0FBUyxPQUFPQSxLQUFLc0IsUUFBUSxLQUFLO0FBQ2hFLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvc3ludGF4LXRyZWUuanM/NjEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgZnVuY3Rpb24gaXNBc3ROb2RlKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iai4kdHlwZSA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWZlcmVuY2Uob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqLiRyZWZUZXh0ID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FzdE5vZGVEZXNjcmlwdGlvbihvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsXG4gICAgICAgICYmIHR5cGVvZiBvYmoubmFtZSA9PT0gJ3N0cmluZydcbiAgICAgICAgJiYgdHlwZW9mIG9iai50eXBlID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiB0eXBlb2Ygb2JqLnBhdGggPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlua2luZ0Vycm9yKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGxcbiAgICAgICAgJiYgaXNBc3ROb2RlKG9iai5jb250YWluZXIpXG4gICAgICAgICYmIGlzUmVmZXJlbmNlKG9iai5yZWZlcmVuY2UpXG4gICAgICAgICYmIHR5cGVvZiBvYmoubWVzc2FnZSA9PT0gJ3N0cmluZyc7XG59XG4vKipcbiAqIEFuIGFic3RyYWN0IGltcGxlbWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgQXN0UmVmbGVjdGlvbn0gaW50ZXJmYWNlLlxuICogU2VydmVzIHRvIGNhY2hlIHN1YnR5cGUgY29tcHV0YXRpb24gcmVzdWx0cyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlIHRocm91Z2hvdXQgZGlmZmVyZW50IHBhcnRzIG9mIExhbmdpdW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBBYnN0cmFjdEFzdFJlZmxlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN1YnR5cGVzID0ge307XG4gICAgICAgIHRoaXMuYWxsU3VidHlwZXMgPSB7fTtcbiAgICB9XG4gICAgaXNJbnN0YW5jZShub2RlLCB0eXBlKSB7XG4gICAgICAgIHJldHVybiBpc0FzdE5vZGUobm9kZSkgJiYgdGhpcy5pc1N1YnR5cGUobm9kZS4kdHlwZSwgdHlwZSk7XG4gICAgfVxuICAgIGlzU3VidHlwZShzdWJ0eXBlLCBzdXBlcnR5cGUpIHtcbiAgICAgICAgaWYgKHN1YnR5cGUgPT09IHN1cGVydHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5lc3RlZCA9IHRoaXMuc3VidHlwZXNbc3VidHlwZV07XG4gICAgICAgIGlmICghbmVzdGVkKSB7XG4gICAgICAgICAgICBuZXN0ZWQgPSB0aGlzLnN1YnR5cGVzW3N1YnR5cGVdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBuZXN0ZWRbc3VwZXJ0eXBlXTtcbiAgICAgICAgaWYgKGV4aXN0aW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29tcHV0ZUlzU3VidHlwZShzdWJ0eXBlLCBzdXBlcnR5cGUpO1xuICAgICAgICAgICAgbmVzdGVkW3N1cGVydHlwZV0gPSByZXN1bHQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEFsbFN1YlR5cGVzKHR5cGUpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLmFsbFN1YnR5cGVzW3R5cGVdO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGFsbFR5cGVzID0gdGhpcy5nZXRBbGxUeXBlcygpO1xuICAgICAgICAgICAgY29uc3QgdHlwZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcG9zc2libGVTdWJUeXBlIG9mIGFsbFR5cGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTdWJ0eXBlKHBvc3NpYmxlU3ViVHlwZSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZXMucHVzaChwb3NzaWJsZVN1YlR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWxsU3VidHlwZXNbdHlwZV0gPSB0eXBlcztcbiAgICAgICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBvc2l0ZUNzdE5vZGUobm9kZSkge1xuICAgIHJldHVybiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZSAhPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG5vZGUuY29udGVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNMZWFmQ3N0Tm9kZShub2RlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlICE9PSBudWxsICYmIHR5cGVvZiBub2RlLnRva2VuVHlwZSA9PT0gJ29iamVjdCc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSb290Q3N0Tm9kZShub2RlKSB7XG4gICAgcmV0dXJuIGlzQ29tcG9zaXRlQ3N0Tm9kZShub2RlKSAmJiB0eXBlb2Ygbm9kZS5mdWxsVGV4dCA9PT0gJ3N0cmluZyc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeW50YXgtdHJlZS5qcy5tYXAiXSwibmFtZXMiOlsiaXNBc3ROb2RlIiwib2JqIiwiJHR5cGUiLCJpc1JlZmVyZW5jZSIsIiRyZWZUZXh0IiwiaXNBc3ROb2RlRGVzY3JpcHRpb24iLCJuYW1lIiwidHlwZSIsInBhdGgiLCJpc0xpbmtpbmdFcnJvciIsImNvbnRhaW5lciIsInJlZmVyZW5jZSIsIm1lc3NhZ2UiLCJBYnN0cmFjdEFzdFJlZmxlY3Rpb24iLCJjb25zdHJ1Y3RvciIsInN1YnR5cGVzIiwiYWxsU3VidHlwZXMiLCJpc0luc3RhbmNlIiwibm9kZSIsImlzU3VidHlwZSIsInN1YnR5cGUiLCJzdXBlcnR5cGUiLCJuZXN0ZWQiLCJleGlzdGluZyIsInVuZGVmaW5lZCIsInJlc3VsdCIsImNvbXB1dGVJc1N1YnR5cGUiLCJnZXRBbGxTdWJUeXBlcyIsImFsbFR5cGVzIiwiZ2V0QWxsVHlwZXMiLCJ0eXBlcyIsInBvc3NpYmxlU3ViVHlwZSIsInB1c2giLCJpc0NvbXBvc2l0ZUNzdE5vZGUiLCJBcnJheSIsImlzQXJyYXkiLCJjb250ZW50IiwiaXNMZWFmQ3N0Tm9kZSIsInRva2VuVHlwZSIsImlzUm9vdENzdE5vZGUiLCJmdWxsVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/syntax-tree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/ast-utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/langium/lib/utils/ast-utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignMandatoryProperties: () => (/* binding */ assignMandatoryProperties),\n/* harmony export */   copyAstNode: () => (/* binding */ copyAstNode),\n/* harmony export */   findLocalReferences: () => (/* binding */ findLocalReferences),\n/* harmony export */   findRootNode: () => (/* binding */ findRootNode),\n/* harmony export */   getContainerOfType: () => (/* binding */ getContainerOfType),\n/* harmony export */   getDocument: () => (/* binding */ getDocument),\n/* harmony export */   hasContainerOfType: () => (/* binding */ hasContainerOfType),\n/* harmony export */   linkContentToContainer: () => (/* binding */ linkContentToContainer),\n/* harmony export */   streamAllContents: () => (/* binding */ streamAllContents),\n/* harmony export */   streamAst: () => (/* binding */ streamAst),\n/* harmony export */   streamContents: () => (/* binding */ streamContents),\n/* harmony export */   streamReferences: () => (/* binding */ streamReferences)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n/**\n * Link the `$container` and other related properties of every AST node that is directly contained\n * in the given `node`.\n */ function linkContentToContainer(node) {\n    for (const [name, value] of Object.entries(node)){\n        if (!name.startsWith(\"$\")) {\n            if (Array.isArray(value)) {\n                value.forEach((item, index)=>{\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(item)) {\n                        item.$container = node;\n                        item.$containerProperty = name;\n                        item.$containerIndex = index;\n                    }\n                });\n            } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                value.$container = node;\n                value.$containerProperty = name;\n            }\n        }\n    }\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\n * node that matches the type predicate. If the start node itself matches, it is returned.\n * If no container matches, `undefined` is returned.\n */ function getContainerOfType(node, typePredicate) {\n    let item = node;\n    while(item){\n        if (typePredicate(item)) {\n            return item;\n        }\n        item = item.$container;\n    }\n    return undefined;\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\n * of a container that matches the given predicate. The start node is included in the checks.\n */ function hasContainerOfType(node, predicate) {\n    let item = node;\n    while(item){\n        if (predicate(item)) {\n            return true;\n        }\n        item = item.$container;\n    }\n    return false;\n}\n/**\n * Retrieve the document in which the given AST node is contained. A reference to the document is\n * usually held by the root node of the AST.\n *\n * @throws an error if the node is not contained in a document.\n */ function getDocument(node) {\n    const rootNode = findRootNode(node);\n    const result = rootNode.$document;\n    if (!result) {\n        throw new Error(\"AST node has no document.\");\n    }\n    return result;\n}\n/**\n * Returns the root node of the given AST node by following the `$container` references.\n */ function findRootNode(node) {\n    while(node.$container){\n        node = node.$container;\n    }\n    return node;\n}\n/**\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\n * single-valued as well as multi-valued (array) properties.\n */ function streamContents(node, options) {\n    if (!node) {\n        throw new Error(\"Node must be an AstNode.\");\n    }\n    const range = options === null || options === void 0 ? void 0 : options.range;\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.StreamImpl(()=>({\n            keys: Object.keys(node),\n            keyIndex: 0,\n            arrayIndex: 0\n        }), (state)=>{\n        while(state.keyIndex < state.keys.length){\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith(\"$\")) {\n                const value = node[property];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                    state.keyIndex++;\n                    if (isAstNodeInRange(value, range)) {\n                        return {\n                            done: false,\n                            value\n                        };\n                    }\n                } else if (Array.isArray(value)) {\n                    while(state.arrayIndex < value.length){\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(element) && isAstNodeInRange(element, range)) {\n                            return {\n                                done: false,\n                                value: element\n                            };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return _stream_js__WEBPACK_IMPORTED_MODULE_1__.DONE_RESULT;\n    });\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\n * This does not include the root node itself.\n */ function streamAllContents(root, options) {\n    if (!root) {\n        throw new Error(\"Root node must be an AstNode.\");\n    }\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, (node)=>streamContents(node, options));\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */ function streamAst(root, options) {\n    if (!root) {\n        throw new Error(\"Root node must be an AstNode.\");\n    } else if ((options === null || options === void 0 ? void 0 : options.range) && !isAstNodeInRange(root, options.range)) {\n        // Return an empty stream if the root node isn't in range\n        return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, ()=>[]);\n    }\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, (node)=>streamContents(node, options), {\n        includeRoot: true\n    });\n}\nfunction isAstNodeInRange(astNode, range) {\n    var _a;\n    if (!range) {\n        return true;\n    }\n    const nodeRange = (_a = astNode.$cstNode) === null || _a === void 0 ? void 0 : _a.range;\n    if (!nodeRange) {\n        return false;\n    }\n    return (0,_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.inRange)(nodeRange, range);\n}\n/**\n * Create a stream of all cross-references that are held by the given AST node. This includes\n * single-valued as well as multi-valued (array) properties.\n */ function streamReferences(node) {\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.StreamImpl(()=>({\n            keys: Object.keys(node),\n            keyIndex: 0,\n            arrayIndex: 0\n        }), (state)=>{\n        while(state.keyIndex < state.keys.length){\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith(\"$\")) {\n                const value = node[property];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(value)) {\n                    state.keyIndex++;\n                    return {\n                        done: false,\n                        value: {\n                            reference: value,\n                            container: node,\n                            property\n                        }\n                    };\n                } else if (Array.isArray(value)) {\n                    while(state.arrayIndex < value.length){\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(element)) {\n                            return {\n                                done: false,\n                                value: {\n                                    reference: element,\n                                    container: node,\n                                    property,\n                                    index\n                                }\n                            };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return _stream_js__WEBPACK_IMPORTED_MODULE_1__.DONE_RESULT;\n    });\n}\n/**\n * Returns a Stream of references to the target node from the AstNode tree\n *\n * @param targetNode AstNode we are looking for\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\n */ function findLocalReferences(targetNode, lookup = getDocument(targetNode).parseResult.value) {\n    const refs = [];\n    streamAst(lookup).forEach((node)=>{\n        streamReferences(node).forEach((refInfo)=>{\n            if (refInfo.reference.ref === targetNode) {\n                refs.push(refInfo.reference);\n            }\n        });\n    });\n    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.stream)(refs);\n}\n/**\n * Assigns all mandatory AST properties to the specified node.\n *\n * @param reflection Reflection object used to gather mandatory properties for the node.\n * @param node Specified node is modified in place and properties are directly assigned.\n */ function assignMandatoryProperties(reflection, node) {\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\n    const genericNode = node;\n    for (const property of typeMetaData.properties){\n        // Only set the value if the property is not already set and if it has a default value\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\n        }\n    }\n}\nfunction copyDefaultValue(propertyType) {\n    if (Array.isArray(propertyType)) {\n        return [\n            ...propertyType.map(copyDefaultValue)\n        ];\n    } else {\n        return propertyType;\n    }\n}\n/**\n * Creates a deep copy of the specified AST node.\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\n *\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\n */ function copyAstNode(node, buildReference) {\n    const copy = {\n        $type: node.$type\n    };\n    for (const [name, value] of Object.entries(node)){\n        if (!name.startsWith(\"$\")) {\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                copy[name] = copyAstNode(value, buildReference);\n            } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(value)) {\n                copy[name] = buildReference(copy, name, value.$refNode, value.$refText);\n            } else if (Array.isArray(value)) {\n                const copiedArray = [];\n                for (const element of value){\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(element)) {\n                        copiedArray.push(copyAstNode(element, buildReference));\n                    } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(element)) {\n                        copiedArray.push(buildReference(copy, name, element.$refNode, element.$refText));\n                    } else {\n                        copiedArray.push(element);\n                    }\n                }\n                copy[name] = copiedArray;\n            } else {\n                copy[name] = value;\n            }\n        }\n    }\n    linkContentToContainer(copy);\n    return copy;\n} //# sourceMappingURL=ast-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/ast-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/caching.js":
/*!***************************************************!*\
  !*** ./node_modules/langium/lib/utils/caching.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextCache: () => (/* binding */ ContextCache),\n/* harmony export */   DisposableCache: () => (/* binding */ DisposableCache),\n/* harmony export */   DocumentCache: () => (/* binding */ DocumentCache),\n/* harmony export */   SimpleCache: () => (/* binding */ SimpleCache),\n/* harmony export */   WorkspaceCache: () => (/* binding */ WorkspaceCache)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ class DisposableCache {\n    constructor(){\n        this.toDispose = [];\n        this.isDisposed = false;\n    }\n    onDispose(disposable) {\n        this.toDispose.push(disposable);\n    }\n    dispose() {\n        this.throwIfDisposed();\n        this.clear();\n        this.isDisposed = true;\n        this.toDispose.forEach((disposable)=>disposable.dispose());\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error(\"This cache has already been disposed\");\n        }\n    }\n}\nclass SimpleCache extends DisposableCache {\n    constructor(){\n        super(...arguments);\n        this.cache = new Map();\n    }\n    has(key) {\n        this.throwIfDisposed();\n        return this.cache.has(key);\n    }\n    set(key, value) {\n        this.throwIfDisposed();\n        this.cache.set(key, value);\n    }\n    get(key, provider) {\n        this.throwIfDisposed();\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        } else if (provider) {\n            const value = provider();\n            this.cache.set(key, value);\n            return value;\n        } else {\n            return undefined;\n        }\n    }\n    delete(key) {\n        this.throwIfDisposed();\n        return this.cache.delete(key);\n    }\n    clear() {\n        this.throwIfDisposed();\n        this.cache.clear();\n    }\n}\nclass ContextCache extends DisposableCache {\n    constructor(converter){\n        super();\n        this.cache = new Map();\n        this.converter = converter !== null && converter !== void 0 ? converter : (value)=>value;\n    }\n    has(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).has(key);\n    }\n    set(contextKey, key, value) {\n        this.throwIfDisposed();\n        this.cacheForContext(contextKey).set(key, value);\n    }\n    get(contextKey, key, provider) {\n        this.throwIfDisposed();\n        const contextCache = this.cacheForContext(contextKey);\n        if (contextCache.has(key)) {\n            return contextCache.get(key);\n        } else if (provider) {\n            const value = provider();\n            contextCache.set(key, value);\n            return value;\n        } else {\n            return undefined;\n        }\n    }\n    delete(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).delete(key);\n    }\n    clear(contextKey) {\n        this.throwIfDisposed();\n        if (contextKey) {\n            const mapKey = this.converter(contextKey);\n            this.cache.delete(mapKey);\n        } else {\n            this.cache.clear();\n        }\n    }\n    cacheForContext(contextKey) {\n        const mapKey = this.converter(contextKey);\n        let documentCache = this.cache.get(mapKey);\n        if (!documentCache) {\n            documentCache = new Map();\n            this.cache.set(mapKey, documentCache);\n        }\n        return documentCache;\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to a document.\n * If this document is changed or deleted, all associated key/value pairs are deleted.\n */ class DocumentCache extends ContextCache {\n    /**\n     * Creates a new document cache.\n     *\n     * @param sharedServices Service container instance to hook into document lifecycle events.\n     * @param state Optional document state on which the cache should evict.\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\n     * *Deleted* documents are considered in both cases.\n     *\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\n     * which triggers on all documents that have been affected by this change, assuming that the\n     * state is `DocumentState.Linked` or a later state.\n     */ constructor(sharedServices, state){\n        super((uri)=>uri.toString());\n        if (state) {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, (document)=>{\n                this.clear(document.uri.toString());\n            }));\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted)=>{\n                for (const uri of deleted){\n                    this.clear(uri);\n                }\n            }));\n        } else {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted)=>{\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\n                for (const uri of allUris){\n                    this.clear(uri);\n                }\n            }));\n        }\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to the whole workspace.\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\n */ class WorkspaceCache extends SimpleCache {\n    /**\n     * Creates a new workspace cache.\n     *\n     * @param sharedServices Service container instance to hook into document lifecycle events.\n     * @param state Optional document state on which the cache should evict.\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\n     * *Deleted* documents are considered in both cases.\n     */ constructor(sharedServices, state){\n        super();\n        if (state) {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, ()=>{\n                this.clear();\n            }));\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted)=>{\n                if (deleted.length > 0) {\n                    this.clear();\n                }\n            }));\n        } else {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(()=>{\n                this.clear();\n            }));\n        }\n    }\n} //# sourceMappingURL=caching.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvY2FjaGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUN2RSxNQUFNQTtJQUNUQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxTQUFTLEdBQUcsRUFBRTtRQUNuQixJQUFJLENBQUNDLFVBQVUsR0FBRztJQUN0QjtJQUNBQyxVQUFVQyxVQUFVLEVBQUU7UUFDbEIsSUFBSSxDQUFDSCxTQUFTLENBQUNJLElBQUksQ0FBQ0Q7SUFDeEI7SUFDQUUsVUFBVTtRQUNOLElBQUksQ0FBQ0MsZUFBZTtRQUNwQixJQUFJLENBQUNDLEtBQUs7UUFDVixJQUFJLENBQUNOLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNELFNBQVMsQ0FBQ1EsT0FBTyxDQUFDTCxDQUFBQSxhQUFjQSxXQUFXRSxPQUFPO0lBQzNEO0lBQ0FDLGtCQUFrQjtRQUNkLElBQUksSUFBSSxDQUFDTCxVQUFVLEVBQUU7WUFDakIsTUFBTSxJQUFJUSxNQUFNO1FBQ3BCO0lBQ0o7QUFDSjtBQUNPLE1BQU1DLG9CQUFvQlo7SUFDN0JDLGFBQWM7UUFDVixLQUFLLElBQUlZO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUM7SUFDckI7SUFDQUMsSUFBSUMsR0FBRyxFQUFFO1FBQ0wsSUFBSSxDQUFDVCxlQUFlO1FBQ3BCLE9BQU8sSUFBSSxDQUFDTSxLQUFLLENBQUNFLEdBQUcsQ0FBQ0M7SUFDMUI7SUFDQUMsSUFBSUQsR0FBRyxFQUFFRSxLQUFLLEVBQUU7UUFDWixJQUFJLENBQUNYLGVBQWU7UUFDcEIsSUFBSSxDQUFDTSxLQUFLLENBQUNJLEdBQUcsQ0FBQ0QsS0FBS0U7SUFDeEI7SUFDQUMsSUFBSUgsR0FBRyxFQUFFSSxRQUFRLEVBQUU7UUFDZixJQUFJLENBQUNiLGVBQWU7UUFDcEIsSUFBSSxJQUFJLENBQUNNLEtBQUssQ0FBQ0UsR0FBRyxDQUFDQyxNQUFNO1lBQ3JCLE9BQU8sSUFBSSxDQUFDSCxLQUFLLENBQUNNLEdBQUcsQ0FBQ0g7UUFDMUIsT0FDSyxJQUFJSSxVQUFVO1lBQ2YsTUFBTUYsUUFBUUU7WUFDZCxJQUFJLENBQUNQLEtBQUssQ0FBQ0ksR0FBRyxDQUFDRCxLQUFLRTtZQUNwQixPQUFPQTtRQUNYLE9BQ0s7WUFDRCxPQUFPRztRQUNYO0lBQ0o7SUFDQUMsT0FBT04sR0FBRyxFQUFFO1FBQ1IsSUFBSSxDQUFDVCxlQUFlO1FBQ3BCLE9BQU8sSUFBSSxDQUFDTSxLQUFLLENBQUNTLE1BQU0sQ0FBQ047SUFDN0I7SUFDQVIsUUFBUTtRQUNKLElBQUksQ0FBQ0QsZUFBZTtRQUNwQixJQUFJLENBQUNNLEtBQUssQ0FBQ0wsS0FBSztJQUNwQjtBQUNKO0FBQ08sTUFBTWUscUJBQXFCeEI7SUFDOUJDLFlBQVl3QixTQUFTLENBQUU7UUFDbkIsS0FBSztRQUNMLElBQUksQ0FBQ1gsS0FBSyxHQUFHLElBQUlDO1FBQ2pCLElBQUksQ0FBQ1UsU0FBUyxHQUFHQSxjQUFjLFFBQVFBLGNBQWMsS0FBSyxJQUFJQSxZQUFhTixDQUFBQSxRQUFTQTtJQUN4RjtJQUNBSCxJQUFJVSxVQUFVLEVBQUVULEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNULGVBQWU7UUFDcEIsT0FBTyxJQUFJLENBQUNtQixlQUFlLENBQUNELFlBQVlWLEdBQUcsQ0FBQ0M7SUFDaEQ7SUFDQUMsSUFBSVEsVUFBVSxFQUFFVCxHQUFHLEVBQUVFLEtBQUssRUFBRTtRQUN4QixJQUFJLENBQUNYLGVBQWU7UUFDcEIsSUFBSSxDQUFDbUIsZUFBZSxDQUFDRCxZQUFZUixHQUFHLENBQUNELEtBQUtFO0lBQzlDO0lBQ0FDLElBQUlNLFVBQVUsRUFBRVQsR0FBRyxFQUFFSSxRQUFRLEVBQUU7UUFDM0IsSUFBSSxDQUFDYixlQUFlO1FBQ3BCLE1BQU1vQixlQUFlLElBQUksQ0FBQ0QsZUFBZSxDQUFDRDtRQUMxQyxJQUFJRSxhQUFhWixHQUFHLENBQUNDLE1BQU07WUFDdkIsT0FBT1csYUFBYVIsR0FBRyxDQUFDSDtRQUM1QixPQUNLLElBQUlJLFVBQVU7WUFDZixNQUFNRixRQUFRRTtZQUNkTyxhQUFhVixHQUFHLENBQUNELEtBQUtFO1lBQ3RCLE9BQU9BO1FBQ1gsT0FDSztZQUNELE9BQU9HO1FBQ1g7SUFDSjtJQUNBQyxPQUFPRyxVQUFVLEVBQUVULEdBQUcsRUFBRTtRQUNwQixJQUFJLENBQUNULGVBQWU7UUFDcEIsT0FBTyxJQUFJLENBQUNtQixlQUFlLENBQUNELFlBQVlILE1BQU0sQ0FBQ047SUFDbkQ7SUFDQVIsTUFBTWlCLFVBQVUsRUFBRTtRQUNkLElBQUksQ0FBQ2xCLGVBQWU7UUFDcEIsSUFBSWtCLFlBQVk7WUFDWixNQUFNRyxTQUFTLElBQUksQ0FBQ0osU0FBUyxDQUFDQztZQUM5QixJQUFJLENBQUNaLEtBQUssQ0FBQ1MsTUFBTSxDQUFDTTtRQUN0QixPQUNLO1lBQ0QsSUFBSSxDQUFDZixLQUFLLENBQUNMLEtBQUs7UUFDcEI7SUFDSjtJQUNBa0IsZ0JBQWdCRCxVQUFVLEVBQUU7UUFDeEIsTUFBTUcsU0FBUyxJQUFJLENBQUNKLFNBQVMsQ0FBQ0M7UUFDOUIsSUFBSUksZ0JBQWdCLElBQUksQ0FBQ2hCLEtBQUssQ0FBQ00sR0FBRyxDQUFDUztRQUNuQyxJQUFJLENBQUNDLGVBQWU7WUFDaEJBLGdCQUFnQixJQUFJZjtZQUNwQixJQUFJLENBQUNELEtBQUssQ0FBQ0ksR0FBRyxDQUFDVyxRQUFRQztRQUMzQjtRQUNBLE9BQU9BO0lBQ1g7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DLHNCQUFzQlA7SUFDL0I7Ozs7Ozs7Ozs7O0tBV0MsR0FDRHZCLFlBQVkrQixjQUFjLEVBQUVDLEtBQUssQ0FBRTtRQUMvQixLQUFLLENBQUNDLENBQUFBLE1BQU9BLElBQUlDLFFBQVE7UUFDekIsSUFBSUYsT0FBTztZQUNQLElBQUksQ0FBQy9CLFNBQVMsQ0FBQ0ksSUFBSSxDQUFDMEIsZUFBZUksU0FBUyxDQUFDQyxlQUFlLENBQUNDLGVBQWUsQ0FBQ0wsT0FBT00sQ0FBQUE7Z0JBQ2hGLElBQUksQ0FBQzlCLEtBQUssQ0FBQzhCLFNBQVNMLEdBQUcsQ0FBQ0MsUUFBUTtZQUNwQztZQUNBLElBQUksQ0FBQ2pDLFNBQVMsQ0FBQ0ksSUFBSSxDQUFDMEIsZUFBZUksU0FBUyxDQUFDQyxlQUFlLENBQUNHLFFBQVEsQ0FBQyxDQUFDQyxVQUFVQztnQkFDN0UsS0FBSyxNQUFNUixPQUFPUSxRQUFTO29CQUN2QixJQUFJLENBQUNqQyxLQUFLLENBQUN5QjtnQkFDZjtZQUNKO1FBQ0osT0FDSztZQUNELElBQUksQ0FBQ2hDLFNBQVMsQ0FBQ0ksSUFBSSxDQUFDMEIsZUFBZUksU0FBUyxDQUFDQyxlQUFlLENBQUNHLFFBQVEsQ0FBQyxDQUFDRyxTQUFTRDtnQkFDNUUsTUFBTUUsVUFBVUQsUUFBUUUsTUFBTSxDQUFDSCxVQUFVLDhDQUE4QztnQkFDdkYsS0FBSyxNQUFNUixPQUFPVSxRQUFTO29CQUN2QixJQUFJLENBQUNuQyxLQUFLLENBQUN5QjtnQkFDZjtZQUNKO1FBQ0o7SUFDSjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTVksdUJBQXVCbEM7SUFDaEM7Ozs7Ozs7S0FPQyxHQUNEWCxZQUFZK0IsY0FBYyxFQUFFQyxLQUFLLENBQUU7UUFDL0IsS0FBSztRQUNMLElBQUlBLE9BQU87WUFDUCxJQUFJLENBQUMvQixTQUFTLENBQUNJLElBQUksQ0FBQzBCLGVBQWVJLFNBQVMsQ0FBQ0MsZUFBZSxDQUFDVSxZQUFZLENBQUNkLE9BQU87Z0JBQzdFLElBQUksQ0FBQ3hCLEtBQUs7WUFDZDtZQUNBLElBQUksQ0FBQ1AsU0FBUyxDQUFDSSxJQUFJLENBQUMwQixlQUFlSSxTQUFTLENBQUNDLGVBQWUsQ0FBQ0csUUFBUSxDQUFDLENBQUNDLFVBQVVDO2dCQUM3RSxJQUFJQSxRQUFRTSxNQUFNLEdBQUcsR0FBRztvQkFDcEIsSUFBSSxDQUFDdkMsS0FBSztnQkFDZDtZQUNKO1FBQ0osT0FDSztZQUNELElBQUksQ0FBQ1AsU0FBUyxDQUFDSSxJQUFJLENBQUMwQixlQUFlSSxTQUFTLENBQUNDLGVBQWUsQ0FBQ0csUUFBUSxDQUFDO2dCQUNsRSxJQUFJLENBQUMvQixLQUFLO1lBQ2Q7UUFDSjtJQUNKO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi91dGlscy9jYWNoaW5nLmpzPzc4ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjMgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IGNsYXNzIERpc3Bvc2FibGVDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudG9EaXNwb3NlID0gW107XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBvbkRpc3Bvc2UoZGlzcG9zYWJsZSkge1xuICAgICAgICB0aGlzLnRvRGlzcG9zZS5wdXNoKGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudG9EaXNwb3NlLmZvckVhY2goZGlzcG9zYWJsZSA9PiBkaXNwb3NhYmxlLmRpc3Bvc2UoKSk7XG4gICAgfVxuICAgIHRocm93SWZEaXNwb3NlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGNhY2hlIGhhcyBhbHJlYWR5IGJlZW4gZGlzcG9zZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTaW1wbGVDYWNoZSBleHRlbmRzIERpc3Bvc2FibGVDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuaGFzKGtleSk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICBnZXQoa2V5LCBwcm92aWRlcikge1xuICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICBpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcHJvdmlkZXIoKTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb250ZXh0Q2FjaGUgZXh0ZW5kcyBEaXNwb3NhYmxlQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKGNvbnZlcnRlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmNvbnZlcnRlciA9IGNvbnZlcnRlciAhPT0gbnVsbCAmJiBjb252ZXJ0ZXIgIT09IHZvaWQgMCA/IGNvbnZlcnRlciA6ICh2YWx1ZSA9PiB2YWx1ZSk7XG4gICAgfVxuICAgIGhhcyhjb250ZXh0S2V5LCBrZXkpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVGb3JDb250ZXh0KGNvbnRleHRLZXkpLmhhcyhrZXkpO1xuICAgIH1cbiAgICBzZXQoY29udGV4dEtleSwga2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICB0aGlzLmNhY2hlRm9yQ29udGV4dChjb250ZXh0S2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIGdldChjb250ZXh0S2V5LCBrZXksIHByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgIGNvbnN0IGNvbnRleHRDYWNoZSA9IHRoaXMuY2FjaGVGb3JDb250ZXh0KGNvbnRleHRLZXkpO1xuICAgICAgICBpZiAoY29udGV4dENhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dENhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHByb3ZpZGVyKCk7XG4gICAgICAgICAgICBjb250ZXh0Q2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWxldGUoY29udGV4dEtleSwga2V5KSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlRm9yQ29udGV4dChjb250ZXh0S2V5KS5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgY2xlYXIoY29udGV4dEtleSkge1xuICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICBpZiAoY29udGV4dEtleSkge1xuICAgICAgICAgICAgY29uc3QgbWFwS2V5ID0gdGhpcy5jb252ZXJ0ZXIoY29udGV4dEtleSk7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLmRlbGV0ZShtYXBLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhY2hlRm9yQ29udGV4dChjb250ZXh0S2V5KSB7XG4gICAgICAgIGNvbnN0IG1hcEtleSA9IHRoaXMuY29udmVydGVyKGNvbnRleHRLZXkpO1xuICAgICAgICBsZXQgZG9jdW1lbnRDYWNoZSA9IHRoaXMuY2FjaGUuZ2V0KG1hcEtleSk7XG4gICAgICAgIGlmICghZG9jdW1lbnRDYWNoZSkge1xuICAgICAgICAgICAgZG9jdW1lbnRDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KG1hcEtleSwgZG9jdW1lbnRDYWNoZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvY3VtZW50Q2FjaGU7XG4gICAgfVxufVxuLyoqXG4gKiBFdmVyeSBrZXkvdmFsdWUgcGFpciBpbiB0aGlzIGNhY2hlIGlzIHNjb3BlZCB0byBhIGRvY3VtZW50LlxuICogSWYgdGhpcyBkb2N1bWVudCBpcyBjaGFuZ2VkIG9yIGRlbGV0ZWQsIGFsbCBhc3NvY2lhdGVkIGtleS92YWx1ZSBwYWlycyBhcmUgZGVsZXRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIERvY3VtZW50Q2FjaGUgZXh0ZW5kcyBDb250ZXh0Q2FjaGUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZG9jdW1lbnQgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2hhcmVkU2VydmljZXMgU2VydmljZSBjb250YWluZXIgaW5zdGFuY2UgdG8gaG9vayBpbnRvIGRvY3VtZW50IGxpZmVjeWNsZSBldmVudHMuXG4gICAgICogQHBhcmFtIHN0YXRlIE9wdGlvbmFsIGRvY3VtZW50IHN0YXRlIG9uIHdoaWNoIHRoZSBjYWNoZSBzaG91bGQgZXZpY3QuXG4gICAgICogSWYgbm90IHByb3ZpZGVkLCB0aGUgY2FjaGUgd2lsbCBldmljdCBvbiBgRG9jdW1lbnRCdWlsZGVyI29uVXBkYXRlYC5cbiAgICAgKiAqRGVsZXRlZCogZG9jdW1lbnRzIGFyZSBjb25zaWRlcmVkIGluIGJvdGggY2FzZXMuXG4gICAgICpcbiAgICAgKiBQcm92aWRpbmcgYSBzdGF0ZSBoZXJlIHdpbGwgdXNlIGBEb2N1bWVudEJ1aWxkZXIjb25Eb2N1bWVudFBoYXNlYCBpbnN0ZWFkLFxuICAgICAqIHdoaWNoIHRyaWdnZXJzIG9uIGFsbCBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gYWZmZWN0ZWQgYnkgdGhpcyBjaGFuZ2UsIGFzc3VtaW5nIHRoYXQgdGhlXG4gICAgICogc3RhdGUgaXMgYERvY3VtZW50U3RhdGUuTGlua2VkYCBvciBhIGxhdGVyIHN0YXRlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNoYXJlZFNlcnZpY2VzLCBzdGF0ZSkge1xuICAgICAgICBzdXBlcih1cmkgPT4gdXJpLnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudG9EaXNwb3NlLnB1c2goc2hhcmVkU2VydmljZXMud29ya3NwYWNlLkRvY3VtZW50QnVpbGRlci5vbkRvY3VtZW50UGhhc2Uoc3RhdGUsIGRvY3VtZW50ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKGRvY3VtZW50LnVyaS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHRoaXMudG9EaXNwb3NlLnB1c2goc2hhcmVkU2VydmljZXMud29ya3NwYWNlLkRvY3VtZW50QnVpbGRlci5vblVwZGF0ZSgoX2NoYW5nZWQsIGRlbGV0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHVyaSBvZiBkZWxldGVkKSB7IC8vIHJlYWN0IG9ubHkgb24gZGVsZXRlZCBkb2N1bWVudHNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhcih1cmkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9EaXNwb3NlLnB1c2goc2hhcmVkU2VydmljZXMud29ya3NwYWNlLkRvY3VtZW50QnVpbGRlci5vblVwZGF0ZSgoY2hhbmdlZCwgZGVsZXRlZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFVyaXMgPSBjaGFuZ2VkLmNvbmNhdChkZWxldGVkKTsgLy8gcmVhY3Qgb24gYm90aCBjaGFuZ2VkIGFuZCBkZWxldGVkIGRvY3VtZW50c1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdXJpIG9mIGFsbFVyaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhcih1cmkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogRXZlcnkga2V5L3ZhbHVlIHBhaXIgaW4gdGhpcyBjYWNoZSBpcyBzY29wZWQgdG8gdGhlIHdob2xlIHdvcmtzcGFjZS5cbiAqIElmIGFueSBkb2N1bWVudCBpbiB0aGUgd29ya3NwYWNlIGlzIGFkZGVkLCBjaGFuZ2VkIG9yIGRlbGV0ZWQsIHRoZSB3aG9sZSBjYWNoZSBpcyBldmljdGVkLlxuICovXG5leHBvcnQgY2xhc3MgV29ya3NwYWNlQ2FjaGUgZXh0ZW5kcyBTaW1wbGVDYWNoZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB3b3Jrc3BhY2UgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2hhcmVkU2VydmljZXMgU2VydmljZSBjb250YWluZXIgaW5zdGFuY2UgdG8gaG9vayBpbnRvIGRvY3VtZW50IGxpZmVjeWNsZSBldmVudHMuXG4gICAgICogQHBhcmFtIHN0YXRlIE9wdGlvbmFsIGRvY3VtZW50IHN0YXRlIG9uIHdoaWNoIHRoZSBjYWNoZSBzaG91bGQgZXZpY3QuXG4gICAgICogSWYgbm90IHByb3ZpZGVkLCB0aGUgY2FjaGUgd2lsbCBldmljdCBvbiBgRG9jdW1lbnRCdWlsZGVyI29uVXBkYXRlYC5cbiAgICAgKiAqRGVsZXRlZCogZG9jdW1lbnRzIGFyZSBjb25zaWRlcmVkIGluIGJvdGggY2FzZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2hhcmVkU2VydmljZXMsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy50b0Rpc3Bvc2UucHVzaChzaGFyZWRTZXJ2aWNlcy53b3Jrc3BhY2UuRG9jdW1lbnRCdWlsZGVyLm9uQnVpbGRQaGFzZShzdGF0ZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHRoaXMudG9EaXNwb3NlLnB1c2goc2hhcmVkU2VydmljZXMud29ya3NwYWNlLkRvY3VtZW50QnVpbGRlci5vblVwZGF0ZSgoX2NoYW5nZWQsIGRlbGV0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlZC5sZW5ndGggPiAwKSB7IC8vIHJlYWN0IG9ubHkgb24gZGVsZXRlZCBkb2N1bWVudHNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9EaXNwb3NlLnB1c2goc2hhcmVkU2VydmljZXMud29ya3NwYWNlLkRvY3VtZW50QnVpbGRlci5vblVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGluZy5qcy5tYXAiXSwibmFtZXMiOlsiRGlzcG9zYWJsZUNhY2hlIiwiY29uc3RydWN0b3IiLCJ0b0Rpc3Bvc2UiLCJpc0Rpc3Bvc2VkIiwib25EaXNwb3NlIiwiZGlzcG9zYWJsZSIsInB1c2giLCJkaXNwb3NlIiwidGhyb3dJZkRpc3Bvc2VkIiwiY2xlYXIiLCJmb3JFYWNoIiwiRXJyb3IiLCJTaW1wbGVDYWNoZSIsImFyZ3VtZW50cyIsImNhY2hlIiwiTWFwIiwiaGFzIiwia2V5Iiwic2V0IiwidmFsdWUiLCJnZXQiLCJwcm92aWRlciIsInVuZGVmaW5lZCIsImRlbGV0ZSIsIkNvbnRleHRDYWNoZSIsImNvbnZlcnRlciIsImNvbnRleHRLZXkiLCJjYWNoZUZvckNvbnRleHQiLCJjb250ZXh0Q2FjaGUiLCJtYXBLZXkiLCJkb2N1bWVudENhY2hlIiwiRG9jdW1lbnRDYWNoZSIsInNoYXJlZFNlcnZpY2VzIiwic3RhdGUiLCJ1cmkiLCJ0b1N0cmluZyIsIndvcmtzcGFjZSIsIkRvY3VtZW50QnVpbGRlciIsIm9uRG9jdW1lbnRQaGFzZSIsImRvY3VtZW50Iiwib25VcGRhdGUiLCJfY2hhbmdlZCIsImRlbGV0ZWQiLCJjaGFuZ2VkIiwiYWxsVXJpcyIsImNvbmNhdCIsIldvcmtzcGFjZUNhY2hlIiwib25CdWlsZFBoYXNlIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/caching.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/collections.js":
/*!*******************************************************!*\
  !*** ./node_modules/langium/lib/utils/collections.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BiMap: () => (/* binding */ BiMap),\n/* harmony export */   MultiMap: () => (/* binding */ MultiMap)\n/* harmony export */ });\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n/**\n * A multimap is a variation of a Map that has potentially multiple values for every key.\n */ class MultiMap {\n    constructor(elements){\n        this.map = new Map();\n        if (elements) {\n            for (const [key, value] of elements){\n                this.add(key, value);\n            }\n        }\n    }\n    /**\n     * The total number of values in the multimap.\n     */ get size() {\n        return _stream_js__WEBPACK_IMPORTED_MODULE_0__.Reduction.sum((0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.values()).map((a)=>a.length));\n    }\n    /**\n     * Clear all entries in the multimap.\n     */ clear() {\n        this.map.clear();\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\n     *  * Without a value, all values associated with the given key are deleted.\n     *\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\n     *     key / value does not exist.\n     */ delete(key, value) {\n        if (value === undefined) {\n            return this.map.delete(key);\n        } else {\n            const values = this.map.get(key);\n            if (values) {\n                const index = values.indexOf(value);\n                if (index >= 0) {\n                    if (values.length === 1) {\n                        this.map.delete(key);\n                    } else {\n                        values.splice(index, 1);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Returns an array of all values associated with the given key. If no value exists,\n     * an empty array is returned.\n     *\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\n     * value and `delete` to remove a value from the multimap.\n     */ get(key) {\n        var _a;\n        return (_a = this.map.get(key)) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\n     */ has(key, value) {\n        if (value === undefined) {\n            return this.map.has(key);\n        } else {\n            const values = this.map.get(key);\n            if (values) {\n                return values.indexOf(value) >= 0;\n            }\n            return false;\n        }\n    }\n    /**\n     * Add the given key / value pair to the multimap.\n     */ add(key, value) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(value);\n        } else {\n            this.map.set(key, [\n                value\n            ]);\n        }\n        return this;\n    }\n    /**\n     * Add the given set of key / value pairs to the multimap.\n     */ addAll(key, values) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(...values);\n        } else {\n            this.map.set(key, Array.from(values));\n        }\n        return this;\n    }\n    /**\n     * Invokes the given callback function for every key / value pair in the multimap.\n     */ forEach(callbackfn) {\n        this.map.forEach((array, key)=>array.forEach((value)=>callbackfn(value, key, this)));\n    }\n    /**\n     * Returns an iterator of key, value pairs for every entry in the map.\n     */ [Symbol.iterator]() {\n        return this.entries().iterator();\n    }\n    /**\n     * Returns a stream of key, value pairs for every entry in the map.\n     */ entries() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.entries()).flatMap(([key, array])=>array.map((value)=>[\n                    key,\n                    value\n                ]));\n    }\n    /**\n     * Returns a stream of keys in the map.\n     */ keys() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.keys());\n    }\n    /**\n     * Returns a stream of values in the map.\n     */ values() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.values()).flat();\n    }\n    /**\n     * Returns a stream of key, value set pairs for every key in the map.\n     */ entriesGroupedByKey() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.entries());\n    }\n}\nclass BiMap {\n    get size() {\n        return this.map.size;\n    }\n    constructor(elements){\n        this.map = new Map();\n        this.inverse = new Map();\n        if (elements) {\n            for (const [key, value] of elements){\n                this.set(key, value);\n            }\n        }\n    }\n    clear() {\n        this.map.clear();\n        this.inverse.clear();\n    }\n    set(key, value) {\n        this.map.set(key, value);\n        this.inverse.set(value, key);\n        return this;\n    }\n    get(key) {\n        return this.map.get(key);\n    }\n    getKey(value) {\n        return this.inverse.get(value);\n    }\n    delete(key) {\n        const value = this.map.get(key);\n        if (value !== undefined) {\n            this.map.delete(key);\n            this.inverse.delete(value);\n            return true;\n        }\n        return false;\n    }\n} //# sourceMappingURL=collections.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/cst-utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/langium/lib/utils/cst-utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultNameRegexp: () => (/* binding */ DefaultNameRegexp),\n/* harmony export */   RangeComparison: () => (/* binding */ RangeComparison),\n/* harmony export */   compareRange: () => (/* binding */ compareRange),\n/* harmony export */   findCommentNode: () => (/* binding */ findCommentNode),\n/* harmony export */   findDeclarationNodeAtOffset: () => (/* binding */ findDeclarationNodeAtOffset),\n/* harmony export */   findLeafNodeAtOffset: () => (/* binding */ findLeafNodeAtOffset),\n/* harmony export */   findLeafNodeBeforeOffset: () => (/* binding */ findLeafNodeBeforeOffset),\n/* harmony export */   flattenCst: () => (/* binding */ flattenCst),\n/* harmony export */   getInteriorNodes: () => (/* binding */ getInteriorNodes),\n/* harmony export */   getNextNode: () => (/* binding */ getNextNode),\n/* harmony export */   getPreviousNode: () => (/* binding */ getPreviousNode),\n/* harmony export */   getStartlineNode: () => (/* binding */ getStartlineNode),\n/* harmony export */   inRange: () => (/* binding */ inRange),\n/* harmony export */   isChildNode: () => (/* binding */ isChildNode),\n/* harmony export */   isCommentNode: () => (/* binding */ isCommentNode),\n/* harmony export */   streamCst: () => (/* binding */ streamCst),\n/* harmony export */   toDocumentSegment: () => (/* binding */ toDocumentSegment),\n/* harmony export */   tokenToRange: () => (/* binding */ tokenToRange)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n/**\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */ function streamCst(node) {\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_0__.TreeStreamImpl(node, (element)=>{\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(element)) {\n            return element.content;\n        } else {\n            return [];\n        }\n    }, {\n        includeRoot: true\n    });\n}\n/**\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\n */ function flattenCst(node) {\n    return streamCst(node).filter(_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode);\n}\n/**\n * Determines whether the specified cst node is a child of the specified parent node.\n */ function isChildNode(child, parent) {\n    while(child.container){\n        child = child.container;\n        if (child === parent) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction tokenToRange(token) {\n    // Chevrotain uses 1-based indices everywhere\n    // So we subtract 1 from every value to align with the LSP\n    return {\n        start: {\n            character: token.startColumn - 1,\n            line: token.startLine - 1\n        },\n        end: {\n            character: token.endColumn,\n            line: token.endLine - 1\n        }\n    };\n}\nfunction toDocumentSegment(node) {\n    if (!node) {\n        return undefined;\n    }\n    const { offset, end, range } = node;\n    return {\n        range,\n        offset,\n        end,\n        length: end - offset\n    };\n}\nvar RangeComparison;\n(function(RangeComparison) {\n    RangeComparison[RangeComparison[\"Before\"] = 0] = \"Before\";\n    RangeComparison[RangeComparison[\"After\"] = 1] = \"After\";\n    RangeComparison[RangeComparison[\"OverlapFront\"] = 2] = \"OverlapFront\";\n    RangeComparison[RangeComparison[\"OverlapBack\"] = 3] = \"OverlapBack\";\n    RangeComparison[RangeComparison[\"Inside\"] = 4] = \"Inside\";\n    RangeComparison[RangeComparison[\"Outside\"] = 5] = \"Outside\";\n})(RangeComparison || (RangeComparison = {}));\nfunction compareRange(range, to) {\n    if (range.end.line < to.start.line || range.end.line === to.start.line && range.end.character <= to.start.character) {\n        return RangeComparison.Before;\n    } else if (range.start.line > to.end.line || range.start.line === to.end.line && range.start.character >= to.end.character) {\n        return RangeComparison.After;\n    }\n    const startInside = range.start.line > to.start.line || range.start.line === to.start.line && range.start.character >= to.start.character;\n    const endInside = range.end.line < to.end.line || range.end.line === to.end.line && range.end.character <= to.end.character;\n    if (startInside && endInside) {\n        return RangeComparison.Inside;\n    } else if (startInside) {\n        return RangeComparison.OverlapBack;\n    } else if (endInside) {\n        return RangeComparison.OverlapFront;\n    } else {\n        return RangeComparison.Outside;\n    }\n}\nfunction inRange(range, to) {\n    const comparison = compareRange(range, to);\n    return comparison > RangeComparison.After;\n}\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\n// Together with \\w it matches any kind of character which can commonly appear in IDs\nconst DefaultNameRegexp = /^[\\w\\p{L}]$/u;\n/**\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\n * it will instead return the leaf node at the `offset - 1` position.\n *\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\n */ function findDeclarationNodeAtOffset(cstNode, offset, nameRegexp = DefaultNameRegexp) {\n    if (cstNode) {\n        if (offset > 0) {\n            const localOffset = offset - cstNode.offset;\n            const textAtOffset = cstNode.text.charAt(localOffset);\n            if (!nameRegexp.test(textAtOffset)) {\n                offset--;\n            }\n        }\n        return findLeafNodeAtOffset(cstNode, offset);\n    }\n    return undefined;\n}\nfunction findCommentNode(cstNode, commentNames) {\n    if (cstNode) {\n        const previous = getPreviousNode(cstNode, true);\n        if (previous && isCommentNode(previous, commentNames)) {\n            return previous;\n        }\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isRootCstNode)(cstNode)) {\n            // Go from the first non-hidden node through all nodes in reverse order\n            // We do this to find the comment node which directly precedes the root node\n            const endIndex = cstNode.content.findIndex((e)=>!e.hidden);\n            for(let i = endIndex - 1; i >= 0; i--){\n                const child = cstNode.content[i];\n                if (isCommentNode(child, commentNames)) {\n                    return child;\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction isCommentNode(cstNode, commentNames) {\n    return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(cstNode) && commentNames.includes(cstNode.tokenType.name);\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * Note that the given offset will be within the range of the returned leaf node.\n *\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node at the specified offset.\n */ function findLeafNodeAtOffset(node, offset) {\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(node)) {\n        return node;\n    } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(node)) {\n        const searchResult = binarySearch(node, offset, false);\n        if (searchResult) {\n            return findLeafNodeAtOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * If no CST node exists at the specified position, it will return the leaf node before it.\n *\n * If there is no leaf node before the specified offset, this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node closest to the specified offset.\n */ function findLeafNodeBeforeOffset(node, offset) {\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(node)) {\n        return node;\n    } else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(node)) {\n        const searchResult = binarySearch(node, offset, true);\n        if (searchResult) {\n            return findLeafNodeBeforeOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\nfunction binarySearch(node, offset, closest) {\n    let left = 0;\n    let right = node.content.length - 1;\n    let closestNode = undefined;\n    while(left <= right){\n        const middle = Math.floor((left + right) / 2);\n        const middleNode = node.content[middle];\n        if (middleNode.offset <= offset && middleNode.end > offset) {\n            // Found an exact match\n            return middleNode;\n        }\n        if (middleNode.end <= offset) {\n            // Update the closest node (less than offset) and move to the right half\n            closestNode = closest ? middleNode : undefined;\n            left = middle + 1;\n        } else {\n            // Move to the left half\n            right = middle - 1;\n        }\n    }\n    return closestNode;\n}\nfunction getPreviousNode(node, hidden = true) {\n    while(node.container){\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        while(index > 0){\n            index--;\n            const previous = parent.content[index];\n            if (hidden || !previous.hidden) {\n                return previous;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nfunction getNextNode(node, hidden = true) {\n    while(node.container){\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        const last = parent.content.length - 1;\n        while(index < last){\n            index++;\n            const next = parent.content[index];\n            if (hidden || !next.hidden) {\n                return next;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nfunction getStartlineNode(node) {\n    if (node.range.start.character === 0) {\n        return node;\n    }\n    const line = node.range.start.line;\n    let last = node;\n    let index;\n    while(node.container){\n        const parent = node.container;\n        const selfIndex = index !== null && index !== void 0 ? index : parent.content.indexOf(node);\n        if (selfIndex === 0) {\n            node = parent;\n            index = undefined;\n        } else {\n            index = selfIndex - 1;\n            node = parent.content[index];\n        }\n        if (node.range.start.line !== line) {\n            break;\n        }\n        last = node;\n    }\n    return last;\n}\nfunction getInteriorNodes(start, end) {\n    const commonParent = getCommonParent(start, end);\n    if (!commonParent) {\n        return [];\n    }\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\n}\nfunction getCommonParent(a, b) {\n    const aParents = getParentChain(a);\n    const bParents = getParentChain(b);\n    let current;\n    for(let i = 0; i < aParents.length && i < bParents.length; i++){\n        const aParent = aParents[i];\n        const bParent = bParents[i];\n        if (aParent.parent === bParent.parent) {\n            current = {\n                parent: aParent.parent,\n                a: aParent.index,\n                b: bParent.index\n            };\n        } else {\n            break;\n        }\n    }\n    return current;\n}\nfunction getParentChain(node) {\n    const chain = [];\n    while(node.container){\n        const parent = node.container;\n        const index = parent.content.indexOf(node);\n        chain.push({\n            parent,\n            index\n        });\n        node = parent;\n    }\n    return chain.reverse();\n} //# sourceMappingURL=cst-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/cst-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/disposable.js":
/*!******************************************************!*\
  !*** ./node_modules/langium/lib/utils/disposable.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Disposable: () => (/* binding */ Disposable)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ var Disposable;\n(function(Disposable) {\n    function create(callback) {\n        return {\n            dispose: async ()=>await callback()\n        };\n    }\n    Disposable.create = create;\n})(Disposable || (Disposable = {})); //# sourceMappingURL=disposable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvZGlzcG9zYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OEVBSThFLEdBQ3ZFLElBQUlBLFdBQVc7QUFDckIsVUFBVUEsVUFBVTtJQUNqQixTQUFTQyxPQUFPQyxRQUFRO1FBQ3BCLE9BQU87WUFDSEMsU0FBUyxVQUFZLE1BQU1EO1FBQy9CO0lBQ0o7SUFDQUYsV0FBV0MsTUFBTSxHQUFHQTtBQUN4QixHQUFHRCxjQUFlQSxDQUFBQSxhQUFhLENBQUMsS0FDaEMsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvZGlzcG9zYWJsZS5qcz8xNDk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmV4cG9ydCB2YXIgRGlzcG9zYWJsZTtcbihmdW5jdGlvbiAoRGlzcG9zYWJsZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogYXN5bmMgKCkgPT4gYXdhaXQgY2FsbGJhY2soKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBEaXNwb3NhYmxlLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKERpc3Bvc2FibGUgfHwgKERpc3Bvc2FibGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzcG9zYWJsZS5qcy5tYXAiXSwibmFtZXMiOlsiRGlzcG9zYWJsZSIsImNyZWF0ZSIsImNhbGxiYWNrIiwiZGlzcG9zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/disposable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/errors.js":
/*!**************************************************!*\
  !*** ./node_modules/langium/lib/utils/errors.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorWithLocation: () => (/* binding */ ErrorWithLocation),\n/* harmony export */   assertUnreachable: () => (/* binding */ assertUnreachable)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ class ErrorWithLocation extends Error {\n    constructor(node, message){\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\n    }\n}\nfunction assertUnreachable(_) {\n    throw new Error(\"Error! The input value was not handled.\");\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7OEVBSThFLEdBQ3ZFLE1BQU1BLDBCQUEwQkM7SUFDbkNDLFlBQVlDLElBQUksRUFBRUMsT0FBTyxDQUFFO1FBQ3ZCLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLEVBQUVDLFFBQVEsSUFBSSxFQUFFRCxLQUFLRSxLQUFLLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRUosS0FBS0UsS0FBSyxDQUFDQyxLQUFLLENBQUNFLFNBQVMsQ0FBQyxDQUFDLEdBQUdKO0lBQzFGO0FBQ0o7QUFDTyxTQUFTSyxrQkFBa0JDLENBQUM7SUFDL0IsTUFBTSxJQUFJVCxNQUFNO0FBQ3BCLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvZXJyb3JzLmpzP2NiMDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IGNsYXNzIEVycm9yV2l0aExvY2F0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG5vZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobm9kZSA/IGAke21lc3NhZ2V9IGF0ICR7bm9kZS5yYW5nZS5zdGFydC5saW5lfToke25vZGUucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyfWAgOiBtZXNzYWdlKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VW5yZWFjaGFibGUoXykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IhIFRoZSBpbnB1dCB2YWx1ZSB3YXMgbm90IGhhbmRsZWQuJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbIkVycm9yV2l0aExvY2F0aW9uIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm5vZGUiLCJtZXNzYWdlIiwicmFuZ2UiLCJzdGFydCIsImxpbmUiLCJjaGFyYWN0ZXIiLCJhc3NlcnRVbnJlYWNoYWJsZSIsIl8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/grammar-loader.js":
/*!**********************************************************!*\
  !*** ./node_modules/langium/lib/utils/grammar-loader.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadGrammarFromJson: () => (/* binding */ loadGrammarFromJson)\n/* harmony export */ });\n/* harmony import */ var _default_module_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../default-module.js */ \"(ssr)/./node_modules/langium/lib/default-module.js\");\n/* harmony import */ var _dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dependency-injection.js */ \"(ssr)/./node_modules/langium/lib/dependency-injection.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/./node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _workspace_file_system_provider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../workspace/file-system-provider.js */ \"(ssr)/./node_modules/langium/lib/workspace/file-system-provider.js\");\n/* harmony import */ var _uri_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uri-utils.js */ \"(ssr)/./node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\nconst minimalGrammarModule = {\n    Grammar: ()=>undefined,\n    LanguageMetaData: ()=>({\n            caseInsensitive: false,\n            fileExtensions: [\n                \".langium\"\n            ],\n            languageId: \"langium\"\n        })\n};\nconst minimalSharedGrammarModule = {\n    AstReflection: ()=>new _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.LangiumGrammarAstReflection()\n};\nfunction createMinimalGrammarServices() {\n    const shared = (0,_dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__.inject)((0,_default_module_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultSharedCoreModule)(_workspace_file_system_provider_js__WEBPACK_IMPORTED_MODULE_3__.EmptyFileSystem), minimalSharedGrammarModule);\n    const grammar = (0,_dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__.inject)((0,_default_module_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultCoreModule)({\n        shared\n    }), minimalGrammarModule);\n    shared.ServiceRegistry.register(grammar);\n    return grammar;\n}\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */ function loadGrammarFromJson(json) {\n    var _a;\n    const services = createMinimalGrammarServices();\n    const astNode = services.serializer.JsonSerializer.deserialize(json);\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, _uri_utils_js__WEBPACK_IMPORTED_MODULE_4__.URI.parse(`memory://${(_a = astNode.name) !== null && _a !== void 0 ? _a : \"grammar\"}.langium`));\n    return astNode;\n} //# sourceMappingURL=grammar-loader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvZ3JhbW1hci1sb2FkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7OEVBSThFLEdBQ2dCO0FBQzFDO0FBQ0M7QUFDa0I7QUFDbEM7QUFDckMsTUFBTU0sdUJBQXVCO0lBQ3pCQyxTQUFTLElBQU1DO0lBQ2ZDLGtCQUFrQixJQUFPO1lBQ3JCQyxpQkFBaUI7WUFDakJDLGdCQUFnQjtnQkFBQzthQUFXO1lBQzVCQyxZQUFZO1FBQ2hCO0FBQ0o7QUFDQSxNQUFNQyw2QkFBNkI7SUFDL0JDLGVBQWUsSUFBTSxJQUFJWCxvRkFBK0I7QUFDNUQ7QUFDQSxTQUFTYTtJQUNMLE1BQU1DLFNBQVNmLGdFQUFNQSxDQUFDRCxpRkFBNkJBLENBQUNHLCtFQUFlQSxHQUFHUztJQUN0RSxNQUFNSyxVQUFVaEIsZ0VBQU1BLENBQUNGLDJFQUF1QkEsQ0FBQztRQUFFaUI7SUFBTyxJQUFJWDtJQUM1RFcsT0FBT0UsZUFBZSxDQUFDQyxRQUFRLENBQUNGO0lBQ2hDLE9BQU9BO0FBQ1g7QUFDQTs7O0NBR0MsR0FDTSxTQUFTRyxvQkFBb0JDLElBQUk7SUFDcEMsSUFBSUM7SUFDSixNQUFNQyxXQUFXUjtJQUNqQixNQUFNUyxVQUFVRCxTQUFTRSxVQUFVLENBQUNDLGNBQWMsQ0FBQ0MsV0FBVyxDQUFDTjtJQUMvREUsU0FBU1AsTUFBTSxDQUFDWSxTQUFTLENBQUNDLHNCQUFzQixDQUFDQyxTQUFTLENBQUNOLFNBQVNwQiw4Q0FBR0EsQ0FBQzJCLEtBQUssQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDVCxLQUFLRSxRQUFRUSxJQUFJLE1BQU0sUUFBUVYsT0FBTyxLQUFLLElBQUlBLEtBQUssVUFBVSxRQUFRLENBQUM7SUFDbEssT0FBT0U7QUFDWCxFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2dyYW1tYXItbG9hZGVyLmpzP2Y2ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjMgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgY3JlYXRlRGVmYXVsdENvcmVNb2R1bGUsIGNyZWF0ZURlZmF1bHRTaGFyZWRDb3JlTW9kdWxlIH0gZnJvbSAnLi4vZGVmYXVsdC1tb2R1bGUuanMnO1xuaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnLi4vZGVwZW5kZW5jeS1pbmplY3Rpb24uanMnO1xuaW1wb3J0ICogYXMgYXN0IGZyb20gJy4uL2xhbmd1YWdlcy9nZW5lcmF0ZWQvYXN0LmpzJztcbmltcG9ydCB7IEVtcHR5RmlsZVN5c3RlbSB9IGZyb20gJy4uL3dvcmtzcGFjZS9maWxlLXN5c3RlbS1wcm92aWRlci5qcyc7XG5pbXBvcnQgeyBVUkkgfSBmcm9tICcuL3VyaS11dGlscy5qcyc7XG5jb25zdCBtaW5pbWFsR3JhbW1hck1vZHVsZSA9IHtcbiAgICBHcmFtbWFyOiAoKSA9PiB1bmRlZmluZWQsXG4gICAgTGFuZ3VhZ2VNZXRhRGF0YTogKCkgPT4gKHtcbiAgICAgICAgY2FzZUluc2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgICAgZmlsZUV4dGVuc2lvbnM6IFsnLmxhbmdpdW0nXSxcbiAgICAgICAgbGFuZ3VhZ2VJZDogJ2xhbmdpdW0nXG4gICAgfSlcbn07XG5jb25zdCBtaW5pbWFsU2hhcmVkR3JhbW1hck1vZHVsZSA9IHtcbiAgICBBc3RSZWZsZWN0aW9uOiAoKSA9PiBuZXcgYXN0LkxhbmdpdW1HcmFtbWFyQXN0UmVmbGVjdGlvbigpXG59O1xuZnVuY3Rpb24gY3JlYXRlTWluaW1hbEdyYW1tYXJTZXJ2aWNlcygpIHtcbiAgICBjb25zdCBzaGFyZWQgPSBpbmplY3QoY3JlYXRlRGVmYXVsdFNoYXJlZENvcmVNb2R1bGUoRW1wdHlGaWxlU3lzdGVtKSwgbWluaW1hbFNoYXJlZEdyYW1tYXJNb2R1bGUpO1xuICAgIGNvbnN0IGdyYW1tYXIgPSBpbmplY3QoY3JlYXRlRGVmYXVsdENvcmVNb2R1bGUoeyBzaGFyZWQgfSksIG1pbmltYWxHcmFtbWFyTW9kdWxlKTtcbiAgICBzaGFyZWQuU2VydmljZVJlZ2lzdHJ5LnJlZ2lzdGVyKGdyYW1tYXIpO1xuICAgIHJldHVybiBncmFtbWFyO1xufVxuLyoqXG4gKiBMb2FkIGEgTGFuZ2l1bSBncmFtbWFyIGZvciB5b3VyIGxhbmd1YWdlIGZyb20gYSBKU09OIHN0cmluZy4gVGhpcyBpcyB1c2VkIGJ5IHNldmVyYWwgc2VydmljZXMsXG4gKiBtb3N0IG5vdGFibHkgdGhlIHBhcnNlciBidWlsZGVyIHdoaWNoIGludGVycHJldHMgdGhlIGdyYW1tYXIgdG8gY3JlYXRlIGEgcGFyc2VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZEdyYW1tYXJGcm9tSnNvbihqc29uKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHNlcnZpY2VzID0gY3JlYXRlTWluaW1hbEdyYW1tYXJTZXJ2aWNlcygpO1xuICAgIGNvbnN0IGFzdE5vZGUgPSBzZXJ2aWNlcy5zZXJpYWxpemVyLkpzb25TZXJpYWxpemVyLmRlc2VyaWFsaXplKGpzb24pO1xuICAgIHNlcnZpY2VzLnNoYXJlZC53b3Jrc3BhY2UuTGFuZ2l1bURvY3VtZW50RmFjdG9yeS5mcm9tTW9kZWwoYXN0Tm9kZSwgVVJJLnBhcnNlKGBtZW1vcnk6Ly8keyhfYSA9IGFzdE5vZGUubmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ2dyYW1tYXInfS5sYW5naXVtYCkpO1xuICAgIHJldHVybiBhc3ROb2RlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhbW1hci1sb2FkZXIuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZURlZmF1bHRDb3JlTW9kdWxlIiwiY3JlYXRlRGVmYXVsdFNoYXJlZENvcmVNb2R1bGUiLCJpbmplY3QiLCJhc3QiLCJFbXB0eUZpbGVTeXN0ZW0iLCJVUkkiLCJtaW5pbWFsR3JhbW1hck1vZHVsZSIsIkdyYW1tYXIiLCJ1bmRlZmluZWQiLCJMYW5ndWFnZU1ldGFEYXRhIiwiY2FzZUluc2Vuc2l0aXZlIiwiZmlsZUV4dGVuc2lvbnMiLCJsYW5ndWFnZUlkIiwibWluaW1hbFNoYXJlZEdyYW1tYXJNb2R1bGUiLCJBc3RSZWZsZWN0aW9uIiwiTGFuZ2l1bUdyYW1tYXJBc3RSZWZsZWN0aW9uIiwiY3JlYXRlTWluaW1hbEdyYW1tYXJTZXJ2aWNlcyIsInNoYXJlZCIsImdyYW1tYXIiLCJTZXJ2aWNlUmVnaXN0cnkiLCJyZWdpc3RlciIsImxvYWRHcmFtbWFyRnJvbUpzb24iLCJqc29uIiwiX2EiLCJzZXJ2aWNlcyIsImFzdE5vZGUiLCJzZXJpYWxpemVyIiwiSnNvblNlcmlhbGl6ZXIiLCJkZXNlcmlhbGl6ZSIsIndvcmtzcGFjZSIsIkxhbmdpdW1Eb2N1bWVudEZhY3RvcnkiLCJmcm9tTW9kZWwiLCJwYXJzZSIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/grammar-loader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/grammar-utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/langium/lib/utils/grammar-utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findAssignment: () => (/* binding */ findAssignment),\n/* harmony export */   findNameAssignment: () => (/* binding */ findNameAssignment),\n/* harmony export */   findNodeForKeyword: () => (/* binding */ findNodeForKeyword),\n/* harmony export */   findNodeForProperty: () => (/* binding */ findNodeForProperty),\n/* harmony export */   findNodesForKeyword: () => (/* binding */ findNodesForKeyword),\n/* harmony export */   findNodesForKeywordInternal: () => (/* binding */ findNodesForKeywordInternal),\n/* harmony export */   findNodesForProperty: () => (/* binding */ findNodesForProperty),\n/* harmony export */   getActionAtElement: () => (/* binding */ getActionAtElement),\n/* harmony export */   getActionType: () => (/* binding */ getActionType),\n/* harmony export */   getAllReachableRules: () => (/* binding */ getAllReachableRules),\n/* harmony export */   getCrossReferenceTerminal: () => (/* binding */ getCrossReferenceTerminal),\n/* harmony export */   getEntryRule: () => (/* binding */ getEntryRule),\n/* harmony export */   getExplicitRuleType: () => (/* binding */ getExplicitRuleType),\n/* harmony export */   getHiddenRules: () => (/* binding */ getHiddenRules),\n/* harmony export */   getRuleType: () => (/* binding */ getRuleType),\n/* harmony export */   getRuleTypeName: () => (/* binding */ getRuleTypeName),\n/* harmony export */   getTypeName: () => (/* binding */ getTypeName),\n/* harmony export */   isArrayCardinality: () => (/* binding */ isArrayCardinality),\n/* harmony export */   isArrayOperator: () => (/* binding */ isArrayOperator),\n/* harmony export */   isCommentTerminal: () => (/* binding */ isCommentTerminal),\n/* harmony export */   isDataType: () => (/* binding */ isDataType),\n/* harmony export */   isDataTypeRule: () => (/* binding */ isDataTypeRule),\n/* harmony export */   isOptionalCardinality: () => (/* binding */ isOptionalCardinality),\n/* harmony export */   terminalRegex: () => (/* binding */ terminalRegex)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/errors.js */ \"(ssr)/./node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/./node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _cst_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regexp-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/regexp-utils.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\n\n/**\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\n * the result is `undefined`.\n */ function getEntryRule(grammar) {\n    return grammar.rules.find((e)=>_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(e) && e.entry);\n}\n/**\n * Returns all hidden terminal rules of the given grammar, if any.\n */ function getHiddenRules(grammar) {\n    return grammar.rules.filter((e)=>_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(e) && e.hidden);\n}\n/**\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\n *\n * @param grammar The grammar that contains all rules\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\n *      this function returns all rules of the specified grammar.\n */ function getAllReachableRules(grammar, allTerminals) {\n    const ruleNames = new Set();\n    const entryRule = getEntryRule(grammar);\n    if (!entryRule) {\n        return new Set(grammar.rules);\n    }\n    const topMostRules = [\n        entryRule\n    ].concat(getHiddenRules(grammar));\n    for (const rule of topMostRules){\n        ruleDfs(rule, ruleNames, allTerminals);\n    }\n    const rules = new Set();\n    for (const rule of grammar.rules){\n        if (ruleNames.has(rule.name) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule) && rule.hidden) {\n            rules.add(rule);\n        }\n    }\n    return rules;\n}\nfunction ruleDfs(rule, visitedSet, allTerminals) {\n    visitedSet.add(rule.name);\n    (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rule).forEach((node)=>{\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node) || allTerminals && _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRuleCall(node)) {\n            const refRule = node.rule.ref;\n            if (refRule && !visitedSet.has(refRule.name)) {\n                ruleDfs(refRule, visitedSet, allTerminals);\n            }\n        }\n    });\n}\n/**\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\n *\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\n * and cannot be inferred.\n */ function getCrossReferenceTerminal(crossRef) {\n    if (crossRef.terminal) {\n        return crossRef.terminal;\n    } else if (crossRef.type.ref) {\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\n        return nameAssigment === null || nameAssigment === void 0 ? void 0 : nameAssigment.terminal;\n    }\n    return undefined;\n}\n/**\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\n * that contains visible characters is considered a comment.\n */ function isCommentTerminal(terminalRule) {\n    return terminalRule.hidden && !(0,_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.isWhitespace)(terminalRegex(terminalRule));\n}\n/**\n * Find all CST nodes within the given node that contribute to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\n */ function findNodesForProperty(node, property) {\n    if (!node || !property) {\n        return [];\n    }\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\n}\n/**\n * Find a single CST node within the given node that contributes to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */ function findNodeForProperty(node, property, index) {\n    if (!node || !property) {\n        return undefined;\n    }\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    } else {\n        index = 0;\n    }\n    return nodes[index];\n}\nfunction findNodesForPropertyInternal(node, property, element, first) {\n    if (!first) {\n        const nodeFeature = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(node.grammarSource, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        if (nodeFeature && nodeFeature.feature === property) {\n            return [\n                node\n            ];\n        }\n    }\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(node) && node.astNode === element) {\n        return node.content.flatMap((e)=>findNodesForPropertyInternal(e, property, element, false));\n    }\n    return [];\n}\n/**\n * Find all CST nodes within the given node that correspond to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\n * @param keyword A keyword as specified in the grammar.\n */ function findNodesForKeyword(node, keyword) {\n    if (!node) {\n        return [];\n    }\n    return findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n}\n/**\n * Find a single CST node within the given node that corresponds to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\n * @param keyword A keyword as specified in the grammar.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */ function findNodeForKeyword(node, keyword, index) {\n    if (!node) {\n        return undefined;\n    }\n    const nodes = findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    } else {\n        index = 0;\n    }\n    return nodes[index];\n}\nfunction findNodesForKeywordInternal(node, keyword, element) {\n    if (node.astNode !== element) {\n        return [];\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\n        return [\n            node\n        ];\n    }\n    const treeIterator = (0,_cst_utils_js__WEBPACK_IMPORTED_MODULE_4__.streamCst)(node).iterator();\n    let result;\n    const keywordNodes = [];\n    do {\n        result = treeIterator.next();\n        if (!result.done) {\n            const childNode = result.value;\n            if (childNode.astNode === element) {\n                if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\n                    keywordNodes.push(childNode);\n                }\n            } else {\n                treeIterator.prune();\n            }\n        }\n    }while (!result.done);\n    return keywordNodes;\n}\n/**\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\n * node is returned. If no assignment is found, the result is `undefined`.\n *\n * @param cstNode A CST node for which to find a property assignment.\n */ function findAssignment(cstNode) {\n    var _a;\n    const astNode = cstNode.astNode;\n    // Only search until the ast node of the parent cst node is no longer the original ast node\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\n    while(astNode === ((_a = cstNode.container) === null || _a === void 0 ? void 0 : _a.astNode)){\n        const assignment = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(cstNode.grammarSource, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        if (assignment) {\n            return assignment;\n        }\n        cstNode = cstNode.container;\n    }\n    return undefined;\n}\n/**\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\n * this function returns `undefined`.\n */ function findNameAssignment(type) {\n    let startNode = type;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInferredType(startNode)) {\n        // for inferred types, the location to start searching for the name-assignment is different\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(startNode.$container)) {\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\n            startNode = startNode.$container.$container;\n        } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(startNode.$container)) {\n            // investigate the parser rule with the explicitly inferred type\n            startNode = startNode.$container;\n        } else {\n            (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_5__.assertUnreachable)(startNode.$container);\n        }\n    }\n    return findNameAssignmentInternal(type, startNode, new Map());\n}\nfunction findNameAssignmentInternal(type, startNode, cache) {\n    var _a;\n    // the cache is only required to prevent infinite loops\n    function go(node, refType) {\n        let childAssignment = undefined;\n        const parentAssignment = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(node, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        // No parent assignment implies unassigned rule call\n        if (!parentAssignment) {\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\n        }\n        cache.set(type, childAssignment);\n        return childAssignment;\n    }\n    if (cache.has(type)) {\n        return cache.get(type);\n    }\n    cache.set(type, undefined);\n    for (const node of (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(startNode)){\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment(node) && node.feature.toLowerCase() === \"name\") {\n            cache.set(type, node);\n            return node;\n        } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node) && _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(node.rule.ref)) {\n            return go(node, node.rule.ref);\n        } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isSimpleType(node) && ((_a = node.typeRef) === null || _a === void 0 ? void 0 : _a.ref)) {\n            return go(node, node.typeRef.ref);\n        }\n    }\n    return undefined;\n}\nfunction getActionAtElement(element) {\n    const parent = element.$container;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isGroup(parent)) {\n        const elements = parent.elements;\n        const index = elements.indexOf(element);\n        for(let i = index - 1; i >= 0; i--){\n            const item = elements[i];\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(item)) {\n                return item;\n            } else {\n                const action = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(elements[i]).find(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAbstractElement(parent)) {\n        return getActionAtElement(parent);\n    } else {\n        return undefined;\n    }\n}\nfunction isOptionalCardinality(cardinality, element) {\n    return cardinality === \"?\" || cardinality === \"*\" || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isGroup(element) && Boolean(element.guardCondition);\n}\nfunction isArrayCardinality(cardinality) {\n    return cardinality === \"*\" || cardinality === \"+\";\n}\nfunction isArrayOperator(operator) {\n    return operator === \"+=\";\n}\n/**\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\n * primitive return type like `number`, `boolean`, etc.\n */ function isDataTypeRule(rule) {\n    return isDataTypeRuleInternal(rule, new Set());\n}\nfunction isDataTypeRuleInternal(rule, visited) {\n    if (visited.has(rule)) {\n        return true;\n    } else {\n        visited.add(rule);\n    }\n    for (const node of (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rule)){\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node)) {\n            if (!node.rule.ref) {\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\n                return false;\n            }\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\n                return false;\n            }\n        } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment(node)) {\n            return false;\n        } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(node)) {\n            return false;\n        }\n    }\n    return Boolean(rule.definition);\n}\nfunction isDataType(type) {\n    return isDataTypeInternal(type.type, new Set());\n}\nfunction isDataTypeInternal(type, visited) {\n    if (visited.has(type)) {\n        return true;\n    } else {\n        visited.add(type);\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isArrayType(type)) {\n        return false;\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isReferenceType(type)) {\n        return false;\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isUnionType(type)) {\n        return type.types.every((e)=>isDataTypeInternal(e, visited));\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isSimpleType(type)) {\n        if (type.primitiveType !== undefined) {\n            return true;\n        } else if (type.stringType !== undefined) {\n            return true;\n        } else if (type.typeRef !== undefined) {\n            const ref = type.typeRef.ref;\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(ref)) {\n                return isDataTypeInternal(ref.type, visited);\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\nfunction getExplicitRuleType(rule) {\n    if (rule.inferredType) {\n        return rule.inferredType.name;\n    } else if (rule.dataType) {\n        return rule.dataType;\n    } else if (rule.returnType) {\n        const refType = rule.returnType.ref;\n        if (refType) {\n            // check if we need to check Action as return type\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(refType)) {\n                return refType.name;\n            } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInterface(refType) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(refType)) {\n                return refType.name;\n            }\n        }\n    }\n    return undefined;\n}\nfunction getTypeName(type) {\n    var _a;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(type)) {\n        return isDataTypeRule(type) ? type.name : (_a = getExplicitRuleType(type)) !== null && _a !== void 0 ? _a : type.name;\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInterface(type) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(type) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isReturnType(type)) {\n        return type.name;\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(type)) {\n        const actionType = getActionType(type);\n        if (actionType) {\n            return actionType;\n        }\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInferredType(type)) {\n        return type.name;\n    }\n    throw new Error(\"Cannot get name of Unknown Type\");\n}\nfunction getActionType(action) {\n    var _a;\n    if (action.inferredType) {\n        return action.inferredType.name;\n    } else if ((_a = action.type) === null || _a === void 0 ? void 0 : _a.ref) {\n        return getTypeName(action.type.ref);\n    }\n    return undefined; // not inferring and not referencing a valid type\n}\n/**\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\n * For data type rules, the name of the rule is returned,\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\n * @param rule the given rule\n * @returns the name of the AST node type of the rule\n */ function getRuleTypeName(rule) {\n    var _a, _b, _c;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : \"string\";\n    } else {\n        return isDataTypeRule(rule) ? rule.name : (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\n/**\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\n * For data type rules, the name of the declared return type of the rule is returned (if any),\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\n * @param rule the given rule\n * @returns the name of the type of the produced values of the rule at runtime\n */ function getRuleType(rule) {\n    var _a, _b, _c;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : \"string\";\n    } else {\n        return (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\nfunction terminalRegex(terminalRule) {\n    const flags = {\n        s: false,\n        i: false,\n        u: false\n    };\n    const source = abstractElementToRegex(terminalRule.definition, flags);\n    const flagText = Object.entries(flags).filter(([, value])=>value).map(([name])=>name).join(\"\");\n    return new RegExp(source, flagText);\n}\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\nconst WILDCARD = /[\\s\\S]/.source;\nfunction abstractElementToRegex(element, flags) {\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalAlternatives(element)) {\n        return terminalAlternativesToRegex(element);\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalGroup(element)) {\n        return terminalGroupToRegex(element);\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isCharacterRange(element)) {\n        return characterRangeToRegex(element);\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRuleCall(element)) {\n        const rule = element.rule.ref;\n        if (!rule) {\n            throw new Error(\"Missing rule reference.\");\n        }\n        return withCardinality(abstractElementToRegex(rule.definition), {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isNegatedToken(element)) {\n        return negateTokenToRegex(element);\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isUntilToken(element)) {\n        return untilTokenToRegex(element);\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRegexToken(element)) {\n        const lastSlash = element.regex.lastIndexOf(\"/\");\n        const source = element.regex.substring(1, lastSlash);\n        const regexFlags = element.regex.substring(lastSlash + 1);\n        if (flags) {\n            flags.i = regexFlags.includes(\"i\");\n            flags.s = regexFlags.includes(\"s\");\n            flags.u = regexFlags.includes(\"u\");\n        }\n        return withCardinality(source, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead,\n            wrap: false\n        });\n    } else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isWildcard(element)) {\n        return withCardinality(WILDCARD, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    } else {\n        throw new Error(`Invalid terminal element: ${element === null || element === void 0 ? void 0 : element.$type}`);\n    }\n}\nfunction terminalAlternativesToRegex(alternatives) {\n    return withCardinality(alternatives.elements.map((e)=>abstractElementToRegex(e)).join(\"|\"), {\n        cardinality: alternatives.cardinality,\n        lookahead: alternatives.lookahead\n    });\n}\nfunction terminalGroupToRegex(group) {\n    return withCardinality(group.elements.map((e)=>abstractElementToRegex(e)).join(\"\"), {\n        cardinality: group.cardinality,\n        lookahead: group.lookahead\n    });\n}\nfunction untilTokenToRegex(until) {\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\n        cardinality: until.cardinality,\n        lookahead: until.lookahead\n    });\n}\nfunction negateTokenToRegex(negate) {\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\n        cardinality: negate.cardinality,\n        lookahead: negate.lookahead\n    });\n}\nfunction characterRangeToRegex(range) {\n    if (range.right) {\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\n            cardinality: range.cardinality,\n            lookahead: range.lookahead,\n            wrap: false\n        });\n    }\n    return withCardinality(keywordToRegex(range.left), {\n        cardinality: range.cardinality,\n        lookahead: range.lookahead,\n        wrap: false\n    });\n}\nfunction keywordToRegex(keyword) {\n    return (0,_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.escapeRegExp)(keyword.value);\n}\nfunction withCardinality(regex, options) {\n    var _a;\n    if (options.wrap !== false || options.lookahead) {\n        regex = `(${(_a = options.lookahead) !== null && _a !== void 0 ? _a : \"\"}${regex})`;\n    }\n    if (options.cardinality) {\n        return `${regex}${options.cardinality}`;\n    }\n    return regex;\n} //# sourceMappingURL=grammar-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/promise-utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/langium/lib/utils/promise-utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: () => (/* binding */ Deferred),\n/* harmony export */   OperationCancelled: () => (/* binding */ OperationCancelled),\n/* harmony export */   delayNextTick: () => (/* binding */ delayNextTick),\n/* harmony export */   interruptAndCheck: () => (/* binding */ interruptAndCheck),\n/* harmony export */   isOperationCancelled: () => (/* binding */ isOperationCancelled),\n/* harmony export */   setInterruptionPeriod: () => (/* binding */ setInterruptionPeriod),\n/* harmony export */   startCancelableOperation: () => (/* binding */ startCancelableOperation)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n/**\n * Delays the execution of the current code to the next tick of the event loop.\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\n */ function delayNextTick() {\n    return new Promise((resolve)=>{\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\n        // Using `setTimeout` of the browser API accomplishes the same result.\n        if (typeof setImmediate === \"undefined\") {\n            setTimeout(resolve, 0);\n        } else {\n            setImmediate(resolve);\n        }\n    });\n}\nlet lastTick = 0;\nlet globalInterruptionPeriod = 10;\n/**\n * Reset the global interruption period and create a cancellation token source.\n */ function startCancelableOperation() {\n    lastTick = performance.now();\n    return new _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource();\n}\n/**\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\n * The default value is 10ms.\n */ function setInterruptionPeriod(period) {\n    globalInterruptionPeriod = period;\n}\n/**\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\n * this symbol as rejection reason.\n */ const OperationCancelled = Symbol(\"OperationCancelled\");\n/**\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\n * has been cancelled.\n */ function isOperationCancelled(err) {\n    return err === OperationCancelled;\n}\n/**\n * This function does two things:\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\n *\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\n * the promise) to avoid that event being exposed as an error.\n */ async function interruptAndCheck(token) {\n    if (token === _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        // Early exit in case cancellation was disabled by the caller\n        return;\n    }\n    const current = performance.now();\n    if (current - lastTick >= globalInterruptionPeriod) {\n        lastTick = current;\n        await delayNextTick();\n        // prevent calling delayNextTick every iteration of loop\n        // where delayNextTick takes up the majority or all of the\n        // globalInterruptionPeriod itself\n        lastTick = performance.now();\n    }\n    if (token.isCancellationRequested) {\n        throw OperationCancelled;\n    }\n}\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */ class Deferred {\n    constructor(){\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = (arg)=>{\n                resolve(arg);\n                return this;\n            };\n            this.reject = (err)=>{\n                reject(err);\n                return this;\n            };\n        });\n    }\n} //# sourceMappingURL=promise-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvcHJvbWlzZS11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUNRO0FBQ3RGOzs7Q0FHQyxHQUNNLFNBQVNFO0lBQ1osT0FBTyxJQUFJQyxRQUFRQyxDQUFBQTtRQUNmLG9GQUFvRjtRQUNwRixzRUFBc0U7UUFDdEUsSUFBSSxPQUFPQyxpQkFBaUIsYUFBYTtZQUNyQ0MsV0FBV0YsU0FBUztRQUN4QixPQUNLO1lBQ0RDLGFBQWFEO1FBQ2pCO0lBQ0o7QUFDSjtBQUNBLElBQUlHLFdBQVc7QUFDZixJQUFJQywyQkFBMkI7QUFDL0I7O0NBRUMsR0FDTSxTQUFTQztJQUNaRixXQUFXRyxZQUFZQyxHQUFHO0lBQzFCLE9BQU8sSUFBSVYsMkVBQXVCQTtBQUN0QztBQUNBOzs7Q0FHQyxHQUNNLFNBQVNXLHNCQUFzQkMsTUFBTTtJQUN4Q0wsMkJBQTJCSztBQUMvQjtBQUNBOzs7O0NBSUMsR0FDTSxNQUFNQyxxQkFBcUJDLE9BQU8sc0JBQXNCO0FBQy9EOzs7Q0FHQyxHQUNNLFNBQVNDLHFCQUFxQkMsR0FBRztJQUNwQyxPQUFPQSxRQUFRSDtBQUNuQjtBQUNBOzs7Ozs7Ozs7O0NBVUMsR0FDTSxlQUFlSSxrQkFBa0JDLEtBQUs7SUFDekMsSUFBSUEsVUFBVW5CLHFFQUFpQkEsQ0FBQ29CLElBQUksRUFBRTtRQUNsQyw2REFBNkQ7UUFDN0Q7SUFDSjtJQUNBLE1BQU1DLFVBQVVYLFlBQVlDLEdBQUc7SUFDL0IsSUFBSVUsVUFBVWQsWUFBWUMsMEJBQTBCO1FBQ2hERCxXQUFXYztRQUNYLE1BQU1uQjtRQUNOLHdEQUF3RDtRQUN4RCwwREFBMEQ7UUFDMUQsa0NBQWtDO1FBQ2xDSyxXQUFXRyxZQUFZQyxHQUFHO0lBQzlCO0lBQ0EsSUFBSVEsTUFBTUcsdUJBQXVCLEVBQUU7UUFDL0IsTUFBTVI7SUFDVjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTVM7SUFDVEMsYUFBYztRQUNWLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUl0QixRQUFRLENBQUNDLFNBQVNzQjtZQUNqQyxJQUFJLENBQUN0QixPQUFPLEdBQUcsQ0FBQ3VCO2dCQUNadkIsUUFBUXVCO2dCQUNSLE9BQU8sSUFBSTtZQUNmO1lBQ0EsSUFBSSxDQUFDRCxNQUFNLEdBQUcsQ0FBQ1Q7Z0JBQ1hTLE9BQU9UO2dCQUNQLE9BQU8sSUFBSTtZQUNmO1FBQ0o7SUFDSjtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvcHJvbWlzZS11dGlscy5qcz83MjUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IENhbmNlbGxhdGlvblRva2VuLCBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB9IGZyb20gJy4uL3V0aWxzL2NhbmNlbGxhdGlvbi5qcyc7XG4vKipcbiAqIERlbGF5cyB0aGUgZXhlY3V0aW9uIG9mIHRoZSBjdXJyZW50IGNvZGUgdG8gdGhlIG5leHQgdGljayBvZiB0aGUgZXZlbnQgbG9vcC5cbiAqIERvbid0IGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkgaW4gYSB0aWdodCBsb29wIHRvIHByZXZlbnQgdG9vIG1hbnkgcHJvbWlzZXMgZnJvbSBiZWluZyBjcmVhdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsYXlOZXh0VGljaygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIC8vIEluIGNhc2Ugd2UgYXJlIHJ1bm5pbmcgaW4gYSBub24tbm9kZSBlbnZpcm9ubWVudCwgYHNldEltbWVkaWF0ZWAgaXNuJ3QgYXZhaWxhYmxlLlxuICAgICAgICAvLyBVc2luZyBgc2V0VGltZW91dGAgb2YgdGhlIGJyb3dzZXIgQVBJIGFjY29tcGxpc2hlcyB0aGUgc2FtZSByZXN1bHQuXG4gICAgICAgIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZShyZXNvbHZlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxubGV0IGxhc3RUaWNrID0gMDtcbmxldCBnbG9iYWxJbnRlcnJ1cHRpb25QZXJpb2QgPSAxMDtcbi8qKlxuICogUmVzZXQgdGhlIGdsb2JhbCBpbnRlcnJ1cHRpb24gcGVyaW9kIGFuZCBjcmVhdGUgYSBjYW5jZWxsYXRpb24gdG9rZW4gc291cmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRDYW5jZWxhYmxlT3BlcmF0aW9uKCkge1xuICAgIGxhc3RUaWNrID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgcmV0dXJuIG5ldyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSgpO1xufVxuLyoqXG4gKiBDaGFuZ2UgdGhlIHBlcmlvZCBkdXJhdGlvbiBmb3IgYGludGVycnVwdEFuZENoZWNrYCB0byB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDEwbXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbnRlcnJ1cHRpb25QZXJpb2QocGVyaW9kKSB7XG4gICAgZ2xvYmFsSW50ZXJydXB0aW9uUGVyaW9kID0gcGVyaW9kO1xufVxuLyoqXG4gKiBUaGlzIHN5bWJvbCBtYXkgYmUgdGhyb3duIGluIGFuIGFzeW5jaHJvbm91cyBjb250ZXh0IGJ5IGFueSBMYW5naXVtIHNlcnZpY2UgdGhhdCByZWNlaXZlc1xuICogYSBgQ2FuY2VsbGF0aW9uVG9rZW5gLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgc3VjaCBhIHNlcnZpY2UgaXMgcmVqZWN0ZWQgd2l0aFxuICogdGhpcyBzeW1ib2wgYXMgcmVqZWN0aW9uIHJlYXNvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IE9wZXJhdGlvbkNhbmNlbGxlZCA9IFN5bWJvbCgnT3BlcmF0aW9uQ2FuY2VsbGVkJyk7XG4vKipcbiAqIFVzZSB0aGlzIGluIGEgYGNhdGNoYCBibG9jayB0byBjaGVjayB3aGV0aGVyIHRoZSB0aHJvd24gb2JqZWN0IGluZGljYXRlcyB0aGF0IHRoZSBvcGVyYXRpb25cbiAqIGhhcyBiZWVuIGNhbmNlbGxlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT3BlcmF0aW9uQ2FuY2VsbGVkKGVycikge1xuICAgIHJldHVybiBlcnIgPT09IE9wZXJhdGlvbkNhbmNlbGxlZDtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIHR3byB0aGluZ3M6XG4gKiAgMS4gQ2hlY2sgdGhlIGVsYXBzZWQgdGltZSBzaW5jZSB0aGUgbGFzdCBjYWxsIHRvIHRoaXMgZnVuY3Rpb24gb3IgdG8gYHN0YXJ0Q2FuY2VsYWJsZU9wZXJhdGlvbmAuIElmIHRoZSBwcmVkZWZpbmVkXG4gKiAgICAgcGVyaW9kIChjb25maWd1cmVkIHdpdGggYHNldEludGVycnVwdGlvblBlcmlvZGApIGlzIGV4Y2VlZGVkLCBleGVjdXRpb24gaXMgZGVsYXllZCB3aXRoIGBkZWxheU5leHRUaWNrYC5cbiAqICAyLiBJZiB0aGUgcHJlZGVmaW5lZCBwZXJpb2QgaXMgbm90IG1ldCB5ZXQgb3IgZXhlY3V0aW9uIGlzIHJlc3VtZWQgYWZ0ZXIgYW4gaW50ZXJydXB0aW9uLCB0aGUgZ2l2ZW4gY2FuY2VsbGF0aW9uXG4gKiAgICAgdG9rZW4gaXMgY2hlY2tlZCwgYW5kIGlmIGNhbmNlbGxhdGlvbiBpcyByZXF1ZXN0ZWQsIGBPcGVyYXRpb25DYW5jZWxlZGAgaXMgdGhyb3duLlxuICpcbiAqIEFsbCBzZXJ2aWNlcyBpbiBMYW5naXVtIHRoYXQgcmVjZWl2ZSBhIGBDYW5jZWxsYXRpb25Ub2tlbmAgbWF5IHBvdGVudGlhbGx5IGNhbGwgdGhpcyBmdW5jdGlvbiwgc28gdGhlXG4gKiBgQ2FuY2VsbGF0aW9uVG9rZW5gIG11c3QgYmUgY2F1Z2h0ICh3aXRoIGFuIGBhc3luY2AgdHJ5LWNhdGNoIGJsb2NrIG9yIGEgYGNhdGNoYCBjYWxsYmFjayBhdHRhY2hlZCB0b1xuICogdGhlIHByb21pc2UpIHRvIGF2b2lkIHRoYXQgZXZlbnQgYmVpbmcgZXhwb3NlZCBhcyBhbiBlcnJvci5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGludGVycnVwdEFuZENoZWNrKHRva2VuKSB7XG4gICAgaWYgKHRva2VuID09PSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lKSB7XG4gICAgICAgIC8vIEVhcmx5IGV4aXQgaW4gY2FzZSBjYW5jZWxsYXRpb24gd2FzIGRpc2FibGVkIGJ5IHRoZSBjYWxsZXJcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgaWYgKGN1cnJlbnQgLSBsYXN0VGljayA+PSBnbG9iYWxJbnRlcnJ1cHRpb25QZXJpb2QpIHtcbiAgICAgICAgbGFzdFRpY2sgPSBjdXJyZW50O1xuICAgICAgICBhd2FpdCBkZWxheU5leHRUaWNrKCk7XG4gICAgICAgIC8vIHByZXZlbnQgY2FsbGluZyBkZWxheU5leHRUaWNrIGV2ZXJ5IGl0ZXJhdGlvbiBvZiBsb29wXG4gICAgICAgIC8vIHdoZXJlIGRlbGF5TmV4dFRpY2sgdGFrZXMgdXAgdGhlIG1ham9yaXR5IG9yIGFsbCBvZiB0aGVcbiAgICAgICAgLy8gZ2xvYmFsSW50ZXJydXB0aW9uUGVyaW9kIGl0c2VsZlxuICAgICAgICBsYXN0VGljayA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH1cbiAgICBpZiAodG9rZW4uaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQpIHtcbiAgICAgICAgdGhyb3cgT3BlcmF0aW9uQ2FuY2VsbGVkO1xuICAgIH1cbn1cbi8qKlxuICogU2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBkZWZlcnJlZCBwYXR0ZXJuLlxuICogQW4gb2JqZWN0IHRoYXQgZXhwb3NlcyBhIHByb21pc2UgYW5kIGZ1bmN0aW9ucyB0byByZXNvbHZlIGFuZCByZWplY3QgaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IChhcmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFyZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlLXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJDYW5jZWxsYXRpb25Ub2tlbiIsIkNhbmNlbGxhdGlvblRva2VuU291cmNlIiwiZGVsYXlOZXh0VGljayIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0SW1tZWRpYXRlIiwic2V0VGltZW91dCIsImxhc3RUaWNrIiwiZ2xvYmFsSW50ZXJydXB0aW9uUGVyaW9kIiwic3RhcnRDYW5jZWxhYmxlT3BlcmF0aW9uIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzZXRJbnRlcnJ1cHRpb25QZXJpb2QiLCJwZXJpb2QiLCJPcGVyYXRpb25DYW5jZWxsZWQiLCJTeW1ib2wiLCJpc09wZXJhdGlvbkNhbmNlbGxlZCIsImVyciIsImludGVycnVwdEFuZENoZWNrIiwidG9rZW4iLCJOb25lIiwiY3VycmVudCIsImlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiRGVmZXJyZWQiLCJjb25zdHJ1Y3RvciIsInByb21pc2UiLCJyZWplY3QiLCJhcmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/promise-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/regexp-utils.js":
/*!********************************************************!*\
  !*** ./node_modules/langium/lib/utils/regexp-utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NEWLINE_REGEXP: () => (/* binding */ NEWLINE_REGEXP),\n/* harmony export */   escapeRegExp: () => (/* binding */ escapeRegExp),\n/* harmony export */   getCaseInsensitivePattern: () => (/* binding */ getCaseInsensitivePattern),\n/* harmony export */   getTerminalParts: () => (/* binding */ getTerminalParts),\n/* harmony export */   isMultilineComment: () => (/* binding */ isMultilineComment),\n/* harmony export */   isWhitespace: () => (/* binding */ isWhitespace),\n/* harmony export */   partialMatches: () => (/* binding */ partialMatches),\n/* harmony export */   partialRegExp: () => (/* binding */ partialRegExp),\n/* harmony export */   whitespaceCharacters: () => (/* binding */ whitespaceCharacters)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/./node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \nconst NEWLINE_REGEXP = /\\r?\\n/gm;\nconst regexpParser = new _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.RegExpParser();\n/**\n * This class is in charge of heuristically identifying start/end tokens of terminals.\n *\n * The way this works is by doing the following:\n * 1. Traverse the regular expression in the \"start state\"\n * 2. Add any encountered sets/single characters to the \"start regexp\"\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\n * 5. If we re-encounter any variable-length content we reset the end stack\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\n *\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\n */ class TerminalRegExpVisitor extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n    constructor(){\n        super(...arguments);\n        this.isStarting = true;\n        this.endRegexpStack = [];\n        this.multiline = false;\n    }\n    get endRegex() {\n        return this.endRegexpStack.join(\"\");\n    }\n    reset(regex) {\n        this.multiline = false;\n        this.regex = regex;\n        this.startRegexp = \"\";\n        this.isStarting = true;\n        this.endRegexpStack = [];\n    }\n    visitGroup(node) {\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n    }\n    visitCharacter(node) {\n        const char = String.fromCharCode(node.value);\n        if (!this.multiline && char === \"\\n\") {\n            this.multiline = true;\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        } else {\n            const escapedChar = escapeRegExp(char);\n            this.endRegexpStack.push(escapedChar);\n            if (this.isStarting) {\n                this.startRegexp += escapedChar;\n            }\n        }\n    }\n    visitSet(node) {\n        if (!this.multiline) {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            const regex = new RegExp(set);\n            this.multiline = Boolean(\"\\n\".match(regex));\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        } else {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            this.endRegexpStack.push(set);\n            if (this.isStarting) {\n                this.startRegexp += set;\n            }\n        }\n    }\n    visitChildren(node) {\n        if (node.type === \"Group\") {\n            // Ignore children of groups with quantifier (+/*/?)\n            // These groups are unrelated to start/end tokens of terminals\n            const group = node;\n            if (group.quantifier) {\n                return;\n            }\n        }\n        super.visitChildren(node);\n    }\n}\nconst visitor = new TerminalRegExpVisitor();\nfunction getTerminalParts(regexp) {\n    try {\n        if (typeof regexp !== \"string\") {\n            regexp = regexp.source;\n        }\n        regexp = `/${regexp}/`;\n        const pattern = regexpParser.pattern(regexp);\n        const parts = [];\n        for (const alternative of pattern.value.value){\n            visitor.reset(regexp);\n            visitor.visit(alternative);\n            parts.push({\n                start: visitor.startRegexp,\n                end: visitor.endRegex\n            });\n        }\n        return parts;\n    } catch (_a) {\n        return [];\n    }\n}\nfunction isMultilineComment(regexp) {\n    try {\n        if (typeof regexp === \"string\") {\n            regexp = new RegExp(regexp);\n        }\n        regexp = regexp.toString();\n        visitor.reset(regexp);\n        // Parsing the pattern might fail (since it's user code)\n        visitor.visit(regexpParser.pattern(regexp));\n        return visitor.multiline;\n    } catch (_a) {\n        return false;\n    }\n}\n/**\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\n */ const whitespaceCharacters = (\"\\f\\n\\r\t\\v \\xa0         \" + \"   \\u2028\\u2029  　\\uFEFF\").split(\"\");\nfunction isWhitespace(value) {\n    const regexp = typeof value === \"string\" ? new RegExp(value) : value;\n    return whitespaceCharacters.some((ws)=>regexp.test(ws));\n}\nfunction escapeRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction getCaseInsensitivePattern(keyword) {\n    return Array.prototype.map.call(keyword, (letter)=>/\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)).join(\"\");\n}\n/**\n * Determines whether the given input has a partial match with the specified regex.\n * @param regex The regex to partially match against\n * @param input The input string\n * @returns Whether any match exists.\n */ function partialMatches(regex, input) {\n    const partial = partialRegExp(regex);\n    const match = input.match(partial);\n    return !!match && match[0].length > 0;\n}\n/**\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\n * @param regex The input regex to be converted.\n * @returns A partial regex constructed from the input regex.\n */ function partialRegExp(regex) {\n    if (typeof regex === \"string\") {\n        regex = new RegExp(regex);\n    }\n    const re = regex, source = regex.source;\n    let i = 0;\n    function process() {\n        let result = \"\", tmp;\n        function appendRaw(nbChars) {\n            result += source.substr(i, nbChars);\n            i += nbChars;\n        }\n        function appendOptional(nbChars) {\n            result += \"(?:\" + source.substr(i, nbChars) + \"|$)\";\n            i += nbChars;\n        }\n        while(i < source.length){\n            switch(source[i]){\n                case \"\\\\\":\n                    switch(source[i + 1]){\n                        case \"c\":\n                            appendOptional(3);\n                            break;\n                        case \"x\":\n                            appendOptional(4);\n                            break;\n                        case \"u\":\n                            if (re.unicode) {\n                                if (source[i + 2] === \"{\") {\n                                    appendOptional(source.indexOf(\"}\", i) - i + 1);\n                                } else {\n                                    appendOptional(6);\n                                }\n                            } else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case \"p\":\n                        case \"P\":\n                            if (re.unicode) {\n                                appendOptional(source.indexOf(\"}\", i) - i + 1);\n                            } else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case \"k\":\n                            appendOptional(source.indexOf(\">\", i) - i + 1);\n                            break;\n                        default:\n                            appendOptional(2);\n                            break;\n                    }\n                    break;\n                case \"[\":\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source) || [];\n                    appendOptional(tmp[0].length);\n                    break;\n                case \"|\":\n                case \"^\":\n                case \"$\":\n                case \"*\":\n                case \"+\":\n                case \"?\":\n                    appendRaw(1);\n                    break;\n                case \"{\":\n                    tmp = /\\{\\d+,?\\d*\\}/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source);\n                    if (tmp) {\n                        appendRaw(tmp[0].length);\n                    } else {\n                        appendOptional(1);\n                    }\n                    break;\n                case \"(\":\n                    if (source[i + 1] === \"?\") {\n                        switch(source[i + 2]){\n                            case \":\":\n                                result += \"(?:\";\n                                i += 3;\n                                result += process() + \"|$)\";\n                                break;\n                            case \"=\":\n                                result += \"(?=\";\n                                i += 3;\n                                result += process() + \")\";\n                                break;\n                            case \"!\":\n                                tmp = i;\n                                i += 3;\n                                process();\n                                result += source.substr(tmp, i - tmp);\n                                break;\n                            case \"<\":\n                                switch(source[i + 3]){\n                                    case \"=\":\n                                    case \"!\":\n                                        tmp = i;\n                                        i += 4;\n                                        process();\n                                        result += source.substr(tmp, i - tmp);\n                                        break;\n                                    default:\n                                        appendRaw(source.indexOf(\">\", i) - i + 1);\n                                        result += process() + \"|$)\";\n                                        break;\n                                }\n                                break;\n                        }\n                    } else {\n                        appendRaw(1);\n                        result += process() + \"|$)\";\n                    }\n                    break;\n                case \")\":\n                    ++i;\n                    return result;\n                default:\n                    appendOptional(1);\n                    break;\n            }\n        }\n        return result;\n    }\n    return new RegExp(process(), regex.flags);\n} //# sourceMappingURL=regexp-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/regexp-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/stream.js":
/*!**************************************************!*\
  !*** ./node_modules/langium/lib/utils/stream.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DONE_RESULT: () => (/* binding */ DONE_RESULT),\n/* harmony export */   EMPTY_STREAM: () => (/* binding */ EMPTY_STREAM),\n/* harmony export */   Reduction: () => (/* binding */ Reduction),\n/* harmony export */   StreamImpl: () => (/* binding */ StreamImpl),\n/* harmony export */   TreeStreamImpl: () => (/* binding */ TreeStreamImpl),\n/* harmony export */   stream: () => (/* binding */ stream)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ /**\n * The default implementation of `Stream` works with two input functions:\n *  - The first function creates the initial state of an iteration.\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\n */ class StreamImpl {\n    constructor(startFn, nextFn){\n        this.startFn = startFn;\n        this.nextFn = nextFn;\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: ()=>this.nextFn(iterator.state),\n            [Symbol.iterator]: ()=>iterator\n        };\n        return iterator;\n    }\n    [Symbol.iterator]() {\n        return this.iterator();\n    }\n    isEmpty() {\n        const iterator = this.iterator();\n        return Boolean(iterator.next().done);\n    }\n    count() {\n        const iterator = this.iterator();\n        let count = 0;\n        let next = iterator.next();\n        while(!next.done){\n            count++;\n            next = iterator.next();\n        }\n        return count;\n    }\n    toArray() {\n        const result = [];\n        const iterator = this.iterator();\n        let next;\n        do {\n            next = iterator.next();\n            if (next.value !== undefined) {\n                result.push(next.value);\n            }\n        }while (!next.done);\n        return result;\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap(keyFn, valueFn) {\n        const entryStream = this.map((element)=>[\n                keyFn ? keyFn(element) : element,\n                valueFn ? valueFn(element) : element\n            ]);\n        return new Map(entryStream);\n    }\n    toString() {\n        return this.join();\n    }\n    concat(other) {\n        return new StreamImpl(()=>({\n                first: this.startFn(),\n                firstDone: false,\n                iterator: other[Symbol.iterator]()\n            }), (state)=>{\n            let result;\n            if (!state.firstDone) {\n                do {\n                    result = this.nextFn(state.first);\n                    if (!result.done) {\n                        return result;\n                    }\n                }while (!result.done);\n                state.firstDone = true;\n            }\n            do {\n                result = state.iterator.next();\n                if (!result.done) {\n                    return result;\n                }\n            }while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    join(separator = \",\") {\n        const iterator = this.iterator();\n        let value = \"\";\n        let result;\n        let addSeparator = false;\n        do {\n            result = iterator.next();\n            if (!result.done) {\n                if (addSeparator) {\n                    value += separator;\n                }\n                value += toString(result.value);\n            }\n            addSeparator = true;\n        }while (!result.done);\n        return value;\n    }\n    indexOf(searchElement, fromIndex = 0) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while(!next.done){\n            if (index >= fromIndex && next.value === searchElement) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    every(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while(!next.done){\n            if (!predicate(next.value)) {\n                return false;\n            }\n            next = iterator.next();\n        }\n        return true;\n    }\n    some(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while(!next.done){\n            if (predicate(next.value)) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    forEach(callbackfn) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while(!next.done){\n            callbackfn(next.value, index);\n            next = iterator.next();\n            index++;\n        }\n    }\n    map(callbackfn) {\n        return new StreamImpl(this.startFn, (state)=>{\n            const { done, value } = this.nextFn(state);\n            if (done) {\n                return DONE_RESULT;\n            } else {\n                return {\n                    done: false,\n                    value: callbackfn(value)\n                };\n            }\n        });\n    }\n    filter(predicate) {\n        return new StreamImpl(this.startFn, (state)=>{\n            let result;\n            do {\n                result = this.nextFn(state);\n                if (!result.done && predicate(result.value)) {\n                    return result;\n                }\n            }while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    nonNullable() {\n        return this.filter((e)=>e !== undefined && e !== null);\n    }\n    reduce(callbackfn, initialValue) {\n        const iterator = this.iterator();\n        let previousValue = initialValue;\n        let next = iterator.next();\n        while(!next.done){\n            if (previousValue === undefined) {\n                previousValue = next.value;\n            } else {\n                previousValue = callbackfn(previousValue, next.value);\n            }\n            next = iterator.next();\n        }\n        return previousValue;\n    }\n    reduceRight(callbackfn, initialValue) {\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\n    }\n    recursiveReduce(iterator, callbackfn, initialValue) {\n        const next = iterator.next();\n        if (next.done) {\n            return initialValue;\n        }\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\n        if (previousValue === undefined) {\n            return next.value;\n        }\n        return callbackfn(previousValue, next.value);\n    }\n    find(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while(!next.done){\n            if (predicate(next.value)) {\n                return next.value;\n            }\n            next = iterator.next();\n        }\n        return undefined;\n    }\n    findIndex(predicate) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while(!next.done){\n            if (predicate(next.value)) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    includes(searchElement) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while(!next.done){\n            if (next.value === searchElement) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    flatMap(callbackfn) {\n        return new StreamImpl(()=>({\n                this: this.startFn()\n            }), (state)=>{\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    } else {\n                        return next;\n                    }\n                }\n                const { done, value } = this.nextFn(state.this);\n                if (!done) {\n                    const mapped = callbackfn(value);\n                    if (isIterable(mapped)) {\n                        state.iterator = mapped[Symbol.iterator]();\n                    } else {\n                        return {\n                            done: false,\n                            value: mapped\n                        };\n                    }\n                }\n            }while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    flat(depth) {\n        if (depth === undefined) {\n            depth = 1;\n        }\n        if (depth <= 0) {\n            return this;\n        }\n        const stream = depth > 1 ? this.flat(depth - 1) : this;\n        return new StreamImpl(()=>({\n                this: stream.startFn()\n            }), (state)=>{\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    } else {\n                        return next;\n                    }\n                }\n                const { done, value } = stream.nextFn(state.this);\n                if (!done) {\n                    if (isIterable(value)) {\n                        state.iterator = value[Symbol.iterator]();\n                    } else {\n                        return {\n                            done: false,\n                            value: value\n                        };\n                    }\n                }\n            }while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    head() {\n        const iterator = this.iterator();\n        const result = iterator.next();\n        if (result.done) {\n            return undefined;\n        }\n        return result.value;\n    }\n    tail(skipCount = 1) {\n        return new StreamImpl(()=>{\n            const state = this.startFn();\n            for(let i = 0; i < skipCount; i++){\n                const next = this.nextFn(state);\n                if (next.done) {\n                    return state;\n                }\n            }\n            return state;\n        }, this.nextFn);\n    }\n    limit(maxSize) {\n        return new StreamImpl(()=>({\n                size: 0,\n                state: this.startFn()\n            }), (state)=>{\n            state.size++;\n            if (state.size > maxSize) {\n                return DONE_RESULT;\n            }\n            return this.nextFn(state.state);\n        });\n    }\n    distinct(by) {\n        return new StreamImpl(()=>({\n                set: new Set(),\n                internalState: this.startFn()\n            }), (state)=>{\n            let result;\n            do {\n                result = this.nextFn(state.internalState);\n                if (!result.done) {\n                    const value = by ? by(result.value) : result.value;\n                    if (!state.set.has(value)) {\n                        state.set.add(value);\n                        return result;\n                    }\n                }\n            }while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    exclude(other, key) {\n        const otherKeySet = new Set();\n        for (const item of other){\n            const value = key ? key(item) : item;\n            otherKeySet.add(value);\n        }\n        return this.filter((e)=>{\n            const ownKey = key ? key(e) : e;\n            return !otherKeySet.has(ownKey);\n        });\n    }\n}\nfunction toString(item) {\n    if (typeof item === \"string\") {\n        return item;\n    }\n    if (typeof item === \"undefined\") {\n        return \"undefined\";\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof item.toString === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return item.toString();\n    }\n    return Object.prototype.toString.call(item);\n}\nfunction isIterable(obj) {\n    return !!obj && typeof obj[Symbol.iterator] === \"function\";\n}\n/**\n * An empty stream of any type.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst EMPTY_STREAM = new StreamImpl(()=>undefined, ()=>DONE_RESULT);\n/**\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\n */ const DONE_RESULT = Object.freeze({\n    done: true,\n    value: undefined\n});\n/**\n * Create a stream from one or more iterables or array-likes.\n */ function stream(...collections) {\n    if (collections.length === 1) {\n        const collection = collections[0];\n        if (collection instanceof StreamImpl) {\n            return collection;\n        }\n        if (isIterable(collection)) {\n            return new StreamImpl(()=>collection[Symbol.iterator](), (iterator)=>iterator.next());\n        }\n        if (typeof collection.length === \"number\") {\n            return new StreamImpl(()=>({\n                    index: 0\n                }), (state)=>{\n                if (state.index < collection.length) {\n                    return {\n                        done: false,\n                        value: collection[state.index++]\n                    };\n                } else {\n                    return DONE_RESULT;\n                }\n            });\n        }\n    }\n    if (collections.length > 1) {\n        return new StreamImpl(()=>({\n                collIndex: 0,\n                arrIndex: 0\n            }), (state)=>{\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (!next.done) {\n                        return next;\n                    }\n                    state.iterator = undefined;\n                }\n                if (state.array) {\n                    if (state.arrIndex < state.array.length) {\n                        return {\n                            done: false,\n                            value: state.array[state.arrIndex++]\n                        };\n                    }\n                    state.array = undefined;\n                    state.arrIndex = 0;\n                }\n                if (state.collIndex < collections.length) {\n                    const collection = collections[state.collIndex++];\n                    if (isIterable(collection)) {\n                        state.iterator = collection[Symbol.iterator]();\n                    } else if (collection && typeof collection.length === \"number\") {\n                        state.array = collection;\n                    }\n                }\n            }while (state.iterator || state.array || state.collIndex < collections.length);\n            return DONE_RESULT;\n        });\n    }\n    return EMPTY_STREAM;\n}\n/**\n * The default implementation of `TreeStream` takes a root element and a function that computes the\n * children of its argument. Whether the root node included in the stream is controlled with the\n * `includeRoot` option, which defaults to `false`.\n */ class TreeStreamImpl extends StreamImpl {\n    constructor(root, children, options){\n        super(()=>({\n                iterators: (options === null || options === void 0 ? void 0 : options.includeRoot) ? [\n                    [\n                        root\n                    ][Symbol.iterator]()\n                ] : [\n                    children(root)[Symbol.iterator]()\n                ],\n                pruned: false\n            }), (state)=>{\n            if (state.pruned) {\n                state.iterators.pop();\n                state.pruned = false;\n            }\n            while(state.iterators.length > 0){\n                const iterator = state.iterators[state.iterators.length - 1];\n                const next = iterator.next();\n                if (next.done) {\n                    state.iterators.pop();\n                } else {\n                    state.iterators.push(children(next.value)[Symbol.iterator]());\n                    return next;\n                }\n            }\n            return DONE_RESULT;\n        });\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: ()=>this.nextFn(iterator.state),\n            prune: ()=>{\n                iterator.state.pruned = true;\n            },\n            [Symbol.iterator]: ()=>iterator\n        };\n        return iterator;\n    }\n}\n/**\n * A set of utility functions that reduce a stream to a single value.\n */ var Reduction;\n(function(Reduction) {\n    /**\n     * Compute the sum of a number stream.\n     */ function sum(stream) {\n        return stream.reduce((a, b)=>a + b, 0);\n    }\n    Reduction.sum = sum;\n    /**\n     * Compute the product of a number stream.\n     */ function product(stream) {\n        return stream.reduce((a, b)=>a * b, 0);\n    }\n    Reduction.product = product;\n    /**\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\n     */ function min(stream) {\n        return stream.reduce((a, b)=>Math.min(a, b));\n    }\n    Reduction.min = min;\n    /**\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\n     */ function max(stream) {\n        return stream.reduce((a, b)=>Math.max(a, b));\n    }\n    Reduction.max = max;\n})(Reduction || (Reduction = {})); //# sourceMappingURL=stream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/utils/uri-utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/langium/lib/utils/uri-utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URI: () => (/* reexport safe */ vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI),\n/* harmony export */   UriUtils: () => (/* binding */ UriUtils)\n/* harmony export */ });\n/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-uri */ \"(ssr)/./node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\nvar UriUtils;\n(function(UriUtils) {\n    UriUtils.basename = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.basename;\n    UriUtils.dirname = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.dirname;\n    UriUtils.extname = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.extname;\n    UriUtils.joinPath = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.joinPath;\n    UriUtils.resolvePath = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.resolvePath;\n    function equals(a, b) {\n        return (a === null || a === void 0 ? void 0 : a.toString()) === (b === null || b === void 0 ? void 0 : b.toString());\n    }\n    UriUtils.equals = equals;\n    function relative(from, to) {\n        const fromPath = typeof from === \"string\" ? from : from.path;\n        const toPath = typeof to === \"string\" ? to : to.path;\n        const fromParts = fromPath.split(\"/\").filter((e)=>e.length > 0);\n        const toParts = toPath.split(\"/\").filter((e)=>e.length > 0);\n        let i = 0;\n        for(; i < fromParts.length; i++){\n            if (fromParts[i] !== toParts[i]) {\n                break;\n            }\n        }\n        const backPart = \"../\".repeat(fromParts.length - i);\n        const toPart = toParts.slice(i).join(\"/\");\n        return backPart + toPart;\n    }\n    UriUtils.relative = relative;\n    function normalize(uri) {\n        return vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uri.toString()).toString();\n    }\n    UriUtils.normalize = normalize;\n})(UriUtils || (UriUtils = {})); //# sourceMappingURL=uri-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvdXJpLXV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUN0QztBQUN6QjtBQUNSLElBQUlFLFNBQVM7QUFDbkIsVUFBVUEsUUFBUTtJQUNmQSxTQUFTQyxRQUFRLEdBQUdGLDZDQUFLQSxDQUFDRSxRQUFRO0lBQ2xDRCxTQUFTRSxPQUFPLEdBQUdILDZDQUFLQSxDQUFDRyxPQUFPO0lBQ2hDRixTQUFTRyxPQUFPLEdBQUdKLDZDQUFLQSxDQUFDSSxPQUFPO0lBQ2hDSCxTQUFTSSxRQUFRLEdBQUdMLDZDQUFLQSxDQUFDSyxRQUFRO0lBQ2xDSixTQUFTSyxXQUFXLEdBQUdOLDZDQUFLQSxDQUFDTSxXQUFXO0lBQ3hDLFNBQVNDLE9BQU9DLENBQUMsRUFBRUMsQ0FBQztRQUNoQixPQUFPLENBQUNELE1BQU0sUUFBUUEsTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFRSxRQUFRLEVBQUMsTUFBUUQsQ0FBQUEsTUFBTSxRQUFRQSxNQUFNLEtBQUssSUFBSSxLQUFLLElBQUlBLEVBQUVDLFFBQVEsRUFBQztJQUN0SDtJQUNBVCxTQUFTTSxNQUFNLEdBQUdBO0lBQ2xCLFNBQVNJLFNBQVNDLElBQUksRUFBRUMsRUFBRTtRQUN0QixNQUFNQyxXQUFXLE9BQU9GLFNBQVMsV0FBV0EsT0FBT0EsS0FBS0csSUFBSTtRQUM1RCxNQUFNQyxTQUFTLE9BQU9ILE9BQU8sV0FBV0EsS0FBS0EsR0FBR0UsSUFBSTtRQUNwRCxNQUFNRSxZQUFZSCxTQUFTSSxLQUFLLENBQUMsS0FBS0MsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxNQUFNLEdBQUc7UUFDN0QsTUFBTUMsVUFBVU4sT0FBT0UsS0FBSyxDQUFDLEtBQUtDLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsTUFBTSxHQUFHO1FBQ3pELElBQUlFLElBQUk7UUFDUixNQUFPQSxJQUFJTixVQUFVSSxNQUFNLEVBQUVFLElBQUs7WUFDOUIsSUFBSU4sU0FBUyxDQUFDTSxFQUFFLEtBQUtELE9BQU8sQ0FBQ0MsRUFBRSxFQUFFO2dCQUM3QjtZQUNKO1FBQ0o7UUFDQSxNQUFNQyxXQUFXLE1BQU1DLE1BQU0sQ0FBQ1IsVUFBVUksTUFBTSxHQUFHRTtRQUNqRCxNQUFNRyxTQUFTSixRQUFRSyxLQUFLLENBQUNKLEdBQUdLLElBQUksQ0FBQztRQUNyQyxPQUFPSixXQUFXRTtJQUN0QjtJQUNBekIsU0FBU1UsUUFBUSxHQUFHQTtJQUNwQixTQUFTa0IsVUFBVUMsR0FBRztRQUNsQixPQUFPL0IsMkNBQUdBLENBQUNnQyxLQUFLLENBQUNELElBQUlwQixRQUFRLElBQUlBLFFBQVE7SUFDN0M7SUFDQVQsU0FBUzRCLFNBQVMsR0FBR0E7QUFDekIsR0FBRzVCLFlBQWFBLENBQUFBLFdBQVcsQ0FBQyxLQUM1QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaXJvLW5ldHdvcmstd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi91dGlscy91cmktdXRpbHMuanM/YTY0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMiBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBVUkksIFV0aWxzIH0gZnJvbSAndnNjb2RlLXVyaSc7XG5leHBvcnQgeyBVUkkgfTtcbmV4cG9ydCB2YXIgVXJpVXRpbHM7XG4oZnVuY3Rpb24gKFVyaVV0aWxzKSB7XG4gICAgVXJpVXRpbHMuYmFzZW5hbWUgPSBVdGlscy5iYXNlbmFtZTtcbiAgICBVcmlVdGlscy5kaXJuYW1lID0gVXRpbHMuZGlybmFtZTtcbiAgICBVcmlVdGlscy5leHRuYW1lID0gVXRpbHMuZXh0bmFtZTtcbiAgICBVcmlVdGlscy5qb2luUGF0aCA9IFV0aWxzLmpvaW5QYXRoO1xuICAgIFVyaVV0aWxzLnJlc29sdmVQYXRoID0gVXRpbHMucmVzb2x2ZVBhdGg7XG4gICAgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIChhID09PSBudWxsIHx8IGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGEudG9TdHJpbmcoKSkgPT09IChiID09PSBudWxsIHx8IGIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGIudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIFVyaVV0aWxzLmVxdWFscyA9IGVxdWFscztcbiAgICBmdW5jdGlvbiByZWxhdGl2ZShmcm9tLCB0bykge1xuICAgICAgICBjb25zdCBmcm9tUGF0aCA9IHR5cGVvZiBmcm9tID09PSAnc3RyaW5nJyA/IGZyb20gOiBmcm9tLnBhdGg7XG4gICAgICAgIGNvbnN0IHRvUGF0aCA9IHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IHRvLnBhdGg7XG4gICAgICAgIGNvbnN0IGZyb21QYXJ0cyA9IGZyb21QYXRoLnNwbGl0KCcvJykuZmlsdGVyKGUgPT4gZS5sZW5ndGggPiAwKTtcbiAgICAgICAgY29uc3QgdG9QYXJ0cyA9IHRvUGF0aC5zcGxpdCgnLycpLmZpbHRlcihlID0+IGUubGVuZ3RoID4gMCk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYWNrUGFydCA9ICcuLi8nLnJlcGVhdChmcm9tUGFydHMubGVuZ3RoIC0gaSk7XG4gICAgICAgIGNvbnN0IHRvUGFydCA9IHRvUGFydHMuc2xpY2UoaSkuam9pbignLycpO1xuICAgICAgICByZXR1cm4gYmFja1BhcnQgKyB0b1BhcnQ7XG4gICAgfVxuICAgIFVyaVV0aWxzLnJlbGF0aXZlID0gcmVsYXRpdmU7XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHVyaSkge1xuICAgICAgICByZXR1cm4gVVJJLnBhcnNlKHVyaS50b1N0cmluZygpKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBVcmlVdGlscy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG59KShVcmlVdGlscyB8fCAoVXJpVXRpbHMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJpLXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJVUkkiLCJVdGlscyIsIlVyaVV0aWxzIiwiYmFzZW5hbWUiLCJkaXJuYW1lIiwiZXh0bmFtZSIsImpvaW5QYXRoIiwicmVzb2x2ZVBhdGgiLCJlcXVhbHMiLCJhIiwiYiIsInRvU3RyaW5nIiwicmVsYXRpdmUiLCJmcm9tIiwidG8iLCJmcm9tUGF0aCIsInBhdGgiLCJ0b1BhdGgiLCJmcm9tUGFydHMiLCJzcGxpdCIsImZpbHRlciIsImUiLCJsZW5ndGgiLCJ0b1BhcnRzIiwiaSIsImJhY2tQYXJ0IiwicmVwZWF0IiwidG9QYXJ0Iiwic2xpY2UiLCJqb2luIiwibm9ybWFsaXplIiwidXJpIiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/utils/uri-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/validation/document-validator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langium/lib/validation/document-validator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDocumentValidator: () => (/* binding */ DefaultDocumentValidator),\n/* harmony export */   DocumentValidator: () => (/* binding */ DocumentValidator),\n/* harmony export */   getDiagnosticRange: () => (/* binding */ getDiagnosticRange),\n/* harmony export */   toDiagnosticData: () => (/* binding */ toDiagnosticData),\n/* harmony export */   toDiagnosticSeverity: () => (/* binding */ toDiagnosticSeverity)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _validation_registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validation-registry.js */ \"(ssr)/./node_modules/langium/lib/validation/validation-registry.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\n\nclass DefaultDocumentValidator {\n    constructor(services){\n        this.validationRegistry = services.validation.ValidationRegistry;\n        this.metadata = services.LanguageMetaData;\n    }\n    async validateDocument(document, options = {}, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const parseResult = document.parseResult;\n        const diagnostics = [];\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n        if (!options.categories || options.categories.includes(\"built-in\")) {\n            this.processLexingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterLexingErrors && diagnostics.some((d)=>{\n                var _a;\n                return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LexingError;\n            })) {\n                return diagnostics;\n            }\n            this.processParsingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterParsingErrors && diagnostics.some((d)=>{\n                var _a;\n                return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.ParsingError;\n            })) {\n                return diagnostics;\n            }\n            this.processLinkingErrors(document, diagnostics, options);\n            if (options.stopAfterLinkingErrors && diagnostics.some((d)=>{\n                var _a;\n                return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LinkingError;\n            })) {\n                return diagnostics;\n            }\n        }\n        // Process custom validations\n        try {\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\n        } catch (err) {\n            if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.isOperationCancelled)(err)) {\n                throw err;\n            }\n            console.error(\"An error occurred during validation:\", err);\n        }\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n        return diagnostics;\n    }\n    processLexingErrors(parseResult, diagnostics, _options) {\n        var _a, _b, _c;\n        const lexerDiagnostics = [\n            ...parseResult.lexerErrors,\n            ...(_b = (_a = parseResult.lexerReport) === null || _a === void 0 ? void 0 : _a.diagnostics) !== null && _b !== void 0 ? _b : []\n        ];\n        for (const lexerDiagnostic of lexerDiagnostics){\n            const severity = (_c = lexerDiagnostic.severity) !== null && _c !== void 0 ? _c : \"error\";\n            const diagnostic = {\n                severity: toDiagnosticSeverity(severity),\n                range: {\n                    start: {\n                        line: lexerDiagnostic.line - 1,\n                        character: lexerDiagnostic.column - 1\n                    },\n                    end: {\n                        line: lexerDiagnostic.line - 1,\n                        character: lexerDiagnostic.column + lexerDiagnostic.length - 1\n                    }\n                },\n                message: lexerDiagnostic.message,\n                data: toDiagnosticData(severity),\n                source: this.getSource()\n            };\n            diagnostics.push(diagnostic);\n        }\n    }\n    processParsingErrors(parseResult, diagnostics, _options) {\n        for (const parserError of parseResult.parserErrors){\n            let range = undefined;\n            // We can run into the chevrotain error recovery here\n            // The token contained in the parser error might be automatically inserted\n            // In this case every position value will be `NaN`\n            if (isNaN(parserError.token.startOffset)) {\n                // Some special parser error types contain a `previousToken`\n                // We can simply append our diagnostic to that token\n                if (\"previousToken\" in parserError) {\n                    const token = parserError.previousToken;\n                    if (!isNaN(token.startOffset)) {\n                        const position = {\n                            line: token.endLine - 1,\n                            character: token.endColumn\n                        };\n                        range = {\n                            start: position,\n                            end: position\n                        };\n                    } else {\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\n                        // Point to document start\n                        const position = {\n                            line: 0,\n                            character: 0\n                        };\n                        range = {\n                            start: position,\n                            end: position\n                        };\n                    }\n                }\n            } else {\n                range = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.tokenToRange)(parserError.token);\n            }\n            if (range) {\n                const diagnostic = {\n                    severity: toDiagnosticSeverity(\"error\"),\n                    range,\n                    message: parserError.message,\n                    data: (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.ParsingError),\n                    source: this.getSource()\n                };\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n    processLinkingErrors(document, diagnostics, _options) {\n        for (const reference of document.references){\n            const linkingError = reference.error;\n            if (linkingError) {\n                const info = {\n                    node: linkingError.container,\n                    property: linkingError.property,\n                    index: linkingError.index,\n                    data: {\n                        code: DocumentValidator.LinkingError,\n                        containerType: linkingError.container.$type,\n                        property: linkingError.property,\n                        refText: linkingError.reference.$refText\n                    }\n                };\n                diagnostics.push(this.toDiagnostic(\"error\", linkingError.message, info));\n            }\n        }\n    }\n    async validateAst(rootNode, options, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const validationItems = [];\n        const acceptor = (severity, message, info)=>{\n            validationItems.push(this.toDiagnostic(severity, message, info));\n        };\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\n        return validationItems;\n    }\n    async validateAstBefore(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        var _a;\n        const checksBefore = this.validationRegistry.checksBefore;\n        for (const checkBefore of checksBefore){\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            await checkBefore(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n        }\n    }\n    async validateAstNodes(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        await Promise.all((0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_4__.streamAst)(rootNode).map(async (node)=>{\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n            for (const check of checks){\n                await check(node, acceptor, cancelToken);\n            }\n        }));\n    }\n    async validateAstAfter(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        var _a;\n        const checksAfter = this.validationRegistry.checksAfter;\n        for (const checkAfter of checksAfter){\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            await checkAfter(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n        }\n    }\n    toDiagnostic(severity, message, info) {\n        return {\n            message,\n            range: getDiagnosticRange(info),\n            severity: toDiagnosticSeverity(severity),\n            code: info.code,\n            codeDescription: info.codeDescription,\n            tags: info.tags,\n            relatedInformation: info.relatedInformation,\n            data: info.data,\n            source: this.getSource()\n        };\n    }\n    getSource() {\n        return this.metadata.languageId;\n    }\n}\nfunction getDiagnosticRange(info) {\n    if (info.range) {\n        return info.range;\n    }\n    let cstNode;\n    if (typeof info.property === \"string\") {\n        cstNode = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__.findNodeForProperty)(info.node.$cstNode, info.property, info.index);\n    } else if (typeof info.keyword === \"string\") {\n        cstNode = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__.findNodeForKeyword)(info.node.$cstNode, info.keyword, info.index);\n    }\n    cstNode !== null && cstNode !== void 0 ? cstNode : cstNode = info.node.$cstNode;\n    if (!cstNode) {\n        return {\n            start: {\n                line: 0,\n                character: 0\n            },\n            end: {\n                line: 0,\n                character: 0\n            }\n        };\n    }\n    return cstNode.range;\n}\n/**\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\n *\n * @param severity The lexing diagnostic severity\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\n */ function toDiagnosticSeverity(severity) {\n    switch(severity){\n        case \"error\":\n            return 1;\n        case \"warning\":\n            return 2;\n        case \"info\":\n            return 3;\n        case \"hint\":\n            return 4;\n        default:\n            throw new Error(\"Invalid diagnostic severity: \" + severity);\n    }\n}\nfunction toDiagnosticData(severity) {\n    switch(severity){\n        case \"error\":\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingError);\n        case \"warning\":\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingWarning);\n        case \"info\":\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingInfo);\n        case \"hint\":\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingHint);\n        default:\n            throw new Error(\"Invalid diagnostic severity: \" + severity);\n    }\n}\nvar DocumentValidator;\n(function(DocumentValidator) {\n    DocumentValidator.LexingError = \"lexing-error\";\n    DocumentValidator.LexingWarning = \"lexing-warning\";\n    DocumentValidator.LexingInfo = \"lexing-info\";\n    DocumentValidator.LexingHint = \"lexing-hint\";\n    DocumentValidator.ParsingError = \"parsing-error\";\n    DocumentValidator.LinkingError = \"linking-error\";\n})(DocumentValidator || (DocumentValidator = {})); //# sourceMappingURL=document-validator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/validation/document-validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/validation/validation-registry.js":
/*!********************************************************************!*\
  !*** ./node_modules/langium/lib/validation/validation-registry.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValidationCategory: () => (/* binding */ ValidationCategory),\n/* harmony export */   ValidationRegistry: () => (/* binding */ ValidationRegistry),\n/* harmony export */   diagnosticData: () => (/* binding */ diagnosticData)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"(ssr)/./node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/./node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n/**\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\n */ function diagnosticData(code) {\n    return {\n        code\n    };\n}\nvar ValidationCategory;\n(function(ValidationCategory) {\n    ValidationCategory.all = [\n        \"fast\",\n        \"slow\",\n        \"built-in\"\n    ];\n})(ValidationCategory || (ValidationCategory = {}));\n/**\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\n */ class ValidationRegistry {\n    constructor(services){\n        this.entries = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.entriesBefore = [];\n        this.entriesAfter = [];\n        this.reflection = services.shared.AstReflection;\n    }\n    /**\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\n     * or an array of validation checks.\n     *\n     * @param checksRecord Set of validation checks to register.\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */ register(checksRecord, thisObj = this, category = \"fast\") {\n        if (category === \"built-in\") {\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\n        }\n        for (const [type, ch] of Object.entries(checksRecord)){\n            const callbacks = ch;\n            if (Array.isArray(callbacks)) {\n                for (const check of callbacks){\n                    const entry = {\n                        check: this.wrapValidationException(check, thisObj),\n                        category\n                    };\n                    this.addEntry(type, entry);\n                }\n            } else if (typeof callbacks === \"function\") {\n                const entry = {\n                    check: this.wrapValidationException(callbacks, thisObj),\n                    category\n                };\n                this.addEntry(type, entry);\n            } else {\n                (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.assertUnreachable)(callbacks);\n            }\n        }\n    }\n    wrapValidationException(check, thisObj) {\n        return async (node, accept, cancelToken)=>{\n            await this.handleException(()=>check.call(thisObj, node, accept, cancelToken), \"An error occurred during validation\", accept, node);\n        };\n    }\n    async handleException(functionality, messageContext, accept, node) {\n        try {\n            await functionality();\n        } catch (err) {\n            if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.isOperationCancelled)(err)) {\n                throw err;\n            }\n            console.error(`${messageContext}:`, err);\n            if (err instanceof Error && err.stack) {\n                console.error(err.stack);\n            }\n            const messageDetails = err instanceof Error ? err.message : String(err);\n            accept(\"error\", `${messageContext}: ${messageDetails}`, {\n                node\n            });\n        }\n    }\n    addEntry(type, entry) {\n        if (type === \"AstNode\") {\n            this.entries.add(\"AstNode\", entry);\n            return;\n        }\n        for (const subtype of this.reflection.getAllSubTypes(type)){\n            this.entries.add(subtype, entry);\n        }\n    }\n    getChecks(type, categories) {\n        let checks = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.entries.get(type)).concat(this.entries.get(\"AstNode\"));\n        if (categories) {\n            checks = checks.filter((entry)=>categories.includes(entry.category));\n        }\n        return checks.map((entry)=>entry.check);\n    }\n    /**\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\n     *\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\n     * here the map for mapping names to nodes could be established.\n     * During the usual checks on the nodes, they are put into this map with their name.\n     *\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\n     * Therefore it is recommended to clear stored information\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\n     * AND _after_ validating the AST to free memory by information which are no longer used.\n     *\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */ registerBeforeDocument(checkBefore, thisObj = this) {\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, \"An error occurred during set-up of the validation\", thisObj));\n    }\n    /**\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\n     *\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\n     * here the map with all the collected nodes and their names is checked\n     * and validation hints are created for all nodes with the same name.\n     *\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\n     * Therefore it is recommended to clear stored information\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\n     * AND _after_ validating the AST to free memory by information which are no longer used.\n     *\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */ registerAfterDocument(checkAfter, thisObj = this) {\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, \"An error occurred during tear-down of the validation\", thisObj));\n    }\n    wrapPreparationException(check, messageContext, thisObj) {\n        return async (rootNode, accept, categories, cancelToken)=>{\n            await this.handleException(()=>check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\n        };\n    }\n    get checksBefore() {\n        return this.entriesBefore;\n    }\n    get checksAfter() {\n        return this.entriesAfter;\n    }\n} //# sourceMappingURL=validation-registry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/validation/validation-registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/ast-descriptions.js":
/*!****************************************************************!*\
  !*** ./node_modules/langium/lib/workspace/ast-descriptions.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAstNodeDescriptionProvider: () => (/* binding */ DefaultAstNodeDescriptionProvider),\n/* harmony export */   DefaultReferenceDescriptionProvider: () => (/* binding */ DefaultReferenceDescriptionProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/./node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\n\nclass DefaultAstNodeDescriptionProvider {\n    constructor(services){\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n    }\n    createDescription(node, name, document) {\n        const doc = document !== null && document !== void 0 ? document : (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(node);\n        name !== null && name !== void 0 ? name : name = this.nameProvider.getName(node);\n        const path = this.astNodeLocator.getAstNodePath(node);\n        if (!name) {\n            throw new Error(`Node at path ${path} has no name.`);\n        }\n        let nameNodeSegment;\n        const nameSegmentGetter = ()=>{\n            var _a;\n            return nameNodeSegment !== null && nameNodeSegment !== void 0 ? nameNodeSegment : nameNodeSegment = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)((_a = this.nameProvider.getNameNode(node)) !== null && _a !== void 0 ? _a : node.$cstNode);\n        };\n        return {\n            node,\n            name,\n            get nameSegment () {\n                return nameSegmentGetter();\n            },\n            selectionSegment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)(node.$cstNode),\n            type: node.$type,\n            documentUri: doc.uri,\n            path\n        };\n    }\n}\nclass DefaultReferenceDescriptionProvider {\n    constructor(services){\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    async createDescriptions(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        const descr = [];\n        const rootNode = document.parseResult.value;\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.streamAst)(rootNode)){\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_3__.interruptAndCheck)(cancelToken);\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.streamReferences)(astNode).filter((refInfo)=>!(0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_4__.isLinkingError)(refInfo)).forEach((refInfo)=>{\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\n                const description = this.createDescription(refInfo);\n                if (description) {\n                    descr.push(description);\n                }\n            });\n        }\n        return descr;\n    }\n    createDescription(refInfo) {\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\n        const refCstNode = refInfo.reference.$refNode;\n        if (!targetNodeDescr || !refCstNode) {\n            return undefined;\n        }\n        const docUri = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(refInfo.container).uri;\n        return {\n            sourceUri: docUri,\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\n            targetUri: targetNodeDescr.documentUri,\n            targetPath: targetNodeDescr.path,\n            segment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)(refCstNode),\n            local: _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_5__.UriUtils.equals(targetNodeDescr.documentUri, docUri)\n        };\n    }\n} //# sourceMappingURL=ast-descriptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/ast-descriptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/ast-node-locator.js":
/*!****************************************************************!*\
  !*** ./node_modules/langium/lib/workspace/ast-node-locator.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAstNodeLocator: () => (/* binding */ DefaultAstNodeLocator)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ class DefaultAstNodeLocator {\n    constructor(){\n        this.segmentSeparator = \"/\";\n        this.indexSeparator = \"@\";\n    }\n    getAstNodePath(node) {\n        if (node.$container) {\n            const containerPath = this.getAstNodePath(node.$container);\n            const newSegment = this.getPathSegment(node);\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\n            return nodePath;\n        }\n        return \"\";\n    }\n    getPathSegment({ $containerProperty, $containerIndex }) {\n        if (!$containerProperty) {\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\n        }\n        if ($containerIndex !== undefined) {\n            return $containerProperty + this.indexSeparator + $containerIndex;\n        }\n        return $containerProperty;\n    }\n    getAstNode(node, path) {\n        const segments = path.split(this.segmentSeparator);\n        return segments.reduce((previousValue, currentValue)=>{\n            if (!previousValue || currentValue.length === 0) {\n                return previousValue;\n            }\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\n            if (propertyIndex > 0) {\n                const property = currentValue.substring(0, propertyIndex);\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\n                const array = previousValue[property];\n                return array === null || array === void 0 ? void 0 : array[arrayIndex];\n            }\n            return previousValue[currentValue];\n        }, node);\n    }\n} //# sourceMappingURL=ast-node-locator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL2FzdC1ub2RlLWxvY2F0b3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OzhFQUk4RSxHQUN2RSxNQUFNQTtJQUNUQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNDLGNBQWMsR0FBRztJQUMxQjtJQUNBQyxlQUFlQyxJQUFJLEVBQUU7UUFDakIsSUFBSUEsS0FBS0MsVUFBVSxFQUFFO1lBQ2pCLE1BQU1DLGdCQUFnQixJQUFJLENBQUNILGNBQWMsQ0FBQ0MsS0FBS0MsVUFBVTtZQUN6RCxNQUFNRSxhQUFhLElBQUksQ0FBQ0MsY0FBYyxDQUFDSjtZQUN2QyxNQUFNSyxXQUFXSCxnQkFBZ0IsSUFBSSxDQUFDTCxnQkFBZ0IsR0FBR007WUFDekQsT0FBT0U7UUFDWDtRQUNBLE9BQU87SUFDWDtJQUNBRCxlQUFlLEVBQUVFLGtCQUFrQixFQUFFQyxlQUFlLEVBQUUsRUFBRTtRQUNwRCxJQUFJLENBQUNELG9CQUFvQjtZQUNyQixNQUFNLElBQUlFLE1BQU07UUFDcEI7UUFDQSxJQUFJRCxvQkFBb0JFLFdBQVc7WUFDL0IsT0FBT0gscUJBQXFCLElBQUksQ0FBQ1IsY0FBYyxHQUFHUztRQUN0RDtRQUNBLE9BQU9EO0lBQ1g7SUFDQUksV0FBV1YsSUFBSSxFQUFFVyxJQUFJLEVBQUU7UUFDbkIsTUFBTUMsV0FBV0QsS0FBS0UsS0FBSyxDQUFDLElBQUksQ0FBQ2hCLGdCQUFnQjtRQUNqRCxPQUFPZSxTQUFTRSxNQUFNLENBQUMsQ0FBQ0MsZUFBZUM7WUFDbkMsSUFBSSxDQUFDRCxpQkFBaUJDLGFBQWFDLE1BQU0sS0FBSyxHQUFHO2dCQUM3QyxPQUFPRjtZQUNYO1lBQ0EsTUFBTUcsZ0JBQWdCRixhQUFhRyxPQUFPLENBQUMsSUFBSSxDQUFDckIsY0FBYztZQUM5RCxJQUFJb0IsZ0JBQWdCLEdBQUc7Z0JBQ25CLE1BQU1FLFdBQVdKLGFBQWFLLFNBQVMsQ0FBQyxHQUFHSDtnQkFDM0MsTUFBTUksYUFBYUMsU0FBU1AsYUFBYUssU0FBUyxDQUFDSCxnQkFBZ0I7Z0JBQ25FLE1BQU1NLFFBQVFULGFBQWEsQ0FBQ0ssU0FBUztnQkFDckMsT0FBT0ksVUFBVSxRQUFRQSxVQUFVLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUssQ0FBQ0YsV0FBVztZQUMxRTtZQUNBLE9BQU9QLGFBQWEsQ0FBQ0MsYUFBYTtRQUN0QyxHQUFHaEI7SUFDUDtBQUNKLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL2FzdC1ub2RlLWxvY2F0b3IuanM/Y2YzNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgY2xhc3MgRGVmYXVsdEFzdE5vZGVMb2NhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zZWdtZW50U2VwYXJhdG9yID0gJy8nO1xuICAgICAgICB0aGlzLmluZGV4U2VwYXJhdG9yID0gJ0AnO1xuICAgIH1cbiAgICBnZXRBc3ROb2RlUGF0aChub2RlKSB7XG4gICAgICAgIGlmIChub2RlLiRjb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclBhdGggPSB0aGlzLmdldEFzdE5vZGVQYXRoKG5vZGUuJGNvbnRhaW5lcik7XG4gICAgICAgICAgICBjb25zdCBuZXdTZWdtZW50ID0gdGhpcy5nZXRQYXRoU2VnbWVudChub2RlKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVQYXRoID0gY29udGFpbmVyUGF0aCArIHRoaXMuc2VnbWVudFNlcGFyYXRvciArIG5ld1NlZ21lbnQ7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBnZXRQYXRoU2VnbWVudCh7ICRjb250YWluZXJQcm9wZXJ0eSwgJGNvbnRhaW5lckluZGV4IH0pIHtcbiAgICAgICAgaWYgKCEkY29udGFpbmVyUHJvcGVydHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgJyRjb250YWluZXJQcm9wZXJ0eScgaW4gQVNUIG5vZGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkY29udGFpbmVySW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuICRjb250YWluZXJQcm9wZXJ0eSArIHRoaXMuaW5kZXhTZXBhcmF0b3IgKyAkY29udGFpbmVySW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRjb250YWluZXJQcm9wZXJ0eTtcbiAgICB9XG4gICAgZ2V0QXN0Tm9kZShub2RlLCBwYXRoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCh0aGlzLnNlZ21lbnRTZXBhcmF0b3IpO1xuICAgICAgICByZXR1cm4gc2VnbWVudHMucmVkdWNlKChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmICghcHJldmlvdXNWYWx1ZSB8fCBjdXJyZW50VmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eUluZGV4ID0gY3VycmVudFZhbHVlLmluZGV4T2YodGhpcy5pbmRleFNlcGFyYXRvcik7XG4gICAgICAgICAgICBpZiAocHJvcGVydHlJbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IGN1cnJlbnRWYWx1ZS5zdWJzdHJpbmcoMCwgcHJvcGVydHlJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlJbmRleCA9IHBhcnNlSW50KGN1cnJlbnRWYWx1ZS5zdWJzdHJpbmcocHJvcGVydHlJbmRleCArIDEpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheSA9IHByZXZpb3VzVmFsdWVbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheSA9PT0gbnVsbCB8fCBhcnJheSA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJyYXlbYXJyYXlJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZVtjdXJyZW50VmFsdWVdO1xuICAgICAgICB9LCBub2RlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3Qtbm9kZS1sb2NhdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJEZWZhdWx0QXN0Tm9kZUxvY2F0b3IiLCJjb25zdHJ1Y3RvciIsInNlZ21lbnRTZXBhcmF0b3IiLCJpbmRleFNlcGFyYXRvciIsImdldEFzdE5vZGVQYXRoIiwibm9kZSIsIiRjb250YWluZXIiLCJjb250YWluZXJQYXRoIiwibmV3U2VnbWVudCIsImdldFBhdGhTZWdtZW50Iiwibm9kZVBhdGgiLCIkY29udGFpbmVyUHJvcGVydHkiLCIkY29udGFpbmVySW5kZXgiLCJFcnJvciIsInVuZGVmaW5lZCIsImdldEFzdE5vZGUiLCJwYXRoIiwic2VnbWVudHMiLCJzcGxpdCIsInJlZHVjZSIsInByZXZpb3VzVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJsZW5ndGgiLCJwcm9wZXJ0eUluZGV4IiwiaW5kZXhPZiIsInByb3BlcnR5Iiwic3Vic3RyaW5nIiwiYXJyYXlJbmRleCIsInBhcnNlSW50IiwiYXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/ast-node-locator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/configuration.js":
/*!*************************************************************!*\
  !*** ./node_modules/langium/lib/workspace/configuration.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultConfigurationProvider: () => (/* binding */ DefaultConfigurationProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/event.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/events.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n/**\n * Base configuration provider for building up other configuration providers\n */ class DefaultConfigurationProvider {\n    constructor(services){\n        this._ready = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.settings = {};\n        this.workspaceConfig = false;\n        this.onConfigurationSectionUpdateEmitter = new _utils_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    initialize(params) {\n        var _a, _b;\n        this.workspaceConfig = (_b = (_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.configuration) !== null && _b !== void 0 ? _b : false;\n    }\n    async initialized(params) {\n        if (this.workspaceConfig) {\n            if (params.register) {\n                // params.register(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const languages = this.serviceRegistry.all;\n                params.register({\n                    // Listen to configuration changes for all languages\n                    section: languages.map((lang)=>this.toSectionName(lang.LanguageMetaData.languageId))\n                });\n            }\n            if (params.fetchConfiguration) {\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const configToUpdate = this.serviceRegistry.all.map((lang)=>({\n                        // Fetch the configuration changes for all languages\n                        section: this.toSectionName(lang.LanguageMetaData.languageId)\n                    }));\n                // get workspace configurations (default scope URI)\n                const configs = await params.fetchConfiguration(configToUpdate);\n                configToUpdate.forEach((conf, idx)=>{\n                    this.updateSectionConfiguration(conf.section, configs[idx]);\n                });\n            }\n        }\n        this._ready.resolve();\n    }\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */ updateConfiguration(change) {\n        if (!change.settings) {\n            return;\n        }\n        Object.keys(change.settings).forEach((section)=>{\n            const configuration = change.settings[section];\n            this.updateSectionConfiguration(section, configuration);\n            this.onConfigurationSectionUpdateEmitter.fire({\n                section,\n                configuration\n            });\n        });\n    }\n    updateSectionConfiguration(section, configuration) {\n        this.settings[section] = configuration;\n    }\n    /**\n    * Returns a configuration value stored for the given language.\n    *\n    * @param language The language id\n    * @param configuration Configuration name\n    */ async getConfiguration(language, configuration) {\n        await this.ready;\n        const sectionName = this.toSectionName(language);\n        if (this.settings[sectionName]) {\n            return this.settings[sectionName][configuration];\n        }\n    }\n    toSectionName(languageId) {\n        return `${languageId}`;\n    }\n    get onConfigurationSectionUpdate() {\n        return this.onConfigurationSectionUpdateEmitter.event;\n    }\n} //# sourceMappingURL=configuration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/configuration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/document-builder.js":
/*!****************************************************************!*\
  !*** ./node_modules/langium/lib/workspace/document-builder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDocumentBuilder: () => (/* binding */ DefaultDocumentBuilder)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/disposable.js */ \"(ssr)/./node_modules/langium/lib/utils/disposable.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/./node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../validation/validation-registry.js */ \"(ssr)/./node_modules/langium/lib/validation/validation-registry.js\");\n/* harmony import */ var _documents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./documents.js */ \"(ssr)/./node_modules/langium/lib/workspace/documents.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\n\n\nclass DefaultDocumentBuilder {\n    constructor(services){\n        this.updateBuildOptions = {\n            // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\n            validation: {\n                categories: [\n                    \"built-in\",\n                    \"fast\"\n                ]\n            }\n        };\n        this.updateListeners = [];\n        this.buildPhaseListeners = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.documentPhaseListeners = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.buildState = new Map();\n        this.documentBuildWaiters = new Map();\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.indexManager = services.workspace.IndexManager;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    async build(documents, options = {}, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        var _a, _b;\n        for (const document of documents){\n            const key = document.uri.toString();\n            if (document.state === _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Validated) {\n                if (typeof options.validation === \"boolean\" && options.validation) {\n                    // Force re-running all validation checks\n                    document.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences;\n                    document.diagnostics = undefined;\n                    this.buildState.delete(key);\n                } else if (typeof options.validation === \"object\") {\n                    const buildState = this.buildState.get(key);\n                    const previousCategories = (_a = buildState === null || buildState === void 0 ? void 0 : buildState.result) === null || _a === void 0 ? void 0 : _a.validationChecks;\n                    if (previousCategories) {\n                        // Validation with explicit options was requested for a document that has already been partly validated.\n                        // In this case, we need to merge the previous validation categories with the new ones.\n                        const newCategories = (_b = options.validation.categories) !== null && _b !== void 0 ? _b : _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.ValidationCategory.all;\n                        const categories = newCategories.filter((c)=>!previousCategories.includes(c));\n                        if (categories.length > 0) {\n                            this.buildState.set(key, {\n                                completed: false,\n                                options: {\n                                    validation: Object.assign(Object.assign({}, options.validation), {\n                                        categories\n                                    })\n                                },\n                                result: buildState.result\n                            });\n                            document.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences;\n                        }\n                    }\n                }\n            } else {\n                // Default: forget any previous build options\n                this.buildState.delete(key);\n            }\n        }\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        await this.emitUpdate(documents.map((e)=>e.uri), []);\n        await this.buildDocuments(documents, options, cancelToken);\n    }\n    async update(changed, deleted, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        // Remove all metadata of documents that are reported as deleted\n        for (const deletedUri of deleted){\n            this.langiumDocuments.deleteDocument(deletedUri);\n            this.buildState.delete(deletedUri.toString());\n            this.indexManager.remove(deletedUri);\n        }\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\n        for (const changedUri of changed){\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\n            if (!invalidated) {\n                // We create an unparsed, invalid document.\n                // This will be parsed as soon as we reach the first document builder phase.\n                // This allows to cancel the parsing process later in case we need it.\n                const newDocument = this.langiumDocumentFactory.fromModel({\n                    $type: \"INVALID\"\n                }, changedUri);\n                newDocument.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n                this.langiumDocuments.addDocument(newDocument);\n            }\n            this.buildState.delete(changedUri.toString());\n        }\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\n        const allChangedUris = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.stream)(changed).concat(deleted).map((uri)=>uri.toString()).toSet();\n        this.langiumDocuments.all.filter((doc)=>!allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris)).forEach((doc)=>{\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            linker.unlink(doc);\n            doc.state = Math.min(doc.state, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.ComputedScopes);\n            doc.diagnostics = undefined;\n        });\n        // Notify listeners of the update\n        await this.emitUpdate(changed, deleted);\n        // Only allow interrupting the execution after all state changes are done\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n        // Collect and sort all documents that we should rebuild\n        const rebuildDocuments = this.sortDocuments(this.langiumDocuments.all.filter((doc)=>{\n            var _a;\n            // This includes those that were reported as changed and those that we selected for relinking\n            return doc.state < _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Linked || !((_a = this.buildState.get(doc.uri.toString())) === null || _a === void 0 ? void 0 : _a.completed);\n        }).toArray());\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\n    }\n    async emitUpdate(changed, deleted) {\n        await Promise.all(this.updateListeners.map((listener)=>listener(changed, deleted)));\n    }\n    /**\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\n     *\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\n     * in files that are currently not opened in the editor.\n     */ sortDocuments(documents) {\n        let left = 0;\n        let right = documents.length - 1;\n        while(left < right){\n            while(left < documents.length && this.hasTextDocument(documents[left])){\n                left++;\n            }\n            while(right >= 0 && !this.hasTextDocument(documents[right])){\n                right--;\n            }\n            if (left < right) {\n                [documents[left], documents[right]] = [\n                    documents[right],\n                    documents[left]\n                ];\n            }\n        }\n        return documents;\n    }\n    hasTextDocument(doc) {\n        var _a;\n        return Boolean((_a = this.textDocuments) === null || _a === void 0 ? void 0 : _a.get(doc.uri));\n    }\n    /**\n     * Check whether the given document should be relinked after changes were found in the given URIs.\n     */ shouldRelink(document, changedUris) {\n        // Relink documents with linking errors -- maybe those references can be resolved now\n        if (document.references.some((ref)=>ref.error !== undefined)) {\n            return true;\n        }\n        // Check whether the document is affected by any of the changed URIs\n        return this.indexManager.isAffected(document, changedUris);\n    }\n    onUpdate(callback) {\n        this.updateListeners.push(callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(()=>{\n            const index = this.updateListeners.indexOf(callback);\n            if (index >= 0) {\n                this.updateListeners.splice(index, 1);\n            }\n        });\n    }\n    /**\n     * Build the given documents by stepping through all build phases. If a document's state indicates\n     * that a certain build phase is already done, the phase is skipped for that document.\n     *\n     * @param documents The documents to build.\n     * @param options the {@link BuildOptions} to use.\n     * @param cancelToken A cancellation token that can be used to cancel the build.\n     * @returns A promise that resolves when the build is done.\n     */ async buildDocuments(documents, options, cancelToken) {\n        this.prepareBuild(documents, options);\n        // 0. Parse content\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Parsed, cancelToken, (doc)=>this.langiumDocumentFactory.update(doc, cancelToken));\n        // 1. Index content\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedContent, cancelToken, (doc)=>this.indexManager.updateContent(doc, cancelToken));\n        // 2. Compute scopes\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.ComputedScopes, cancelToken, async (doc)=>{\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\n        });\n        // 3. Linking\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Linked, cancelToken, (doc)=>{\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            return linker.link(doc, cancelToken);\n        });\n        // 4. Index references\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences, cancelToken, (doc)=>this.indexManager.updateReferences(doc, cancelToken));\n        // 5. Validation\n        const toBeValidated = documents.filter((doc)=>this.shouldValidate(doc));\n        await this.runCancelable(toBeValidated, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Validated, cancelToken, (doc)=>this.validate(doc, cancelToken));\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\n        for (const doc of documents){\n            const state = this.buildState.get(doc.uri.toString());\n            if (state) {\n                state.completed = true;\n            }\n        }\n    }\n    /**\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\n     *\n     * @param documents collection of documents to be built\n     * @param options the {@link BuildOptions} to use\n     */ prepareBuild(documents, options) {\n        for (const doc of documents){\n            const key = doc.uri.toString();\n            const state = this.buildState.get(key);\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\n            // and continue where it was cancelled.\n            if (!state || state.completed) {\n                this.buildState.set(key, {\n                    completed: false,\n                    options,\n                    result: state === null || state === void 0 ? void 0 : state.result\n                });\n            }\n        }\n    }\n    /**\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\n     *\n     * @param documents The array of documents to process.\n     * @param targetState The target {@link DocumentState} to bring the documents to.\n     * @param cancelToken A token that can be used to cancel the operation.\n     * @param callback A function to be called for each document.\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\n     */ async runCancelable(documents, targetState, cancelToken, callback) {\n        const filtered = documents.filter((doc)=>doc.state < targetState);\n        for (const document of filtered){\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n            await callback(document);\n            document.state = targetState;\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\n        }\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\n        // For example, this happens in case the cancellation triggers between the processing of two documents\n        // Or files that were picked up during the workspace initialization\n        const targetStateDocs = documents.filter((doc)=>doc.state === targetState);\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\n        this.currentState = targetState;\n    }\n    onBuildPhase(targetState, callback) {\n        this.buildPhaseListeners.add(targetState, callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(()=>{\n            this.buildPhaseListeners.delete(targetState, callback);\n        });\n    }\n    onDocumentPhase(targetState, callback) {\n        this.documentPhaseListeners.add(targetState, callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(()=>{\n            this.documentPhaseListeners.delete(targetState, callback);\n        });\n    }\n    waitUntil(state, uriOrToken, cancelToken) {\n        let uri = undefined;\n        if (uriOrToken && \"path\" in uriOrToken) {\n            uri = uriOrToken;\n        } else {\n            cancelToken = uriOrToken;\n        }\n        cancelToken !== null && cancelToken !== void 0 ? cancelToken : cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None;\n        if (uri) {\n            const document = this.langiumDocuments.getDocument(uri);\n            if (document && document.state > state) {\n                return Promise.resolve(uri);\n            }\n        }\n        if (this.currentState >= state) {\n            return Promise.resolve(undefined);\n        } else if (cancelToken.isCancellationRequested) {\n            return Promise.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.OperationCancelled);\n        }\n        return new Promise((resolve, reject)=>{\n            const buildDisposable = this.onBuildPhase(state, ()=>{\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                if (uri) {\n                    const document = this.langiumDocuments.getDocument(uri);\n                    resolve(document === null || document === void 0 ? void 0 : document.uri);\n                } else {\n                    resolve(undefined);\n                }\n            });\n            const cancelDisposable = cancelToken.onCancellationRequested(()=>{\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.OperationCancelled);\n            });\n        });\n    }\n    async notifyDocumentPhase(document, state, cancelToken) {\n        const listeners = this.documentPhaseListeners.get(state);\n        const listenersCopy = listeners.slice();\n        for (const listener of listenersCopy){\n            try {\n                await listener(document, cancelToken);\n            } catch (err) {\n                // Ignore cancellation errors\n                // We want to finish the listeners before throwing\n                if (!(0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.isOperationCancelled)(err)) {\n                    throw err;\n                }\n            }\n        }\n    }\n    async notifyBuildPhase(documents, state, cancelToken) {\n        if (documents.length === 0) {\n            // Don't notify when no document has been processed\n            return;\n        }\n        const listeners = this.buildPhaseListeners.get(state);\n        const listenersCopy = listeners.slice();\n        for (const listener of listenersCopy){\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n            await listener(documents, cancelToken);\n        }\n    }\n    /**\n     * Determine whether the given document should be validated during a build. The default\n     * implementation checks the `validation` property of the build options. If it's set to `true`\n     * or a `ValidationOptions` object, the document is included in the validation phase.\n     */ shouldValidate(document) {\n        return Boolean(this.getBuildOptions(document).validation);\n    }\n    /**\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\n     * If the document already contains diagnostics, the new ones are added to the list.\n     */ async validate(document, cancelToken) {\n        var _a, _b;\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\n        const validationSetting = this.getBuildOptions(document).validation;\n        const options = typeof validationSetting === \"object\" ? validationSetting : undefined;\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\n        if (document.diagnostics) {\n            document.diagnostics.push(...diagnostics);\n        } else {\n            document.diagnostics = diagnostics;\n        }\n        // Store information about the executed validation in the build state\n        const state = this.buildState.get(document.uri.toString());\n        if (state) {\n            (_a = state.result) !== null && _a !== void 0 ? _a : state.result = {};\n            const newCategories = (_b = options === null || options === void 0 ? void 0 : options.categories) !== null && _b !== void 0 ? _b : _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.ValidationCategory.all;\n            if (state.result.validationChecks) {\n                state.result.validationChecks.push(...newCategories);\n            } else {\n                state.result.validationChecks = [\n                    ...newCategories\n                ];\n            }\n        }\n    }\n    getBuildOptions(document) {\n        var _a, _b;\n        return (_b = (_a = this.buildState.get(document.uri.toString())) === null || _a === void 0 ? void 0 : _a.options) !== null && _b !== void 0 ? _b : {};\n    }\n} //# sourceMappingURL=document-builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/document-builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/documents.js":
/*!*********************************************************!*\
  !*** ./node_modules/langium/lib/workspace/documents.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLangiumDocumentFactory: () => (/* binding */ DefaultLangiumDocumentFactory),\n/* harmony export */   DefaultLangiumDocuments: () => (/* binding */ DefaultLangiumDocuments),\n/* harmony export */   DocumentState: () => (/* binding */ DocumentState),\n/* harmony export */   TextDocument: () => (/* reexport safe */ vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./documents.js */ \"(ssr)/./node_modules/vscode-languageserver-textdocument/lib/esm/main.js\");\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/./node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ /**\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\n *  the overhead is very small, just a few kilobytes.\n * Everything else of that package (at the time contributing) is also defined\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\n */ \n\n\n\n\n/**\n * A document is subject to several phases that are run in predefined order. Any state value implies that\n * smaller state values are finished as well.\n */ var DocumentState;\n(function(DocumentState) {\n    /**\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\n     * document instance is no longer valid.\n     */ DocumentState[DocumentState[\"Changed\"] = 0] = \"Changed\";\n    /**\n     * An AST has been created from the text content. The document structure can be traversed,\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\n     * at this stage as a preprocessing step.\n     */ DocumentState[DocumentState[\"Parsed\"] = 1] = \"Parsed\";\n    /**\n     * The `IndexManager` service has processed AST nodes of this document. This means the\n     * exported symbols are available in the global scope and can be resolved from other documents.\n     */ DocumentState[DocumentState[\"IndexedContent\"] = 2] = \"IndexedContent\";\n    /**\n     * The `ScopeComputation` service has processed this document. This means the local symbols\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\n     * Once a document has reached this state, you may follow every reference - it will lazily\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\n     * the target is not in scope.\n     */ DocumentState[DocumentState[\"ComputedScopes\"] = 3] = \"ComputedScopes\";\n    /**\n     * The `Linker` service has processed this document. All outgoing references have been\n     * resolved or marked as erroneous.\n     */ DocumentState[DocumentState[\"Linked\"] = 4] = \"Linked\";\n    /**\n     * The `IndexManager` service has processed AST node references of this document. This is\n     * necessary to determine which documents are affected by a change in one of the workspace\n     * documents.\n     */ DocumentState[DocumentState[\"IndexedReferences\"] = 5] = \"IndexedReferences\";\n    /**\n     * The `DocumentValidator` service has processed this document. The language server listens\n     * to the results of this phase and sends diagnostics to the client.\n     */ DocumentState[DocumentState[\"Validated\"] = 6] = \"Validated\";\n})(DocumentState || (DocumentState = {}));\nclass DefaultLangiumDocumentFactory {\n    constructor(services){\n        this.serviceRegistry = services.ServiceRegistry;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n    }\n    async fromUri(uri, cancellationToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.None) {\n        const content = await this.fileSystemProvider.readFile(uri);\n        return this.createAsync(uri, content, cancellationToken);\n    }\n    fromTextDocument(textDocument, uri, token) {\n        uri = uri !== null && uri !== void 0 ? uri : _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(textDocument.uri);\n        if (_utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.is(token)) {\n            return this.createAsync(uri, textDocument, token);\n        } else {\n            return this.create(uri, textDocument, token);\n        }\n    }\n    fromString(text, uri, token) {\n        if (_utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.is(token)) {\n            return this.createAsync(uri, text, token);\n        } else {\n            return this.create(uri, text, token);\n        }\n    }\n    fromModel(model, uri) {\n        return this.create(uri, {\n            $model: model\n        });\n    }\n    create(uri, content, options) {\n        if (typeof content === \"string\") {\n            const parseResult = this.parse(uri, content, options);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        } else if (\"$model\" in content) {\n            const parseResult = {\n                value: content.$model,\n                parserErrors: [],\n                lexerErrors: []\n            };\n            return this.createLangiumDocument(parseResult, uri);\n        } else {\n            const parseResult = this.parse(uri, content.getText(), options);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    async createAsync(uri, content, cancelToken) {\n        if (typeof content === \"string\") {\n            const parseResult = await this.parseAsync(uri, content, cancelToken);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        } else {\n            const parseResult = await this.parseAsync(uri, content.getText(), cancelToken);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    /**\n     * Create a LangiumDocument from a given parse result.\n     *\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\n     * should not be necessary because the main purpose of the TextDocument is to convert between\n     * text ranges and offsets, which is done solely in LSP request handling.\n     *\n     * With the introduction of {@link update} below this method is supposed to be mainly called\n     * during workspace initialization and on addition/recognition of new files, while changes in\n     * existing documents are processed via {@link update}.\n     */ createLangiumDocument(parseResult, uri, textDocument, text) {\n        let document;\n        if (textDocument) {\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                textDocument\n            };\n        } else {\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                get textDocument () {\n                    return textDocumentGetter();\n                }\n            };\n        }\n        parseResult.value.$document = document;\n        return document;\n    }\n    async update(document, cancellationToken) {\n        var _a, _b;\n        // The CST full text property contains the original text that was used to create the AST.\n        const oldText = (_a = document.parseResult.value.$cstNode) === null || _a === void 0 ? void 0 : _a.root.fullText;\n        const textDocument = (_b = this.textDocuments) === null || _b === void 0 ? void 0 : _b.get(document.uri.toString());\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\n        if (textDocument) {\n            Object.defineProperty(document, \"textDocument\", {\n                value: textDocument\n            });\n        } else {\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\n            Object.defineProperty(document, \"textDocument\", {\n                get: textDocumentGetter\n            });\n        }\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\n        // Therefore, we only parse if the text has actually changed.\n        if (oldText !== text) {\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\n            document.parseResult.value.$document = document;\n        }\n        document.state = DocumentState.Parsed;\n        return document;\n    }\n    parse(uri, text, options) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.LangiumParser.parse(text, options);\n    }\n    parseAsync(uri, text, cancellationToken) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.AsyncParser.parse(text, cancellationToken);\n    }\n    createTextDocumentGetter(uri, text) {\n        const serviceRegistry = this.serviceRegistry;\n        let textDoc = undefined;\n        return ()=>{\n            return textDoc !== null && textDoc !== void 0 ? textDoc : textDoc = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument.create(uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text !== null && text !== void 0 ? text : \"\");\n        };\n    }\n}\nclass DefaultLangiumDocuments {\n    constructor(services){\n        this.documentMap = new Map();\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get all() {\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.documentMap.values());\n    }\n    addDocument(document) {\n        const uriString = document.uri.toString();\n        if (this.documentMap.has(uriString)) {\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\n        }\n        this.documentMap.set(uriString, document);\n    }\n    getDocument(uri) {\n        const uriString = uri.toString();\n        return this.documentMap.get(uriString);\n    }\n    async getOrCreateDocument(uri, cancellationToken) {\n        let document = this.getDocument(uri);\n        if (document) {\n            return document;\n        }\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n        this.addDocument(document);\n        return document;\n    }\n    createDocument(uri, text, cancellationToken) {\n        if (cancellationToken) {\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then((document)=>{\n                this.addDocument(document);\n                return document;\n            });\n        } else {\n            const document = this.langiumDocumentFactory.fromString(text, uri);\n            this.addDocument(document);\n            return document;\n        }\n    }\n    hasDocument(uri) {\n        return this.documentMap.has(uri.toString());\n    }\n    invalidateDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\n            linker.unlink(langiumDoc);\n            langiumDoc.state = DocumentState.Changed;\n            langiumDoc.precomputedScopes = undefined;\n            langiumDoc.diagnostics = undefined;\n        }\n        return langiumDoc;\n    }\n    deleteDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            this.documentMap.delete(uriString);\n        }\n        return langiumDoc;\n    }\n} //# sourceMappingURL=documents.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/documents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/file-system-provider.js":
/*!********************************************************************!*\
  !*** ./node_modules/langium/lib/workspace/file-system-provider.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmptyFileSystem: () => (/* binding */ EmptyFileSystem),\n/* harmony export */   EmptyFileSystemProvider: () => (/* binding */ EmptyFileSystemProvider)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ class EmptyFileSystemProvider {\n    readFile() {\n        throw new Error(\"No file system is available.\");\n    }\n    async readDirectory() {\n        return [];\n    }\n}\nconst EmptyFileSystem = {\n    fileSystemProvider: ()=>new EmptyFileSystemProvider()\n}; //# sourceMappingURL=file-system-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL2ZpbGUtc3lzdGVtLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7OEVBSThFLEdBQ3ZFLE1BQU1BO0lBQ1RDLFdBQVc7UUFDUCxNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQSxNQUFNQyxnQkFBZ0I7UUFDbEIsT0FBTyxFQUFFO0lBQ2I7QUFDSjtBQUNPLE1BQU1DLGtCQUFrQjtJQUMzQkMsb0JBQW9CLElBQU0sSUFBSUw7QUFDbEMsRUFBRSxDQUNGLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Npcm8tbmV0d29yay13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9maWxlLXN5c3RlbS1wcm92aWRlci5qcz83MmEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIyIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmV4cG9ydCBjbGFzcyBFbXB0eUZpbGVTeXN0ZW1Qcm92aWRlciB7XG4gICAgcmVhZEZpbGUoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZmlsZSBzeXN0ZW0gaXMgYXZhaWxhYmxlLicpO1xuICAgIH1cbiAgICBhc3luYyByZWFkRGlyZWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEVtcHR5RmlsZVN5c3RlbSA9IHtcbiAgICBmaWxlU3lzdGVtUHJvdmlkZXI6ICgpID0+IG5ldyBFbXB0eUZpbGVTeXN0ZW1Qcm92aWRlcigpXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS1zeXN0ZW0tcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIkVtcHR5RmlsZVN5c3RlbVByb3ZpZGVyIiwicmVhZEZpbGUiLCJFcnJvciIsInJlYWREaXJlY3RvcnkiLCJFbXB0eUZpbGVTeXN0ZW0iLCJmaWxlU3lzdGVtUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/file-system-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/index-manager.js":
/*!*************************************************************!*\
  !*** ./node_modules/langium/lib/workspace/index-manager.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultIndexManager: () => (/* binding */ DefaultIndexManager)\n/* harmony export */ });\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/caching.js */ \"(ssr)/./node_modules/langium/lib/utils/caching.js\");\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/./node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\n\n\nclass DefaultIndexManager {\n    constructor(services){\n        /**\n         * The symbol index stores all `AstNodeDescription` items exported by a document.\n         * The key used in this map is the string representation of the specific document URI.\n         */ this.symbolIndex = new Map();\n        /**\n         * This is a cache for the `allElements()` method.\n         * It caches the descriptions from `symbolIndex` grouped by types.\n         */ this.symbolByTypeIndex = new _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__.ContextCache();\n        /**\n         * This index keeps track of all `ReferenceDescription` items exported by a document.\n         * This is used to compute which elements are affected by a document change\n         * and for finding references to an AST node.\n         */ this.referenceIndex = new Map();\n        this.documents = services.workspace.LangiumDocuments;\n        this.serviceRegistry = services.ServiceRegistry;\n        this.astReflection = services.AstReflection;\n    }\n    findAllReferences(targetNode, astNodePath) {\n        const targetDocUri = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(targetNode).uri;\n        const result = [];\n        this.referenceIndex.forEach((docRefs)=>{\n            docRefs.forEach((refDescr)=>{\n                if (_utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\n                    result.push(refDescr);\n                }\n            });\n        });\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(result);\n    }\n    allElements(nodeType, uris) {\n        let documentUris = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.symbolIndex.keys());\n        if (uris) {\n            documentUris = documentUris.filter((uri)=>!uris || uris.has(uri));\n        }\n        return documentUris.map((uri)=>this.getFileDescriptions(uri, nodeType)).flat();\n    }\n    getFileDescriptions(uri, nodeType) {\n        var _a;\n        if (!nodeType) {\n            return (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n        }\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, ()=>{\n            var _a;\n            const allFileDescriptions = (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n            return allFileDescriptions.filter((e)=>this.astReflection.isSubtype(e.type, nodeType));\n        });\n        return descriptions;\n    }\n    remove(uri) {\n        const uriString = uri.toString();\n        this.symbolIndex.delete(uriString);\n        this.symbolByTypeIndex.clear(uriString);\n        this.referenceIndex.delete(uriString);\n    }\n    async updateContent(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__.CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\n        const uri = document.uri.toString();\n        this.symbolIndex.set(uri, exports);\n        this.symbolByTypeIndex.clear(uri);\n    }\n    async updateReferences(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__.CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\n        this.referenceIndex.set(document.uri.toString(), indexData);\n    }\n    isAffected(document, changedUris) {\n        const references = this.referenceIndex.get(document.uri.toString());\n        if (!references) {\n            return false;\n        }\n        return references.some((ref)=>!ref.local && changedUris.has(ref.targetUri.toString()));\n    }\n} //# sourceMappingURL=index-manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/index-manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/workspace-lock.js":
/*!**************************************************************!*\
  !*** ./node_modules/langium/lib/workspace/workspace-lock.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultWorkspaceLock: () => (/* binding */ DefaultWorkspaceLock)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\nclass DefaultWorkspaceLock {\n    constructor(){\n        this.previousTokenSource = new _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource();\n        this.writeQueue = [];\n        this.readQueue = [];\n        this.done = true;\n    }\n    write(action) {\n        this.cancelWrite();\n        const tokenSource = (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.startCancelableOperation)();\n        this.previousTokenSource = tokenSource;\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\n    }\n    read(action) {\n        return this.enqueue(this.readQueue, action);\n    }\n    enqueue(queue, action, cancellationToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.Deferred();\n        const entry = {\n            action,\n            deferred,\n            cancellationToken\n        };\n        queue.push(entry);\n        this.performNextOperation();\n        return deferred.promise;\n    }\n    async performNextOperation() {\n        if (!this.done) {\n            return;\n        }\n        const entries = [];\n        if (this.writeQueue.length > 0) {\n            // Just perform the next write action\n            entries.push(this.writeQueue.shift());\n        } else if (this.readQueue.length > 0) {\n            // Empty the read queue and perform all actions in parallel\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\n        } else {\n            return;\n        }\n        this.done = false;\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken })=>{\n            try {\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\n                const result = await Promise.resolve().then(()=>action(cancellationToken));\n                deferred.resolve(result);\n            } catch (err) {\n                if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.isOperationCancelled)(err)) {\n                    // If the operation was cancelled, we don't want to reject the promise\n                    deferred.resolve(undefined);\n                } else {\n                    deferred.reject(err);\n                }\n            }\n        }));\n        this.done = true;\n        this.performNextOperation();\n    }\n    cancelWrite() {\n        this.previousTokenSource.cancel();\n    }\n} //# sourceMappingURL=workspace-lock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL3dvcmtzcGFjZS1sb2NrLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7OzhFQUk4RSxHQUNRO0FBQ2U7QUFDOUYsTUFBTUs7SUFDVEMsYUFBYztRQUNWLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUcsSUFBSU4sMkVBQXVCQTtRQUN0RCxJQUFJLENBQUNPLFVBQVUsR0FBRyxFQUFFO1FBQ3BCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7UUFDbkIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7SUFDQUMsTUFBTUMsTUFBTSxFQUFFO1FBQ1YsSUFBSSxDQUFDQyxXQUFXO1FBQ2hCLE1BQU1DLGNBQWNWLGlGQUF3QkE7UUFDNUMsSUFBSSxDQUFDRyxtQkFBbUIsR0FBR087UUFDM0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUNQLFVBQVUsRUFBRUksUUFBUUUsWUFBWUUsS0FBSztJQUNsRTtJQUNBQyxLQUFLTCxNQUFNLEVBQUU7UUFDVCxPQUFPLElBQUksQ0FBQ0csT0FBTyxDQUFDLElBQUksQ0FBQ04sU0FBUyxFQUFFRztJQUN4QztJQUNBRyxRQUFRRyxLQUFLLEVBQUVOLE1BQU0sRUFBRU8sb0JBQW9CbkIscUVBQWlCQSxDQUFDb0IsSUFBSSxFQUFFO1FBQy9ELE1BQU1DLFdBQVcsSUFBSW5CLDZEQUFRQTtRQUM3QixNQUFNb0IsUUFBUTtZQUNWVjtZQUNBUztZQUNBRjtRQUNKO1FBQ0FELE1BQU1LLElBQUksQ0FBQ0Q7UUFDWCxJQUFJLENBQUNFLG9CQUFvQjtRQUN6QixPQUFPSCxTQUFTSSxPQUFPO0lBQzNCO0lBQ0EsTUFBTUQsdUJBQXVCO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUNkLElBQUksRUFBRTtZQUNaO1FBQ0o7UUFDQSxNQUFNZ0IsVUFBVSxFQUFFO1FBQ2xCLElBQUksSUFBSSxDQUFDbEIsVUFBVSxDQUFDbUIsTUFBTSxHQUFHLEdBQUc7WUFDNUIscUNBQXFDO1lBQ3JDRCxRQUFRSCxJQUFJLENBQUMsSUFBSSxDQUFDZixVQUFVLENBQUNvQixLQUFLO1FBQ3RDLE9BQ0ssSUFBSSxJQUFJLENBQUNuQixTQUFTLENBQUNrQixNQUFNLEdBQUcsR0FBRztZQUNoQywyREFBMkQ7WUFDM0RELFFBQVFILElBQUksSUFBSSxJQUFJLENBQUNkLFNBQVMsQ0FBQ29CLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQ3BCLFNBQVMsQ0FBQ2tCLE1BQU07UUFDbEUsT0FDSztZQUNEO1FBQ0o7UUFDQSxJQUFJLENBQUNqQixJQUFJLEdBQUc7UUFDWixNQUFNb0IsUUFBUUMsR0FBRyxDQUFDTCxRQUFRTSxHQUFHLENBQUMsT0FBTyxFQUFFcEIsTUFBTSxFQUFFUyxRQUFRLEVBQUVGLGlCQUFpQixFQUFFO1lBQ3hFLElBQUk7Z0JBQ0EsdUZBQXVGO2dCQUN2RixNQUFNYyxTQUFTLE1BQU1ILFFBQVFJLE9BQU8sR0FBR0MsSUFBSSxDQUFDLElBQU12QixPQUFPTztnQkFDekRFLFNBQVNhLE9BQU8sQ0FBQ0Q7WUFDckIsRUFDQSxPQUFPRyxLQUFLO2dCQUNSLElBQUlqQyw2RUFBb0JBLENBQUNpQyxNQUFNO29CQUMzQixzRUFBc0U7b0JBQ3RFZixTQUFTYSxPQUFPLENBQUNHO2dCQUNyQixPQUNLO29CQUNEaEIsU0FBU2lCLE1BQU0sQ0FBQ0Y7Z0JBQ3BCO1lBQ0o7UUFDSjtRQUNBLElBQUksQ0FBQzFCLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ2Msb0JBQW9CO0lBQzdCO0lBQ0FYLGNBQWM7UUFDVixJQUFJLENBQUNOLG1CQUFtQixDQUFDZ0MsTUFBTTtJQUNuQztBQUNKLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2lyby1uZXR3b3JrLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL3dvcmtzcGFjZS1sb2NrLmpzPzdlNjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjMgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgQ2FuY2VsbGF0aW9uVG9rZW4sIENhbmNlbGxhdGlvblRva2VuU291cmNlIH0gZnJvbSAnLi4vdXRpbHMvY2FuY2VsbGF0aW9uLmpzJztcbmltcG9ydCB7IERlZmVycmVkLCBpc09wZXJhdGlvbkNhbmNlbGxlZCwgc3RhcnRDYW5jZWxhYmxlT3BlcmF0aW9uIH0gZnJvbSAnLi4vdXRpbHMvcHJvbWlzZS11dGlscy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdFdvcmtzcGFjZUxvY2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByZXZpb3VzVG9rZW5Tb3VyY2UgPSBuZXcgQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UoKTtcbiAgICAgICAgdGhpcy53cml0ZVF1ZXVlID0gW107XG4gICAgICAgIHRoaXMucmVhZFF1ZXVlID0gW107XG4gICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgfVxuICAgIHdyaXRlKGFjdGlvbikge1xuICAgICAgICB0aGlzLmNhbmNlbFdyaXRlKCk7XG4gICAgICAgIGNvbnN0IHRva2VuU291cmNlID0gc3RhcnRDYW5jZWxhYmxlT3BlcmF0aW9uKCk7XG4gICAgICAgIHRoaXMucHJldmlvdXNUb2tlblNvdXJjZSA9IHRva2VuU291cmNlO1xuICAgICAgICByZXR1cm4gdGhpcy5lbnF1ZXVlKHRoaXMud3JpdGVRdWV1ZSwgYWN0aW9uLCB0b2tlblNvdXJjZS50b2tlbik7XG4gICAgfVxuICAgIHJlYWQoYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVucXVldWUodGhpcy5yZWFkUXVldWUsIGFjdGlvbik7XG4gICAgfVxuICAgIGVucXVldWUocXVldWUsIGFjdGlvbiwgY2FuY2VsbGF0aW9uVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lKSB7XG4gICAgICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgZGVmZXJyZWQsXG4gICAgICAgICAgICBjYW5jZWxsYXRpb25Ub2tlblxuICAgICAgICB9O1xuICAgICAgICBxdWV1ZS5wdXNoKGVudHJ5KTtcbiAgICAgICAgdGhpcy5wZXJmb3JtTmV4dE9wZXJhdGlvbigpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgYXN5bmMgcGVyZm9ybU5leHRPcGVyYXRpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xuICAgICAgICBpZiAodGhpcy53cml0ZVF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIEp1c3QgcGVyZm9ybSB0aGUgbmV4dCB3cml0ZSBhY3Rpb25cbiAgICAgICAgICAgIGVudHJpZXMucHVzaCh0aGlzLndyaXRlUXVldWUuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5yZWFkUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gRW1wdHkgdGhlIHJlYWQgcXVldWUgYW5kIHBlcmZvcm0gYWxsIGFjdGlvbnMgaW4gcGFyYWxsZWxcbiAgICAgICAgICAgIGVudHJpZXMucHVzaCguLi50aGlzLnJlYWRRdWV1ZS5zcGxpY2UoMCwgdGhpcy5yZWFkUXVldWUubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGVudHJpZXMubWFwKGFzeW5jICh7IGFjdGlvbiwgZGVmZXJyZWQsIGNhbmNlbGxhdGlvblRva2VuIH0pID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0aGUgZXhlY3V0aW9uIG9mIHRoZSBhY3Rpb24gdG8gdGhlIG5leHQgZXZlbnQgbG9vcCB0aWNrIHZpYSBgUHJvbWlzZS5yZXNvbHZlKClgXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBhY3Rpb24oY2FuY2VsbGF0aW9uVG9rZW4pKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT3BlcmF0aW9uQ2FuY2VsbGVkKGVycikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9wZXJhdGlvbiB3YXMgY2FuY2VsbGVkLCB3ZSBkb24ndCB3YW50IHRvIHJlamVjdCB0aGUgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wZXJmb3JtTmV4dE9wZXJhdGlvbigpO1xuICAgIH1cbiAgICBjYW5jZWxXcml0ZSgpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c1Rva2VuU291cmNlLmNhbmNlbCgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmtzcGFjZS1sb2NrLmpzLm1hcCJdLCJuYW1lcyI6WyJDYW5jZWxsYXRpb25Ub2tlbiIsIkNhbmNlbGxhdGlvblRva2VuU291cmNlIiwiRGVmZXJyZWQiLCJpc09wZXJhdGlvbkNhbmNlbGxlZCIsInN0YXJ0Q2FuY2VsYWJsZU9wZXJhdGlvbiIsIkRlZmF1bHRXb3Jrc3BhY2VMb2NrIiwiY29uc3RydWN0b3IiLCJwcmV2aW91c1Rva2VuU291cmNlIiwid3JpdGVRdWV1ZSIsInJlYWRRdWV1ZSIsImRvbmUiLCJ3cml0ZSIsImFjdGlvbiIsImNhbmNlbFdyaXRlIiwidG9rZW5Tb3VyY2UiLCJlbnF1ZXVlIiwidG9rZW4iLCJyZWFkIiwicXVldWUiLCJjYW5jZWxsYXRpb25Ub2tlbiIsIk5vbmUiLCJkZWZlcnJlZCIsImVudHJ5IiwicHVzaCIsInBlcmZvcm1OZXh0T3BlcmF0aW9uIiwicHJvbWlzZSIsImVudHJpZXMiLCJsZW5ndGgiLCJzaGlmdCIsInNwbGljZSIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJyZXN1bHQiLCJyZXNvbHZlIiwidGhlbiIsImVyciIsInVuZGVmaW5lZCIsInJlamVjdCIsImNhbmNlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/workspace-lock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/langium/lib/workspace/workspace-manager.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langium/lib/workspace/workspace-manager.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultWorkspaceManager: () => (/* binding */ DefaultWorkspaceManager)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/./node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/./node_modules/vscode-uri/lib/esm/index.mjs\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/./node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/ \n\n\nclass DefaultWorkspaceManager {\n    constructor(services){\n        this.initialBuildOptions = {};\n        this._ready = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.serviceRegistry = services.ServiceRegistry;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.documentBuilder = services.workspace.DocumentBuilder;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n        this.mutex = services.workspace.WorkspaceLock;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    get workspaceFolders() {\n        return this.folders;\n    }\n    initialize(params) {\n        var _a;\n        this.folders = (_a = params.workspaceFolders) !== null && _a !== void 0 ? _a : undefined;\n    }\n    initialized(_params) {\n        // Initialize the workspace even if there are no workspace folders\n        // We still want to load additional documents (language library or similar) during initialization\n        return this.mutex.write((token)=>{\n            var _a;\n            return this.initializeWorkspace((_a = this.folders) !== null && _a !== void 0 ? _a : [], token);\n        });\n    }\n    async initializeWorkspace(folders, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.None) {\n        const documents = await this.performStartup(folders);\n        // Only after creating all documents do we check whether we need to cancel the initialization\n        // The document builder will later pick up on all unprocessed documents\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.interruptAndCheck)(cancelToken);\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\n    }\n    /**\n     * Performs the uninterruptable startup sequence of the workspace manager.\n     * This methods loads all documents in the workspace and other documents and returns them.\n     */ async performStartup(folders) {\n        const fileExtensions = this.serviceRegistry.all.flatMap((e)=>e.LanguageMetaData.fileExtensions);\n        const documents = [];\n        const collector = (document)=>{\n            documents.push(document);\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\n                this.langiumDocuments.addDocument(document);\n            }\n        };\n        // Even though we don't await the initialization of the workspace manager,\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\n        await this.loadAdditionalDocuments(folders, collector);\n        await Promise.all(folders.map((wf)=>[\n                wf,\n                this.getRootFolder(wf)\n            ]).map(async (entry)=>this.traverseFolder(...entry, fileExtensions, collector)));\n        this._ready.resolve();\n        return documents;\n    }\n    /**\n     * Load all additional documents that shall be visible in the context of the given workspace\n     * folders and add them to the collector. This can be used to include built-in libraries of\n     * your language, which can be either loaded from provided files or constructed in memory.\n     */ loadAdditionalDocuments(_folders, _collector) {\n        return Promise.resolve();\n    }\n    /**\n     * Determine the root folder of the source documents in the given workspace folder.\n     * The default implementation returns the URI of the workspace folder, but you can override\n     * this to return a subfolder like `src` instead.\n     */ getRootFolder(workspaceFolder) {\n        return _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(workspaceFolder.uri);\n    }\n    /**\n     * Traverse the file system folder identified by the given URI and its subfolders. All\n     * contained files that match the file extensions are added to the collector.\n     */ async traverseFolder(workspaceFolder, folderPath, fileExtensions, collector) {\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\n        await Promise.all(content.map(async (entry)=>{\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\n                if (entry.isDirectory) {\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\n                } else if (entry.isFile) {\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\n                    collector(document);\n                }\n            }\n        }));\n    }\n    /**\n     * Determine whether the given folder entry shall be included while indexing the workspace.\n     */ includeEntry(_workspaceFolder, entry, fileExtensions) {\n        const name = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.basename(entry.uri);\n        if (name.startsWith(\".\")) {\n            return false;\n        }\n        if (entry.isDirectory) {\n            return name !== \"node_modules\" && name !== \"out\";\n        } else if (entry.isFile) {\n            const extname = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.extname(entry.uri);\n            return fileExtensions.includes(extname);\n        }\n        return false;\n    }\n} //# sourceMappingURL=workspace-manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/langium/lib/workspace/workspace-manager.js\n");

/***/ })

};
;